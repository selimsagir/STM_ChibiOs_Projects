
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f002 f805 	bl	80021e0 <__early_init>
 80001d6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001da:	491c      	ldr	r1, [pc, #112]	; (800024c <endfiniloop+0xa>)
 80001dc:	4a1c      	ldr	r2, [pc, #112]	; (8000250 <endfiniloop+0xe>)

080001de <msloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <msloop>
 80001e8:	491a      	ldr	r1, [pc, #104]	; (8000254 <endfiniloop+0x12>)
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <endfiniloop+0x6>)

080001ec <psloop>:
 80001ec:	4291      	cmp	r1, r2
 80001ee:	bf3c      	itt	cc
 80001f0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f4:	e7fa      	bcc.n	80001ec <psloop>
 80001f6:	4918      	ldr	r1, [pc, #96]	; (8000258 <endfiniloop+0x16>)
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x1a>)
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <endfiniloop+0x1e>)

080001fc <dloop>:
 80001fc:	429a      	cmp	r2, r3
 80001fe:	bf3e      	ittt	cc
 8000200:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000204:	f842 0b04 	strcc.w	r0, [r2], #4
 8000208:	e7f8      	bcc.n	80001fc <dloop>
 800020a:	2000      	movs	r0, #0
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <endfiniloop+0x22>)
 800020e:	4a16      	ldr	r2, [pc, #88]	; (8000268 <endfiniloop+0x26>)

08000210 <bloop>:
 8000210:	4291      	cmp	r1, r2
 8000212:	bf3c      	itt	cc
 8000214:	f841 0b04 	strcc.w	r0, [r1], #4
 8000218:	e7fa      	bcc.n	8000210 <bloop>
 800021a:	f000 f851 	bl	80002c0 <__late_init>
 800021e:	4c13      	ldr	r4, [pc, #76]	; (800026c <endfiniloop+0x2a>)
 8000220:	4d13      	ldr	r5, [pc, #76]	; (8000270 <endfiniloop+0x2e>)

08000222 <initloop>:
 8000222:	42ac      	cmp	r4, r5
 8000224:	da03      	bge.n	800022e <endinitloop>
 8000226:	f854 1b04 	ldr.w	r1, [r4], #4
 800022a:	4788      	blx	r1
 800022c:	e7f9      	b.n	8000222 <initloop>

0800022e <endinitloop>:
 800022e:	f002 f81f 	bl	8002270 <main>
 8000232:	4c10      	ldr	r4, [pc, #64]	; (8000274 <endfiniloop+0x32>)
 8000234:	4d10      	ldr	r5, [pc, #64]	; (8000278 <endfiniloop+0x36>)

08000236 <finiloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endfiniloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <finiloop>

08000242 <endfiniloop>:
 8000242:	f000 b845 	b.w	80002d0 <__default_exit>
 8000246:	0000      	.short	0x0000
 8000248:	20000800 	.word	0x20000800
 800024c:	20000000 	.word	0x20000000
 8000250:	20000400 	.word	0x20000400
 8000254:	20000400 	.word	0x20000400
 8000258:	08002768 	.word	0x08002768
 800025c:	20000800 	.word	0x20000800
 8000260:	20000800 	.word	0x20000800
 8000264:	20000800 	.word	0x20000800
 8000268:	200011a0 	.word	0x200011a0
 800026c:	080001c0 	.word	0x080001c0
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	00000000 	.word	0x00000000

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	f000 f916 	bl	80004c0 <_dbg_check_unlock>
 8000294:	f000 fdf4 	bl	8000e80 <_stats_stop_measure_crit_thd>
 8000298:	2300      	movs	r3, #0
 800029a:	f383 8811 	msr	BASEPRI, r3
 800029e:	4628      	mov	r0, r5
 80002a0:	47a0      	blx	r4
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fccc 	bl	8000c40 <chThdExit>

080002a8 <_port_switch_from_isr>:
 80002a8:	f000 fde2 	bl	8000e70 <_stats_start_measure_crit_thd>
 80002ac:	f000 f8f8 	bl	80004a0 <_dbg_check_lock>
 80002b0:	f000 fbc6 	bl	8000a40 <chSchDoReschedule>
 80002b4:	f000 f904 	bl	80004c0 <_dbg_check_unlock>
 80002b8:	f000 fde2 	bl	8000e80 <_stats_stop_measure_crit_thd>

080002bc <_port_exit_from_isr>:
 80002bc:	df00      	svc	0
 80002be:	e7fe      	b.n	80002be <_port_exit_from_isr+0x2>

080002c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
	...

080002d0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80002d0:	e7fe      	b.n	80002d0 <__default_exit>
 80002d2:	bf00      	nop
	...

080002e0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80002e0:	e7fe      	b.n	80002e0 <_unhandled_exception>
 80002e2:	bf00      	nop
	...

080002f0 <_idle_thread>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <_idle_thread+0xc>)
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <_idle_thread+0x10>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	619a      	str	r2, [r3, #24]
 80002f8:	e7fe      	b.n	80002f8 <_idle_thread+0x8>
 80002fa:	bf00      	nop
 80002fc:	20000800 	.word	0x20000800
 8000300:	08002320 	.word	0x08002320
	...

08000310 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <chSysInit+0x90>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000312:	4a24      	ldr	r2, [pc, #144]	; (80003a4 <chSysInit+0x94>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000314:	4824      	ldr	r0, [pc, #144]	; (80003a8 <chSysInit+0x98>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000316:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000318:	2400      	movs	r4, #0
 800031a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800031e:	4e23      	ldr	r6, [pc, #140]	; (80003ac <chSysInit+0x9c>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000320:	4d23      	ldr	r5, [pc, #140]	; (80003b0 <chSysInit+0xa0>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000322:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000326:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000328:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	68f2      	ldr	r2, [r6, #12]
 800032e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000332:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000334:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000336:	2120      	movs	r1, #32
 8000338:	f042 0201 	orr.w	r2, r2, #1
 800033c:	2610      	movs	r6, #16
 800033e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000340:	b083      	sub	sp, #12
 8000342:	77de      	strb	r6, [r3, #31]
 8000344:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000348:	f000 fa2a 	bl	80007a0 <_scheduler_init>
  _vt_init();
 800034c:	f000 f978 	bl	8000640 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000350:	f000 fd0e 	bl	8000d70 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000354:	f000 fdbc 	bl	8000ed0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000358:	f000 fe0a 	bl	8000f70 <_heap_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 800035c:	f000 fd48 	bl	8000df0 <_stats_init>
#endif
#if CH_DBG_ENABLE_TRACE == TRUE
  _dbg_trace_init();
 8000360:	f000 f946 	bl	80005f0 <_dbg_trace_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	4628      	mov	r0, r5
 8000368:	f000 fb72 	bl	8000a50 <_thread_init>
 800036c:	f5a5 6788 	sub.w	r7, r5, #1088	; 0x440

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <chSysInit+0xa4>)
 8000372:	61c3      	str	r3, [r0, #28]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000374:	2601      	movs	r6, #1
 8000376:	f880 6020 	strb.w	r6, [r0, #32]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800037a:	61b8      	str	r0, [r7, #24]
 *
 * @special
 */
static inline void chSysEnable(void) {

  _dbg_check_enable();
 800037c:	f000 f880 	bl	8000480 <_dbg_check_enable>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000380:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000384:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <chSysInit+0xa8>)
 800038a:	619a      	str	r2, [r3, #24]

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  (void) chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa),
 800038c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8000390:	4632      	mov	r2, r6
 8000392:	9400      	str	r4, [sp, #0]
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <chSysInit+0xac>)
 8000396:	21f8      	movs	r1, #248	; 0xf8
 8000398:	f000 fbb2 	bl	8000b00 <chThdCreateStatic>
                           IDLEPRIO, (tfunc_t)_idle_thread, NULL);
#endif
}
 800039c:	b003      	add	sp, #12
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	05fa0300 	.word	0x05fa0300
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	e000edf0 	.word	0xe000edf0
 80003b0:	20000c40 	.word	0x20000c40
 80003b4:	20000400 	.word	0x20000400
 80003b8:	08002440 	.word	0x08002440
 80003bc:	080002f1 	.word	0x080002f1

080003c0 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80003c2:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <chSysHalt+0x8>)
 80003c4:	62d8      	str	r0, [r3, #44]	; 0x2c
 80003c6:	e7fe      	b.n	80003c6 <chSysHalt+0x6>
 80003c8:	20000800 	.word	0x20000800
 80003cc:	00000000 	.word	0x00000000

080003d0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80003d4:	4d27      	ldr	r5, [pc, #156]	; (8000474 <chSysTimerHandlerI+0xa4>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003d6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000

  chDbgCheckClassI();
 80003da:	f000 f8e9 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80003de:	f000 f8e7 	bl	80005b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80003e2:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80003e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003e6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80003e8:	68a1      	ldr	r1, [r4, #8]
 80003ea:	1ad0      	subs	r0, r2, r3
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f105 0a1c 	add.w	sl, r5, #28
 80003f2:	d322      	bcc.n	800043a <chSysTimerHandlerI+0x6a>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80003f4:	2700      	movs	r7, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003f6:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80003fa:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80003fc:	f8d4 900c 	ldr.w	r9, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000400:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000402:	4552      	cmp	r2, sl
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000404:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000406:	f8c2 a004 	str.w	sl, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800040a:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800040c:	60e7      	str	r7, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800040e:	d02e      	beq.n	800046e <chSysTimerHandlerI+0x9e>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000410:	f000 f886 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000414:	f000 fd44 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8000418:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800041c:	6920      	ldr	r0, [r4, #16]
 800041e:	47c8      	blx	r9
 8000420:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8000424:	f000 fd34 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000428:	f000 f862 	bl	80004f0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 800042c:	69ec      	ldr	r4, [r5, #28]
 800042e:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000430:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000432:	68a1      	ldr	r1, [r4, #8]
 8000434:	1ad0      	subs	r0, r2, r3
 8000436:	4281      	cmp	r1, r0
 8000438:	d9df      	bls.n	80003fa <chSysTimerHandlerI+0x2a>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800043a:	4554      	cmp	r4, sl
 800043c:	d015      	beq.n	800046a <chSysTimerHandlerI+0x9a>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800043e:	440b      	add	r3, r1
 8000440:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000442:	2b01      	cmp	r3, #1
 8000444:	bf98      	it	ls
 8000446:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 8000448:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800044a:	4620      	mov	r0, r4
 800044c:	f000 fe10 	bl	8001070 <stSetAlarm>
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8000454:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <chSysTimerHandlerI+0xa4>)
 800045a:	1a63      	subs	r3, r4, r1
 800045c:	1a52      	subs	r2, r2, r1
 800045e:	429a      	cmp	r2, r3
 8000460:	d903      	bls.n	800046a <chSysTimerHandlerI+0x9a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000462:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <chSysTimerHandlerI+0xa8>)
 8000466:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000468:	e7fe      	b.n	8000468 <chSysTimerHandlerI+0x98>
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800046e:	f000 fdf7 	bl	8001060 <stStopAlarm>
 8000472:	e7cd      	b.n	8000410 <chSysTimerHandlerI+0x40>
 8000474:	20000800 	.word	0x20000800
 8000478:	08002310 	.word	0x08002310
 800047c:	00000000 	.word	0x00000000

08000480 <_dbg_check_enable>:
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <_dbg_check_enable+0x14>)
 8000482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000484:	b90a      	cbnz	r2, 800048a <_dbg_check_enable+0xa>
 8000486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000488:	b113      	cbz	r3, 8000490 <_dbg_check_enable+0x10>
    chSysHalt("SV#3");
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <_dbg_check_enable+0x18>)
 800048c:	f7ff bf98 	b.w	80003c0 <chSysHalt>
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000800 	.word	0x20000800
 8000498:	08002340 	.word	0x08002340
 800049c:	00000000 	.word	0x00000000

080004a0 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 80004a0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80004a2:	4c05      	ldr	r4, [pc, #20]	; (80004b8 <_dbg_check_lock+0x18>)
 80004a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004a6:	b90b      	cbnz	r3, 80004ac <_dbg_check_lock+0xc>
 80004a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004aa:	b113      	cbz	r3, 80004b2 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <_dbg_check_lock+0x1c>)
 80004ae:	f7ff ff87 	bl	80003c0 <chSysHalt>
  }
  _dbg_enter_lock();
 80004b2:	2301      	movs	r3, #1
 80004b4:	6363      	str	r3, [r4, #52]	; 0x34
 80004b6:	bd10      	pop	{r4, pc}
 80004b8:	20000800 	.word	0x20000800
 80004bc:	08002348 	.word	0x08002348

080004c0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 80004c0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80004c2:	4c07      	ldr	r4, [pc, #28]	; (80004e0 <_dbg_check_unlock+0x20>)
 80004c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004c6:	b92b      	cbnz	r3, 80004d4 <_dbg_check_unlock+0x14>
 80004c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dd02      	ble.n	80004d4 <_dbg_check_unlock+0x14>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 80004ce:	2300      	movs	r3, #0
 80004d0:	6363      	str	r3, [r4, #52]	; 0x34
 80004d2:	bd10      	pop	{r4, pc}
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#5");
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <_dbg_check_unlock+0x24>)
 80004d6:	f7ff ff73 	bl	80003c0 <chSysHalt>
  }
  _dbg_leave_lock();
 80004da:	2300      	movs	r3, #0
 80004dc:	6363      	str	r3, [r4, #52]	; 0x34
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	20000800 	.word	0x20000800
 80004e4:	08002350 	.word	0x08002350
	...

080004f0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 80004f0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80004f2:	4c06      	ldr	r4, [pc, #24]	; (800050c <_dbg_check_lock_from_isr+0x1c>)
 80004f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd01      	ble.n	80004fe <_dbg_check_lock_from_isr+0xe>
 80004fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004fc:	b113      	cbz	r3, 8000504 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <_dbg_check_lock_from_isr+0x20>)
 8000500:	f7ff ff5e 	bl	80003c0 <chSysHalt>
  }
  _dbg_enter_lock();
 8000504:	2301      	movs	r3, #1
 8000506:	6363      	str	r3, [r4, #52]	; 0x34
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	20000800 	.word	0x20000800
 8000510:	08002358 	.word	0x08002358
	...

08000520 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8000520:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000522:	4c08      	ldr	r4, [pc, #32]	; (8000544 <_dbg_check_unlock_from_isr+0x24>)
 8000524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000526:	2b00      	cmp	r3, #0
 8000528:	dd05      	ble.n	8000536 <_dbg_check_unlock_from_isr+0x16>
 800052a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd02      	ble.n	8000536 <_dbg_check_unlock_from_isr+0x16>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8000530:	2300      	movs	r3, #0
 8000532:	6363      	str	r3, [r4, #52]	; 0x34
 8000534:	bd10      	pop	{r4, pc}
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#7");
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <_dbg_check_unlock_from_isr+0x28>)
 8000538:	f7ff ff42 	bl	80003c0 <chSysHalt>
  }
  _dbg_leave_lock();
 800053c:	2300      	movs	r3, #0
 800053e:	6363      	str	r3, [r4, #52]	; 0x34
 8000540:	bd10      	pop	{r4, pc}
 8000542:	bf00      	nop
 8000544:	20000800 	.word	0x20000800
 8000548:	08002360 	.word	0x08002360
 800054c:	00000000 	.word	0x00000000

08000550 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8000550:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000552:	2320      	movs	r3, #32
 8000554:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000558:	4c07      	ldr	r4, [pc, #28]	; (8000578 <_dbg_check_enter_isr+0x28>)
 800055a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800055c:	2b00      	cmp	r3, #0
 800055e:	db01      	blt.n	8000564 <_dbg_check_enter_isr+0x14>
 8000560:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000562:	b11a      	cbz	r2, 800056c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <_dbg_check_enter_isr+0x2c>)
 8000566:	f7ff ff2b 	bl	80003c0 <chSysHalt>
 800056a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  ch.dbg.isr_cnt++;
 800056c:	3301      	adds	r3, #1
 800056e:	6323      	str	r3, [r4, #48]	; 0x30
 8000570:	2300      	movs	r3, #0
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	bd10      	pop	{r4, pc}
 8000578:	20000800 	.word	0x20000800
 800057c:	08002368 	.word	0x08002368

08000580 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8000580:	b510      	push	{r4, lr}
 8000582:	2320      	movs	r3, #32
 8000584:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000588:	4c07      	ldr	r4, [pc, #28]	; (80005a8 <_dbg_check_leave_isr+0x28>)
 800058a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd01      	ble.n	8000594 <_dbg_check_leave_isr+0x14>
 8000590:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000592:	b11a      	cbz	r2, 800059c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <_dbg_check_leave_isr+0x2c>)
 8000596:	f7ff ff13 	bl	80003c0 <chSysHalt>
 800059a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  ch.dbg.isr_cnt--;
 800059c:	3b01      	subs	r3, #1
 800059e:	6323      	str	r3, [r4, #48]	; 0x30
 80005a0:	2300      	movs	r3, #0
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	bd10      	pop	{r4, pc}
 80005a8:	20000800 	.word	0x20000800
 80005ac:	08002370 	.word	0x08002370

080005b0 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <chDbgCheckClassI+0x18>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	db03      	blt.n	80005c0 <chDbgCheckClassI+0x10>
 80005b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	dd00      	ble.n	80005c0 <chDbgCheckClassI+0x10>
 80005be:	4770      	bx	lr
    chSysHalt("SV#10");
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <chDbgCheckClassI+0x1c>)
 80005c2:	f7ff befd 	b.w	80003c0 <chSysHalt>
 80005c6:	bf00      	nop
 80005c8:	20000800 	.word	0x20000800
 80005cc:	08002378 	.word	0x08002378

080005d0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <chDbgCheckClassS+0x14>)
 80005d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d4:	b91a      	cbnz	r2, 80005de <chDbgCheckClassS+0xe>
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dd00      	ble.n	80005de <chDbgCheckClassS+0xe>
 80005dc:	4770      	bx	lr
    chSysHalt("SV#11");
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <chDbgCheckClassS+0x18>)
 80005e0:	f7ff beee 	b.w	80003c0 <chSysHalt>
 80005e4:	20000800 	.word	0x20000800
 80005e8:	08002380 	.word	0x08002380
 80005ec:	00000000 	.word	0x00000000

080005f0 <_dbg_trace_init>:
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <_dbg_trace_init+0xc>)
 80005f2:	2140      	movs	r1, #64	; 0x40
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80005f4:	185a      	adds	r2, r3, r1
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80005f6:	6399      	str	r1, [r3, #56]	; 0x38
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80005f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fa:	4770      	bx	lr
 80005fc:	20000800 	.word	0x20000800

08000600 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <_dbg_trace+0x30>)
 8000602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000606:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8000608:	b410      	push	{r4}
 800060a:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800060c:	6991      	ldr	r1, [r2, #24]
 800060e:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8000610:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8000612:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000614:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8000616:	f890 1020 	ldrb.w	r1, [r0, #32]
 800061a:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800061c:	3310      	adds	r3, #16
 800061e:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 8000622:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8000624:	bf28      	it	cs
 8000626:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 800062a:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800062c:	bc10      	pop	{r4}
 800062e:	4770      	bx	lr
 8000630:	20000800 	.word	0x20000800
	...

08000640 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000646:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800064a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800064c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800064e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000650:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000652:	621a      	str	r2, [r3, #32]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000800 	.word	0x20000800
 800065c:	00000000 	.word	0x00000000

08000660 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000664:	4605      	mov	r5, r0
 8000666:	460e      	mov	r6, r1
 8000668:	4614      	mov	r4, r2
 800066a:	4698      	mov	r8, r3
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 800066c:	f7ff ffa0 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8000670:	2d00      	cmp	r5, #0
 8000672:	d02d      	beq.n	80006d0 <chVTDoSetI+0x70>
 8000674:	b364      	cbz	r4, 80006d0 <chVTDoSetI+0x70>
 8000676:	b35e      	cbz	r6, 80006d0 <chVTDoSetI+0x70>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000678:	4f1e      	ldr	r7, [pc, #120]	; (80006f4 <chVTDoSetI+0x94>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800067a:	f8c5 8010 	str.w	r8, [r5, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800067e:	463b      	mov	r3, r7
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000680:	2e01      	cmp	r6, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000682:	f853 1f1c 	ldr.w	r1, [r3, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000686:	60ec      	str	r4, [r5, #12]
 8000688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800068c:	bf98      	it	ls
 800068e:	2602      	movls	r6, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000690:	4299      	cmp	r1, r3
 8000692:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000694:	d023      	beq.n	80006de <chVTDoSetI+0x7e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000696:	6abc      	ldr	r4, [r7, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000698:	688b      	ldr	r3, [r1, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800069a:	4430      	add	r0, r6
 800069c:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800069e:	429c      	cmp	r4, r3
 80006a0:	d31a      	bcc.n	80006d8 <chVTDoSetI+0x78>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 80006a2:	69fb      	ldr	r3, [r7, #28]
  while (p->vt_delta < delta) {
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	4294      	cmp	r4, r2
 80006a8:	d904      	bls.n	80006b4 <chVTDoSetI+0x54>
    delta -= p->vt_delta;
    p = p->vt_next;
 80006aa:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80006ac:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	42a2      	cmp	r2, r4
 80006b2:	d3fa      	bcc.n	80006aa <chVTDoSetI+0x4a>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80006b8:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80006ba:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 80006bc:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 80006be:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80006c0:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80006c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80006c6:	1b14      	subs	r4, r2, r4
 80006c8:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80006ca:	6279      	str	r1, [r7, #36]	; 0x24
 80006cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <chVTDoSetI+0x98>)
 80006d2:	f7ff fe75 	bl	80003c0 <chSysHalt>
 80006d6:	e7cf      	b.n	8000678 <chVTDoSetI+0x18>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80006d8:	f000 fcca 	bl	8001070 <stSetAlarm>
 80006dc:	e7e1      	b.n	80006a2 <chVTDoSetI+0x42>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80006de:	62b8      	str	r0, [r7, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80006e0:	61fd      	str	r5, [r7, #28]
      ch.vtlist.vt_prev = vtp;
 80006e2:	623d      	str	r5, [r7, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 80006e4:	4430      	add	r0, r6
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80006e6:	6029      	str	r1, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80006e8:	6069      	str	r1, [r5, #4]
      vtp->vt_delta = delay;
 80006ea:	60ae      	str	r6, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 80006ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006f0:	f000 bc9e 	b.w	8001030 <stStartAlarm>
 80006f4:	20000800 	.word	0x20000800
 80006f8:	08002390 	.word	0x08002390
 80006fc:	00000000 	.word	0x00000000

08000700 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000700:	b510      	push	{r4, lr}
 8000702:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8000704:	f7ff ff54 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8000708:	2c00      	cmp	r4, #0
 800070a:	d033      	beq.n	8000774 <chVTDoResetI+0x74>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 800070c:	68e3      	ldr	r3, [r4, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d034      	beq.n	800077c <chVTDoResetI+0x7c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <chVTDoResetI+0x8c>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4294      	cmp	r4, r2
 8000718:	d00f      	beq.n	800073a <chVTDoResetI+0x3a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800071a:	6861      	ldr	r1, [r4, #4]
 800071c:	6822      	ldr	r2, [r4, #0]
 800071e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000720:	6822      	ldr	r2, [r4, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000722:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000724:	2000      	movs	r0, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000726:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000728:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800072a:	60e0      	str	r0, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800072c:	d004      	beq.n	8000738 <chVTDoResetI+0x38>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	6891      	ldr	r1, [r2, #8]
 8000732:	440b      	add	r3, r1
 8000734:	6093      	str	r3, [r2, #8]
 8000736:	bd10      	pop	{r4, pc}
 8000738:	bd10      	pop	{r4, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800073a:	461a      	mov	r2, r3
 800073c:	6821      	ldr	r1, [r4, #0]
 800073e:	f842 1f1c 	str.w	r1, [r2, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000742:	2000      	movs	r0, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000744:	4291      	cmp	r1, r2
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000746:	604a      	str	r2, [r1, #4]
  vtp->vt_func = NULL;
 8000748:	60e0      	str	r0, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800074a:	d01b      	beq.n	8000784 <chVTDoResetI+0x84>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800074c:	68a2      	ldr	r2, [r4, #8]
 800074e:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000750:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000752:	1883      	adds	r3, r0, r2
 8000754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000758:	608b      	str	r3, [r1, #8]
 800075a:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800075c:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800075e:	4293      	cmp	r3, r2
 8000760:	d9ea      	bls.n	8000738 <chVTDoResetI+0x38>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000762:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000764:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000766:	bf98      	it	ls
 8000768:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800076a:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 bc7e 	b.w	8001070 <stSetAlarm>
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <chVTDoResetI+0x90>)
 8000776:	f7ff fe23 	bl	80003c0 <chSysHalt>
 800077a:	e7c7      	b.n	800070c <chVTDoResetI+0xc>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <chVTDoResetI+0x90>)
 800077e:	f7ff fe1f 	bl	80003c0 <chSysHalt>
 8000782:	e7c6      	b.n	8000712 <chVTDoResetI+0x12>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000788:	f000 bc6a 	b.w	8001060 <stStopAlarm>
 800078c:	20000800 	.word	0x20000800
 8000790:	080023a0 	.word	0x080023a0
	...

080007a0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80007a2:	2200      	movs	r2, #0
 80007a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80007a6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80007a8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80007aa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	4770      	bx	lr
 80007b0:	20000800 	.word	0x20000800
	...

080007c0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 80007c4:	f7ff fef4 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80007c8:	b1c4      	cbz	r4, 80007fc <chSchReadyI+0x3c>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80007ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 80007ce:	b18b      	cbz	r3, 80007f4 <chSchReadyI+0x34>
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d00f      	beq.n	80007f4 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007d4:	2200      	movs	r2, #0
 80007d6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <chSchReadyI+0x44>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007da:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80007de:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d2fb      	bcs.n	80007de <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80007ea:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80007ec:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80007ee:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80007f0:	605c      	str	r4, [r3, #4]

  return tp;
}
 80007f2:	bd10      	pop	{r4, pc}
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <chSchReadyI+0x48>)
 80007f6:	f7ff fde3 	bl	80003c0 <chSysHalt>
 80007fa:	e7eb      	b.n	80007d4 <chSchReadyI+0x14>
 */
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <chSchReadyI+0x48>)
 80007fe:	f7ff fddf 	bl	80003c0 <chSysHalt>
 8000802:	e7e2      	b.n	80007ca <chSchReadyI+0xa>
 8000804:	20000800 	.word	0x20000800
 8000808:	080023b0 	.word	0x080023b0
 800080c:	00000000 	.word	0x00000000

08000810 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4604      	mov	r4, r0
 8000814:	2320      	movs	r3, #32
 8000816:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800081a:	f000 fb39 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800081e:	f7ff fe67 	bl	80004f0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000822:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000826:	2b07      	cmp	r3, #7
 8000828:	d810      	bhi.n	800084c <wakeup+0x3c>
 800082a:	e8df f003 	tbb	[pc, r3]
 800082e:	0f15      	.short	0x0f15
 8000830:	040a1d0f 	.word	0x040a1d0f
 8000834:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000836:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000838:	f7ff feba 	bl	80005b0 <chDbgCheckClassI>

  sp->s_cnt++;
 800083c:	68ab      	ldr	r3, [r5, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000842:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000846:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000848:	6822      	ldr	r2, [r4, #0]
 800084a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000850:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff ffb4 	bl	80007c0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000858:	f7ff fe62 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800085c:	f000 fb20 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8000860:	2300      	movs	r3, #0
 8000862:	f383 8811 	msr	BASEPRI, r3
 8000866:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000872:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff ffa3 	bl	80007c0 <chSchReadyI>
 800087a:	e7ed      	b.n	8000858 <wakeup+0x48>
 800087c:	0000      	movs	r0, r0
	...

08000880 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000880:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000882:	4c12      	ldr	r4, [pc, #72]	; (80008cc <chSchGoSleepS+0x4c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000884:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8000886:	f7ff fea3 	bl	80005d0 <chDbgCheckClassS>

  otp = currp;
 800088a:	69a5      	ldr	r5, [r4, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800088c:	6823      	ldr	r3, [r4, #0]
  otp->p_state = newstate;
 800088e:	f885 6020 	strb.w	r6, [r5, #32]

  tqp->p_next = tp->p_next;
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	6022      	str	r2, [r4, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000896:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000898:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 800089a:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800089c:	f883 1020 	strb.w	r1, [r3, #32]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80008a0:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80008a2:	f7ff fead 	bl	8000600 <_dbg_trace>
 80008a6:	4629      	mov	r1, r5
 80008a8:	69a0      	ldr	r0, [r4, #24]
 80008aa:	f000 fac9 	bl	8000e40 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80008ae:	f3ef 8309 	mrs	r3, PSP
 80008b2:	69ea      	ldr	r2, [r5, #28]
 80008b4:	3b24      	subs	r3, #36	; 0x24
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d902      	bls.n	80008c0 <chSchGoSleepS+0x40>
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <chSchGoSleepS+0x50>)
 80008bc:	f7ff fd80 	bl	80003c0 <chSysHalt>
 80008c0:	4629      	mov	r1, r5
 80008c2:	69a0      	ldr	r0, [r4, #24]
}
 80008c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80008c8:	f7ff bcda 	b.w	8000280 <_port_switch>
 80008cc:	20000800 	.word	0x20000800
 80008d0:	080023c0 	.word	0x080023c0
	...

080008e0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	460c      	mov	r4, r1
 80008e4:	b086      	sub	sp, #24
 80008e6:	4606      	mov	r6, r0

  chDbgCheckClassS();
 80008e8:	f7ff fe72 	bl	80005d0 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80008ec:	1c63      	adds	r3, r4, #1
 80008ee:	d014      	beq.n	800091a <chSchGoSleepTimeoutS+0x3a>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80008f0:	4d0e      	ldr	r5, [pc, #56]	; (800092c <chSchGoSleepTimeoutS+0x4c>)
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <chSchGoSleepTimeoutS+0x50>)
 80008f4:	69ab      	ldr	r3, [r5, #24]
 80008f6:	4621      	mov	r1, r4
 80008f8:	a801      	add	r0, sp, #4
 80008fa:	f7ff feb1 	bl	8000660 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80008fe:	4630      	mov	r0, r6
 8000900:	f7ff ffbe 	bl	8000880 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000904:	f7ff fe54 	bl	80005b0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000908:	9b04      	ldr	r3, [sp, #16]
 800090a:	b113      	cbz	r3, 8000912 <chSchGoSleepTimeoutS+0x32>
      chVTDoResetI(&vt);
 800090c:	a801      	add	r0, sp, #4
 800090e:	f7ff fef7 	bl	8000700 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000912:	69ab      	ldr	r3, [r5, #24]
}
 8000914:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000916:	b006      	add	sp, #24
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	4d04      	ldr	r5, [pc, #16]	; (800092c <chSchGoSleepTimeoutS+0x4c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800091c:	4630      	mov	r0, r6
 800091e:	f7ff ffaf 	bl	8000880 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8000922:	69ab      	ldr	r3, [r5, #24]
}
 8000924:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000926:	b006      	add	sp, #24
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	bf00      	nop
 800092c:	20000800 	.word	0x20000800
 8000930:	08000811 	.word	0x08000811
	...

08000940 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000940:	b570      	push	{r4, r5, r6, lr}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000942:	4d19      	ldr	r5, [pc, #100]	; (80009a8 <chSchWakeupS+0x68>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000944:	4604      	mov	r4, r0
 8000946:	460e      	mov	r6, r1

  chDbgCheckClassS();
 8000948:	f7ff fe42 	bl	80005d0 <chDbgCheckClassS>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800094c:	69a8      	ldr	r0, [r5, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800094e:	6266      	str	r6, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000950:	6883      	ldr	r3, [r0, #8]
 8000952:	68a2      	ldr	r2, [r4, #8]
 8000954:	429a      	cmp	r2, r3
 8000956:	d918      	bls.n	800098a <chSchWakeupS+0x4a>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000958:	f7ff ff32 	bl	80007c0 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800095c:	2301      	movs	r3, #1
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 800095e:	4606      	mov	r6, r0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000960:	f884 3020 	strb.w	r3, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8000964:	61ac      	str	r4, [r5, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000966:	f7ff fe4b 	bl	8000600 <_dbg_trace>
 800096a:	4631      	mov	r1, r6
 800096c:	4620      	mov	r0, r4
 800096e:	f000 fa67 	bl	8000e40 <_stats_ctxswc>
 8000972:	f3ef 8309 	mrs	r3, PSP
 8000976:	69f2      	ldr	r2, [r6, #28]
 8000978:	3b24      	subs	r3, #36	; 0x24
 800097a:	429a      	cmp	r2, r3
 800097c:	d80a      	bhi.n	8000994 <chSchWakeupS+0x54>
 800097e:	4631      	mov	r1, r6
 8000980:	4620      	mov	r0, r4
  }
}
 8000982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000986:	f7ff bc7b 	b.w	8000280 <_port_switch>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 800098a:	4620      	mov	r0, r4
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800098c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 8000990:	f7ff bf16 	b.w	80007c0 <chSchReadyI>
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <chSchWakeupS+0x6c>)
 8000996:	f7ff fd13 	bl	80003c0 <chSysHalt>
 800099a:	4631      	mov	r1, r6
 800099c:	4620      	mov	r0, r4
  }
}
 800099e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80009a2:	f7ff bc6d 	b.w	8000280 <_port_switch>
 80009a6:	bf00      	nop
 80009a8:	20000800 	.word	0x20000800
 80009ac:	080023c0 	.word	0x080023c0

080009b0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <chSchIsPreemptionRequired+0x14>)
 80009b2:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 80009b4:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80009b6:	6890      	ldr	r0, [r2, #8]
 80009b8:	689b      	ldr	r3, [r3, #8]
#endif
}
 80009ba:	4298      	cmp	r0, r3
 80009bc:	bf94      	ite	ls
 80009be:	2000      	movls	r0, #0
 80009c0:	2001      	movhi	r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	20000800 	.word	0x20000800
	...

080009d0 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80009d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp, *cp;

  otp = currp;
 80009d2:	4d17      	ldr	r5, [pc, #92]	; (8000a30 <chSchDoRescheduleAhead+0x60>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80009d4:	682a      	ldr	r2, [r5, #0]
 80009d6:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80009dc:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009de:	605d      	str	r5, [r3, #4]

  otp->p_state = CH_STATE_READY;
 80009e0:	2000      	movs	r0, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80009e2:	f882 1020 	strb.w	r1, [r2, #32]
 80009e6:	68a1      	ldr	r1, [r4, #8]

  otp->p_state = CH_STATE_READY;
 80009e8:	f884 0020 	strb.w	r0, [r4, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80009ec:	61aa      	str	r2, [r5, #24]
 80009ee:	e000      	b.n	80009f2 <chSchDoRescheduleAhead+0x22>
 80009f0:	681b      	ldr	r3, [r3, #0]

  otp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	428a      	cmp	r2, r1
 80009f6:	d8fb      	bhi.n	80009f0 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80009fc:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80009fe:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8000a00:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000a02:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 8000a04:	f7ff fdfc 	bl	8000600 <_dbg_trace>
 8000a08:	4621      	mov	r1, r4
 8000a0a:	69a8      	ldr	r0, [r5, #24]
 8000a0c:	f000 fa18 	bl	8000e40 <_stats_ctxswc>
 8000a10:	f3ef 8309 	mrs	r3, PSP
 8000a14:	69e2      	ldr	r2, [r4, #28]
 8000a16:	3b24      	subs	r3, #36	; 0x24
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d902      	bls.n	8000a22 <chSchDoRescheduleAhead+0x52>
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <chSchDoRescheduleAhead+0x64>)
 8000a1e:	f7ff fccf 	bl	80003c0 <chSysHalt>
 8000a22:	4621      	mov	r1, r4
 8000a24:	69a8      	ldr	r0, [r5, #24]
}
 8000a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000a2a:	f7ff bc29 	b.w	8000280 <_port_switch>
 8000a2e:	bf00      	nop
 8000a30:	20000800 	.word	0x20000800
 8000a34:	080023c0 	.word	0x080023c0
	...

08000a40 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000a40:	f7ff bfc6 	b.w	80009d0 <chSchDoRescheduleAhead>
	...

08000a50 <_thread_init>:
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <_thread_init+0x58>)
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8000a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a54:	4604      	mov	r4, r0

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000a56:	2502      	movs	r5, #2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a58:	6950      	ldr	r0, [r2, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000a5a:	6421      	str	r1, [r4, #64]	; 0x40
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000a5c:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000a5e:	60a1      	str	r1, [r4, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000a60:	f04f 0e01 	mov.w	lr, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000a64:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000a68:	f884 5020 	strb.w	r5, [r4, #32]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000a6c:	f104 0728 	add.w	r7, r4, #40	; 0x28
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a70:	f104 0548 	add.w	r5, r4, #72	; 0x48
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000a74:	f104 0660 	add.w	r6, r4, #96	; 0x60
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a78:	6122      	str	r2, [r4, #16]
 8000a7a:	6160      	str	r0, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000a7c:	f884 e022 	strb.w	lr, [r4, #34]	; 0x22
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000a80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000a84:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000a86:	63a3      	str	r3, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000a88:	61a3      	str	r3, [r4, #24]
  REG_INSERT(tp);
 8000a8a:	6104      	str	r4, [r0, #16]
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a8c:	4628      	mov	r0, r5
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a8e:	62e1      	str	r1, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8000a90:	6321      	str	r1, [r4, #48]	; 0x30
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000a92:	62a7      	str	r7, [r4, #40]	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000a94:	61e6      	str	r6, [r4, #28]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a96:	6154      	str	r4, [r2, #20]
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a98:	f000 f92a 	bl	8000cf0 <chTMObjectInit>
  chTMStartMeasurementX(&tp->p_stats);
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f000 f937 	bl	8000d10 <chTMStartMeasurementX>
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000800 	.word	0x20000800
 8000aac:	00000000 	.word	0x00000000

08000ab0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460d      	mov	r5, r1
 8000ab8:	4616      	mov	r6, r2
 8000aba:	461f      	mov	r7, r3
 8000abc:	f8dd 8018 	ldr.w	r8, [sp, #24]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 8000ac0:	f7ff fd76 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8000ac4:	b10c      	cbz	r4, 8000aca <chThdCreateI+0x1a>
 8000ac6:	2de7      	cmp	r5, #231	; 0xe7
 8000ac8:	d811      	bhi.n	8000aee <chThdCreateI+0x3e>
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <chThdCreateI+0x48>)
 8000acc:	f7ff fc78 	bl	80003c0 <chSysHalt>
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ad0:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8000ad4:	18e2      	adds	r2, r4, r3
 8000ad6:	4d09      	ldr	r5, [pc, #36]	; (8000afc <chThdCreateI+0x4c>)
 8000ad8:	60e2      	str	r2, [r4, #12]

  return _thread_init(tp, prio);
 8000ada:	4631      	mov	r1, r6

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000adc:	50e7      	str	r7, [r4, r3]

  return _thread_init(tp, prio);
 8000ade:	4620      	mov	r0, r4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ae0:	f8c2 8004 	str.w	r8, [r2, #4]
 8000ae4:	6215      	str	r5, [r2, #32]

  return _thread_init(tp, prio);
}
 8000ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
 8000aea:	f7ff bfb1 	b.w	8000a50 <_thread_init>
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8000aee:	2e7f      	cmp	r6, #127	; 0x7f
 8000af0:	d8eb      	bhi.n	8000aca <chThdCreateI+0x1a>
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d1ec      	bne.n	8000ad0 <chThdCreateI+0x20>
 8000af6:	e7e8      	b.n	8000aca <chThdCreateI+0x1a>
 8000af8:	080023e0 	.word	0x080023e0
 8000afc:	08000291 	.word	0x08000291

08000b00 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b083      	sub	sp, #12
 8000b06:	4680      	mov	r8, r0
 8000b08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000b0a:	4689      	mov	r9, r1
 8000b0c:	4692      	mov	sl, r2
 8000b0e:	469b      	mov	fp, r3
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 8000b10:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8000b14:	4604      	mov	r4, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8000b16:	26ff      	movs	r6, #255	; 0xff
 8000b18:	f804 6b01 	strb.w	r6, [r4], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b1c:	42a5      	cmp	r5, r4
 8000b1e:	d1fb      	bne.n	8000b18 <chThdCreateStatic+0x18>
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 8000b20:	eb08 0409 	add.w	r4, r8, r9
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b24:	42a5      	cmp	r5, r4
    *startp++ = v;
 8000b26:	bf38      	it	cc
 8000b28:	2655      	movcc	r6, #85	; 0x55
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b2a:	d203      	bcs.n	8000b34 <chThdCreateStatic+0x34>
    *startp++ = v;
 8000b2c:	f805 6b01 	strb.w	r6, [r5], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b30:	42ac      	cmp	r4, r5
 8000b32:	d1fb      	bne.n	8000b2c <chThdCreateStatic+0x2c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b34:	2320      	movs	r3, #32
 8000b36:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000b3a:	f000 f999 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b3e:	f7ff fcaf 	bl	80004a0 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000b42:	465b      	mov	r3, fp
 8000b44:	4652      	mov	r2, sl
 8000b46:	4649      	mov	r1, r9
 8000b48:	9700      	str	r7, [sp, #0]
 8000b4a:	4640      	mov	r0, r8
 8000b4c:	f7ff ffb0 	bl	8000ab0 <chThdCreateI>
  chSchWakeupS(tp, MSG_OK);
 8000b50:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000b52:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8000b54:	f7ff fef4 	bl	8000940 <chSchWakeupS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000b58:	f7ff fcb2 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000b5c:	f000 f990 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <chThdCreateStatic+0x88>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d007      	beq.n	8000b78 <chThdCreateStatic+0x78>
 8000b68:	6999      	ldr	r1, [r3, #24]
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	688a      	ldr	r2, [r1, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d202      	bcs.n	8000b78 <chThdCreateStatic+0x78>
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <chThdCreateStatic+0x8c>)
 8000b74:	f7ff fc24 	bl	80003c0 <chSysHalt>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000b7e:	4620      	mov	r0, r4
 8000b80:	b003      	add	sp, #12
 8000b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b86:	bf00      	nop
 8000b88:	20000800 	.word	0x20000800
 8000b8c:	08002420 	.word	0x08002420

08000b90 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000b90:	b510      	push	{r4, lr}
 8000b92:	2320      	movs	r3, #32
 8000b94:	4604      	mov	r4, r0
 8000b96:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000b9a:	f000 f969 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b9e:	f7ff fc7f 	bl	80004a0 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8000ba2:	b914      	cbnz	r4, 8000baa <chThdSleep+0x1a>
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <chThdSleep+0x4c>)
 8000ba6:	f7ff fc0b 	bl	80003c0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000baa:	4621      	mov	r1, r4
 8000bac:	2008      	movs	r0, #8
 8000bae:	f7ff fe97 	bl	80008e0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000bb2:	f7ff fc85 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000bb6:	f000 f963 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <chThdSleep+0x50>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d007      	beq.n	8000bd2 <chThdSleep+0x42>
 8000bc2:	6999      	ldr	r1, [r3, #24]
 8000bc4:	6893      	ldr	r3, [r2, #8]
 8000bc6:	688a      	ldr	r2, [r1, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d202      	bcs.n	8000bd2 <chThdSleep+0x42>
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <chThdSleep+0x54>)
 8000bce:	f7ff fbf7 	bl	80003c0 <chSysHalt>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f383 8811 	msr	BASEPRI, r3
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	08002410 	.word	0x08002410
 8000be0:	20000800 	.word	0x20000800
 8000be4:	08002420 	.word	0x08002420
	...

08000bf0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <chThdExitS+0x44>)
 8000bf4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8000bf8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000bfa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bfe:	429d      	cmp	r5, r3
 8000c00:	d007      	beq.n	8000c12 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fdda 	bl	80007c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d1f7      	bne.n	8000c02 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000c12:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000c16:	079b      	lsls	r3, r3, #30
 8000c18:	d104      	bne.n	8000c24 <chThdExitS+0x34>
    REG_REMOVE(tp);
 8000c1a:	6963      	ldr	r3, [r4, #20]
 8000c1c:	6922      	ldr	r2, [r4, #16]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	6922      	ldr	r2, [r4, #16]
 8000c22:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000c24:	200f      	movs	r0, #15
 8000c26:	f7ff fe2b 	bl	8000880 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <chThdExitS+0x48>)
}
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8000c30:	f7ff bbc6 	b.w	80003c0 <chSysHalt>
 8000c34:	20000800 	.word	0x20000800
 8000c38:	080023d0 	.word	0x080023d0
 8000c3c:	00000000 	.word	0x00000000

08000c40 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8000c40:	b510      	push	{r4, lr}
 8000c42:	2320      	movs	r3, #32
 8000c44:	4604      	mov	r4, r0
 8000c46:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000c4a:	f000 f911 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c4e:	f7ff fc27 	bl	80004a0 <_dbg_check_lock>

  chSysLock();
  chThdExitS(msg);
 8000c52:	4620      	mov	r0, r4
  /* The thread never returns here.*/
}
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8000c58:	f7ff bfca 	b.w	8000bf0 <chThdExitS>
 8000c5c:	0000      	movs	r0, r0
	...

08000c60 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8000c60:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8000c62:	6803      	ldr	r3, [r0, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000c64:	4d07      	ldr	r5, [pc, #28]	; (8000c84 <chThdSuspendS+0x24>)
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8000c66:	4604      	mov	r4, r0
 8000c68:	69ae      	ldr	r6, [r5, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8000c6a:	b113      	cbz	r3, 8000c72 <chThdSuspendS+0x12>
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <chThdSuspendS+0x28>)
 8000c6e:	f7ff fba7 	bl	80003c0 <chSysHalt>

  *trp = tp;
 8000c72:	6026      	str	r6, [r4, #0]
  tp->p_u.wttrp = trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8000c74:	2003      	movs	r0, #3
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8000c76:	6274      	str	r4, [r6, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8000c78:	f7ff fe02 	bl	8000880 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 8000c7c:	69ab      	ldr	r3, [r5, #24]
}
 8000c7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
 8000c82:	bf00      	nop
 8000c84:	20000800 	.word	0x20000800
 8000c88:	08002400 	.word	0x08002400
 8000c8c:	00000000 	.word	0x00000000

08000c90 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8000c90:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8000c92:	6804      	ldr	r4, [r0, #0]
 8000c94:	b184      	cbz	r4, 8000cb8 <chThdResumeI+0x28>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8000c96:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	460e      	mov	r6, r1
 8000c9e:	4605      	mov	r5, r0
 8000ca0:	d002      	beq.n	8000ca8 <chThdResumeI+0x18>
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <chThdResumeI+0x2c>)
 8000ca4:	f7ff fb8c 	bl	80003c0 <chSysHalt>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	602b      	str	r3, [r5, #0]
    tp->p_u.rdymsg = msg;
 8000cac:	6266      	str	r6, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000cae:	4620      	mov	r0, r4
  }
}
 8000cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000cb4:	f7ff bd84 	b.w	80007c0 <chSchReadyI>
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	bf00      	nop
 8000cbc:	080023f0 	.word	0x080023f0

08000cc0 <chThdResumeS>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 8000cc0:	b570      	push	{r4, r5, r6, lr}

  if (*trp != NULL) {
 8000cc2:	6805      	ldr	r5, [r0, #0]
 8000cc4:	b185      	cbz	r5, 8000ce8 <chThdResumeS+0x28>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8000cc6:	f895 3020 	ldrb.w	r3, [r5, #32]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	460e      	mov	r6, r1
 8000cce:	4604      	mov	r4, r0
 8000cd0:	d002      	beq.n	8000cd8 <chThdResumeS+0x18>
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <chThdResumeS+0x2c>)
 8000cd4:	f7ff fb74 	bl	80003c0 <chSysHalt>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000cd8:	2300      	movs	r3, #0
    chSchWakeupS(tp, msg);
 8000cda:	4631      	mov	r1, r6
 8000cdc:	4628      	mov	r0, r5
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000cde:	6023      	str	r3, [r4, #0]
    chSchWakeupS(tp, msg);
  }
}
 8000ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    chSchWakeupS(tp, msg);
 8000ce4:	f7ff be2c 	b.w	8000940 <chSchWakeupS>
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	bf00      	nop
 8000cec:	08002430 	.word	0x08002430

08000cf0 <chTMObjectInit>:

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfe:	e880 000c 	stmia.w	r0, {r2, r3}
  tmp->last       = (rtcnt_t)0;
 8000d02:	6083      	str	r3, [r0, #8]
  tmp->n          = (ucnt_t)0;
 8000d04:	60c3      	str	r3, [r0, #12]
 8000d06:	4770      	bx	lr
	...

08000d10 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000d10:	4b01      	ldr	r3, [pc, #4]	; (8000d18 <chTMStartMeasurementX+0x8>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000d14:	6083      	str	r3, [r0, #8]
 8000d16:	4770      	bx	lr
 8000d18:	e0001000 	.word	0xe0001000
 8000d1c:	00000000 	.word	0x00000000

08000d20 <chTMStopMeasurementX>:
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000d22:	4910      	ldr	r1, [pc, #64]	; (8000d64 <chTMStopMeasurementX+0x44>)
 8000d24:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000d26:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000d28:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000d2a:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d2e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d30:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000d32:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000d3a:	18e4      	adds	r4, r4, r3
 8000d3c:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d40:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d42:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d44:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000d46:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d48:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d4c:	d805      	bhi.n	8000d5a <chTMStopMeasurementX+0x3a>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000d4e:	6802      	ldr	r2, [r0, #0]
 8000d50:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000d52:	bf38      	it	cc
 8000d54:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000d56:	bcf0      	pop	{r4, r5, r6, r7}
 8000d58:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000d5a:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d5e:	4770      	bx	lr
 8000d60:	e0001000 	.word	0xe0001000
 8000d64:	20000800 	.word	0x20000800
	...

08000d70 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000d70:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000d72:	4c0d      	ldr	r4, [pc, #52]	; (8000da8 <_tm_init+0x38>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000d74:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000d76:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000d7c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000d7e:	2600      	movs	r6, #0
 8000d80:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000d82:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000d86:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000d88:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000d8a:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000d8c:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000d8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000d92:	f7ff ffbd 	bl	8000d10 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000d96:	4668      	mov	r0, sp
 8000d98:	f7ff ffc2 	bl	8000d20 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000d9c:	9b02      	ldr	r3, [sp, #8]
 8000d9e:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
}
 8000da2:	b006      	add	sp, #24
 8000da4:	bdd0      	pop	{r4, r6, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000800 	.word	0x20000800
 8000dac:	00000000 	.word	0x00000000

08000db0 <chTMChainMeasurementToX>:
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <chTMChainMeasurementToX+0x3c>)

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000db2:	6842      	ldr	r2, [r0, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000db6:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000db8:	608b      	str	r3, [r1, #8]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000dba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000dbe:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000dc0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000dc2:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000dc4:	18e4      	adds	r4, r4, r3
 8000dc6:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000dca:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000dcc:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000dce:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000dd0:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000dd2:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000dd6:	d805      	bhi.n	8000de4 <chTMChainMeasurementToX+0x34>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000dd8:	6802      	ldr	r2, [r0, #0]
 8000dda:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000ddc:	bf38      	it	cc
 8000dde:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000de0:	bc70      	pop	{r4, r5, r6}
 8000de2:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000de4:	6043      	str	r3, [r0, #4]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000de6:	bc70      	pop	{r4, r5, r6}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e0001000 	.word	0xe0001000

08000df0 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8000df0:	b510      	push	{r4, lr}

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000df2:	4c08      	ldr	r4, [pc, #32]	; (8000e14 <_stats_init+0x24>)
 8000df4:	2300      	movs	r3, #0
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8000df6:	f504 6096 	add.w	r0, r4, #1200	; 0x4b0
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000dfa:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8000dfe:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8000e02:	f7ff ff75 	bl	8000cf0 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8000e06:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
}
 8000e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8000e0e:	f7ff bf6f 	b.w	8000cf0 <chTMObjectInit>
 8000e12:	bf00      	nop
 8000e14:	20000800 	.word	0x20000800
	...

08000e20 <_stats_increase_irq>:
/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  ch.kernel_stats.n_irq++;
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <_stats_increase_irq+0x10>)
 8000e22:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8000e26:	3301      	adds	r3, #1
 8000e28:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000800 	.word	0x20000800
	...

08000e40 <_stats_ctxswc>:
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <_stats_ctxswc+0x20>)
 8000e42:	f8d2 34ac 	ldr.w	r3, [r2, #1196]	; 0x4ac
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8000e46:	b410      	push	{r4}

  ch.kernel_stats.n_ctxswc++;
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000e48:	f101 0448 	add.w	r4, r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000e4c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000e4e:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8000e52:	4620      	mov	r0, r4
}
 8000e54:	bc10      	pop	{r4}
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000e56:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000e5a:	f7ff bfa9 	b.w	8000db0 <chTMChainMeasurementToX>
 8000e5e:	bf00      	nop
 8000e60:	20000800 	.word	0x20000800
	...

08000e70 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000e70:	4801      	ldr	r0, [pc, #4]	; (8000e78 <_stats_start_measure_crit_thd+0x8>)
 8000e72:	f7ff bf4d 	b.w	8000d10 <chTMStartMeasurementX>
 8000e76:	bf00      	nop
 8000e78:	20000cb0 	.word	0x20000cb0
 8000e7c:	00000000 	.word	0x00000000

08000e80 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <_stats_stop_measure_crit_thd+0x8>)
 8000e82:	f7ff bf4d 	b.w	8000d20 <chTMStopMeasurementX>
 8000e86:	bf00      	nop
 8000e88:	20000cb0 	.word	0x20000cb0
 8000e8c:	00000000 	.word	0x00000000

08000e90 <_stats_start_measure_crit_isr>:
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000e90:	4801      	ldr	r0, [pc, #4]	; (8000e98 <_stats_start_measure_crit_isr+0x8>)
 8000e92:	f7ff bf3d 	b.w	8000d10 <chTMStartMeasurementX>
 8000e96:	bf00      	nop
 8000e98:	20000cc8 	.word	0x20000cc8
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <_stats_stop_measure_crit_isr+0x8>)
 8000ea2:	f7ff bf3d 	b.w	8000d20 <chTMStopMeasurementX>
 8000ea6:	bf00      	nop
 8000ea8:	20000cc8 	.word	0x20000cc8
 8000eac:	00000000 	.word	0x00000000

08000eb0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8000eb0:	b510      	push	{r4, lr}

  chDbgCheck(mp != NULL);
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	b120      	cbz	r0, 8000ec0 <chMtxObjectInit+0x10>

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000eb6:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000eb8:	6024      	str	r4, [r4, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000eba:	6064      	str	r4, [r4, #4]
 8000ebc:	60a3      	str	r3, [r4, #8]
 8000ebe:	bd10      	pop	{r4, pc}
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);
 8000ec0:	4801      	ldr	r0, [pc, #4]	; (8000ec8 <chMtxObjectInit+0x18>)
 8000ec2:	f7ff fa7d 	bl	80003c0 <chSysHalt>
 8000ec6:	e7f6      	b.n	8000eb6 <chMtxObjectInit+0x6>
 8000ec8:	08002460 	.word	0x08002460
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000ed6:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000ed8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000edc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000ee0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200011a7 	.word	0x200011a7
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	20000ddc 	.word	0x20000ddc
 8000ef4:	20000dd8 	.word	0x20000dd8
	...

08000f00 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000f00:	b510      	push	{r4, lr}
 8000f02:	2320      	movs	r3, #32
 8000f04:	4604      	mov	r4, r0
 8000f06:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000f0a:	f7ff ffb1 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000f0e:	f7ff fac7 	bl	80004a0 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8000f12:	f7ff fb4d 	bl	80005b0 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000f16:	4911      	ldr	r1, [pc, #68]	; (8000f5c <chCoreAlloc+0x5c>)
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <chCoreAlloc+0x60>)
 8000f1a:	6808      	ldr	r0, [r1, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000f1e:	1de3      	adds	r3, r4, #7
 8000f20:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000f24:	1a12      	subs	r2, r2, r0
 8000f26:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000f28:	bf9d      	ittte	ls
 8000f2a:	181b      	addls	r3, r3, r0
 8000f2c:	600b      	strls	r3, [r1, #0]

  return p;
 8000f2e:	4604      	movls	r4, r0

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000f30:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000f32:	f7ff fac5 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000f36:	f7ff ffa3 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <chCoreAlloc+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d007      	beq.n	8000f52 <chCoreAlloc+0x52>
 8000f42:	6999      	ldr	r1, [r3, #24]
 8000f44:	6893      	ldr	r3, [r2, #8]
 8000f46:	688a      	ldr	r2, [r1, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d202      	bcs.n	8000f52 <chCoreAlloc+0x52>
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <chCoreAlloc+0x68>)
 8000f4e:	f7ff fa37 	bl	80003c0 <chSysHalt>
 8000f52:	2300      	movs	r3, #0
 8000f54:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000f58:	4620      	mov	r0, r4
 8000f5a:	bd10      	pop	{r4, pc}
 8000f5c:	20000ddc 	.word	0x20000ddc
 8000f60:	20000dd8 	.word	0x20000dd8
 8000f64:	20000800 	.word	0x20000800
 8000f68:	08002470 	.word	0x08002470
 8000f6c:	00000000 	.word	0x00000000

08000f70 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <_heap_init+0x14>)
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_heap_init+0x18>)
 8000f74:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000f76:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000f7e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000f80:	f7ff bf96 	b.w	8000eb0 <chMtxObjectInit>
 8000f84:	20000de0 	.word	0x20000de0
 8000f88:	08000f01 	.word	0x08000f01
 8000f8c:	00000000 	.word	0x00000000

08000f90 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f90:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f94:	3320      	adds	r3, #32
 8000f96:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
	...

08000fb0 <_port_irq_epilogue>:
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <_port_irq_epilogue+0x44>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000fbe:	d102      	bne.n	8000fc6 <_port_irq_epilogue+0x16>
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000fc6:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000fc8:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	f844 3c04 	str.w	r3, [r4, #-4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000fd4:	f1a4 0320 	sub.w	r3, r4, #32
 8000fd8:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000fdc:	f7ff fce8 	bl	80009b0 <chSchIsPreemptionRequired>
 8000fe0:	b118      	cbz	r0, 8000fea <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <_port_irq_epilogue+0x48>)
 8000fe4:	f844 3c08 	str.w	r3, [r4, #-8]
 8000fe8:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <_port_irq_epilogue+0x4c>)
 8000fec:	f844 3c08 	str.w	r3, [r4, #-8]
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	080002a9 	.word	0x080002a9
 8000ffc:	080002bc 	.word	0x080002bc

08001000 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001000:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001002:	f000 fc0d 	bl	8001820 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <halInit+0x1c>)
 8001008:	f000 ffb2 	bl	8001f70 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 800100c:	f000 f840 	bl	8001090 <adcInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001010:	f001 f8ee 	bl	80021f0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8001014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001018:	f000 b802 	b.w	8001020 <stInit>
 800101c:	08002600 	.word	0x08002600

08001020 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8001020:	f000 bcc6 	b.w	80019b0 <st_lld_init>
	...

08001030 <stStartAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8001034:	b510      	push	{r4, lr}
 8001036:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8001038:	079b      	lsls	r3, r3, #30
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 800103a:	4604      	mov	r4, r0

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800103c:	d502      	bpl.n	8001044 <stStartAlarm+0x14>
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <stStartAlarm+0x24>)
 8001040:	f7ff f9be 	bl	80003c0 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8001048:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800104a:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800104c:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800104e:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	bd10      	pop	{r4, pc}
 8001054:	08002480 	.word	0x08002480
	...

08001060 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001074:	b510      	push	{r4, lr}
 8001076:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001078:	079b      	lsls	r3, r3, #30
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 800107a:	4604      	mov	r4, r0

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 800107c:	d402      	bmi.n	8001084 <stSetAlarm+0x14>
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <stSetAlarm+0x1c>)
 8001080:	f7ff f99e 	bl	80003c0 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001088:	635c      	str	r4, [r3, #52]	; 0x34
 800108a:	bd10      	pop	{r4, pc}
 800108c:	08002490 	.word	0x08002490

08001090 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8001090:	f000 be3e 	b.w	8001d10 <adc_lld_init>
	...

080010a0 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 80010a0:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80010a2:	2201      	movs	r2, #1
 80010a4:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 80010a6:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 80010a8:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 80010aa:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 80010ac:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80010ae:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 80010b0:	3018      	adds	r0, #24
 80010b2:	f7ff befd 	b.w	8000eb0 <chMtxObjectInit>
 80010b6:	bf00      	nop
	...

080010c0 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	460d      	mov	r5, r1

  osalDbgCheck(adcp != NULL);
 80010c4:	4604      	mov	r4, r0
 80010c6:	b338      	cbz	r0, 8001118 <adcStart+0x58>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80010c8:	2320      	movs	r3, #32
 80010ca:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80010ce:	f7ff fecf 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010d2:	f7ff f9e5 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 80010d6:	7823      	ldrb	r3, [r4, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d902      	bls.n	80010e4 <adcStart+0x24>
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <adcStart+0x60>)
 80010e0:	f7ff f96e 	bl	80003c0 <chSysHalt>
                "invalid state");
  adcp->config = config;
  adc_lld_start(adcp);
 80010e4:	4620      	mov	r0, r4
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 80010e6:	6065      	str	r5, [r4, #4]
  adc_lld_start(adcp);
 80010e8:	f000 fe52 	bl	8001d90 <adc_lld_start>
  adcp->state = ADC_READY;
 80010ec:	2302      	movs	r3, #2
 80010ee:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80010f0:	f7ff f9e6 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80010f4:	f7ff fec4 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <adcStart+0x64>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d007      	beq.n	8001110 <adcStart+0x50>
 8001100:	6999      	ldr	r1, [r3, #24]
 8001102:	6893      	ldr	r3, [r2, #8]
 8001104:	688a      	ldr	r2, [r1, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	d202      	bcs.n	8001110 <adcStart+0x50>
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <adcStart+0x68>)
 800110c:	f7ff f958 	bl	80003c0 <chSysHalt>
 8001110:	2300      	movs	r3, #0
 8001112:	f383 8811 	msr	BASEPRI, r3
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {

  osalDbgCheck(adcp != NULL);
 8001118:	4801      	ldr	r0, [pc, #4]	; (8001120 <adcStart+0x60>)
 800111a:	f7ff f951 	bl	80003c0 <chSysHalt>
 800111e:	e7d3      	b.n	80010c8 <adcStart+0x8>
 8001120:	080024a0 	.word	0x080024a0
 8001124:	20000800 	.word	0x20000800
 8001128:	080024f0 	.word	0x080024f0
 800112c:	00000000 	.word	0x00000000

08001130 <adcStartConversionI>:
 * @iclass
 */
void adcStartConversionI(ADCDriver *adcp,
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	4604      	mov	r4, r0
 8001134:	460e      	mov	r6, r1
 8001136:	4617      	mov	r7, r2
 8001138:	461d      	mov	r5, r3

  osalDbgCheckClassI();
 800113a:	f7ff fa39 	bl	80005b0 <chDbgCheckClassI>
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 800113e:	b1c4      	cbz	r4, 8001172 <adcStartConversionI+0x42>
 8001140:	b1be      	cbz	r6, 8001172 <adcStartConversionI+0x42>
 8001142:	b1b7      	cbz	r7, 8001172 <adcStartConversionI+0x42>
 8001144:	2d01      	cmp	r5, #1
 8001146:	d001      	beq.n	800114c <adcStartConversionI+0x1c>
 8001148:	07eb      	lsls	r3, r5, #31
 800114a:	d412      	bmi.n	8001172 <adcStartConversionI+0x42>
               ((depth == 1U) || ((depth & 1U) == 0U)));
  osalDbgAssert((adcp->state == ADC_READY) ||
 800114c:	7823      	ldrb	r3, [r4, #0]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d005      	beq.n	800115e <adcStartConversionI+0x2e>
 8001152:	3b04      	subs	r3, #4
 8001154:	2b01      	cmp	r3, #1
 8001156:	d902      	bls.n	800115e <adcStartConversionI+0x2e>
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <adcStartConversionI+0x4c>)
 800115a:	f7ff f931 	bl	80003c0 <chSysHalt>
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 800115e:	2303      	movs	r3, #3
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8001160:	60a7      	str	r7, [r4, #8]
  adcp->depth    = depth;
 8001162:	60e5      	str	r5, [r4, #12]
  adcp->grpp     = grpp;
 8001164:	6126      	str	r6, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 8001166:	7023      	strb	r3, [r4, #0]
  adc_lld_start_conversion(adcp);
 8001168:	4620      	mov	r0, r4
}
 800116a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  adc_lld_start_conversion(adcp);
 800116e:	f000 be87 	b.w	8001e80 <adc_lld_start_conversion>
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {

  osalDbgCheckClassI();
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <adcStartConversionI+0x4c>)
 8001174:	f7ff f924 	bl	80003c0 <chSysHalt>
 8001178:	e7e8      	b.n	800114c <adcStartConversionI+0x1c>
 800117a:	bf00      	nop
 800117c:	080024b0 	.word	0x080024b0

08001180 <adcStartConversion>:
 * @api
 */
void adcStartConversion(ADCDriver *adcp,
                        const ADCConversionGroup *grpp,
                        adcsample_t *samples,
                        size_t depth) {
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	461f      	mov	r7, r3
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
 8001188:	4616      	mov	r6, r2
 800118a:	2320      	movs	r3, #32
 800118c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001190:	f7ff fe6e 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001194:	f7ff f984 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  adcStartConversionI(adcp, grpp, samples, depth);
 8001198:	463b      	mov	r3, r7
 800119a:	4632      	mov	r2, r6
 800119c:	4629      	mov	r1, r5
 800119e:	4620      	mov	r0, r4
 80011a0:	f7ff ffc6 	bl	8001130 <adcStartConversionI>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80011a4:	f7ff f98c 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80011a8:	f7ff fe6a 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <adcStartConversion+0x4c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d007      	beq.n	80011c4 <adcStartConversion+0x44>
 80011b4:	6999      	ldr	r1, [r3, #24]
 80011b6:	6893      	ldr	r3, [r2, #8]
 80011b8:	688a      	ldr	r2, [r1, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d202      	bcs.n	80011c4 <adcStartConversion+0x44>
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <adcStartConversion+0x50>)
 80011c0:	f7ff f8fe 	bl	80003c0 <chSysHalt>
 80011c4:	2300      	movs	r3, #0
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011cc:	20000800 	.word	0x20000800
 80011d0:	080024f0 	.word	0x080024f0
	...

080011e0 <adcStopConversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @api
 */
void adcStopConversion(ADCDriver *adcp) {
 80011e0:	b510      	push	{r4, lr}

  osalDbgCheck(adcp != NULL);
 80011e2:	4604      	mov	r4, r0
 80011e4:	b388      	cbz	r0, 800124a <adcStopConversion+0x6a>
 80011e6:	2320      	movs	r3, #32
 80011e8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80011ec:	f7ff fe40 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80011f0:	f7ff f956 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_READY) || (adcp->state == ADC_ACTIVE),
 80011f4:	7823      	ldrb	r3, [r4, #0]
 80011f6:	1e9a      	subs	r2, r3, #2
 80011f8:	2a01      	cmp	r2, #1
 80011fa:	d903      	bls.n	8001204 <adcStopConversion+0x24>
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <adcStopConversion+0x74>)
 80011fe:	f7ff f8df 	bl	80003c0 <chSysHalt>
 8001202:	7823      	ldrb	r3, [r4, #0]
                "invalid state");
  if (adcp->state != ADC_READY) {
 8001204:	2b02      	cmp	r3, #2
 8001206:	d00c      	beq.n	8001222 <adcStopConversion+0x42>
    adc_lld_stop_conversion(adcp);
 8001208:	4620      	mov	r0, r4
 800120a:	f000 fe89 	bl	8001f20 <adc_lld_stop_conversion>
    adcp->grpp  = NULL;
    adcp->state = ADC_READY;
 800120e:	4620      	mov	r0, r4
  osalSysLock();
  osalDbgAssert((adcp->state == ADC_READY) || (adcp->state == ADC_ACTIVE),
                "invalid state");
  if (adcp->state != ADC_READY) {
    adc_lld_stop_conversion(adcp);
    adcp->grpp  = NULL;
 8001210:	2200      	movs	r2, #0
    adcp->state = ADC_READY;
 8001212:	2302      	movs	r3, #2
  osalSysLock();
  osalDbgAssert((adcp->state == ADC_READY) || (adcp->state == ADC_ACTIVE),
                "invalid state");
  if (adcp->state != ADC_READY) {
    adc_lld_stop_conversion(adcp);
    adcp->grpp  = NULL;
 8001214:	6122      	str	r2, [r4, #16]
 *
 * @iclass
 */
static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {

  chThdResumeS(trp, msg);
 8001216:	f06f 0101 	mvn.w	r1, #1
    adcp->state = ADC_READY;
 800121a:	f800 3b14 	strb.w	r3, [r0], #20
 800121e:	f7ff fd4f 	bl	8000cc0 <chThdResumeS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001222:	f7ff f94d 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001226:	f7ff fe2b 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <adcStopConversion+0x78>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d007      	beq.n	8001242 <adcStopConversion+0x62>
 8001232:	6999      	ldr	r1, [r3, #24]
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	688a      	ldr	r2, [r1, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	d202      	bcs.n	8001242 <adcStopConversion+0x62>
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <adcStopConversion+0x7c>)
 800123e:	f7ff f8bf 	bl	80003c0 <chSysHalt>
 8001242:	2300      	movs	r3, #0
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	bd10      	pop	{r4, pc}
 *
 * @api
 */
void adcStopConversion(ADCDriver *adcp) {

  osalDbgCheck(adcp != NULL);
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <adcStopConversion+0x74>)
 800124c:	f7ff f8b8 	bl	80003c0 <chSysHalt>
 8001250:	e7c9      	b.n	80011e6 <adcStopConversion+0x6>
 8001252:	bf00      	nop
 8001254:	080024d0 	.word	0x080024d0
 8001258:	20000800 	.word	0x20000800
 800125c:	080024f0 	.word	0x080024f0

08001260 <adcConvert>:
 * @api
 */
msg_t adcConvert(ADCDriver *adcp,
                 const ADCConversionGroup *grpp,
                 adcsample_t *samples,
                 size_t depth) {
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	461f      	mov	r7, r3
 8001264:	4604      	mov	r4, r0
 8001266:	460d      	mov	r5, r1
 8001268:	4616      	mov	r6, r2
 800126a:	2320      	movs	r3, #32
 800126c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001270:	f7ff fdfe 	bl	8000e70 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001274:	f7ff f914 	bl	80004a0 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	b113      	cbz	r3, 8001282 <adcConvert+0x22>
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <adcConvert+0x64>)
 800127e:	f7ff f89f 	bl	80003c0 <chSysHalt>
  adcStartConversionI(adcp, grpp, samples, depth);
 8001282:	463b      	mov	r3, r7
 8001284:	4632      	mov	r2, r6
 8001286:	4629      	mov	r1, r5
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff ff51 	bl	8001130 <adcStartConversionI>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 800128e:	f104 0014 	add.w	r0, r4, #20
 8001292:	f7ff fce5 	bl	8000c60 <chThdSuspendS>
 8001296:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001298:	f7ff f912 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800129c:	f7ff fdf0 	bl	8000e80 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <adcConvert+0x68>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d007      	beq.n	80012b8 <adcConvert+0x58>
 80012a8:	6999      	ldr	r1, [r3, #24]
 80012aa:	6893      	ldr	r3, [r2, #8]
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d202      	bcs.n	80012b8 <adcConvert+0x58>
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <adcConvert+0x6c>)
 80012b4:	f7ff f884 	bl	80003c0 <chSysHalt>
 80012b8:	2300      	movs	r3, #0
 80012ba:	f383 8811 	msr	BASEPRI, r3
  msg = osalThreadSuspendS(&adcp->thread);
  osalSysUnlock();
  return msg;
}
 80012be:	4620      	mov	r0, r4
 80012c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08002500 	.word	0x08002500
 80012c8:	20000800 	.word	0x20000800
 80012cc:	080024f0 	.word	0x080024f0

080012d0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 80012d0:	0943      	lsrs	r3, r0, #5
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	b410      	push	{r4}
 80012d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80012da:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80012de:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80012e2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80012e6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80012e8:	f000 001f 	and.w	r0, r0, #31
 80012ec:	2201      	movs	r2, #1
 80012ee:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80012f2:	b2c9      	uxtb	r1, r1
 80012f4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80012f8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80012fc:	6018      	str	r0, [r3, #0]
}
 80012fe:	bc10      	pop	{r4}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
	...

08001310 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8001310:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001312:	f7ff fd85 	bl	8000e20 <_stats_increase_irq>
 8001316:	f7ff f91b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 8001324:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	b10b      	cbz	r3, 800132e <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800132a:	6850      	ldr	r0, [r2, #4]
 800132c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800132e:	f7ff f927 	bl	8000580 <_dbg_check_leave_isr>
}
 8001332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001336:	f7ff be3b 	b.w	8000fb0 <_port_irq_epilogue>
 800133a:	bf00      	nop
 800133c:	40026000 	.word	0x40026000
 8001340:	20000e00 	.word	0x20000e00
	...

08001350 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8001350:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001352:	f7ff fd65 	bl	8000e20 <_stats_increase_irq>
 8001356:	f7ff f8fb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <Vector70+0x34>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800135e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8001360:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001362:	0989      	lsrs	r1, r1, #6
 8001364:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6;
 8001368:	018c      	lsls	r4, r1, #6
 800136a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800136c:	b10a      	cbz	r2, 8001372 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800136e:	68c0      	ldr	r0, [r0, #12]
 8001370:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001372:	f7ff f905 	bl	8000580 <_dbg_check_leave_isr>
}
 8001376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800137a:	f7ff be19 	b.w	8000fb0 <_port_irq_epilogue>
 800137e:	bf00      	nop
 8001380:	40026000 	.word	0x40026000
 8001384:	20000e00 	.word	0x20000e00
	...

08001390 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8001390:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001392:	f7ff fd45 	bl	8000e20 <_stats_increase_irq>
 8001396:	f7ff f8db 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <Vector74+0x34>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800139e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 80013a0:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80013a2:	0c09      	lsrs	r1, r1, #16
 80013a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16;
 80013a8:	040c      	lsls	r4, r1, #16
 80013aa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80013ac:	b10a      	cbz	r2, 80013b2 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80013ae:	6940      	ldr	r0, [r0, #20]
 80013b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80013b2:	f7ff f8e5 	bl	8000580 <_dbg_check_leave_isr>
}
 80013b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80013ba:	f7ff bdf9 	b.w	8000fb0 <_port_irq_epilogue>
 80013be:	bf00      	nop
 80013c0:	40026000 	.word	0x40026000
 80013c4:	20000e00 	.word	0x20000e00
	...

080013d0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80013d0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80013d2:	f7ff fd25 	bl	8000e20 <_stats_increase_irq>
 80013d6:	f7ff f8bb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <Vector78+0x34>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013de:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80013e0:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013e2:	0d89      	lsrs	r1, r1, #22
 80013e4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22;
 80013e8:	058c      	lsls	r4, r1, #22
 80013ea:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80013ec:	b10a      	cbz	r2, 80013f2 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80013ee:	69c0      	ldr	r0, [r0, #28]
 80013f0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80013f2:	f7ff f8c5 	bl	8000580 <_dbg_check_leave_isr>
}
 80013f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80013fa:	f7ff bdd9 	b.w	8000fb0 <_port_irq_epilogue>
 80013fe:	bf00      	nop
 8001400:	40026000 	.word	0x40026000
 8001404:	20000e00 	.word	0x20000e00
	...

08001410 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8001410:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001412:	f7ff fd05 	bl	8000e20 <_stats_increase_irq>
 8001416:	f7ff f89b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800141e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001420:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001422:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 8001426:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001428:	b10a      	cbz	r2, 800142e <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800142a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800142c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800142e:	f7ff f8a7 	bl	8000580 <_dbg_check_leave_isr>
}
 8001432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001436:	f7ff bdbb 	b.w	8000fb0 <_port_irq_epilogue>
 800143a:	bf00      	nop
 800143c:	40026000 	.word	0x40026000
 8001440:	20000e00 	.word	0x20000e00
	...

08001450 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8001450:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001452:	f7ff fce5 	bl	8000e20 <_stats_increase_irq>
 8001456:	f7ff f87b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <Vector80+0x34>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800145e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001460:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001462:	0989      	lsrs	r1, r1, #6
 8001464:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6;
 8001468:	018c      	lsls	r4, r1, #6
 800146a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800146c:	b10a      	cbz	r2, 8001472 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800146e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001470:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001472:	f7ff f885 	bl	8000580 <_dbg_check_leave_isr>
}
 8001476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800147a:	f7ff bd99 	b.w	8000fb0 <_port_irq_epilogue>
 800147e:	bf00      	nop
 8001480:	40026000 	.word	0x40026000
 8001484:	20000e00 	.word	0x20000e00
	...

08001490 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8001490:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001492:	f7ff fcc5 	bl	8000e20 <_stats_increase_irq>
 8001496:	f7ff f85b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <Vector84+0x34>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800149e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 80014a0:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 80014a2:	0c09      	lsrs	r1, r1, #16
 80014a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16;
 80014a8:	040c      	lsls	r4, r1, #16
 80014aa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 80014ac:	b10a      	cbz	r2, 80014b2 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80014ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80014b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80014b2:	f7ff f865 	bl	8000580 <_dbg_check_leave_isr>
}
 80014b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80014ba:	f7ff bd79 	b.w	8000fb0 <_port_irq_epilogue>
 80014be:	bf00      	nop
 80014c0:	40026000 	.word	0x40026000
 80014c4:	20000e00 	.word	0x20000e00
	...

080014d0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 80014d0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80014d2:	f7ff fca5 	bl	8000e20 <_stats_increase_irq>
 80014d6:	f7ff f83b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014de:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80014e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014e2:	0d89      	lsrs	r1, r1, #22
 80014e4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22;
 80014e8:	058c      	lsls	r4, r1, #22
 80014ea:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80014ec:	b10a      	cbz	r2, 80014f2 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80014ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80014f0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80014f2:	f7ff f845 	bl	8000580 <_dbg_check_leave_isr>
}
 80014f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80014fa:	f7ff bd59 	b.w	8000fb0 <_port_irq_epilogue>
 80014fe:	bf00      	nop
 8001500:	40026000 	.word	0x40026000
 8001504:	20000e00 	.word	0x20000e00
	...

08001510 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 8001510:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001512:	f7ff fc85 	bl	8000e20 <_stats_increase_irq>
 8001516:	f7ff f81b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <Vector120+0x30>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800151e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001520:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001522:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 8001526:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8001528:	b10a      	cbz	r2, 800152e <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800152a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800152c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800152e:	f7ff f827 	bl	8000580 <_dbg_check_leave_isr>
}
 8001532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001536:	f7ff bd3b 	b.w	8000fb0 <_port_irq_epilogue>
 800153a:	bf00      	nop
 800153c:	40026400 	.word	0x40026400
 8001540:	20000e00 	.word	0x20000e00
	...

08001550 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 8001550:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001552:	f7ff fc65 	bl	8000e20 <_stats_increase_irq>
 8001556:	f7fe fffb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <Vector124+0x34>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800155e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001560:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001562:	0989      	lsrs	r1, r1, #6
 8001564:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6;
 8001568:	018c      	lsls	r4, r1, #6
 800156a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800156c:	b10a      	cbz	r2, 8001572 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800156e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001570:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001572:	f7ff f805 	bl	8000580 <_dbg_check_leave_isr>
}
 8001576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800157a:	f7ff bd19 	b.w	8000fb0 <_port_irq_epilogue>
 800157e:	bf00      	nop
 8001580:	40026400 	.word	0x40026400
 8001584:	20000e00 	.word	0x20000e00
	...

08001590 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8001590:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001592:	f7ff fc45 	bl	8000e20 <_stats_increase_irq>
 8001596:	f7fe ffdb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <Vector128+0x34>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800159e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 80015a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 80015a2:	0c09      	lsrs	r1, r1, #16
 80015a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16;
 80015a8:	040c      	lsls	r4, r1, #16
 80015aa:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 80015ac:	b10a      	cbz	r2, 80015b2 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 80015ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80015b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80015b2:	f7fe ffe5 	bl	8000580 <_dbg_check_leave_isr>
}
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80015ba:	f7ff bcf9 	b.w	8000fb0 <_port_irq_epilogue>
 80015be:	bf00      	nop
 80015c0:	40026400 	.word	0x40026400
 80015c4:	20000e00 	.word	0x20000e00
	...

080015d0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 80015d0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80015d2:	f7ff fc25 	bl	8000e20 <_stats_increase_irq>
 80015d6:	f7fe ffbb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015de:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80015e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015e2:	0d89      	lsrs	r1, r1, #22
 80015e4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22;
 80015e8:	058c      	lsls	r4, r1, #22
 80015ea:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80015ec:	b10a      	cbz	r2, 80015f2 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80015ee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80015f0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80015f2:	f7fe ffc5 	bl	8000580 <_dbg_check_leave_isr>
}
 80015f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80015fa:	f7ff bcd9 	b.w	8000fb0 <_port_irq_epilogue>
 80015fe:	bf00      	nop
 8001600:	40026400 	.word	0x40026400
 8001604:	20000e00 	.word	0x20000e00
	...

08001610 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 8001610:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001612:	f7ff fc05 	bl	8000e20 <_stats_increase_irq>
 8001616:	f7fe ff9b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <Vector130+0x30>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800161e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001620:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001622:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 8001626:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001628:	b10a      	cbz	r2, 800162e <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800162a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800162c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800162e:	f7fe ffa7 	bl	8000580 <_dbg_check_leave_isr>
}
 8001632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001636:	f7ff bcbb 	b.w	8000fb0 <_port_irq_epilogue>
 800163a:	bf00      	nop
 800163c:	40026400 	.word	0x40026400
 8001640:	20000e00 	.word	0x20000e00
	...

08001650 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8001650:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001652:	f7ff fbe5 	bl	8000e20 <_stats_increase_irq>
 8001656:	f7fe ff7b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <Vector150+0x34>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800165e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001660:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001662:	0989      	lsrs	r1, r1, #6
 8001664:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6;
 8001668:	018c      	lsls	r4, r1, #6
 800166a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800166c:	b10a      	cbz	r2, 8001672 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800166e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001670:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001672:	f7fe ff85 	bl	8000580 <_dbg_check_leave_isr>
}
 8001676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800167a:	f7ff bc99 	b.w	8000fb0 <_port_irq_epilogue>
 800167e:	bf00      	nop
 8001680:	40026400 	.word	0x40026400
 8001684:	20000e00 	.word	0x20000e00
	...

08001690 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8001690:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001692:	f7ff fbc5 	bl	8000e20 <_stats_increase_irq>
 8001696:	f7fe ff5b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <Vector154+0x34>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800169e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 80016a0:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80016a2:	0c09      	lsrs	r1, r1, #16
 80016a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16;
 80016a8:	040c      	lsls	r4, r1, #16
 80016aa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80016ac:	b10a      	cbz	r2, 80016b2 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80016ae:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80016b0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80016b2:	f7fe ff65 	bl	8000580 <_dbg_check_leave_isr>
}
 80016b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80016ba:	f7ff bc79 	b.w	8000fb0 <_port_irq_epilogue>
 80016be:	bf00      	nop
 80016c0:	40026400 	.word	0x40026400
 80016c4:	20000e00 	.word	0x20000e00
	...

080016d0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 80016d0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80016d2:	f7ff fba5 	bl	8000e20 <_stats_increase_irq>
 80016d6:	f7fe ff3b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <Vector158+0x34>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016de:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80016e0:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016e2:	0d89      	lsrs	r1, r1, #22
 80016e4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22;
 80016e8:	058c      	lsls	r4, r1, #22
 80016ea:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80016ec:	b10a      	cbz	r2, 80016f2 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80016ee:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80016f0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80016f2:	f7fe ff45 	bl	8000580 <_dbg_check_leave_isr>
}
 80016f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80016fa:	f7ff bc59 	b.w	8000fb0 <_port_irq_epilogue>
 80016fe:	bf00      	nop
 8001700:	40026400 	.word	0x40026400
 8001704:	20000e00 	.word	0x20000e00
	...

08001710 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <dmaInit+0x3c>)
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <dmaInit+0x40>)
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <dmaInit+0x44>)
 8001716:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001718:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	4c0e      	ldr	r4, [pc, #56]	; (8001758 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800171e:	4619      	mov	r1, r3
 8001720:	e001      	b.n	8001726 <dmaInit+0x16>
 8001722:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8001726:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001728:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800172c:	3301      	adds	r3, #1
 800172e:	2b10      	cmp	r3, #16
 8001730:	f102 020c 	add.w	r2, r2, #12
 8001734:	d1f5      	bne.n	8001722 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8001736:	4909      	ldr	r1, [pc, #36]	; (800175c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800173a:	bc10      	pop	{r4}
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001740:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8001742:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8001744:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000e80 	.word	0x20000e80
 8001750:	0800253c 	.word	0x0800253c
 8001754:	40026010 	.word	0x40026010
 8001758:	20000e00 	.word	0x20000e00
 800175c:	40026000 	.word	0x40026000
 8001760:	40026400 	.word	0x40026400
	...

08001770 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);
 8001772:	4605      	mov	r5, r0
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001774:	b085      	sub	sp, #20

  osalDbgCheck(dmastp != NULL);
 8001776:	2800      	cmp	r0, #0
 8001778:	d03e      	beq.n	80017f8 <dmaStreamAllocate+0x88>

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800177a:	4c24      	ldr	r4, [pc, #144]	; (800180c <dmaStreamAllocate+0x9c>)
 800177c:	7a6f      	ldrb	r7, [r5, #9]
 800177e:	6826      	ldr	r6, [r4, #0]
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 fe07 	lsl.w	lr, r0, r7
 8001786:	ea1e 0f06 	tst.w	lr, r6
 800178a:	d12a      	bne.n	80017e2 <dmaStreamAllocate+0x72>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800178c:	4820      	ldr	r0, [pc, #128]	; (8001810 <dmaStreamAllocate+0xa0>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800178e:	ea4e 0606 	orr.w	r6, lr, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001792:	eb00 0ec7 	add.w	lr, r0, r7, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8001796:	f016 0fff 	tst.w	r6, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800179a:	6026      	str	r6, [r4, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800179c:	f840 2037 	str.w	r2, [r0, r7, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80017a0:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 80017a4:	d004      	beq.n	80017b0 <dmaStreamAllocate+0x40>
    rccEnableDMA1(FALSE);
 80017a6:	481b      	ldr	r0, [pc, #108]	; (8001814 <dmaStreamAllocate+0xa4>)
 80017a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ae:	6303      	str	r3, [r0, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 80017b0:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
 80017b4:	d117      	bne.n	80017e6 <dmaStreamAllocate+0x76>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f020 001f 	bic.w	r0, r0, #31
 80017be:	6018      	str	r0, [r3, #0]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f010 0401 	ands.w	r4, r0, #1
 80017c6:	d1fb      	bne.n	80017c0 <dmaStreamAllocate+0x50>
 80017c8:	7a2f      	ldrb	r7, [r5, #8]
 80017ca:	686e      	ldr	r6, [r5, #4]
 80017cc:	203d      	movs	r0, #61	; 0x3d
 80017ce:	40b8      	lsls	r0, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80017d0:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80017d2:	6030      	str	r0, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80017d4:	601c      	str	r4, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80017d6:	615f      	str	r7, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80017d8:	b15a      	cbz	r2, 80017f2 <dmaStreamAllocate+0x82>
    nvicEnableVector(dmastp->vector, priority);
 80017da:	7aa8      	ldrb	r0, [r5, #10]
 80017dc:	f7ff fd78 	bl	80012d0 <nvicEnableVector>

  return FALSE;
 80017e0:	4620      	mov	r0, r4
}
 80017e2:	b005      	add	sp, #20
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <dmaStreamAllocate+0xa4>)
 80017e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ee:	6303      	str	r3, [r0, #48]	; 0x30
 80017f0:	e7e1      	b.n	80017b6 <dmaStreamAllocate+0x46>

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 80017f2:	4610      	mov	r0, r2
}
 80017f4:	b005      	add	sp, #20
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <dmaStreamAllocate+0xa8>)
 80017fa:	9303      	str	r3, [sp, #12]
 80017fc:	9202      	str	r2, [sp, #8]
 80017fe:	9101      	str	r1, [sp, #4]
 8001800:	f7fe fdde 	bl	80003c0 <chSysHalt>
 8001804:	a901      	add	r1, sp, #4
 8001806:	c90e      	ldmia	r1, {r1, r2, r3}
 8001808:	e7b7      	b.n	800177a <dmaStreamAllocate+0xa>
 800180a:	bf00      	nop
 800180c:	20000e80 	.word	0x20000e80
 8001810:	20000e00 	.word	0x20000e00
 8001814:	40023800 	.word	0x40023800
 8001818:	08002510 	.word	0x08002510
 800181c:	00000000 	.word	0x00000000

08001820 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <hal_lld_init+0x5c>)
 8001822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800182a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800182c:	6119      	str	r1, [r3, #16]
 800182e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001830:	6958      	ldr	r0, [r3, #20]
 8001832:	6159      	str	r1, [r3, #20]
 8001834:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001836:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001838:	4c11      	ldr	r4, [pc, #68]	; (8001880 <hal_lld_init+0x60>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800183a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800183e:	6218      	str	r0, [r3, #32]
 8001840:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001842:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001844:	6259      	str	r1, [r3, #36]	; 0x24
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001848:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800184a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800184e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001850:	6821      	ldr	r1, [r4, #0]
 8001852:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001856:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001858:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800185a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800185e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001862:	d003      	beq.n	800186c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001864:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001868:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800186a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <hal_lld_init+0x60>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800186e:	bc10      	pop	{r4}

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001870:	6853      	ldr	r3, [r2, #4]
 8001872:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001876:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001878:	f7ff bf4a 	b.w	8001710 <dmaInit>
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
	...

08001890 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001894:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001898:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800189c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800189e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80018a0:	680b      	ldr	r3, [r1, #0]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80018a8:	680a      	ldr	r2, [r1, #0]
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <stm32_clock_init+0xb4>)
 80018ac:	0790      	lsls	r0, r2, #30
 80018ae:	d5fb      	bpl.n	80018a8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	f022 0203 	bic.w	r2, r2, #3
 80018b6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80018bc:	4619      	mov	r1, r3
 80018be:	688b      	ldr	r3, [r1, #8]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <stm32_clock_init+0xb4>)
 80018c2:	f013 030c 	ands.w	r3, r3, #12
 80018c6:	d1fa      	bne.n	80018be <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80018ce:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80018d0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <stm32_clock_init+0xb4>)
 80018de:	0389      	lsls	r1, r1, #14
 80018e0:	d5fb      	bpl.n	80018da <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80018e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80018ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018ec:	4915      	ldr	r1, [pc, #84]	; (8001944 <stm32_clock_init+0xb4>)
 80018ee:	0790      	lsls	r0, r2, #30
 80018f0:	d5fb      	bpl.n	80018ea <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <stm32_clock_init+0xbc>)
 80018f4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80018f6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001900:	6853      	ldr	r3, [r2, #4]
 8001902:	0459      	lsls	r1, r3, #17
 8001904:	d5fc      	bpl.n	8001900 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001906:	490f      	ldr	r1, [pc, #60]	; (8001944 <stm32_clock_init+0xb4>)
 8001908:	680a      	ldr	r2, [r1, #0]
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <stm32_clock_init+0xb4>)
 800190c:	0192      	lsls	r2, r2, #6
 800190e:	d5fb      	bpl.n	8001908 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001912:	4910      	ldr	r1, [pc, #64]	; (8001954 <stm32_clock_init+0xc4>)
 8001914:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001916:	f240 7105 	movw	r1, #1797	; 0x705
 800191a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	f042 0202 	orr.w	r2, r2, #2
 8001922:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001924:	461a      	mov	r2, r3
 8001926:	6893      	ldr	r3, [r2, #8]
 8001928:	4906      	ldr	r1, [pc, #24]	; (8001944 <stm32_clock_init+0xb4>)
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	d1f9      	bne.n	8001926 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001932:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	644b      	str	r3, [r1, #68]	; 0x44
 800193a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	664b      	str	r3, [r1, #100]	; 0x64
 8001942:	4770      	bx	lr
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000
 800194c:	07405408 	.word	0x07405408
 8001950:	40023c00 	.word	0x40023c00
 8001954:	38089400 	.word	0x38089400
	...

08001960 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001960:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8001962:	f7ff fa5d 	bl	8000e20 <_stats_increase_irq>
 8001966:	f7fe fdf3 	bl	8000550 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800196a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	0792      	lsls	r2, r2, #30
 8001972:	d510      	bpl.n	8001996 <VectorB0+0x36>
    STM32_ST_TIM->SR = 0U;
 8001974:	2400      	movs	r4, #0
 8001976:	611c      	str	r4, [r3, #16]
 8001978:	2320      	movs	r3, #32
 800197a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800197e:	f7ff fa87 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001982:	f7fe fdb5 	bl	80004f0 <_dbg_check_lock_from_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8001986:	f7fe fd23 	bl	80003d0 <chSysTimerHandlerI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800198a:	f7fe fdc9 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800198e:	f7ff fa87 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001992:	f384 8811 	msr	BASEPRI, r4
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001996:	f7fe fdf3 	bl	8000580 <_dbg_check_leave_isr>
}
 800199a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800199e:	f7ff bb07 	b.w	8000fb0 <_port_irq_epilogue>
 80019a2:	bf00      	nop
	...

080019b0 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80019b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 80019b6:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019be:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80019c4:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80019c6:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019c8:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019cc:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80019d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019d4:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019d6:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019d8:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80019da:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019dc:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80019de:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80019e2:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80019e4:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80019e6:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80019e8:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 80019ea:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019ec:	f7ff bc70 	b.w	80012d0 <nvicEnableVector>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	e0042000 	.word	0xe0042000
	...

08001a00 <adc_lld_serve_rx_interrupt>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001a00:	f011 0f0c 	tst.w	r1, #12
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a08:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001a0a:	d036      	beq.n	8001a7a <adc_lld_serve_rx_interrupt+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001a0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f022 021f 	bic.w	r2, r2, #31
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	f011 0101 	ands.w	r1, r1, #1
 8001a1e:	d1fb      	bne.n	8001a18 <adc_lld_serve_rx_interrupt+0x18>

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001a20:	6922      	ldr	r2, [r4, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001a22:	7a07      	ldrb	r7, [r0, #8]
 8001a24:	6846      	ldr	r6, [r0, #4]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001a26:	6895      	ldr	r5, [r2, #8]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8001a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001a2a:	223d      	movs	r2, #61	; 0x3d
 8001a2c:	40ba      	lsls	r2, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001a2e:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001a30:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001a32:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001a34:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001a36:	6098      	str	r0, [r3, #8]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001a38:	b145      	cbz	r5, 8001a4c <adc_lld_serve_rx_interrupt+0x4c>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	7023      	strb	r3, [r4, #0]
 8001a3e:	4620      	mov	r0, r4
 8001a40:	47a8      	blx	r5
 8001a42:	7823      	ldrb	r3, [r4, #0]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	bf04      	itt	eq
 8001a48:	2302      	moveq	r3, #2
 8001a4a:	7023      	strbeq	r3, [r4, #0]
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	6125      	str	r5, [r4, #16]
 8001a50:	2320      	movs	r3, #32
 8001a52:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001a56:	f7ff fa1b 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001a5a:	f7fe fd49 	bl	80004f0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001a5e:	f104 0014 	add.w	r0, r4, #20
 8001a62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a66:	f7ff f913 	bl	8000c90 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001a6a:	f7fe fd59 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001a6e:	f7ff fa17 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001a72:	f385 8811 	msr	BASEPRI, r5
 8001a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 8001a7a:	6905      	ldr	r5, [r0, #16]
 8001a7c:	b1a5      	cbz	r5, 8001aa8 <adc_lld_serve_rx_interrupt+0xa8>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001a7e:	068a      	lsls	r2, r1, #26
 8001a80:	d510      	bpl.n	8001aa4 <adc_lld_serve_rx_interrupt+0xa4>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001a82:	782b      	ldrb	r3, [r5, #0]
 8001a84:	b1db      	cbz	r3, 8001abe <adc_lld_serve_rx_interrupt+0xbe>
 8001a86:	686b      	ldr	r3, [r5, #4]
 8001a88:	b173      	cbz	r3, 8001aa8 <adc_lld_serve_rx_interrupt+0xa8>
 8001a8a:	68c2      	ldr	r2, [r0, #12]
 8001a8c:	2a01      	cmp	r2, #1
 8001a8e:	d94f      	bls.n	8001b30 <adc_lld_serve_rx_interrupt+0x130>
 8001a90:	8869      	ldrh	r1, [r5, #2]
 8001a92:	6884      	ldr	r4, [r0, #8]
 8001a94:	0852      	lsrs	r2, r2, #1
 8001a96:	fb02 f101 	mul.w	r1, r2, r1
 8001a9a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8001a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001aa2:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001aa4:	06cb      	lsls	r3, r1, #27
 8001aa6:	d401      	bmi.n	8001aac <adc_lld_serve_rx_interrupt+0xac>
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8001aac:	686b      	ldr	r3, [r5, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0fa      	beq.n	8001aa8 <adc_lld_serve_rx_interrupt+0xa8>
 8001ab2:	68c2      	ldr	r2, [r0, #12]
 8001ab4:	6881      	ldr	r1, [r0, #8]
 8001ab6:	0852      	lsrs	r2, r2, #1
      }
    }
  }
}
 8001ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8001abc:	4718      	bx	r3
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001abe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001ac0:	6802      	ldr	r2, [r0, #0]
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f023 031f 	bic.w	r3, r3, #31
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f013 0301 	ands.w	r3, r3, #1
 8001ad0:	d1fb      	bne.n	8001aca <adc_lld_serve_rx_interrupt+0xca>
 8001ad2:	7a07      	ldrb	r7, [r0, #8]
 8001ad4:	6846      	ldr	r6, [r0, #4]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001ad6:	686d      	ldr	r5, [r5, #4]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8001ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001ada:	213d      	movs	r1, #61	; 0x3d
 8001adc:	40b9      	lsls	r1, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001ade:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001ae0:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 8001ae2:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001ae4:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001ae6:	6090      	str	r0, [r2, #8]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001ae8:	b1ed      	cbz	r5, 8001b26 <adc_lld_serve_rx_interrupt+0x126>
 8001aea:	2304      	movs	r3, #4
 8001aec:	7023      	strb	r3, [r4, #0]
 8001aee:	68e2      	ldr	r2, [r4, #12]
 8001af0:	68a1      	ldr	r1, [r4, #8]
 8001af2:	4620      	mov	r0, r4
 8001af4:	47a8      	blx	r5
 8001af6:	7823      	ldrb	r3, [r4, #0]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d014      	beq.n	8001b26 <adc_lld_serve_rx_interrupt+0x126>
 8001afc:	2320      	movs	r3, #32
 8001afe:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001b02:	f7ff f9c5 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001b06:	f7fe fcf3 	bl	80004f0 <_dbg_check_lock_from_isr>
 8001b0a:	f104 0014 	add.w	r0, r4, #20
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f7ff f8be 	bl	8000c90 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001b14:	f7fe fd04 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001b18:	f7ff f9c2 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b26:	2202      	movs	r2, #2
 8001b28:	2300      	movs	r3, #0
 8001b2a:	7022      	strb	r2, [r4, #0]
 8001b2c:	6123      	str	r3, [r4, #16]
 8001b2e:	e7e5      	b.n	8001afc <adc_lld_serve_rx_interrupt+0xfc>
 8001b30:	6881      	ldr	r1, [r0, #8]
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8001b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8001b36:	4718      	bx	r3
	...

08001b40 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector88) {
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();
 8001b42:	f7ff f96d 	bl	8000e20 <_stats_increase_irq>
 8001b46:	f7fe fd03 	bl	8000550 <_dbg_check_enter_isr>

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8001b4a:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <Vector88+0x1a4>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001b52:	0691      	lsls	r1, r2, #26
 8001b54:	d53b      	bpl.n	8001bce <Vector88+0x8e>
 8001b56:	4c64      	ldr	r4, [pc, #400]	; (8001ce8 <Vector88+0x1a8>)
 8001b58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b5a:	680a      	ldr	r2, [r1, #0]
 8001b5c:	6853      	ldr	r3, [r2, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d035      	beq.n	8001bce <Vector88+0x8e>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8001b62:	6925      	ldr	r5, [r4, #16]
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	d032      	beq.n	8001bce <Vector88+0x8e>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	f023 031f 	bic.w	r3, r3, #31
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f013 0301 	ands.w	r3, r3, #1
 8001b76:	d1fb      	bne.n	8001b70 <Vector88+0x30>
 8001b78:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001b7a:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b7c:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8001b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b80:	4d59      	ldr	r5, [pc, #356]	; (8001ce8 <Vector88+0x1a8>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b82:	213d      	movs	r1, #61	; 0x3d
 8001b84:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b88:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b8a:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8001b8c:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001b8e:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b90:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001b92:	b146      	cbz	r6, 8001ba6 <Vector88+0x66>
 8001b94:	2305      	movs	r3, #5
 8001b96:	702b      	strb	r3, [r5, #0]
 8001b98:	4628      	mov	r0, r5
 8001b9a:	47b0      	blx	r6
 8001b9c:	782b      	ldrb	r3, [r5, #0]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	bf04      	itt	eq
 8001ba2:	2302      	moveq	r3, #2
 8001ba4:	702b      	strbeq	r3, [r5, #0]
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	6125      	str	r5, [r4, #16]
 8001baa:	2320      	movs	r3, #32
 8001bac:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001bb0:	f7ff f96e 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001bb4:	f7fe fc9c 	bl	80004f0 <_dbg_check_lock_from_isr>
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bbc:	484b      	ldr	r0, [pc, #300]	; (8001cec <Vector88+0x1ac>)
 8001bbe:	f7ff f867 	bl	8000c90 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001bc2:	f7fe fcad 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001bc6:	f7ff f96b 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001bca:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
 8001bce:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <Vector88+0x1b0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
  ADC2->SR = 0;
 8001bd2:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 8001bd4:	0692      	lsls	r2, r2, #26
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
  ADC2->SR = 0;
 8001bd6:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 8001bd8:	d53b      	bpl.n	8001c52 <Vector88+0x112>
 8001bda:	4c46      	ldr	r4, [pc, #280]	; (8001cf4 <Vector88+0x1b4>)
 8001bdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bde:	680a      	ldr	r2, [r1, #0]
 8001be0:	6853      	ldr	r3, [r2, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d035      	beq.n	8001c52 <Vector88+0x112>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
 8001be6:	6925      	ldr	r5, [r4, #16]
 8001be8:	2d00      	cmp	r5, #0
 8001bea:	d032      	beq.n	8001c52 <Vector88+0x112>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f023 031f 	bic.w	r3, r3, #31
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f013 0301 	ands.w	r3, r3, #1
 8001bfa:	d1fb      	bne.n	8001bf4 <Vector88+0xb4>
 8001bfc:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 8001bfe:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c00:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8001c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c04:	4d3b      	ldr	r5, [pc, #236]	; (8001cf4 <Vector88+0x1b4>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c06:	213d      	movs	r1, #61	; 0x3d
 8001c08:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c0c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c0e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8001c10:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001c12:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c14:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 8001c16:	b146      	cbz	r6, 8001c2a <Vector88+0xea>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	702b      	strb	r3, [r5, #0]
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	47b0      	blx	r6
 8001c20:	782b      	ldrb	r3, [r5, #0]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	bf04      	itt	eq
 8001c26:	2302      	moveq	r3, #2
 8001c28:	702b      	strbeq	r3, [r5, #0]
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	6125      	str	r5, [r4, #16]
 8001c2e:	2320      	movs	r3, #32
 8001c30:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001c34:	f7ff f92c 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001c38:	f7fe fc5a 	bl	80004f0 <_dbg_check_lock_from_isr>
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c40:	482d      	ldr	r0, [pc, #180]	; (8001cf8 <Vector88+0x1b8>)
 8001c42:	f7ff f825 	bl	8000c90 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001c46:	f7fe fc6b 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001c4a:	f7ff f929 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001c4e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  sr = ADC3->SR;
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <Vector88+0x1bc>)
 8001c54:	681a      	ldr	r2, [r3, #0]
  ADC3->SR = 0;
 8001c56:	2100      	movs	r1, #0
 8001c58:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
 8001c5a:	0693      	lsls	r3, r2, #26
 8001c5c:	d53b      	bpl.n	8001cd6 <Vector88+0x196>
 8001c5e:	4c28      	ldr	r4, [pc, #160]	; (8001d00 <Vector88+0x1c0>)
 8001c60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c62:	680a      	ldr	r2, [r1, #0]
 8001c64:	6853      	ldr	r3, [r2, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d035      	beq.n	8001cd6 <Vector88+0x196>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
 8001c6a:	6925      	ldr	r5, [r4, #16]
 8001c6c:	2d00      	cmp	r5, #0
 8001c6e:	d032      	beq.n	8001cd6 <Vector88+0x196>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f023 031f 	bic.w	r3, r3, #31
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	6813      	ldr	r3, [r2, #0]
 8001c7a:	f013 0301 	ands.w	r3, r3, #1
 8001c7e:	d1fb      	bne.n	8001c78 <Vector88+0x138>
 8001c80:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 8001c82:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c84:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8001c86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c88:	4d1d      	ldr	r5, [pc, #116]	; (8001d00 <Vector88+0x1c0>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c8a:	213d      	movs	r1, #61	; 0x3d
 8001c8c:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c90:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001c92:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8001c94:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001c96:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c98:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 8001c9a:	b146      	cbz	r6, 8001cae <Vector88+0x16e>
 8001c9c:	2305      	movs	r3, #5
 8001c9e:	702b      	strb	r3, [r5, #0]
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	47b0      	blx	r6
 8001ca4:	782b      	ldrb	r3, [r5, #0]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	bf04      	itt	eq
 8001caa:	2302      	moveq	r3, #2
 8001cac:	702b      	strbeq	r3, [r5, #0]
 8001cae:	2500      	movs	r5, #0
 8001cb0:	6125      	str	r5, [r4, #16]
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8001cb8:	f7ff f8ea 	bl	8000e90 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001cbc:	f7fe fc18 	bl	80004f0 <_dbg_check_lock_from_isr>
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <Vector88+0x1c4>)
 8001cc6:	f7fe ffe3 	bl	8000c90 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001cca:	f7fe fc29 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001cce:	f7ff f8e7 	bl	8000ea0 <_stats_stop_measure_crit_isr>
 8001cd2:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 8001cd6:	f7fe fc53 	bl	8000580 <_dbg_check_leave_isr>
}
 8001cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 8001cde:	f7ff b967 	b.w	8000fb0 <_port_irq_epilogue>
 8001ce2:	bf00      	nop
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	20000e84 	.word	0x20000e84
 8001cec:	20000e98 	.word	0x20000e98
 8001cf0:	40012100 	.word	0x40012100
 8001cf4:	20000eb8 	.word	0x20000eb8
 8001cf8:	20000ecc 	.word	0x20000ecc
 8001cfc:	40012200 	.word	0x40012200
 8001d00:	20000eec 	.word	0x20000eec
 8001d04:	20000f00 	.word	0x20000f00
	...

08001d10 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001d12:	4f12      	ldr	r7, [pc, #72]	; (8001d5c <adc_lld_init+0x4c>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8001d14:	4e12      	ldr	r6, [pc, #72]	; (8001d60 <adc_lld_init+0x50>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001d16:	4d13      	ldr	r5, [pc, #76]	; (8001d64 <adc_lld_init+0x54>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001d18:	4c13      	ldr	r4, [pc, #76]	; (8001d68 <adc_lld_init+0x58>)
 */
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	f7ff f9c0 	bl	80010a0 <adcObjectInit>
  ADCD1.adc = ADC1;
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <adc_lld_init+0x5c>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <adc_lld_init+0x60>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8001d24:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8001d26:	4630      	mov	r0, r6
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001d2a:	62fc      	str	r4, [r7, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8001d2c:	f7ff f9b8 	bl	80010a0 <adcObjectInit>
  ADCD2.adc = ADC2;
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <adc_lld_init+0x64>)
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <adc_lld_init+0x68>)
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
 8001d34:	62b2      	str	r2, [r6, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001d36:	4628      	mov	r0, r5

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 8001d38:	f1a4 0218 	sub.w	r2, r4, #24
 8001d3c:	62f2      	str	r2, [r6, #44]	; 0x2c
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 8001d3e:	6333      	str	r3, [r6, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8001d40:	3c24      	subs	r4, #36	; 0x24
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001d42:	f7ff f9ad 	bl	80010a0 <adcObjectInit>
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <adc_lld_init+0x6c>)
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <adc_lld_init+0x70>)
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8001d4a:	62ec      	str	r4, [r5, #44]	; 0x2c
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 8001d4c:	62aa      	str	r2, [r5, #40]	; 0x28
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 8001d4e:	632b      	str	r3, [r5, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 8001d50:	2106      	movs	r1, #6
 8001d52:	2012      	movs	r0, #18
}
 8001d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 8001d58:	f7ff baba 	b.w	80012d0 <nvicEnableVector>
 8001d5c:	20000e84 	.word	0x20000e84
 8001d60:	20000eb8 	.word	0x20000eb8
 8001d64:	20000eec 	.word	0x20000eec
 8001d68:	080025c0 	.word	0x080025c0
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	00022c16 	.word	0x00022c16
 8001d74:	40012100 	.word	0x40012100
 8001d78:	02022c16 	.word	0x02022c16
 8001d7c:	04022c16 	.word	0x04022c16
 8001d80:	40012200 	.word	0x40012200
	...

08001d90 <adc_lld_start>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
 8001d90:	b538      	push	{r3, r4, r5, lr}

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8001d92:	7803      	ldrb	r3, [r0, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d000      	beq.n	8001d9a <adc_lld_start+0xa>
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8001d9a:	4d2c      	ldr	r5, [pc, #176]	; (8001e4c <adc_lld_start+0xbc>)
 8001d9c:	42a8      	cmp	r0, r5
 8001d9e:	4604      	mov	r4, r0
 8001da0:	d013      	beq.n	8001dca <adc_lld_start+0x3a>
      rccEnableADC1(FALSE);
    }
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
    if (&ADCD2 == adcp) {
 8001da2:	4d2b      	ldr	r5, [pc, #172]	; (8001e50 <adc_lld_start+0xc0>)
 8001da4:	42a8      	cmp	r0, r5
 8001da6:	d022      	beq.n	8001dee <adc_lld_start+0x5e>
      rccEnableADC2(FALSE);
    }
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
    if (&ADCD3 == adcp) {
 8001da8:	4d2a      	ldr	r5, [pc, #168]	; (8001e54 <adc_lld_start+0xc4>)
 8001daa:	42a8      	cmp	r0, r5
 8001dac:	d030      	beq.n	8001e10 <adc_lld_start+0x80>
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dae:	482a      	ldr	r0, [pc, #168]	; (8001e58 <adc_lld_start+0xc8>)
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001db0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001db2:	6843      	ldr	r3, [r0, #4]
 8001db4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001db8:	2100      	movs	r1, #0
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
    adcp->adc->CR2 = 0;
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001dbe:	2401      	movs	r4, #1
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dc0:	6043      	str	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001dc2:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001dc4:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001dc6:	6094      	str	r4, [r2, #8]
 8001dc8:	bd38      	pop	{r3, r4, r5, pc}
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <adc_lld_start+0xcc>)
 8001dce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001dd0:	2106      	movs	r1, #6
 8001dd2:	f7ff fccd 	bl	8001770 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d12b      	bne.n	8001e32 <adc_lld_start+0xa2>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001dda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      rccEnableADC1(FALSE);
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <adc_lld_start+0xd0>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4920      	ldr	r1, [pc, #128]	; (8001e64 <adc_lld_start+0xd4>)
 8001de2:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
 8001de4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6453      	str	r3, [r2, #68]	; 0x44
 8001dec:	e7df      	b.n	8001dae <adc_lld_start+0x1e>
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
    if (&ADCD2 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <adc_lld_start+0xcc>)
 8001df2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001df4:	2106      	movs	r1, #6
 8001df6:	f7ff fcbb 	bl	8001770 <dmaStreamAllocate>
                            STM32_ADC_ADC2_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001dfa:	b9f0      	cbnz	r0, 8001e3a <adc_lld_start+0xaa>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC2->DR);
 8001dfc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      rccEnableADC2(FALSE);
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <adc_lld_start+0xd0>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC2_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC2->DR);
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4919      	ldr	r1, [pc, #100]	; (8001e68 <adc_lld_start+0xd8>)
 8001e04:	6099      	str	r1, [r3, #8]
      rccEnableADC2(FALSE);
 8001e06:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	e7ce      	b.n	8001dae <adc_lld_start+0x1e>
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
    if (&ADCD3 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <adc_lld_start+0xcc>)
 8001e14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001e16:	2106      	movs	r1, #6
 8001e18:	f7ff fcaa 	bl	8001770 <dmaStreamAllocate>
                            STM32_ADC_ADC3_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001e1c:	b988      	cbnz	r0, 8001e42 <adc_lld_start+0xb2>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC3->DR);
 8001e1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      rccEnableADC3(FALSE);
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <adc_lld_start+0xd0>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC3_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC3->DR);
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4911      	ldr	r1, [pc, #68]	; (8001e6c <adc_lld_start+0xdc>)
 8001e26:	6099      	str	r1, [r3, #8]
      rccEnableADC3(FALSE);
 8001e28:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e30:	e7bd      	b.n	8001dae <adc_lld_start+0x1e>
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <adc_lld_start+0xe0>)
 8001e34:	f7fe fac4 	bl	80003c0 <chSysHalt>
 8001e38:	e7cf      	b.n	8001dda <adc_lld_start+0x4a>
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC2_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <adc_lld_start+0xe0>)
 8001e3c:	f7fe fac0 	bl	80003c0 <chSysHalt>
 8001e40:	e7dc      	b.n	8001dfc <adc_lld_start+0x6c>
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC3_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8001e42:	480b      	ldr	r0, [pc, #44]	; (8001e70 <adc_lld_start+0xe0>)
 8001e44:	f7fe fabc 	bl	80003c0 <chSysHalt>
 8001e48:	e7e9      	b.n	8001e1e <adc_lld_start+0x8e>
 8001e4a:	bf00      	nop
 8001e4c:	20000e84 	.word	0x20000e84
 8001e50:	20000eb8 	.word	0x20000eb8
 8001e54:	20000eec 	.word	0x20000eec
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	08001a01 	.word	0x08001a01
 8001e60:	40023800 	.word	0x40023800
 8001e64:	4001204c 	.word	0x4001204c
 8001e68:	4001214c 	.word	0x4001214c
 8001e6c:	4001224c 	.word	0x4001224c
 8001e70:	080025f0 	.word	0x080025f0
	...

08001e80 <adc_lld_start_conversion>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8001e80:	6903      	ldr	r3, [r0, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
 8001e82:	6b01      	ldr	r1, [r0, #48]	; 0x30
  if (grpp->circular) {
 8001e84:	781a      	ldrb	r2, [r3, #0]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
 8001e86:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d12b      	bne.n	8001ee4 <adc_lld_start_conversion+0x64>
 8001e8c:	68c2      	ldr	r2, [r0, #12]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8001e8e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8001e90:	885c      	ldrh	r4, [r3, #2]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8001e92:	682d      	ldr	r5, [r5, #0]
 8001e94:	6886      	ldr	r6, [r0, #8]
 8001e96:	60ee      	str	r6, [r5, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8001e98:	fb02 f204 	mul.w	r2, r2, r4
 8001e9c:	606a      	str	r2, [r5, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001e9e:	68dc      	ldr	r4, [r3, #12]
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 8001ea0:	6029      	str	r1, [r5, #0]
  dmaStreamEnable(adcp->dmastp);
 8001ea2:	682e      	ldr	r6, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8001ea4:	6a82      	ldr	r2, [r0, #40]	; 0x28

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8001ea6:	6919      	ldr	r1, [r3, #16]
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8001ea8:	f8d3 e014 	ldr.w	lr, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 8001eac:	699f      	ldr	r7, [r3, #24]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001eae:	f044 6080 	orr.w	r0, r4, #67108864	; 0x4000000
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 8001eb2:	f046 0401 	orr.w	r4, r6, #1
 8001eb6:	602c      	str	r4, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8001eb8:	2400      	movs	r4, #0
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 8001eba:	69dd      	ldr	r5, [r3, #28]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8001ebc:	6014      	str	r4, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 8001ebe:	6a1c      	ldr	r4, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8001ec2:	f8c2 e00c 	str.w	lr, [r2, #12]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001ec6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
 8001eca:	6117      	str	r7, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 8001ecc:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8001ece:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8001ed0:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8001ed2:	004b      	lsls	r3, r1, #1
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8001ed4:	6050      	str	r0, [r2, #4]
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8001ed6:	d40d      	bmi.n	8001ef4 <adc_lld_start_conversion+0x74>

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8001ed8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001edc:	f041 0101 	orr.w	r1, r1, #1

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  }
  else
    adcp->adc->CR2 = cr2;
 8001ee0:	6091      	str	r1, [r2, #8]
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8001ee4:	68c2      	ldr	r2, [r0, #12]
 8001ee6:	2a01      	cmp	r2, #1
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
 8001ee8:	bf94      	ite	ls
 8001eea:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
    if (adcp->depth > 1) {
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8001eee:	f441 7184 	orrhi.w	r1, r1, #264	; 0x108
 8001ef2:	e7cc      	b.n	8001e8e <adc_lld_start_conversion+0xe>

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001ef4:	f021 4380 	bic.w	r3, r1, #1073741824	; 0x40000000
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	f443 7340 	orr.w	r3, r3, #768	; 0x300

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8001f00:	f441 7140 	orr.w	r1, r1, #768	; 0x300

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001f04:	f043 0303 	orr.w	r3, r3, #3

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8001f08:	f041 0103 	orr.w	r1, r1, #3

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8001f0c:	6093      	str	r3, [r2, #8]

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8001f0e:	6091      	str	r1, [r2, #8]
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
	...

08001f20 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8001f20:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8001f22:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	f023 031f 	bic.w	r3, r3, #31
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	f013 0301 	ands.w	r3, r3, #1
 8001f34:	d1fb      	bne.n	8001f2e <adc_lld_stop_conversion+0xe>
 8001f36:	7a25      	ldrb	r5, [r4, #8]
  adcp->adc->CR1 = 0;
 8001f38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f3a:	6864      	ldr	r4, [r4, #4]
 8001f3c:	213d      	movs	r1, #61	; 0x3d
 8001f3e:	40a9      	lsls	r1, r5
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001f40:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001f42:	6021      	str	r1, [r4, #0]
  adcp->adc->CR1 = 0;
 8001f44:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
}
 8001f46:	bc30      	pop	{r4, r5}
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
 8001f48:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001f4a:	6090      	str	r0, [r2, #8]
}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <adcSTM32EnableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8001f50:	4a02      	ldr	r2, [pc, #8]	; (8001f5c <adcSTM32EnableTSVREFE+0xc>)
 8001f52:	6853      	ldr	r3, [r2, #4]
 8001f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f58:	6053      	str	r3, [r2, #4]
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300

08001f60 <adcSTM32DisableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32DisableTSVREFE(void) {

  ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f60:	4a02      	ldr	r2, [pc, #8]	; (8001f6c <adcSTM32DisableTSVREFE+0xc>)
 8001f62:	6853      	ldr	r3, [r2, #4]
 8001f64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f68:	6053      	str	r3, [r2, #4]
 8001f6a:	4770      	bx	lr
 8001f6c:	40012300 	.word	0x40012300

08001f70 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8001f70:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001f72:	4d65      	ldr	r5, [pc, #404]	; (8002108 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001f74:	4c65      	ldr	r4, [pc, #404]	; (800210c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001f76:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001f78:	4965      	ldr	r1, [pc, #404]	; (8002110 <_pal_lld_init+0x1a0>)
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <_pal_lld_init+0x1a4>)
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001f7e:	f240 16ff 	movw	r6, #511	; 0x1ff
 8001f82:	4337      	orrs	r7, r6
 8001f84:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001f86:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8001f88:	433e      	orrs	r6, r7
 8001f8a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001f8c:	6845      	ldr	r5, [r0, #4]
 8001f8e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001f90:	6885      	ldr	r5, [r0, #8]
 8001f92:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001f94:	68c5      	ldr	r5, [r0, #12]
 8001f96:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8001f98:	6905      	ldr	r5, [r0, #16]
 8001f9a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001f9c:	6945      	ldr	r5, [r0, #20]
 8001f9e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001fa0:	6985      	ldr	r5, [r0, #24]
 8001fa2:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001fa4:	6805      	ldr	r5, [r0, #0]
 8001fa6:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001fa8:	6a04      	ldr	r4, [r0, #32]
 8001faa:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001fac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001fae:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001fb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001fb2:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001fb4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fb6:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001fb8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001fba:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001fbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fbe:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001fc0:	69c4      	ldr	r4, [r0, #28]
 8001fc2:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001fc4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001fc6:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001fc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001fca:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001fcc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001fce:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8001fd0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001fd2:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001fd4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001fd6:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001fd8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001fda:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001fdc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001fde:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001fe0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001fe2:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001fe4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001fe6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001fe8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001fea:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8001fec:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001fee:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001ff0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ff2:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001ff4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ff8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001ffa:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001ffc:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001ffe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8002002:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002004:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8002008:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800200a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800200e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8002012:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8002016:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800201a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800201e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002022:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8002026:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002028:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800202c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002030:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8002034:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8002038:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800203c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8002040:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8002044:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8002048:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800204c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002050:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8002054:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8002058:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800205c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002060:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002064:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002068:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800206c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800206e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8002072:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002074:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8002078:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800207a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800207e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002080:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8002084:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002086:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800208c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8002090:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002092:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8002096:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800209a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800209e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 80020a2:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 80020a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 80020aa:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 80020ae:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 80020b2:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 80020b6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 80020ba:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 80020be:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80020c2:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80020c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80020ca:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 80020ce:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80020d2:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 80020d6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 80020da:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 80020de:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 80020e2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 80020e6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 80020ea:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 80020ee:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 80020f2:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 80020f6:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 80020fa:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80020fe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 8002102:	bcf0      	pop	{r4, r5, r6, r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00
 800211c:	00000000 	.word	0x00000000

08002120 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 8002124:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002128:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800212c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8002130:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 8002134:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002138:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800213a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800213e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002142:	f04f 0803 	mov.w	r8, #3
 8002146:	e030      	b.n	80021aa <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002148:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800214c:	ea2b 0303 	bic.w	r3, fp, r3
 8002150:	ea43 030a 	orr.w	r3, r3, sl
 8002154:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002156:	6843      	ldr	r3, [r0, #4]
 8002158:	fa09 fa04 	lsl.w	sl, r9, r4
 800215c:	ea23 030a 	bic.w	r3, r3, sl
 8002160:	433b      	orrs	r3, r7
 8002162:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002164:	0063      	lsls	r3, r4, #1
 8002166:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800216a:	fa08 f303 	lsl.w	r3, r8, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	ea0a 0a03 	and.w	sl, sl, r3
 8002174:	ea4a 0a06 	orr.w	sl, sl, r6
 8002178:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800217c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8002180:	ea03 0a0a 	and.w	sl, r3, sl
 8002184:	ea4a 0a05 	orr.w	sl, sl, r5
 8002188:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800218c:	f8d0 a000 	ldr.w	sl, [r0]
 8002190:	ea03 030a 	and.w	r3, r3, sl
 8002194:	ea43 030e 	orr.w	r3, r3, lr
 8002198:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800219a:	0849      	lsrs	r1, r1, #1
 800219c:	d019      	beq.n	80021d2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800219e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 80021a0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 80021a2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 80021a4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80021a8:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80021aa:	f004 0307 	and.w	r3, r4, #7
 80021ae:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 80021b0:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80021b4:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 80021b8:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 80021bc:	d0ed      	beq.n	800219a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 80021be:	2c07      	cmp	r4, #7
 80021c0:	d9c2      	bls.n	8002148 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 80021c2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80021c6:	ea2b 0303 	bic.w	r3, fp, r3
 80021ca:	ea43 030a 	orr.w	r3, r3, sl
 80021ce:	6243      	str	r3, [r0, #36]	; 0x24
 80021d0:	e7c1      	b.n	8002156 <_pal_lld_setgroupmode+0x36>
 80021d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop
	...

080021e0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 80021e0:	f7ff bb56 	b.w	8001890 <stm32_clock_init>
	...

080021f0 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
	...

08002200 <adccallback>:
 */
size_t nx = 0, ny = 0;
static void adccallback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {

  (void)adcp;
  if (samples2 == buffer) {
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <adccallback+0x14>)
 8002202:	428b      	cmp	r3, r1
    nx += n;
 8002204:	bf0c      	ite	eq
 8002206:	4b04      	ldreq	r3, [pc, #16]	; (8002218 <adccallback+0x18>)
  }
  else {
    ny += n;
 8002208:	4b04      	ldrne	r3, [pc, #16]	; (800221c <adccallback+0x1c>)
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	440a      	add	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200010a0 	.word	0x200010a0
 8002218:	20001088 	.word	0x20001088
 800221c:	2000108c 	.word	0x2000108c

08002220 <adcerrorcallback>:
  }
}

static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
	...

08002230 <Thread1>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8002230:	b508      	push	{r3, lr}

  (void)arg;
  chRegSetThreadName("blinker");
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <Thread1+0x28>)
 8002234:	4a09      	ldr	r2, [pc, #36]	; (800225c <Thread1+0x2c>)
 8002236:	699b      	ldr	r3, [r3, #24]
  while (true) {
    palSetPad(GPIOD, GPIOD_LED5);
 8002238:	4c09      	ldr	r4, [pc, #36]	; (8002260 <Thread1+0x30>)
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 800223a:	619a      	str	r2, [r3, #24]
  while (true) {
    palSetPad(GPIOD, GPIOD_LED5);
 800223c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8002240:	462e      	mov	r6, r5
 8002242:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8002244:	f241 3088 	movw	r0, #5000	; 0x1388
 8002248:	f7fe fca2 	bl	8000b90 <chThdSleep>
    palClearPad(GPIOD, GPIOD_LED5);
 800224c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 800224e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002252:	f7fe fc9d 	bl	8000b90 <chThdSleep>
 8002256:	e7f4      	b.n	8002242 <Thread1+0x12>
 8002258:	20000800 	.word	0x20000800
 800225c:	08002760 	.word	0x08002760
 8002260:	40020c00 	.word	0x40020c00
	...

08002270 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8002270:	b500      	push	{lr}
 8002272:	b083      	sub	sp, #12
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8002274:	f7fe fec4 	bl	8001000 <halInit>
                  0, PAL_MODE_INPUT_ANALOG);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8002278:	2500      	movs	r5, #0
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
 800227a:	f7fe f849 	bl	8000310 <chSysInit>

  /*
   * Setting up analog inputs used by the demo.
   */
  palSetGroupMode(GPIOC, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 800227e:	2203      	movs	r2, #3
 8002280:	2106      	movs	r1, #6
 8002282:	4818      	ldr	r0, [pc, #96]	; (80022e4 <main+0x74>)

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 8002284:	4c18      	ldr	r4, [pc, #96]	; (80022e8 <main+0x78>)
  chSysInit();

  /*
   * Setting up analog inputs used by the demo.
   */
  palSetGroupMode(GPIOC, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 8002286:	f7ff ff4b 	bl	8002120 <_pal_lld_setgroupmode>
                  0, PAL_MODE_INPUT_ANALOG);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <main+0x7c>)
 800228c:	9500      	str	r5, [sp, #0]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002294:	4816      	ldr	r0, [pc, #88]	; (80022f0 <main+0x80>)
 8002296:	f7fe fc33 	bl	8000b00 <chThdCreateStatic>

  /*
   * Activates the ADC1 driver and the temperature sensor.
   */
  adcStart(&ADCD1, NULL);
 800229a:	4629      	mov	r1, r5
 800229c:	4815      	ldr	r0, [pc, #84]	; (80022f4 <main+0x84>)
 800229e:	f7fe ff0f 	bl	80010c0 <adcStart>
  adcSTM32EnableTSVREFE();
 80022a2:	f7ff fe55 	bl	8001f50 <adcSTM32EnableTSVREFE>

  /*
   * Linear conversion.
   */
  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 80022a6:	2308      	movs	r3, #8
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <main+0x88>)
 80022aa:	4914      	ldr	r1, [pc, #80]	; (80022fc <main+0x8c>)
 80022ac:	4811      	ldr	r0, [pc, #68]	; (80022f4 <main+0x84>)
 80022ae:	f7fe ffd7 	bl	8001260 <adcConvert>
  chThdSleepMilliseconds(1000);
 80022b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80022b6:	f7fe fc6b 	bl	8000b90 <chThdSleep>

  /*
   * Starts an ADC continuous conversion.
   */
  adcStartConversion(&ADCD1, &adcgrpcfg2, samples2, ADC_GRP2_BUF_DEPTH);
 80022ba:	2310      	movs	r3, #16
 80022bc:	4a10      	ldr	r2, [pc, #64]	; (8002300 <main+0x90>)
 80022be:	4911      	ldr	r1, [pc, #68]	; (8002304 <main+0x94>)
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <main+0x84>)
 80022c2:	f7fe ff5d 	bl	8001180 <adcStartConversion>
 80022c6:	e003      	b.n	80022d0 <main+0x60>
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
      adcStopConversion(&ADCD1);
      adcSTM32DisableTSVREFE();
    }
    chThdSleepMilliseconds(500);
 80022c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80022cc:	f7fe fc60 	bl	8000b90 <chThdSleep>

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 80022d0:	6923      	ldr	r3, [r4, #16]
 80022d2:	07db      	lsls	r3, r3, #31
 80022d4:	d5f8      	bpl.n	80022c8 <main+0x58>
      adcStopConversion(&ADCD1);
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <main+0x84>)
 80022d8:	f7fe ff82 	bl	80011e0 <adcStopConversion>
      adcSTM32DisableTSVREFE();
 80022dc:	f7ff fe40 	bl	8001f60 <adcSTM32DisableTSVREFE>
 80022e0:	e7f2      	b.n	80022c8 <main+0x58>
 80022e2:	bf00      	nop
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	08002231 	.word	0x08002231
 80022f0:	20000f20 	.word	0x20000f20
 80022f4:	20000e84 	.word	0x20000e84
 80022f8:	20001090 	.word	0x20001090
 80022fc:	08002700 	.word	0x08002700
 8002300:	200010a0 	.word	0x200010a0
 8002304:	08002730 	.word	0x08002730
	...

08002310 <__func__.6055>:
 8002310:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....
 8002320:	656c6469 00000000 00000000 00000000     idle............
 8002330:	31235653 00000000 32235653 00000000     SV#1....SV#2....
 8002340:	33235653 00000000 34235653 00000000     SV#3....SV#4....
 8002350:	35235653 00000000 36235653 00000000     SV#5....SV#6....
 8002360:	37235653 00000000 38235653 00000000     SV#7....SV#8....
 8002370:	39235653 00000000 31235653 00000030     SV#9....SV#10...
 8002380:	31235653 00000031 00000000 00000000     SV#11...........

08002390 <__func__.6665>:
 8002390:	54566863 65536f44 00004974 00000000     chVTDoSetI......

080023a0 <__func__.6673>:
 80023a0:	54566863 65526f44 49746573 00000000     chVTDoResetI....

080023b0 <__func__.6662>:
 80023b0:	63536863 61655268 00497964 00000000     chSchReadyI.....
 80023c0:	63617473 766f206b 6c667265 0000776f     stack overflow..

080023d0 <__func__.6718>:
 80023d0:	68546863 69784564 00005374 00000000     chThdExitS......

080023e0 <__func__.6674>:
 80023e0:	68546863 65724364 49657461 00000000     chThdCreateI....

080023f0 <__func__.6740>:
 80023f0:	68546863 73655264 49656d75 00000000     chThdResumeI....

08002400 <__func__.6728>:
 8002400:	68546863 73755364 646e6570 00000053     chThdSuspendS...

08002410 <__func__.6140>:
 8002410:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08002420 <__func__.5969>:
 8002420:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08002430 <__func__.6746>:
 8002430:	68546863 73655264 53656d75 00000000     chThdResumeS....

08002440 <ch_debug>:
 8002440:	6e69616d 18001600 08600404 1814100c     main......`.....
 8002450:	2221201c 00000000 00000000 00000000     . !"............

08002460 <__func__.6657>:
 8002460:	744d6863 6a624f78 49746365 0074696e     chMtxObjectInit.

08002470 <__func__.5969>:
 8002470:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08002480 <__func__.7104>:
 8002480:	74537473 41747261 6d72616c 00000000     stStartAlarm....

08002490 <__func__.7111>:
 8002490:	65537473 616c4174 00006d72 00000000     stSetAlarm......

080024a0 <__func__.7108>:
 80024a0:	53636461 74726174 00000000 00000000     adcStart........

080024b0 <__func__.7125>:
 80024b0:	53636461 74726174 766e6f43 69737265     adcStartConversi
 80024c0:	00496e6f 00000000 00000000 00000000     onI.............

080024d0 <__func__.7129>:
 80024d0:	53636461 43706f74 65766e6f 6f697372     adcStopConversio
 80024e0:	0000006e 00000000 00000000 00000000     n...............

080024f0 <__func__.5969>:
 80024f0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08002500 <__func__.7141>:
 8002500:	43636461 65766e6f 00007472 00000000     adcConvert......

08002510 <__func__.7182>:
 8002510:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 8002520:	00000065 00000000 00000000 00000000     e...............

08002530 <_stm32_dma_streams>:
 8002530:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8002540:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8002550:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8002560:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8002570:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8002580:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8002590:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80025a0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80025b0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 80025c0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80025d0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80025e0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080025f0 <__func__.7118>:
 80025f0:	5f636461 5f646c6c 72617473 00000074     adc_lld_start...

08002600 <pal_default_config>:
 8002600:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8002610:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8002620:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8002630:	04000000 00000040 02208001 00000000     ....@..... .....
 8002640:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8002650:	00060600 55000100 00000000 ffffffff     .......U........
 8002660:	00555055 00000fff 00000000 00000000     UPU.............
 8002670:	00000040 00000000 ffffffff 00000000     @...............
 8002680:	0000ffff 00000000 00000000 00000000     ................
 8002690:	00000000 ffffffff 00000000 0000ffff     ................
	...
 80026b0:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80026cc:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80026e8:	ffffffff 00000000 0000ffff 00000000     ................
	...

08002700 <adcgrpcfg1>:
 8002700:	00010000 00000000 08002221 00000000     ........!"......
 8002710:	40000000 00000000 00000000 00000000     ...@............
 8002720:	00000000 0000000b 00000000 00000000     ................

08002730 <adcgrpcfg2>:
 8002730:	00080001 08002201 08002221 00000000     ....."..!"......
 8002740:	40000000 00d800d8 00000000 00700000     ...@..........p.
 8002750:	00000211 18b62d8b 00000000 00000000     .....-..........
 8002760:	6e696c62 0072656b                       blinker.
