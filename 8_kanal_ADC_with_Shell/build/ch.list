
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f005 f9b5 	bl	8005540 <__early_init>
 80001d6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001da:	491c      	ldr	r1, [pc, #112]	; (800024c <endfiniloop+0xa>)
 80001dc:	4a1c      	ldr	r2, [pc, #112]	; (8000250 <endfiniloop+0xe>)

080001de <msloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <msloop>
 80001e8:	491a      	ldr	r1, [pc, #104]	; (8000254 <endfiniloop+0x12>)
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <endfiniloop+0x6>)

080001ec <psloop>:
 80001ec:	4291      	cmp	r1, r2
 80001ee:	bf3c      	itt	cc
 80001f0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f4:	e7fa      	bcc.n	80001ec <psloop>
 80001f6:	4918      	ldr	r1, [pc, #96]	; (8000258 <endfiniloop+0x16>)
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x1a>)
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <endfiniloop+0x1e>)

080001fc <dloop>:
 80001fc:	429a      	cmp	r2, r3
 80001fe:	bf3e      	ittt	cc
 8000200:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000204:	f842 0b04 	strcc.w	r0, [r2], #4
 8000208:	e7f8      	bcc.n	80001fc <dloop>
 800020a:	2000      	movs	r0, #0
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <endfiniloop+0x22>)
 800020e:	4a16      	ldr	r2, [pc, #88]	; (8000268 <endfiniloop+0x26>)

08000210 <bloop>:
 8000210:	4291      	cmp	r1, r2
 8000212:	bf3c      	itt	cc
 8000214:	f841 0b04 	strcc.w	r0, [r1], #4
 8000218:	e7fa      	bcc.n	8000210 <bloop>
 800021a:	f000 fd31 	bl	8000c80 <__late_init>
 800021e:	4c13      	ldr	r4, [pc, #76]	; (800026c <endfiniloop+0x2a>)
 8000220:	4d13      	ldr	r5, [pc, #76]	; (8000270 <endfiniloop+0x2e>)

08000222 <initloop>:
 8000222:	42ac      	cmp	r4, r5
 8000224:	da03      	bge.n	800022e <endinitloop>
 8000226:	f854 1b04 	ldr.w	r1, [r4], #4
 800022a:	4788      	blx	r1
 800022c:	e7f9      	b.n	8000222 <initloop>

0800022e <endinitloop>:
 800022e:	f009 fd67 	bl	8009d00 <main>
 8000232:	4c10      	ldr	r4, [pc, #64]	; (8000274 <endfiniloop+0x32>)
 8000234:	4d10      	ldr	r5, [pc, #64]	; (8000278 <endfiniloop+0x36>)

08000236 <finiloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endfiniloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <finiloop>

08000242 <endfiniloop>:
 8000242:	f000 bd25 	b.w	8000c90 <__default_exit>
 8000246:	0000      	.short	0x0000
 8000248:	20000800 	.word	0x20000800
 800024c:	20000000 	.word	0x20000000
 8000250:	20000400 	.word	0x20000400
 8000254:	20000400 	.word	0x20000400
 8000258:	0800b788 	.word	0x0800b788
 800025c:	20000800 	.word	0x20000800
 8000260:	20000d14 	.word	0x20000d14
 8000264:	20000d18 	.word	0x20000d18
 8000268:	200020ac 	.word	0x200020ac
 800026c:	080001c0 	.word	0x080001c0
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	00000000 	.word	0x00000000

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	2300      	movs	r3, #0
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	4628      	mov	r0, r5
 8000298:	47a0      	blx	r4
 800029a:	2000      	movs	r0, #0
 800029c:	f001 f918 	bl	80014d0 <chThdExit>

080002a0 <_port_switch_from_isr>:
 80002a0:	f000 fff6 	bl	8001290 <chSchDoReschedule>

080002a4 <_port_exit_from_isr>:
 80002a4:	df00      	svc	0
 80002a6:	e7fe      	b.n	80002a6 <_port_exit_from_isr+0x2>
	...

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>
	...

08000a50 <__aeabi_d2iz>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d215      	bcs.n	8000a86 <__aeabi_d2iz+0x36>
 8000a5a:	d511      	bpl.n	8000a80 <__aeabi_d2iz+0x30>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d912      	bls.n	8000a8c <__aeabi_d2iz+0x3c>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	4240      	negne	r0, r0
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8a:	d105      	bne.n	8000a98 <__aeabi_d2iz+0x48>
 8000a8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	bf08      	it	eq
 8000a92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__gesf2>:
 8000b40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b44:	e006      	b.n	8000b54 <__cmpsf2+0x4>
 8000b46:	bf00      	nop

08000b48 <__lesf2>:
 8000b48:	f04f 0c01 	mov.w	ip, #1
 8000b4c:	e002      	b.n	8000b54 <__cmpsf2+0x4>
 8000b4e:	bf00      	nop

08000b50 <__cmpsf2>:
 8000b50:	f04f 0c01 	mov.w	ip, #1
 8000b54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d011      	beq.n	8000b90 <__cmpsf2+0x40>
 8000b6c:	b001      	add	sp, #4
 8000b6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b72:	bf18      	it	ne
 8000b74:	ea90 0f01 	teqne	r0, r1
 8000b78:	bf58      	it	pl
 8000b7a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b7e:	bf88      	it	hi
 8000b80:	17c8      	asrhi	r0, r1, #31
 8000b82:	bf38      	it	cc
 8000b84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b88:	bf18      	it	ne
 8000b8a:	f040 0001 	orrne.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	d102      	bne.n	8000b9c <__cmpsf2+0x4c>
 8000b96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b9a:	d105      	bne.n	8000ba8 <__cmpsf2+0x58>
 8000b9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ba0:	d1e4      	bne.n	8000b6c <__cmpsf2+0x1c>
 8000ba2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ba6:	d0e1      	beq.n	8000b6c <__cmpsf2+0x1c>
 8000ba8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_cfrcmple>:
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	4661      	mov	r1, ip
 8000bb6:	e7ff      	b.n	8000bb8 <__aeabi_cfcmpeq>

08000bb8 <__aeabi_cfcmpeq>:
 8000bb8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bba:	f7ff ffc9 	bl	8000b50 <__cmpsf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bc8 <__aeabi_fcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cfcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cfcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cfcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffd2 	bl	8000bb0 <__aeabi_cfrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc8 	bl	8000bb0 <__aeabi_cfrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop
 8000c2c:	0000      	movs	r0, r0
	...

08000c30 <__aeabi_f2iz>:
 8000c30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c38:	d30f      	bcc.n	8000c5a <__aeabi_f2iz+0x2a>
 8000c3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_f2iz+0x30>
 8000c44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c50:	fa23 f002 	lsr.w	r0, r3, r2
 8000c54:	bf18      	it	ne
 8000c56:	4240      	negne	r0, r0
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	4770      	bx	lr
 8000c60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c64:	d101      	bne.n	8000c6a <__aeabi_f2iz+0x3a>
 8000c66:	0242      	lsls	r2, r0, #9
 8000c68:	d105      	bne.n	8000c76 <__aeabi_f2iz+0x46>
 8000c6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c6e:	bf08      	it	eq
 8000c70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	0000      	movs	r0, r0
	...

08000c80 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
	...

08000c90 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000c90:	e7fe      	b.n	8000c90 <__default_exit>
 8000c92:	bf00      	nop
	...

08000ca0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000ca0:	e7fe      	b.n	8000ca0 <_unhandled_exception>
 8000ca2:	bf00      	nop
	...

08000cb0 <_idle_thread>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <_idle_thread+0xc>)
 8000cb2:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <_idle_thread+0x10>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	e7fe      	b.n	8000cb8 <_idle_thread+0x8>
 8000cba:	bf00      	nop
 8000cbc:	20000d18 	.word	0x20000d18
 8000cc0:	0800a120 	.word	0x0800a120
	...

08000cd0 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <chSysInit+0x7c>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <chSysInit+0x80>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cd4:	481f      	ldr	r0, [pc, #124]	; (8000d54 <chSysInit+0x84>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000cd8:	2400      	movs	r4, #0
 8000cda:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cde:	4e1e      	ldr	r6, [pc, #120]	; (8000d58 <chSysInit+0x88>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000ce0:	4d1e      	ldr	r5, [pc, #120]	; (8000d5c <chSysInit+0x8c>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000ce2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000ce6:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000ce8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	68f2      	ldr	r2, [r6, #12]
 8000cee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cf2:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cf4:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	2610      	movs	r6, #16
 8000cfe:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000d00:	b083      	sub	sp, #12
 8000d02:	77de      	strb	r6, [r3, #31]
 8000d04:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000d08:	f000 f9ca 	bl	80010a0 <_scheduler_init>
  _vt_init();
 8000d0c:	f000 f908 	bl	8000f20 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000d10:	f000 fc96 	bl	8001640 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000d14:	f001 fcac 	bl	8002670 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000d18:	f001 fcf2 	bl	8002700 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	f000 fabe 	bl	80012a0 <_thread_init>
 8000d24:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000d28:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000d2a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000d2c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d2e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d32:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	490a      	ldr	r1, [pc, #40]	; (8000d60 <chSysInit+0x90>)
 8000d38:	6199      	str	r1, [r3, #24]

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  (void) chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa),
 8000d3a:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000d3e:	9400      	str	r4, [sp, #0]
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <chSysInit+0x94>)
 8000d42:	21d8      	movs	r1, #216	; 0xd8
 8000d44:	f000 fafc 	bl	8001340 <chThdCreateStatic>
                           IDLEPRIO, (tfunc_t)_idle_thread, NULL);
#endif
}
 8000d48:	b003      	add	sp, #12
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4c:	e000ed00 	.word	0xe000ed00
 8000d50:	05fa0300 	.word	0x05fa0300
 8000d54:	e0001000 	.word	0xe0001000
 8000d58:	e000edf0 	.word	0xe000edf0
 8000d5c:	20000d48 	.word	0x20000d48
 8000d60:	0800a130 	.word	0x0800a130
 8000d64:	08000cb1 	.word	0x08000cb1
	...

08000d70 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000d72:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <chSysHalt+0x8>)
 8000d74:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000d76:	e7fe      	b.n	8000d76 <chSysHalt+0x6>
 8000d78:	20000d18 	.word	0x20000d18
 8000d7c:	00000000 	.word	0x00000000

08000d80 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8000d80:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8000d82:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8000d84:	d512      	bpl.n	8000dac <chSysIntegrityCheckI+0x2c>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <chSysIntegrityCheckI+0xb8>)
 8000d88:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000d8a:	4291      	cmp	r1, r2
 8000d8c:	d042      	beq.n	8000e14 <chSysIntegrityCheckI+0x94>
 8000d8e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8000d90:	6809      	ldr	r1, [r1, #0]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000d92:	4291      	cmp	r1, r2
      n++;
 8000d94:	f103 0301 	add.w	r3, r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000d98:	d1fa      	bne.n	8000d90 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8000d9a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000d9c:	428c      	cmp	r4, r1
 8000d9e:	d036      	beq.n	8000e0e <chSysIntegrityCheckI+0x8e>
      n--;
      tp = tp->p_prev;
 8000da0:	6864      	ldr	r4, [r4, #4]
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000da2:	4294      	cmp	r4, r2
      n--;
 8000da4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000da8:	d1fa      	bne.n	8000da0 <chSysIntegrityCheckI+0x20>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000daa:	bb83      	cbnz	r3, 8000e0e <chSysIntegrityCheckI+0x8e>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8000dac:	0783      	lsls	r3, r0, #30
 8000dae:	d514      	bpl.n	8000dda <chSysIntegrityCheckI+0x5a>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <chSysIntegrityCheckI+0xb8>)
 8000db2:	4614      	mov	r4, r2
 8000db4:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000db8:	42a1      	cmp	r1, r4
 8000dba:	d031      	beq.n	8000e20 <chSysIntegrityCheckI+0xa0>
 8000dbc:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 8000dbe:	6809      	ldr	r1, [r1, #0]
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000dc0:	42a1      	cmp	r1, r4
      n++;
 8000dc2:	f103 0301 	add.w	r3, r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000dc6:	d1fa      	bne.n	8000dbe <chSysIntegrityCheckI+0x3e>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8000dc8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000dca:	428a      	cmp	r2, r1
 8000dcc:	d01f      	beq.n	8000e0e <chSysIntegrityCheckI+0x8e>
      n--;
      vtp = vtp->vt_prev;
 8000dce:	6852      	ldr	r2, [r2, #4]
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000dd0:	42a2      	cmp	r2, r4
      n--;
 8000dd2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000dd6:	d1fa      	bne.n	8000dce <chSysIntegrityCheckI+0x4e>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000dd8:	b9cb      	cbnz	r3, 8000e0e <chSysIntegrityCheckI+0x8e>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8000dda:	f010 0004 	ands.w	r0, r0, #4
 8000dde:	d014      	beq.n	8000e0a <chSysIntegrityCheckI+0x8a>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <chSysIntegrityCheckI+0xb8>)
 8000de2:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d021      	beq.n	8000e2c <chSysIntegrityCheckI+0xac>
 8000de8:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 8000dea:	691b      	ldr	r3, [r3, #16]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8000dec:	4293      	cmp	r3, r2
      n++;
 8000dee:	f100 0001 	add.w	r0, r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8000df2:	d1fa      	bne.n	8000dea <chSysIntegrityCheckI+0x6a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8000df4:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d009      	beq.n	8000e0e <chSysIntegrityCheckI+0x8e>
      n--;
      tp = tp->p_older;
 8000dfa:	6949      	ldr	r1, [r1, #20]
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000dfc:	4291      	cmp	r1, r2
      n--;
 8000dfe:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000e02:	d1fa      	bne.n	8000dfa <chSysIntegrityCheckI+0x7a>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000e04:	3000      	adds	r0, #0
 8000e06:	bf18      	it	ne
 8000e08:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8000e0a:	bc10      	pop	{r4}
 8000e0c:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8000e0e:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8000e10:	bc10      	pop	{r4}
 8000e12:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8000e14:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000e16:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8000e18:	bf18      	it	ne
 8000e1a:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000e1c:	d1c0      	bne.n	8000da0 <chSysIntegrityCheckI+0x20>
 8000e1e:	e7c5      	b.n	8000dac <chSysIntegrityCheckI+0x2c>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8000e20:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000e22:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8000e24:	bf18      	it	ne
 8000e26:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000e28:	d1d1      	bne.n	8000dce <chSysIntegrityCheckI+0x4e>
 8000e2a:	e7d6      	b.n	8000dda <chSysIntegrityCheckI+0x5a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8000e2c:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000e2e:	4299      	cmp	r1, r3
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8000e30:	f04f 0000 	mov.w	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000e34:	d1e1      	bne.n	8000dfa <chSysIntegrityCheckI+0x7a>
 8000e36:	e7e8      	b.n	8000e0a <chSysIntegrityCheckI+0x8a>
 8000e38:	20000d18 	.word	0x20000d18
 8000e3c:	00000000 	.word	0x00000000

08000e40 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000e44:	4d1b      	ldr	r5, [pc, #108]	; (8000eb4 <chSysTimerHandlerI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000e46:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000e4a:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000e4c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e50:	68a3      	ldr	r3, [r4, #8]
 8000e52:	1a42      	subs	r2, r0, r1
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f105 091c 	add.w	r9, r5, #28
 8000e5a:	d31a      	bcc.n	8000e92 <chSysTimerHandlerI+0x52>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000e5c:	2600      	movs	r6, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e5e:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000e62:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000e64:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000e68:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000e6a:	454a      	cmp	r2, r9
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000e6c:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000e6e:	f8c2 9004 	str.w	r9, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000e72:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000e74:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000e76:	d018      	beq.n	8000eaa <chSysTimerHandlerI+0x6a>
 8000e78:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000e7c:	6920      	ldr	r0, [r4, #16]
 8000e7e:	47d0      	blx	sl
 8000e80:	f388 8811 	msr	BASEPRI, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000e84:	69ec      	ldr	r4, [r5, #28]
 8000e86:	6a78      	ldr	r0, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000e88:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000e8a:	68a3      	ldr	r3, [r4, #8]
 8000e8c:	1a42      	subs	r2, r0, r1
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d9e7      	bls.n	8000e62 <chSysTimerHandlerI+0x22>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000e92:	454c      	cmp	r4, r9
 8000e94:	d00c      	beq.n	8000eb0 <chSysTimerHandlerI+0x70>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000e96:	440b      	add	r3, r1
 8000e98:	1a1b      	subs	r3, r3, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	bf98      	it	ls
 8000e9e:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000ea0:	4418      	add	r0, r3
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 8000ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea6:	f001 bdc3 	b.w	8002a30 <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000eaa:	f001 fdb9 	bl	8002a20 <stStopAlarm>
 8000eae:	e7e3      	b.n	8000e78 <chSysTimerHandlerI+0x38>
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	20000d18 	.word	0x20000d18
	...

08000ec0 <chSysGetStatusAndLockX>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8000ec0:	f3ef 8012 	mrs	r0, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8000ec4:	b920      	cbnz	r0, 8000ed0 <chSysGetStatusAndLockX+0x10>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ec6:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000eca:	2320      	movs	r3, #32
 8000ecc:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
	...

08000ee0 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 8000ee0:	b968      	cbnz	r0, 8000efe <chSysRestoreStatusX+0x1e>
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8000ee2:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ee4:	f3ef 8405 	mrs	r4, IPSR

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8000ee8:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8000eec:	b114      	cbz	r4, 8000ef4 <chSysRestoreStatusX+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000eee:	f380 8811 	msr	BASEPRI, r0
 8000ef2:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8000ef4:	f000 f9bc 	bl	8001270 <chSchRescheduleS>
 8000ef8:	f384 8811 	msr	BASEPRI, r4
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	4770      	bx	lr

08000f00 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <chSysPolledDelayX+0x10>)
 8000f02:	6851      	ldr	r1, [r2, #4]
 8000f04:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000f06:	1a5b      	subs	r3, r3, r1
 8000f08:	4283      	cmp	r3, r0
 8000f0a:	d3fb      	bcc.n	8000f04 <chSysPolledDelayX+0x4>
  }
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e0001000 	.word	0xe0001000
	...

08000f20 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000f26:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000f2a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f2c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000f2e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000f30:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000d18 	.word	0x20000d18
 8000f3c:	00000000 	.word	0x00000000

08000f40 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f42:	4e1c      	ldr	r6, [pc, #112]	; (8000fb4 <chVTDoSetI+0x74>)
 8000f44:	4634      	mov	r4, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000f46:	2901      	cmp	r1, #1
 8000f48:	bf98      	it	ls
 8000f4a:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f4c:	f854 7f1c 	ldr.w	r7, [r4, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000f50:	6103      	str	r3, [r0, #16]
 8000f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f56:	42a7      	cmp	r7, r4
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000f58:	4605      	mov	r5, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000f5a:	60c2      	str	r2, [r0, #12]
 8000f5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f5e:	d01e      	beq.n	8000f9e <chVTDoSetI+0x5e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000f60:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000f62:	68bb      	ldr	r3, [r7, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000f64:	4408      	add	r0, r1
 8000f66:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000f68:	429c      	cmp	r4, r3
 8000f6a:	d315      	bcc.n	8000f98 <chVTDoSetI+0x58>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8000f6c:	69f3      	ldr	r3, [r6, #28]
  while (p->vt_delta < delta) {
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	4294      	cmp	r4, r2
 8000f72:	d904      	bls.n	8000f7e <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000f74:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000f76:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	42a2      	cmp	r2, r4
 8000f7c:	d3fa      	bcc.n	8000f74 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000f82:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000f84:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 8000f86:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 8000f88:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000f8a:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000f90:	1b14      	subs	r4, r2, r4
 8000f92:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f94:	6271      	str	r1, [r6, #36]	; 0x24
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000f98:	f001 fd4a 	bl	8002a30 <stSetAlarm>
 8000f9c:	e7e6      	b.n	8000f6c <chVTDoSetI+0x2c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000f9e:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 8000fa0:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8000fa2:	6235      	str	r5, [r6, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 8000fa4:	4408      	add	r0, r1
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000fa6:	602f      	str	r7, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fa8:	606f      	str	r7, [r5, #4]
      vtp->vt_delta = delay;
 8000faa:	60a9      	str	r1, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 8000fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000fb0:	f001 bd2e 	b.w	8002a10 <stStartAlarm>
 8000fb4:	20000d18 	.word	0x20000d18
	...

08000fc0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <chVTDoResetI+0x68>)
 8000fc2:	69da      	ldr	r2, [r3, #28]
 8000fc4:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000fc6:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000fc8:	d00f      	beq.n	8000fea <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000fca:	6841      	ldr	r1, [r0, #4]
 8000fcc:	6802      	ldr	r2, [r0, #0]
 8000fce:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000fd0:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000fd2:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000fd4:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000fd6:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000fd8:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8000fda:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000fdc:	d003      	beq.n	8000fe6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000fde:	6883      	ldr	r3, [r0, #8]
 8000fe0:	6891      	ldr	r1, [r2, #8]
 8000fe2:	440b      	add	r3, r1
 8000fe4:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000fe6:	bc10      	pop	{r4}
 8000fe8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000fea:	4618      	mov	r0, r3
 8000fec:	6811      	ldr	r1, [r2, #0]
 8000fee:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000ff2:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ff4:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000ff6:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 8000ff8:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000ffa:	d012      	beq.n	8001022 <chVTDoResetI+0x62>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000ffc:	6892      	ldr	r2, [r2, #8]
 8000ffe:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001000:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001002:	1883      	adds	r3, r0, r2
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	608b      	str	r3, [r1, #8]
 800100a:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800100c:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800100e:	4293      	cmp	r3, r2
 8001010:	d9e9      	bls.n	8000fe6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001012:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001014:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001016:	bf98      	it	ls
 8001018:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800101a:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800101c:	bc10      	pop	{r4}
 800101e:	f001 bd07 	b.w	8002a30 <stSetAlarm>
 8001022:	bc10      	pop	{r4}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8001024:	f001 bcfc 	b.w	8002a20 <stStopAlarm>
 8001028:	20000d18 	.word	0x20000d18
 800102c:	00000000 	.word	0x00000000

08001030 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001030:	b410      	push	{r4}
 8001032:	2320      	movs	r3, #32
 8001034:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001038:	7f03      	ldrb	r3, [r0, #28]
 800103a:	2b07      	cmp	r3, #7
 800103c:	d80e      	bhi.n	800105c <wakeup+0x2c>
 800103e:	e8df f003 	tbb	[pc, r3]
 8001042:	0d26      	.short	0x0d26
 8001044:	0408220d 	.word	0x0408220d
 8001048:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800104a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800104c:	6893      	ldr	r3, [r2, #8]
 800104e:	3301      	adds	r3, #1
 8001050:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001052:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001056:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001058:	6802      	ldr	r2, [r0, #0]
 800105a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800105c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001060:	2200      	movs	r2, #0
 8001062:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <wakeup+0x68>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001066:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001068:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800106a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	428a      	cmp	r2, r1
 8001070:	d2fb      	bcs.n	800106a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001076:	6003      	str	r3, [r0, #0]
 8001078:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800107a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800107c:	6058      	str	r0, [r3, #4]
 800107e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001082:	bc10      	pop	{r4}
 8001084:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8001086:	6a03      	ldr	r3, [r0, #32]
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
    break;
 800108c:	e7e6      	b.n	800105c <wakeup+0x2c>
 800108e:	2300      	movs	r3, #0
 8001090:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001094:	bc10      	pop	{r4}
 8001096:	4770      	bx	lr
 8001098:	20000d18 	.word	0x20000d18
 800109c:	00000000 	.word	0x00000000

080010a0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80010a2:	2200      	movs	r2, #0
 80010a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80010a6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80010a8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80010aa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	4770      	bx	lr
 80010b0:	20000d18 	.word	0x20000d18
	...

080010c0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010c0:	2200      	movs	r2, #0
 80010c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <chSchReadyI+0x24>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80010c6:	b410      	push	{r4}
 80010c8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010ca:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80010cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d2fb      	bcs.n	80010cc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80010d8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80010da:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80010de:	605c      	str	r4, [r3, #4]

  return tp;
}
 80010e0:	bc10      	pop	{r4}
 80010e2:	4770      	bx	lr
 80010e4:	20000d18 	.word	0x20000d18
	...

080010f0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <chSchGoSleepS+0x20>)
 80010f2:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80010f4:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80010f6:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 80010f8:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80010fe:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001100:	6043      	str	r3, [r0, #4]
 8001102:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8001104:	4610      	mov	r0, r2
}
 8001106:	bc10      	pop	{r4}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001108:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800110a:	f7ff b8b9 	b.w	8000280 <_port_switch>
 800110e:	bf00      	nop
 8001110:	20000d18 	.word	0x20000d18
	...

08001120 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001120:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001122:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001124:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001126:	d012      	beq.n	800114e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001128:	4c0c      	ldr	r4, [pc, #48]	; (800115c <chSchGoSleepTimeoutS+0x3c>)
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <chSchGoSleepTimeoutS+0x40>)
 800112c:	69a3      	ldr	r3, [r4, #24]
 800112e:	4605      	mov	r5, r0
 8001130:	a801      	add	r0, sp, #4
 8001132:	f7ff ff05 	bl	8000f40 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001136:	4628      	mov	r0, r5
 8001138:	f7ff ffda 	bl	80010f0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800113c:	9b04      	ldr	r3, [sp, #16]
 800113e:	b113      	cbz	r3, 8001146 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001140:	a801      	add	r0, sp, #4
 8001142:	f7ff ff3d 	bl	8000fc0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001146:	69a3      	ldr	r3, [r4, #24]
}
 8001148:	6a18      	ldr	r0, [r3, #32]
 800114a:	b007      	add	sp, #28
 800114c:	bd30      	pop	{r4, r5, pc}
 800114e:	4c03      	ldr	r4, [pc, #12]	; (800115c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001150:	f7ff ffce 	bl	80010f0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8001154:	69a3      	ldr	r3, [r4, #24]
}
 8001156:	6a18      	ldr	r0, [r3, #32]
 8001158:	b007      	add	sp, #28
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	20000d18 	.word	0x20000d18
 8001160:	08001031 	.word	0x08001031
	...

08001170 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001172:	b470      	push	{r4, r5, r6}
 8001174:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001176:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001178:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800117a:	68a8      	ldr	r0, [r5, #8]
 800117c:	68a1      	ldr	r1, [r4, #8]
 800117e:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001180:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001184:	d80b      	bhi.n	800119e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001186:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001188:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4291      	cmp	r1, r2
 800118e:	d9fb      	bls.n	8001188 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001194:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001196:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001198:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800119a:	bc70      	pop	{r4, r5, r6}
 800119c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800119e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80011a0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 80011a2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011a4:	6891      	ldr	r1, [r2, #8]
 80011a6:	4288      	cmp	r0, r1
 80011a8:	d9fb      	bls.n	80011a2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011aa:	6850      	ldr	r0, [r2, #4]
 80011ac:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80011ae:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80011b0:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011b2:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 80011b4:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80011b6:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 80011b8:	4629      	mov	r1, r5
 80011ba:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80011bc:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80011be:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80011c0:	f7ff b85e 	b.w	8000280 <_port_switch>
 80011c4:	20000d18 	.word	0x20000d18
	...

080011d0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <chSchIsPreemptionRequired+0x14>)
 80011d2:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 80011d4:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80011d6:	6890      	ldr	r0, [r2, #8]
 80011d8:	689b      	ldr	r3, [r3, #8]
#endif
}
 80011da:	4298      	cmp	r0, r3
 80011dc:	bf94      	ite	ls
 80011de:	2000      	movls	r0, #0
 80011e0:	2001      	movhi	r0, #1
 80011e2:	4770      	bx	lr
 80011e4:	20000d18 	.word	0x20000d18
	...

080011f0 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <chSchDoRescheduleBehind+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80011f2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 80011f4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 80011f6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80011f8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 80011fa:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80011fc:	605a      	str	r2, [r3, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011fe:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001200:	7701      	strb	r1, [r0, #28]
 8001202:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001204:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001206:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001208:	7725      	strb	r5, [r4, #28]
 800120a:	e000      	b.n	800120e <chSchDoRescheduleBehind+0x1e>
 800120c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	428a      	cmp	r2, r1
 8001212:	d2fb      	bcs.n	800120c <chSchDoRescheduleBehind+0x1c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001218:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800121a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800121c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800121e:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 8001220:	bc30      	pop	{r4, r5}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001222:	f7ff b82d 	b.w	8000280 <_port_switch>
 8001226:	bf00      	nop
 8001228:	20000d18 	.word	0x20000d18
 800122c:	00000000 	.word	0x00000000

08001230 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001232:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8001234:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001236:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001238:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800123a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800123c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800123e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001240:	7701      	strb	r1, [r0, #28]
 8001242:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001244:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001246:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001248:	7725      	strb	r5, [r4, #28]
 800124a:	e000      	b.n	800124e <chSchDoRescheduleAhead+0x1e>
 800124c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	428a      	cmp	r2, r1
 8001252:	d8fb      	bhi.n	800124c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001258:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800125a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800125c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800125e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001260:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001262:	f7ff b80d 	b.w	8000280 <_port_switch>
 8001266:	bf00      	nop
 8001268:	20000d18 	.word	0x20000d18
 800126c:	00000000 	.word	0x00000000

08001270 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <chSchRescheduleS+0x14>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8001276:	6892      	ldr	r2, [r2, #8]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	d800      	bhi.n	8001280 <chSchRescheduleS+0x10>
 800127e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001280:	f7ff bfd6 	b.w	8001230 <chSchDoRescheduleAhead>
 8001284:	20000d18 	.word	0x20000d18
	...

08001290 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001290:	f7ff bfce 	b.w	8001230 <chSchDoRescheduleAhead>
	...

080012a0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012a2:	4c0d      	ldr	r4, [pc, #52]	; (80012d8 <_thread_init+0x38>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80012a4:	63c1      	str	r1, [r0, #60]	; 0x3c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012a6:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80012a8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80012aa:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80012ac:	f100 0128 	add.w	r1, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80012b0:	f04f 0e02 	mov.w	lr, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80012b4:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80012b6:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012ba:	6145      	str	r5, [r0, #20]
 80012bc:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80012be:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80012c2:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80012c4:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80012c6:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80012c8:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80012ca:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 80012cc:	6128      	str	r0, [r5, #16]
 80012ce:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80012d0:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012d2:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80012d4:	62c1      	str	r1, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	20000d18 	.word	0x20000d18
 80012dc:	00000000 	.word	0x00000000

080012e0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012e2:	4d13      	ldr	r5, [pc, #76]	; (8001330 <chThdCreateI+0x50>)
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 80012e4:	9f05      	ldr	r7, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012e6:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
 80012ea:	eb00 060e 	add.w	r6, r0, lr
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80012ee:	6969      	ldr	r1, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80012f0:	60c6      	str	r6, [r0, #12]
 80012f2:	f840 300e 	str.w	r3, [r0, lr]
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <chThdCreateI+0x54>)
 80012f8:	6077      	str	r7, [r6, #4]
 80012fa:	6233      	str	r3, [r6, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80012fc:	f04f 0e02 	mov.w	lr, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001300:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001302:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001304:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001306:	2701      	movs	r7, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001308:	f100 0228 	add.w	r2, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800130c:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001310:	6105      	str	r5, [r0, #16]
 8001312:	6141      	str	r1, [r0, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001314:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001318:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800131a:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800131c:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800131e:	6343      	str	r3, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001320:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 8001322:	6108      	str	r0, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001324:	6246      	str	r6, [r0, #36]	; 0x24
 8001326:	6168      	str	r0, [r5, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001328:	6282      	str	r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800132a:	62c2      	str	r2, [r0, #44]	; 0x2c
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	20000d18 	.word	0x20000d18
 8001334:	08000291 	.word	0x08000291
	...

08001340 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	2520      	movs	r5, #32
 8001346:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800134a:	4e14      	ldr	r6, [pc, #80]	; (800139c <chThdCreateStatic+0x5c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800134c:	3924      	subs	r1, #36	; 0x24
 800134e:	1845      	adds	r5, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001350:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001352:	60c5      	str	r5, [r0, #12]
 8001354:	5043      	str	r3, [r0, r1]
 8001356:	9b06      	ldr	r3, [sp, #24]
 8001358:	606b      	str	r3, [r5, #4]
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <chThdCreateStatic+0x60>)
 800135c:	6229      	str	r1, [r5, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800135e:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001360:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001362:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001364:	f100 0e24 	add.w	lr, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001368:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800136c:	2101      	movs	r1, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800136e:	6082      	str	r2, [r0, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001370:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001372:	6106      	str	r6, [r0, #16]
 8001374:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001376:	63c2      	str	r2, [r0, #60]	; 0x3c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001378:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800137a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800137c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800137e:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001380:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001382:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001384:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001388:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800138a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800138c:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800138e:	f7ff feef 	bl	8001170 <chSchWakeupS>
 8001392:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8001396:	4620      	mov	r0, r4
 8001398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800139a:	bf00      	nop
 800139c:	20000d18 	.word	0x20000d18
 80013a0:	08000291 	.word	0x08000291
	...

080013b0 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 80013b0:	b508      	push	{r3, lr}
 80013b2:	2320      	movs	r3, #32
 80013b4:	f383 8811 	msr	BASEPRI, r3
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 80013b8:	f7ff fe82 	bl	80010c0 <chSchReadyI>
 80013bc:	2300      	movs	r3, #0
 80013be:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  tp = chThdStartI(tp);
  chSysUnlock();

  return tp;
}
 80013c2:	bd08      	pop	{r3, pc}
	...

080013d0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80013d0:	b510      	push	{r4, lr}
 80013d2:	2320      	movs	r3, #32
 80013d4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <chThdSetPriority+0x2c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 80013de:	6899      	ldr	r1, [r3, #8]
 80013e0:	428c      	cmp	r4, r1
 80013e2:	d001      	beq.n	80013e8 <chThdSetPriority+0x18>
 80013e4:	4281      	cmp	r1, r0
 80013e6:	d200      	bcs.n	80013ea <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 80013e8:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 80013ea:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 80013ec:	f7ff ff40 	bl	8001270 <chSchRescheduleS>
 80013f0:	2300      	movs	r3, #0
 80013f2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 80013f6:	4620      	mov	r0, r4
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	bf00      	nop
 80013fc:	20000d18 	.word	0x20000d18

08001400 <chThdTerminate>:
 8001400:	2320      	movs	r3, #32
 8001402:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8001406:	7f43      	ldrb	r3, [r0, #29]
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	7743      	strb	r3, [r0, #29]
 800140e:	2300      	movs	r3, #0
 8001410:	f383 8811 	msr	BASEPRI, r3
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
	...

08001420 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001420:	b508      	push	{r3, lr}
 8001422:	4601      	mov	r1, r0
 8001424:	2320      	movs	r3, #32
 8001426:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800142a:	2008      	movs	r0, #8
 800142c:	f7ff fe78 	bl	8001120 <chSchGoSleepTimeoutS>
 8001430:	2300      	movs	r3, #0
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	bd08      	pop	{r3, pc}
	...

08001440 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8001440:	b508      	push	{r3, lr}
 8001442:	2320      	movs	r3, #32
 8001444:	f383 8811 	msr	BASEPRI, r3
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 800144e:	1a41      	subs	r1, r0, r1
 8001450:	d002      	beq.n	8001458 <chThdSleepUntil+0x18>
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff fe64 	bl	8001120 <chSchGoSleepTimeoutS>
 8001458:	2300      	movs	r3, #0
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	bd08      	pop	{r3, pc}

08001460 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8001460:	b508      	push	{r3, lr}
 8001462:	2320      	movs	r3, #32
 8001464:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <chThdYield+0x24>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800146e:	6892      	ldr	r2, [r2, #8]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	d301      	bcc.n	800147a <chThdYield+0x1a>
    chSchDoRescheduleBehind();
 8001476:	f7ff febb 	bl	80011f0 <chSchDoRescheduleBehind>
 800147a:	2300      	movs	r3, #0
 800147c:	f383 8811 	msr	BASEPRI, r3
 8001480:	bd08      	pop	{r3, pc}
 8001482:	bf00      	nop
 8001484:	20000d18 	.word	0x20000d18
	...

08001490 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001490:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <chThdExitS+0x3c>)
 8001494:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001496:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001498:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800149a:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800149e:	429d      	cmp	r5, r3
 80014a0:	d007      	beq.n	80014b2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe0a 	bl	80010c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80014ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d1f7      	bne.n	80014a2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80014b2:	7f63      	ldrb	r3, [r4, #29]
 80014b4:	079b      	lsls	r3, r3, #30
 80014b6:	d104      	bne.n	80014c2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80014b8:	6963      	ldr	r3, [r4, #20]
 80014ba:	6922      	ldr	r2, [r4, #16]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	6922      	ldr	r2, [r4, #16]
 80014c0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014c2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80014c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014c8:	f7ff be12 	b.w	80010f0 <chSchGoSleepS>
 80014cc:	20000d18 	.word	0x20000d18

080014d0 <chThdExit>:
 80014d0:	2320      	movs	r3, #32
 80014d2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80014d6:	f7ff bfdb 	b.w	8001490 <chThdExitS>
 80014da:	bf00      	nop
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4604      	mov	r4, r0
 80014e4:	2320      	movs	r3, #32
 80014e6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 80014ea:	7f03      	ldrb	r3, [r0, #28]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d007      	beq.n	8001500 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 80014f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80014f4:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 80014f6:	2009      	movs	r0, #9
 80014f8:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 80014fa:	6263      	str	r3, [r4, #36]	; 0x24
 80014fc:	f7ff fdf8 	bl	80010f0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8001500:	6a25      	ldr	r5, [r4, #32]
 8001502:	2300      	movs	r3, #0
 8001504:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8001508:	4620      	mov	r0, r4
 800150a:	f000 f8c9 	bl	80016a0 <chThdRelease>
#endif

  return msg;
}
 800150e:	4628      	mov	r0, r5
 8001510:	bd38      	pop	{r3, r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	20000d18 	.word	0x20000d18
	...

08001520 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8001520:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001522:	4c05      	ldr	r4, [pc, #20]	; (8001538 <chThdSuspendS+0x18>)
 8001524:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8001526:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8001528:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800152a:	621a      	str	r2, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800152c:	2003      	movs	r0, #3
 800152e:	f7ff fddf 	bl	80010f0 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 8001532:	69a3      	ldr	r3, [r4, #24]
}
 8001534:	6a18      	ldr	r0, [r3, #32]
 8001536:	bd10      	pop	{r4, pc}
 8001538:	20000d18 	.word	0x20000d18
 800153c:	00000000 	.word	0x00000000

08001540 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001540:	6803      	ldr	r3, [r0, #0]
 8001542:	b12b      	cbz	r3, 8001550 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001544:	2200      	movs	r2, #0
 8001546:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001548:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800154a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800154c:	f7ff bdb8 	b.w	80010c0 <chSchReadyI>
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
	...

08001560 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001560:	b161      	cbz	r1, 800157c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001564:	b410      	push	{r4}
 8001566:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001568:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800156a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800156c:	2004      	movs	r0, #4
 800156e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001572:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001574:	6053      	str	r3, [r2, #4]
}
 8001576:	bc10      	pop	{r4}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001578:	f7ff bdd2 	b.w	8001120 <chSchGoSleepTimeoutS>
}
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000d18 	.word	0x20000d18
	...

08001590 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001590:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001592:	4290      	cmp	r0, r2
 8001594:	d009      	beq.n	80015aa <chThdDequeueNextI+0x1a>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001596:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001598:	6814      	ldr	r4, [r2, #0]
 800159a:	6004      	str	r4, [r0, #0]
 800159c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800159e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80015a0:	6211      	str	r1, [r2, #32]
  (void) chSchReadyI(tp);
 80015a2:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80015a4:	bc10      	pop	{r4}
 80015a6:	f7ff bd8b 	b.w	80010c0 <chSchReadyI>
 80015aa:	4770      	bx	lr
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80015b0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80015b2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 80015b4:	4298      	cmp	r0, r3
 80015b6:	d00b      	beq.n	80015d0 <chThdDequeueAllI+0x20>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	6022      	str	r2, [r4, #0]
 80015c0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80015c2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80015c4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 80015c6:	f7ff fd7b 	bl	80010c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	429c      	cmp	r4, r3
 80015ce:	d1f5      	bne.n	80015bc <chThdDequeueAllI+0xc>
 80015d0:	bd38      	pop	{r3, r4, r5, pc}
 80015d2:	bf00      	nop
	...

080015e0 <chTMStartMeasurementX>:
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <chTMStartMeasurementX+0x8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80015e4:	6083      	str	r3, [r0, #8]
 80015e6:	4770      	bx	lr
 80015e8:	e0001000 	.word	0xe0001000
 80015ec:	00000000 	.word	0x00000000

080015f0 <chTMStopMeasurementX>:
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015f2:	4910      	ldr	r1, [pc, #64]	; (8001634 <chTMStopMeasurementX+0x44>)
 80015f4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015f6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80015f8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015fa:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015fc:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 80015fe:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001600:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8001608:	18e4      	adds	r4, r4, r3
 800160a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800160e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8001610:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001612:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001614:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001616:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800161a:	d805      	bhi.n	8001628 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800161c:	6802      	ldr	r2, [r0, #0]
 800161e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8001620:	bf38      	it	cc
 8001622:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001624:	bcf0      	pop	{r4, r5, r6, r7}
 8001626:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001628:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e0001000 	.word	0xe0001000
 8001634:	20000d18 	.word	0x20000d18
	...

08001640 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001640:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001642:	4c0c      	ldr	r4, [pc, #48]	; (8001674 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001644:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001646:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800164c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800164e:	2600      	movs	r6, #0
 8001650:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001652:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001654:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8001656:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8001658:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800165a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800165c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001660:	f7ff ffbe 	bl	80015e0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8001664:	4668      	mov	r0, sp
 8001666:	f7ff ffc3 	bl	80015f0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800166a:	9b02      	ldr	r3, [sp, #8]
 800166c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800166e:	b006      	add	sp, #24
 8001670:	bdd0      	pop	{r4, r6, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000d18 	.word	0x20000d18
	...

08001680 <chThdAddRef>:
 8001680:	2320      	movs	r3, #32
 8001682:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 8001686:	7f83      	ldrb	r3, [r0, #30]
 8001688:	3301      	adds	r3, #1
 800168a:	7783      	strb	r3, [r0, #30]
 800168c:	2300      	movs	r3, #0
 800168e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8001692:	4770      	bx	lr
	...

080016a0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80016a0:	4601      	mov	r1, r0
 80016a2:	2320      	movs	r3, #32
 80016a4:	f383 8811 	msr	BASEPRI, r3
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 80016a8:	7f83      	ldrb	r3, [r0, #30]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	7783      	strb	r3, [r0, #30]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 80016b6:	b913      	cbnz	r3, 80016be <chThdRelease+0x1e>
 80016b8:	7f03      	ldrb	r3, [r0, #28]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	d000      	beq.n	80016c0 <chThdRelease+0x20>
 80016be:	4770      	bx	lr
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80016c0:	7f43      	ldrb	r3, [r0, #29]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d002      	beq.n	80016d0 <chThdRelease+0x30>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d007      	beq.n	80016de <chThdRelease+0x3e>
 80016ce:	4770      	bx	lr
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80016d0:	6943      	ldr	r3, [r0, #20]
 80016d2:	6902      	ldr	r2, [r0, #16]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	6902      	ldr	r2, [r0, #16]
 80016d8:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 80016da:	f001 b879 	b.w	80027d0 <chHeapFree>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80016de:	6943      	ldr	r3, [r0, #20]
 80016e0:	6902      	ldr	r2, [r0, #16]
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	6902      	ldr	r2, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 80016e6:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80016e8:	6153      	str	r3, [r2, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 80016ea:	f001 b921 	b.w	8002930 <chPoolFree>
 80016ee:	bf00      	nop

080016f0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	4616      	mov	r6, r2
 80016f6:	461f      	mov	r7, r3
 80016f8:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 80016fa:	f001 f821 	bl	8002740 <chHeapAlloc>
  if (wsp == NULL) {
 80016fe:	b198      	cbz	r0, 8001728 <chThdCreateFromHeap+0x38>
 8001700:	2320      	movs	r3, #32
 8001702:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8001706:	9b08      	ldr	r3, [sp, #32]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4632      	mov	r2, r6
 800170c:	463b      	mov	r3, r7
 800170e:	4629      	mov	r1, r5
 8001710:	f7ff fde6 	bl	80012e0 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8001714:	2301      	movs	r3, #1
 8001716:	7743      	strb	r3, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8001718:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 800171a:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 800171c:	f7ff fd28 	bl	8001170 <chSchWakeupS>
 8001720:	2300      	movs	r3, #0
 8001722:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 8001726:	4620      	mov	r0, r4
}
 8001728:	b003      	add	sp, #12
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172c:	0000      	movs	r0, r0
	...

08001730 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
                                    tfunc_t pf, void *arg) {
 8001730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	460e      	mov	r6, r1
 8001738:	4617      	mov	r7, r2
 800173a:	4698      	mov	r8, r3
 800173c:	4605      	mov	r5, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 800173e:	f001 f8df 	bl	8002900 <chPoolAlloc>
  if (wsp == NULL) {
 8001742:	b1a0      	cbz	r0, 800176e <chThdCreateFromMemoryPool+0x3e>
 8001744:	2320      	movs	r3, #32
 8001746:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 800174a:	6869      	ldr	r1, [r5, #4]
 800174c:	f8cd 8000 	str.w	r8, [sp]
 8001750:	463b      	mov	r3, r7
 8001752:	4632      	mov	r2, r6
 8001754:	f7ff fdc4 	bl	80012e0 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8001758:	2302      	movs	r3, #2
 800175a:	7743      	strb	r3, [r0, #29]
  tp->p_mpool = mp;
 800175c:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 800175e:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8001760:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8001762:	f7ff fd05 	bl	8001170 <chSchWakeupS>
 8001766:	2300      	movs	r3, #0
 8001768:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 800176c:	4620      	mov	r0, r4
}
 800176e:	b002      	add	sp, #8
 8001770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001780 <chRegFirstThread>:
 8001780:	2320      	movs	r3, #32
 8001782:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <chRegFirstThread+0x18>)
 8001788:	6918      	ldr	r0, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 800178a:	7f83      	ldrb	r3, [r0, #30]
 800178c:	3301      	adds	r3, #1
 800178e:	7783      	strb	r3, [r0, #30]
 8001790:	2300      	movs	r3, #0
 8001792:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 8001796:	4770      	bx	lr
 8001798:	20000d18 	.word	0x20000d18
 800179c:	00000000 	.word	0x00000000

080017a0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80017a0:	b510      	push	{r4, lr}
 80017a2:	2320      	movs	r3, #32
 80017a4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80017aa:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80017ac:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80017ae:	bf1d      	ittte	ne
 80017b0:	7fa3      	ldrbne	r3, [r4, #30]
 80017b2:	3301      	addne	r3, #1
 80017b4:	77a3      	strbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 80017b6:	2400      	moveq	r4, #0
 80017b8:	2300      	movs	r3, #0
 80017ba:	f383 8811 	msr	BASEPRI, r3
    ntp->p_refs++;
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80017be:	f7ff ff6f 	bl	80016a0 <chThdRelease>
#endif

  return ntp;
}
 80017c2:	4620      	mov	r0, r4
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	bf00      	nop
 80017c8:	20000d18 	.word	0x20000d18
 80017cc:	00000000 	.word	0x00000000

080017d0 <chSemObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80017d0:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80017d2:	6040      	str	r0, [r0, #4]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80017d4:	6081      	str	r1, [r0, #8]
 80017d6:	4770      	bx	lr
	...

080017e0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80017e0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 80017e2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 80017e4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80017e6:	3501      	adds	r5, #1
 80017e8:	2d00      	cmp	r5, #0
 80017ea:	dc0c      	bgt.n	8001806 <chSemResetI+0x26>
 80017ec:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80017ee:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 80017f2:	6860      	ldr	r0, [r4, #4]

  tqp->p_prev = tp->p_prev;
 80017f4:	6843      	ldr	r3, [r0, #4]
 80017f6:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 80017f8:	601c      	str	r4, [r3, #0]
 80017fa:	f7ff fc61 	bl	80010c0 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80017fe:	3501      	adds	r5, #1
 8001800:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8001802:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001804:	d1f5      	bne.n	80017f2 <chSemResetI+0x12>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
	...

08001810 <chSemReset>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {
 8001810:	b508      	push	{r3, lr}
 8001812:	2320      	movs	r3, #32
 8001814:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSemResetI(sp, n);
 8001818:	f7ff ffe2 	bl	80017e0 <chSemResetI>
  chSchRescheduleS();
 800181c:	f7ff fd28 	bl	8001270 <chSchRescheduleS>
 8001820:	2300      	movs	r3, #0
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	bd08      	pop	{r3, pc}
	...

08001830 <chSemWait>:
 8001830:	2320      	movs	r3, #32
 8001832:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001836:	6883      	ldr	r3, [r0, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	6083      	str	r3, [r0, #8]
 800183e:	db04      	blt.n	800184a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8001840:	2000      	movs	r0, #0
 8001842:	2300      	movs	r3, #0
 8001844:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8001848:	4770      	bx	lr
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 800184a:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 800184c:	4c08      	ldr	r4, [pc, #32]	; (8001870 <chSemWait+0x40>)
 800184e:	69a2      	ldr	r2, [r4, #24]
 8001850:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001852:	6841      	ldr	r1, [r0, #4]
 8001854:	6051      	str	r1, [r2, #4]
 8001856:	4603      	mov	r3, r0
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001858:	6010      	str	r0, [r2, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 800185a:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 800185c:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	f7ff fc46 	bl	80010f0 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8001864:	69a3      	ldr	r3, [r4, #24]
 8001866:	6a18      	ldr	r0, [r3, #32]
 8001868:	2300      	movs	r3, #0
 800186a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 800186e:	bd10      	pop	{r4, pc}
 8001870:	20000d18 	.word	0x20000d18
	...

08001880 <chSemWaitTimeout>:
 8001880:	2320      	movs	r3, #32
 8001882:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001886:	6882      	ldr	r2, [r0, #8]
 8001888:	1e53      	subs	r3, r2, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	6083      	str	r3, [r0, #8]
 800188e:	db04      	blt.n	800189a <chSemWaitTimeout+0x1a>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8001890:	2000      	movs	r0, #0
 8001892:	2300      	movs	r3, #0
 8001894:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8001898:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 800189a:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 800189c:	b179      	cbz	r1, 80018be <chSemWaitTimeout+0x3e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <chSemWaitTimeout+0x48>)
 80018a0:	6992      	ldr	r2, [r2, #24]
 80018a2:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80018a4:	6844      	ldr	r4, [r0, #4]
 80018a6:	4603      	mov	r3, r0
 80018a8:	e882 0018 	stmia.w	r2, {r3, r4}
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80018ac:	2005      	movs	r0, #5
  tp->p_prev->p_next = tp;
 80018ae:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	f7ff fc35 	bl	8001120 <chSchGoSleepTimeoutS>
 80018b6:	2300      	movs	r3, #0
 80018b8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 80018bc:	bd10      	pop	{r4, pc}
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 80018be:	6082      	str	r2, [r0, #8]

      return MSG_TIMEOUT;
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	e7f7      	b.n	80018b6 <chSemWaitTimeout+0x36>
 80018c6:	bf00      	nop
 80018c8:	20000d18 	.word	0x20000d18
 80018cc:	00000000 	.word	0x00000000

080018d0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80018d0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 80018d2:	6880      	ldr	r0, [r0, #8]
 80018d4:	1e42      	subs	r2, r0, #1
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	db01      	blt.n	80018e0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80018e0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 80018e2:	b159      	cbz	r1, 80018fc <chSemWaitTimeoutS+0x2c>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 80018e4:	4a08      	ldr	r2, [pc, #32]	; (8001908 <chSemWaitTimeoutS+0x38>)
 80018e6:	6992      	ldr	r2, [r2, #24]
 80018e8:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80018ea:	685c      	ldr	r4, [r3, #4]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80018ec:	2005      	movs	r0, #5
 80018ee:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 80018f2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 80018f4:	605a      	str	r2, [r3, #4]
  }

  return MSG_OK;
}
 80018f6:	bc10      	pop	{r4}
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80018f8:	f7ff bc12 	b.w	8001120 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 80018fc:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80018fe:	bc10      	pop	{r4}

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000d18 	.word	0x20000d18
 800190c:	00000000 	.word	0x00000000

08001910 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8001910:	b508      	push	{r3, lr}
 8001912:	2320      	movs	r3, #32
 8001914:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8001918:	6883      	ldr	r3, [r0, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	6083      	str	r3, [r0, #8]
 8001920:	dd03      	ble.n	800192a <chSemSignal+0x1a>
 8001922:	2300      	movs	r3, #0
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	bd08      	pop	{r3, pc}
 800192a:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800192c:	6800      	ldr	r0, [r0, #0]

  tqp->p_next = tp->p_next;
 800192e:	6802      	ldr	r2, [r0, #0]
 8001930:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8001932:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001934:	6053      	str	r3, [r2, #4]
 8001936:	f7ff fc1b 	bl	8001170 <chSchWakeupS>
 800193a:	2300      	movs	r3, #0
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	bd08      	pop	{r3, pc}
 8001942:	bf00      	nop
	...

08001950 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8001950:	6883      	ldr	r3, [r0, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	6083      	str	r3, [r0, #8]
 8001958:	dd00      	ble.n	800195c <chSemSignalI+0xc>
 800195a:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800195c:	6803      	ldr	r3, [r0, #0]

  tqp->p_next = tp->p_next;
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001962:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001964:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001966:	4618      	mov	r0, r3

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001968:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800196a:	f7ff bba9 	b.w	80010c0 <chSchReadyI>
 800196e:	bf00      	nop

08001970 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8001970:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001972:	1e0c      	subs	r4, r1, #0
 8001974:	dd12      	ble.n	800199c <chSemAddCounterI+0x2c>
 8001976:	4605      	mov	r5, r0
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001978:	2600      	movs	r6, #0
 800197a:	e001      	b.n	8001980 <chSemAddCounterI+0x10>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 800197c:	3c01      	subs	r4, #1
 800197e:	d00d      	beq.n	800199c <chSemAddCounterI+0x2c>
    if (++sp->s_cnt <= (cnt_t)0) {
 8001980:	68ab      	ldr	r3, [r5, #8]
 8001982:	3301      	adds	r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	60ab      	str	r3, [r5, #8]
 8001988:	dcf8      	bgt.n	800197c <chSemAddCounterI+0xc>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800198a:	6828      	ldr	r0, [r5, #0]

  tqp->p_next = tp->p_next;
 800198c:	6803      	ldr	r3, [r0, #0]
 800198e:	602b      	str	r3, [r5, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001990:	605d      	str	r5, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001992:	f7ff fb95 	bl	80010c0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001996:	3c01      	subs	r4, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001998:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 800199a:	d1f1      	bne.n	8001980 <chSemAddCounterI+0x10>
 800199c:	bd70      	pop	{r4, r5, r6, pc}
 800199e:	bf00      	nop

080019a0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80019a0:	b510      	push	{r4, lr}
 80019a2:	2320      	movs	r3, #32
 80019a4:	b082      	sub	sp, #8
 80019a6:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 80019aa:	6883      	ldr	r3, [r0, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	6083      	str	r3, [r0, #8]
 80019b2:	dd1d      	ble.n	80019f0 <chSemSignalWait+0x50>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 80019b4:	688b      	ldr	r3, [r1, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	608b      	str	r3, [r1, #8]
 80019bc:	db07      	blt.n	80019ce <chSemSignalWait+0x2e>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80019be:	f7ff fc57 	bl	8001270 <chSchRescheduleS>
    msg = MSG_OK;
 80019c2:	2000      	movs	r0, #0
 80019c4:	2300      	movs	r3, #0
 80019c6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80019ca:	b002      	add	sp, #8
 80019cc:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <chSemSignalWait+0x68>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80019d0:	684b      	ldr	r3, [r1, #4]
 80019d2:	6994      	ldr	r4, [r2, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 80019d4:	2005      	movs	r0, #5
 80019d6:	e884 000a 	stmia.w	r4, {r1, r3}
  tp->p_prev->p_next = tp;
 80019da:	601c      	str	r4, [r3, #0]
  tqp->p_prev = tp;
 80019dc:	604c      	str	r4, [r1, #4]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 80019de:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 80019e0:	f7ff fb86 	bl	80010f0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 80019e4:	6a20      	ldr	r0, [r4, #32]
 80019e6:	2300      	movs	r3, #0
 80019e8:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 80019ec:	b002      	add	sp, #8
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	4602      	mov	r2, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80019f2:	6800      	ldr	r0, [r0, #0]
 80019f4:	9101      	str	r1, [sp, #4]

  tqp->p_next = tp->p_next;
 80019f6:	6803      	ldr	r3, [r0, #0]
 80019f8:	6013      	str	r3, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80019fa:	605a      	str	r2, [r3, #4]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 80019fc:	f7ff fb60 	bl	80010c0 <chSchReadyI>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6203      	str	r3, [r0, #32]
 8001a04:	9901      	ldr	r1, [sp, #4]
 8001a06:	e7d5      	b.n	80019b4 <chSemSignalWait+0x14>
 8001a08:	20000d18 	.word	0x20000d18
 8001a0c:	00000000 	.word	0x00000000

08001a10 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001a10:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001a12:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001a14:	6040      	str	r0, [r0, #4]
 8001a16:	6083      	str	r3, [r0, #8]
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	0000      	movs	r0, r0
	...

08001a20 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001a22:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001a24:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001a26:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001a28:	2a00      	cmp	r2, #0
 8001a2a:	d055      	beq.n	8001ad8 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001a2c:	68a1      	ldr	r1, [r4, #8]
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	428b      	cmp	r3, r1
 8001a32:	4605      	mov	r5, r0
 8001a34:	d206      	bcs.n	8001a44 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001a36:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001a38:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d033      	beq.n	8001aa6 <chMtxLockS+0x86>
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	d01d      	beq.n	8001a7e <chMtxLockS+0x5e>
 8001a42:	b19b      	cbz	r3, 8001a6c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001a44:	462b      	mov	r3, r5
 8001a46:	e003      	b.n	8001a50 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	68a2      	ldr	r2, [r4, #8]
 8001a4c:	4291      	cmp	r1, r2
 8001a4e:	d302      	bcc.n	8001a56 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001a50:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a52:	429d      	cmp	r5, r3
 8001a54:	d1f8      	bne.n	8001a48 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001a5a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001a5c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001a5e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001a60:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8001a62:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8001a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001a68:	f7ff bb42 	b.w	80010f0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001a6c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8001a70:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001a72:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8001a74:	4610      	mov	r0, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	f7ff fb22 	bl	80010c0 <chSchReadyI>
          break;
 8001a7c:	e7e2      	b.n	8001a44 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001a7e:	e892 0009 	ldmia.w	r2, {r0, r3}
 8001a82:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001a84:	6810      	ldr	r0, [r2, #0]
 8001a86:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001a88:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001a8a:	4633      	mov	r3, r6
 8001a8c:	e002      	b.n	8001a94 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a8e:	6898      	ldr	r0, [r3, #8]
 8001a90:	4288      	cmp	r0, r1
 8001a92:	d302      	bcc.n	8001a9a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001a94:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001a96:	429e      	cmp	r6, r3
 8001a98:	d1f9      	bne.n	8001a8e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001a9e:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001aa0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e7ce      	b.n	8001a44 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001aa6:	e892 0009 	ldmia.w	r2, {r0, r3}
 8001aaa:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001aac:	6810      	ldr	r0, [r2, #0]
 8001aae:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001ab0:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001ab2:	4633      	mov	r3, r6
 8001ab4:	e002      	b.n	8001abc <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001ab6:	6898      	ldr	r0, [r3, #8]
 8001ab8:	4288      	cmp	r0, r1
 8001aba:	d302      	bcc.n	8001ac2 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001abc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001abe:	429e      	cmp	r6, r3
 8001ac0:	d1f9      	bne.n	8001ab6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001ac6:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001ac8:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001aca:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8001acc:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001ace:	68a1      	ldr	r1, [r4, #8]
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	428b      	cmp	r3, r1
 8001ad4:	d3af      	bcc.n	8001a36 <chMtxLockS+0x16>
 8001ad6:	e7b5      	b.n	8001a44 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ada:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8001adc:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 8001ade:	63a0      	str	r0, [r4, #56]	; 0x38
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000d18 	.word	0x20000d18
	...

08001af0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001af0:	b508      	push	{r3, lr}
 8001af2:	2320      	movs	r3, #32
 8001af4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001af8:	f7ff ff92 	bl	8001a20 <chMtxLockS>
 8001afc:	2300      	movs	r3, #0
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	bd08      	pop	{r3, pc}
	...

08001b10 <chMtxTryLock>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @api
 */
bool chMtxTryLock(mutex_t *mp) {
 8001b10:	4603      	mov	r3, r0
 8001b12:	2220      	movs	r2, #32
 8001b14:	f382 8811 	msr	BASEPRI, r2
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8001b18:	6882      	ldr	r2, [r0, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8001b1a:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8001b1c:	b11a      	cbz	r2, 8001b26 <chMtxTryLock+0x16>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8001b24:	4770      	bx	lr

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <chMtxTryLock+0x2c>)
 8001b28:	6992      	ldr	r2, [r2, #24]
 8001b2a:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 8001b2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001b2e:	60d9      	str	r1, [r3, #12]
  currp->p_mtxlist = mp;
 8001b30:	2001      	movs	r0, #1
 8001b32:	6393      	str	r3, [r2, #56]	; 0x38
 8001b34:	2300      	movs	r3, #0
 8001b36:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000d18 	.word	0x20000d18

08001b40 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001b42:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001b44:	699d      	ldr	r5, [r3, #24]
 8001b46:	2320      	movs	r3, #32
 8001b48:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001b4c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001b4e:	68c3      	ldr	r3, [r0, #12]
 8001b50:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001b52:	4284      	cmp	r4, r0
 8001b54:	d01c      	beq.n	8001b90 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001b56:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001b58:	b14b      	cbz	r3, 8001b6e <chMtxUnlock+0x2e>
 8001b5a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001b60:	6892      	ldr	r2, [r2, #8]
 8001b62:	4291      	cmp	r1, r2
 8001b64:	bf38      	it	cc
 8001b66:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001b68:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f5      	bne.n	8001b5a <chMtxUnlock+0x1a>
 8001b6e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001b70:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001b72:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001b74:	60a9      	str	r1, [r5, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001b76:	4620      	mov	r0, r4
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001b7c:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001b7e:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8001b80:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001b82:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001b84:	f7ff faf4 	bl	8001170 <chSchWakeupS>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60a3      	str	r3, [r4, #8]
 8001b94:	2300      	movs	r3, #0
 8001b96:	f383 8811 	msr	BASEPRI, r3
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
 8001b9c:	20000d18 	.word	0x20000d18

08001ba0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8001ba2:	b430      	push	{r4, r5}
 8001ba4:	4604      	mov	r4, r0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001ba6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 8001ba8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001baa:	68e3      	ldr	r3, [r4, #12]
 8001bac:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001bae:	42a5      	cmp	r5, r4
 8001bb0:	d017      	beq.n	8001be2 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001bb2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001bb4:	b14b      	cbz	r3, 8001bca <chMtxUnlockS+0x2a>
 8001bb6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001bbc:	6892      	ldr	r2, [r2, #8]
 8001bbe:	4291      	cmp	r1, r2
 8001bc0:	bf38      	it	cc
 8001bc2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001bc4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f5      	bne.n	8001bb6 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001bca:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001bcc:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001bce:	6081      	str	r1, [r0, #8]
 8001bd0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8001bd2:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001bd4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001bd6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8001bd8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8001bda:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001bdc:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8001bde:	f7ff ba6f 	b.w	80010c0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60ab      	str	r3, [r5, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001be6:	bc30      	pop	{r4, r5}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000d18 	.word	0x20000d18

08001bf0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001bf2:	b570      	push	{r4, r5, r6, lr}
 8001bf4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001bf6:	6994      	ldr	r4, [r2, #24]
 8001bf8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 8001bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bfe:	b1d3      	cbz	r3, 8001c36 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001c00:	2600      	movs	r6, #0
 8001c02:	e00a      	b.n	8001c1a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001c04:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001c06:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8001c08:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001c0a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 8001c0c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8001c0e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001c10:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001c12:	f7ff fa55 	bl	80010c0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c18:	b14b      	cbz	r3, 8001c2e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001c1a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001c20:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8001c22:	4610      	mov	r0, r2
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 8001c24:	d1ee      	bne.n	8001c04 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001c26:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f5      	bne.n	8001c1a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 8001c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c30:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8001c32:	f7ff fb1d 	bl	8001270 <chSchRescheduleS>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000d18 	.word	0x20000d18
	...

08001c50 <chCondObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001c50:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001c52:	6040      	str	r0, [r0, #4]
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
	...

08001c60 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8001c60:	b508      	push	{r3, lr}
 8001c62:	2320      	movs	r3, #32
 8001c64:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001c68:	6802      	ldr	r2, [r0, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 8001c6a:	4290      	cmp	r0, r2
 8001c6c:	d007      	beq.n	8001c7e <chCondSignal+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001c6e:	6811      	ldr	r1, [r2, #0]
 8001c70:	6001      	str	r1, [r0, #0]
 8001c72:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001c74:	604b      	str	r3, [r1, #4]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8001c76:	4610      	mov	r0, r2
 8001c78:	2100      	movs	r1, #0
 8001c7a:	f7ff fa79 	bl	8001170 <chSchWakeupS>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	bd08      	pop	{r3, pc}
 8001c86:	bf00      	nop
	...

08001c90 <chCondSignalI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001c90:	6803      	ldr	r3, [r0, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8001c92:	4298      	cmp	r0, r3
 8001c94:	d007      	beq.n	8001ca6 <chCondSignalI+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	6002      	str	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001c9a:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001c9c:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001c9e:	4618      	mov	r0, r3
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8001ca0:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 8001ca2:	f7ff ba0d 	b.w	80010c0 <chSchReadyI>
 8001ca6:	4770      	bx	lr
	...

08001cb0 <chCondBroadcast>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondBroadcast(condition_variable_t *cp) {
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001cba:	6800      	ldr	r0, [r0, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8001cbc:	4284      	cmp	r4, r0
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8001cbe:	bf18      	it	ne
 8001cc0:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8001cc4:	d008      	beq.n	8001cd8 <chCondBroadcast+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	6023      	str	r3, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001cca:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8001ccc:	f7ff f9f8 	bl	80010c0 <chSchReadyI>
 8001cd0:	6205      	str	r5, [r0, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001cd2:	6820      	ldr	r0, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8001cd4:	42a0      	cmp	r0, r4
 8001cd6:	d1f6      	bne.n	8001cc6 <chCondBroadcast+0x16>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8001cd8:	f7ff faca 	bl	8001270 <chSchRescheduleS>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
	...

08001cf0 <chCondWaitS>:
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <chCondWaitS+0x40>)
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8001cf2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001cf4:	699c      	ldr	r4, [r3, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8001cf6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8001cf8:	4605      	mov	r5, r0
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f7ff ff50 	bl	8001ba0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 8001d00:	6225      	str	r5, [r4, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001d02:	462b      	mov	r3, r5
 8001d04:	e003      	b.n	8001d0e <chCondWaitS+0x1e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	68a2      	ldr	r2, [r4, #8]
 8001d0a:	4291      	cmp	r1, r2
 8001d0c:	d302      	bcc.n	8001d14 <chCondWaitS+0x24>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001d0e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001d10:	429d      	cmp	r5, r3
 8001d12:	d1f8      	bne.n	8001d06 <chCondWaitS+0x16>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001d18:	6023      	str	r3, [r4, #0]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8001d1a:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001d1c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001d1e:	605c      	str	r4, [r3, #4]
 8001d20:	f7ff f9e6 	bl	80010f0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8001d24:	6a24      	ldr	r4, [r4, #32]
  chMtxLockS(mp);
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fe7a 	bl	8001a20 <chMtxLockS>

  return msg;
}
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	20000d18 	.word	0x20000d18
	...

08001d40 <chCondWait>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @api
 */
msg_t chCondWait(condition_variable_t *cp) {
 8001d40:	b508      	push	{r3, lr}
 8001d42:	2320      	movs	r3, #32
 8001d44:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitS(cp);
 8001d48:	f7ff ffd2 	bl	8001cf0 <chCondWaitS>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8001d52:	bd08      	pop	{r3, pc}
	...

08001d60 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d62:	4c12      	ldr	r4, [pc, #72]	; (8001dac <chCondWaitTimeoutS+0x4c>)
 8001d64:	69a3      	ldr	r3, [r4, #24]
 8001d66:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8001d68:	4605      	mov	r5, r0
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8001d6a:	4630      	mov	r0, r6
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 8001d6c:	460f      	mov	r7, r1
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8001d6e:	f7ff ff17 	bl	8001ba0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8001d72:	69a4      	ldr	r4, [r4, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001d74:	462b      	mov	r3, r5
 8001d76:	6225      	str	r5, [r4, #32]
 8001d78:	e003      	b.n	8001d82 <chCondWaitTimeoutS+0x22>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001d7a:	6898      	ldr	r0, [r3, #8]
 8001d7c:	68a2      	ldr	r2, [r4, #8]
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d302      	bcc.n	8001d88 <chCondWaitTimeoutS+0x28>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001d82:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001d84:	429d      	cmp	r5, r3
 8001d86:	d1f8      	bne.n	8001d7a <chCondWaitTimeoutS+0x1a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001d8c:	6023      	str	r3, [r4, #0]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 8001d8e:	4639      	mov	r1, r7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001d90:	6014      	str	r4, [r2, #0]
 8001d92:	2007      	movs	r0, #7
  cp->p_prev = tp;
 8001d94:	605c      	str	r4, [r3, #4]
 8001d96:	f7ff f9c3 	bl	8001120 <chSchGoSleepTimeoutS>
  if (msg != MSG_TIMEOUT) {
 8001d9a:	1c43      	adds	r3, r0, #1

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 8001d9c:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 8001d9e:	d002      	beq.n	8001da6 <chCondWaitTimeoutS+0x46>
    chMtxLockS(mp);
 8001da0:	4630      	mov	r0, r6
 8001da2:	f7ff fe3d 	bl	8001a20 <chMtxLockS>
  }

  return msg;
}
 8001da6:	4620      	mov	r0, r4
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000d18 	.word	0x20000d18

08001db0 <chCondWaitTimeout>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chCondWaitTimeout(condition_variable_t *cp, systime_t time) {
 8001db0:	b508      	push	{r3, lr}
 8001db2:	2320      	movs	r3, #32
 8001db4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitTimeoutS(cp, time);
 8001db8:	f7ff ffd2 	bl	8001d60 <chCondWaitTimeoutS>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8001dc2:	bd08      	pop	{r3, pc}
	...

08001dd0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8001dd0:	b430      	push	{r4, r5}
 8001dd2:	2420      	movs	r4, #32
 8001dd4:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001dd8:	4d06      	ldr	r5, [pc, #24]	; (8001df4 <chEvtRegisterMaskWithFlags+0x24>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001dda:	6804      	ldr	r4, [r0, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001ddc:	69ad      	ldr	r5, [r5, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001dde:	600c      	str	r4, [r1, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001de0:	2400      	movs	r4, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001de2:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 8001de4:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 8001de6:	608a      	str	r2, [r1, #8]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8001de8:	610b      	str	r3, [r1, #16]
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001dea:	60cc      	str	r4, [r1, #12]
 8001dec:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 8001df0:	bc30      	pop	{r4, r5}
 8001df2:	4770      	bx	lr
 8001df4:	20000d18 	.word	0x20000d18
	...

08001e00 <chEvtUnregister>:
 8001e00:	2320      	movs	r3, #32
 8001e02:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8001e06:	4602      	mov	r2, r0
 8001e08:	e002      	b.n	8001e10 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	d007      	beq.n	8001e1e <chEvtUnregister+0x1e>
 8001e0e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8001e10:	6813      	ldr	r3, [r2, #0]
 8001e12:	4298      	cmp	r0, r3
 8001e14:	d1f9      	bne.n	8001e0a <chEvtUnregister+0xa>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8001e1e:	680b      	ldr	r3, [r1, #0]
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	0000      	movs	r0, r0
	...

08001e30 <chEvtGetAndClearEvents>:
 8001e30:	2320      	movs	r3, #32
 8001e32:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <chEvtGetAndClearEvents+0x1c>)
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8001e3c:	ea23 0100 	bic.w	r1, r3, r0
 8001e40:	6351      	str	r1, [r2, #52]	; 0x34
 8001e42:	2200      	movs	r2, #0
 8001e44:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8001e48:	4018      	ands	r0, r3
 8001e4a:	4770      	bx	lr
 8001e4c:	20000d18 	.word	0x20000d18

08001e50 <chEvtAddEvents>:
 8001e50:	2320      	movs	r3, #32
 8001e52:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <chEvtAddEvents+0x18>)
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e5c:	4318      	orrs	r0, r3
 8001e5e:	6350      	str	r0, [r2, #52]	; 0x34
 8001e60:	2300      	movs	r3, #0
 8001e62:	f383 8811 	msr	BASEPRI, r3
  events = currp->p_epending;
  chSysUnlock();

  return events;
}
 8001e66:	4770      	bx	lr
 8001e68:	20000d18 	.word	0x20000d18
 8001e6c:	00000000 	.word	0x00000000

08001e70 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001e72:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001e74:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001e76:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001e78:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001e7a:	d009      	beq.n	8001e90 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001e7c:	2a0b      	cmp	r2, #11
 8001e7e:	d000      	beq.n	8001e82 <chEvtSignalI+0x12>
 8001e80:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001e82:	6a03      	ldr	r3, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001e84:	438b      	bics	r3, r1
 8001e86:	d1fb      	bne.n	8001e80 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8001e8c:	f7ff b918 	b.w	80010c0 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001e90:	6a03      	ldr	r3, [r0, #32]
 8001e92:	4219      	tst	r1, r3
 8001e94:	d1f8      	bne.n	8001e88 <chEvtSignalI+0x18>
 8001e96:	4770      	bx	lr
	...

08001ea0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001ea0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001ea2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d00f      	beq.n	8001ec8 <chEvtBroadcastFlagsI+0x28>
 8001ea8:	4606      	mov	r6, r0
 8001eaa:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 8001eac:	68e3      	ldr	r3, [r4, #12]
 8001eae:	432b      	orrs	r3, r5
 8001eb0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001eb2:	b115      	cbz	r5, 8001eba <chEvtBroadcastFlagsI+0x1a>
 8001eb4:	6922      	ldr	r2, [r4, #16]
 8001eb6:	4213      	tst	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001eba:	68a1      	ldr	r1, [r4, #8]
 8001ebc:	6860      	ldr	r0, [r4, #4]
 8001ebe:	f7ff ffd7 	bl	8001e70 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001ec2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001ec4:	42a6      	cmp	r6, r4
 8001ec6:	d1f1      	bne.n	8001eac <chEvtBroadcastFlagsI+0xc>
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	bf00      	nop
 8001ecc:	0000      	movs	r0, r0
	...

08001ed0 <chEvtSignal>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @api
 */
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8001ed0:	b508      	push	{r3, lr}
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8001ed8:	f7ff ffca 	bl	8001e70 <chEvtSignalI>
  chSchRescheduleS();
 8001edc:	f7ff f9c8 	bl	8001270 <chSchRescheduleS>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	bd08      	pop	{r3, pc}
	...

08001ef0 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8001ef0:	b508      	push	{r3, lr}
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8001ef8:	f7ff ffd2 	bl	8001ea0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8001efc:	f7ff f9b8 	bl	8001270 <chSchRescheduleS>
 8001f00:	2300      	movs	r3, #0
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	bd08      	pop	{r3, pc}
	...

08001f10 <chEvtDispatch>:
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001f10:	b1c9      	cbz	r1, 8001f46 <chEvtDispatch+0x36>
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8001f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f14:	4606      	mov	r6, r0
 8001f16:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001f18:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001f1a:	2701      	movs	r7, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001f1c:	fa25 f304 	lsr.w	r3, r5, r4
 8001f20:	07db      	lsls	r3, r3, #31
 8001f22:	d404      	bmi.n	8001f2e <chEvtDispatch+0x1e>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001f24:	3401      	adds	r4, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001f26:	fa25 f304 	lsr.w	r3, r5, r4
 8001f2a:	07db      	lsls	r3, r3, #31
 8001f2c:	d5fa      	bpl.n	8001f24 <chEvtDispatch+0x14>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001f2e:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8001f32:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001f34:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001f38:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8001f3c:	4798      	blx	r3
    }
    eid++;
 8001f3e:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	d1eb      	bne.n	8001f1c <chEvtDispatch+0xc>
 8001f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f46:	4770      	bx	lr
	...

08001f50 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8001f50:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <chEvtWaitOne+0x38>)
 8001f54:	699d      	ldr	r5, [r3, #24]
 8001f56:	2320      	movs	r3, #32
 8001f58:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8001f5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001f5e:	ea13 0400 	ands.w	r4, r3, r0
 8001f62:	d106      	bne.n	8001f72 <chEvtWaitOne+0x22>
 8001f64:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 8001f66:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f7ff f8c1 	bl	80010f0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8001f6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f70:	401c      	ands	r4, r3
  }
  m ^= m & (m - (eventmask_t)1);
 8001f72:	4262      	negs	r2, r4
 8001f74:	ea04 0002 	and.w	r0, r4, r2
  ctp->p_epending &= ~m;
 8001f78:	ea23 0300 	bic.w	r3, r3, r0
 8001f7c:	636b      	str	r3, [r5, #52]	; 0x34
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
 8001f86:	bf00      	nop
 8001f88:	20000d18 	.word	0x20000d18
 8001f8c:	00000000 	.word	0x00000000

08001f90 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8001f90:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <chEvtWaitAny+0x34>)
 8001f94:	699d      	ldr	r5, [r3, #24]
 8001f96:	2320      	movs	r3, #32
 8001f98:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8001f9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001f9e:	ea13 0400 	ands.w	r4, r3, r0
 8001fa2:	d106      	bne.n	8001fb2 <chEvtWaitAny+0x22>
 8001fa4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 8001fa6:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001fa8:	200a      	movs	r0, #10
 8001faa:	f7ff f8a1 	bl	80010f0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8001fae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001fb0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 8001fb2:	ea23 0304 	bic.w	r3, r3, r4
 8001fb6:	636b      	str	r3, [r5, #52]	; 0x34
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000d18 	.word	0x20000d18
	...

08001fd0 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001fd0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <chEvtWaitAll+0x30>)
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001fd4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8001fd6:	699d      	ldr	r5, [r3, #24]
 8001fd8:	2320      	movs	r3, #32
 8001fda:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8001fde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001fe0:	ea30 0203 	bics.w	r2, r0, r3
 8001fe4:	d004      	beq.n	8001ff0 <chEvtWaitAll+0x20>
    ctp->p_u.ewmask = events;
 8001fe6:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8001fe8:	200b      	movs	r0, #11
 8001fea:	f7ff f881 	bl	80010f0 <chSchGoSleepS>
 8001fee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8001ff0:	ea23 0304 	bic.w	r3, r3, r4
 8001ff4:	636b      	str	r3, [r5, #52]	; 0x34
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	bd38      	pop	{r3, r4, r5, pc}
 8002000:	20000d18 	.word	0x20000d18
	...

08002010 <chEvtWaitOneTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <chEvtWaitOneTimeout+0x4c>)
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
 8002012:	b570      	push	{r4, r5, r6, lr}
 8002014:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8002016:	699d      	ldr	r5, [r3, #24]
 8002018:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800201c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800201e:	ea12 0600 	ands.w	r6, r2, r0
 8002022:	d10e      	bne.n	8002042 <chEvtWaitOneTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 8002024:	b919      	cbnz	r1, 800202e <chEvtWaitOneTimeout+0x1e>
 8002026:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800202a:	4608      	mov	r0, r1
 800202c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800202e:	6228      	str	r0, [r5, #32]
 8002030:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002032:	200a      	movs	r0, #10
 8002034:	f7ff f874 	bl	8001120 <chSchGoSleepTimeoutS>
 8002038:	2800      	cmp	r0, #0
 800203a:	db0b      	blt.n	8002054 <chEvtWaitOneTimeout+0x44>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800203c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800203e:	ea04 0602 	and.w	r6, r4, r2
  }
  m ^= m & (m - (eventmask_t)1);
 8002042:	4270      	negs	r0, r6
 8002044:	4030      	ands	r0, r6
  ctp->p_epending &= ~m;
 8002046:	ea22 0200 	bic.w	r2, r2, r0
 800204a:	636a      	str	r2, [r5, #52]	; 0x34
 800204c:	2300      	movs	r3, #0
 800204e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	f386 8811 	msr	BASEPRI, r6
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 8002058:	4630      	mov	r0, r6
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	20000d18 	.word	0x20000d18

08002060 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <chEvtWaitAnyTimeout+0x4c>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 8002062:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002064:	699e      	ldr	r6, [r3, #24]
 8002066:	2320      	movs	r3, #32
 8002068:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800206c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800206e:	ea13 0400 	ands.w	r4, r3, r0
 8002072:	d10e      	bne.n	8002092 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 8002074:	b919      	cbnz	r1, 800207e <chEvtWaitAnyTimeout+0x1e>
 8002076:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800207a:	4608      	mov	r0, r1
 800207c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800207e:	6230      	str	r0, [r6, #32]
 8002080:	4605      	mov	r5, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002082:	200a      	movs	r0, #10
 8002084:	f7ff f84c 	bl	8001120 <chSchGoSleepTimeoutS>
 8002088:	2800      	cmp	r0, #0
 800208a:	db0a      	blt.n	80020a2 <chEvtWaitAnyTimeout+0x42>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800208c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800208e:	ea05 0403 	and.w	r4, r5, r3
  }
  ctp->p_epending &= ~m;
 8002092:	ea23 0304 	bic.w	r3, r3, r4
 8002096:	6373      	str	r3, [r6, #52]	; 0x34
 8002098:	2300      	movs	r3, #0
 800209a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
 800209e:	4620      	mov	r0, r4
}
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80020a6:	4620      	mov	r0, r4
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
 80020aa:	bf00      	nop
 80020ac:	20000d18 	.word	0x20000d18

080020b0 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80020b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <chEvtWaitAllTimeout+0x44>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80020b4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80020b6:	699d      	ldr	r5, [r3, #24]
 80020b8:	2320      	movs	r3, #32
 80020ba:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80020be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80020c0:	ea30 0203 	bics.w	r2, r0, r3
 80020c4:	d00b      	beq.n	80020de <chEvtWaitAllTimeout+0x2e>
 80020c6:	4608      	mov	r0, r1
    if (TIME_IMMEDIATE == time) {
 80020c8:	b911      	cbnz	r1, 80020d0 <chEvtWaitAllTimeout+0x20>
 80020ca:	f380 8811 	msr	BASEPRI, r0
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80020ce:	bd38      	pop	{r3, r4, r5, pc}
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80020d0:	622c      	str	r4, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 80020d2:	200b      	movs	r0, #11
 80020d4:	f7ff f824 	bl	8001120 <chSchGoSleepTimeoutS>
 80020d8:	2800      	cmp	r0, #0
 80020da:	db08      	blt.n	80020ee <chEvtWaitAllTimeout+0x3e>
 80020dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 80020de:	ea23 0304 	bic.w	r3, r3, r4
 80020e2:	636b      	str	r3, [r5, #52]	; 0x34
 80020e4:	2300      	movs	r3, #0
 80020e6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 80020ea:	4620      	mov	r0, r4
}
 80020ec:	bd38      	pop	{r3, r4, r5, pc}
 80020ee:	2000      	movs	r0, #0
 80020f0:	e7eb      	b.n	80020ca <chEvtWaitAllTimeout+0x1a>
 80020f2:	bf00      	nop
 80020f4:	20000d18 	.word	0x20000d18
	...

08002100 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002100:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <chMsgSend+0x3c>)
 8002104:	2220      	movs	r2, #32
 8002106:	699c      	ldr	r4, [r3, #24]
 8002108:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800210c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8002110:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8002112:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002114:	6062      	str	r2, [r4, #4]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8002116:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8002118:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 800211a:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 800211c:	7f02      	ldrb	r2, [r0, #28]
  tqp->p_prev = tp;
 800211e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002120:	2a0e      	cmp	r2, #14
 8002122:	d007      	beq.n	8002134 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002124:	200c      	movs	r0, #12
 8002126:	f7fe ffe3 	bl	80010f0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800212a:	6a20      	ldr	r0, [r4, #32]
 800212c:	2300      	movs	r3, #0
 800212e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8002132:	bd38      	pop	{r3, r4, r5, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8002134:	f7fe ffc4 	bl	80010c0 <chSchReadyI>
 8002138:	e7f4      	b.n	8002124 <chMsgSend+0x24>
 800213a:	bf00      	nop
 800213c:	20000d18 	.word	0x20000d18

08002140 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8002140:	b510      	push	{r4, lr}
 8002142:	2320      	movs	r3, #32
 8002144:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8002148:	4c0b      	ldr	r4, [pc, #44]	; (8002178 <chMsgWait+0x38>)
 800214a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800214c:	4613      	mov	r3, r2
 800214e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8002152:	4298      	cmp	r0, r3
 8002154:	d008      	beq.n	8002168 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8002156:	6801      	ldr	r1, [r0, #0]
 8002158:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 800215a:	220d      	movs	r2, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 800215c:	604b      	str	r3, [r1, #4]
 800215e:	2300      	movs	r3, #0
 8002160:	7702      	strb	r2, [r0, #28]
 8002162:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8002166:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8002168:	200e      	movs	r0, #14
 800216a:	f7fe ffc1 	bl	80010f0 <chSchGoSleepS>
 800216e:	69a2      	ldr	r2, [r4, #24]
 8002170:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002172:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8002176:	e7ee      	b.n	8002156 <chMsgWait+0x16>
 8002178:	20000d18 	.word	0x20000d18
 800217c:	00000000 	.word	0x00000000

08002180 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8002180:	b508      	push	{r3, lr}
 8002182:	2320      	movs	r3, #32
 8002184:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002188:	f7fe fff2 	bl	8001170 <chSchWakeupS>
 800218c:	2300      	movs	r3, #0
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	bd08      	pop	{r3, pc}
	...

080021a0 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80021a0:	b510      	push	{r4, lr}
 80021a2:	460b      	mov	r3, r1
  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 80021a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80021a8:	6041      	str	r1, [r0, #4]
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80021aa:	4604      	mov	r4, r0

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80021ac:	6003      	str	r3, [r0, #0]
  mbp->mb_rdptr = buf;
 80021ae:	60c3      	str	r3, [r0, #12]
  mbp->mb_wrptr = buf;
 80021b0:	6083      	str	r3, [r0, #8]
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
 80021b2:	4611      	mov	r1, r2
 80021b4:	301c      	adds	r0, #28
 80021b6:	f7ff fb0b 	bl	80017d0 <chSemObjectInit>
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80021ba:	f104 0010 	add.w	r0, r4, #16
 80021be:	2100      	movs	r1, #0
}
 80021c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80021c4:	f7ff bb04 	b.w	80017d0 <chSemObjectInit>
	...

080021d0 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4604      	mov	r4, r0
  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80021d4:	301c      	adds	r0, #28
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 80021d6:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80021d8:	6861      	ldr	r1, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 80021da:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80021dc:	1ac9      	subs	r1, r1, r3

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
 80021de:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80021e0:	1089      	asrs	r1, r1, #2
 80021e2:	f7ff fafd 	bl	80017e0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 80021e6:	f104 0010 	add.w	r0, r4, #16
 80021ea:	2100      	movs	r1, #0
}
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 80021f0:	f7ff baf6 	b.w	80017e0 <chSemResetI>
	...

08002200 <chMBReset>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8002200:	b508      	push	{r3, lr}
 8002202:	2320      	movs	r3, #32
 8002204:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMBResetI(mbp);
 8002208:	f7ff ffe2 	bl	80021d0 <chMBResetI>
  chSchRescheduleS();
 800220c:	f7ff f830 	bl	8001270 <chSchRescheduleS>
 8002210:	2300      	movs	r3, #0
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	bd08      	pop	{r3, pc}
	...

08002220 <chMBPost>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	2320      	movs	r3, #32
 8002224:	4604      	mov	r4, r0
 8002226:	460e      	mov	r6, r1
 8002228:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800222c:	4611      	mov	r1, r2
 800222e:	301c      	adds	r0, #28
 8002230:	f7ff fb4e 	bl	80018d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002234:	4605      	mov	r5, r0
 8002236:	b978      	cbnz	r0, 8002258 <chMBPost+0x38>
    *mbp->mb_wrptr++ = msg;
 8002238:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800223a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800223c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800223e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002240:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8002242:	bf28      	it	cs
 8002244:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002246:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8002248:	f104 0010 	add.w	r0, r4, #16

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 800224c:	bf28      	it	cs
 800224e:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8002250:	f7ff fb7e 	bl	8001950 <chSemSignalI>
    chSchRescheduleS();
 8002254:	f7ff f80c 	bl	8001270 <chSchRescheduleS>
 8002258:	2300      	movs	r3, #0
 800225a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 800225e:	4628      	mov	r0, r5
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	bf00      	nop
	...

08002270 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	6a43      	ldr	r3, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	dd12      	ble.n	800229e <chMBPostI+0x2e>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8002278:	6884      	ldr	r4, [r0, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 800227a:	6845      	ldr	r5, [r0, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800227c:	1d22      	adds	r2, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800227e:	3b01      	subs	r3, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8002280:	42aa      	cmp	r2, r5
 8002282:	6243      	str	r3, [r0, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8002284:	bf28      	it	cs
 8002286:	6803      	ldrcs	r3, [r0, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8002288:	6082      	str	r2, [r0, #8]
 800228a:	6021      	str	r1, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 800228c:	f100 0010 	add.w	r0, r0, #16
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8002290:	bf28      	it	cs
 8002292:	f840 3c08 	strcs.w	r3, [r0, #-8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8002296:	f7ff fb5b 	bl	8001950 <chSemSignalI>

  return MSG_OK;
 800229a:	2000      	movs	r0, #0
 800229c:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800229e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
	...

080022b0 <chMBPostAhead>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	2320      	movs	r3, #32
 80022b4:	4604      	mov	r4, r0
 80022b6:	460e      	mov	r6, r1
 80022b8:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80022bc:	4611      	mov	r1, r2
 80022be:	301c      	adds	r0, #28
 80022c0:	f7ff fb06 	bl	80018d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80022c4:	4605      	mov	r5, r0
 80022c6:	b120      	cbz	r0, 80022d2 <chMBPostAhead+0x22>
 80022c8:	2300      	movs	r3, #0
 80022ca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80022ce:	4628      	mov	r0, r5
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 80022d2:	68e3      	ldr	r3, [r4, #12]
 80022d4:	6822      	ldr	r2, [r4, #0]
 80022d6:	3b04      	subs	r3, #4
 80022d8:	4293      	cmp	r3, r2
 80022da:	60e3      	str	r3, [r4, #12]
 80022dc:	d202      	bcs.n	80022e4 <chMBPostAhead+0x34>
      mbp->mb_rdptr = mbp->mb_top - 1;
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	3b04      	subs	r3, #4
 80022e2:	60e3      	str	r3, [r4, #12]
    }
    *mbp->mb_rdptr = msg;
 80022e4:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80022e6:	f104 0010 	add.w	r0, r4, #16
 80022ea:	f7ff fb31 	bl	8001950 <chSemSignalI>
    chSchRescheduleS();
 80022ee:	f7fe ffbf 	bl	8001270 <chSchRescheduleS>
 80022f2:	2300      	movs	r3, #0
 80022f4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80022f8:	4628      	mov	r0, r5
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
 80022fc:	0000      	movs	r0, r0
	...

08002300 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8002300:	6a42      	ldr	r2, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8002302:	2a00      	cmp	r2, #0
 8002304:	dd11      	ble.n	800232a <chMBPostAheadI+0x2a>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8002306:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8002308:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800230a:	6804      	ldr	r4, [r0, #0]
 800230c:	3b04      	subs	r3, #4
 800230e:	3a01      	subs	r2, #1
 8002310:	42a3      	cmp	r3, r4
 8002312:	6242      	str	r2, [r0, #36]	; 0x24
 8002314:	60c3      	str	r3, [r0, #12]
 8002316:	d202      	bcs.n	800231e <chMBPostAheadI+0x1e>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8002318:	6843      	ldr	r3, [r0, #4]
 800231a:	3b04      	subs	r3, #4
 800231c:	60c3      	str	r3, [r0, #12]
  }
  *mbp->mb_rdptr = msg;
 800231e:	6019      	str	r1, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8002320:	3010      	adds	r0, #16
 8002322:	f7ff fb15 	bl	8001950 <chSemSignalI>

  return MSG_OK;
 8002326:	2000      	movs	r0, #0
 8002328:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800232a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232e:	4770      	bx	lr

08002330 <chMBFetch>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	2320      	movs	r3, #32
 8002334:	4604      	mov	r4, r0
 8002336:	460e      	mov	r6, r1
 8002338:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 800233c:	4611      	mov	r1, r2
 800233e:	3010      	adds	r0, #16
 8002340:	f7ff fac6 	bl	80018d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002344:	4605      	mov	r5, r0
 8002346:	b980      	cbnz	r0, 800236a <chMBFetch+0x3a>
    *msgp = *mbp->mb_rdptr++;
 8002348:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 800234a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8002350:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8002352:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8002354:	bf28      	it	cs
 8002356:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8002358:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 800235a:	f104 001c 	add.w	r0, r4, #28

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 800235e:	bf28      	it	cs
 8002360:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8002362:	f7ff faf5 	bl	8001950 <chSemSignalI>
    chSchRescheduleS();
 8002366:	f7fe ff83 	bl	8001270 <chSchRescheduleS>
 800236a:	2300      	movs	r3, #0
 800236c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8002370:	4628      	mov	r0, r5
 8002372:	bd70      	pop	{r4, r5, r6, pc}
	...

08002380 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8002380:	6983      	ldr	r3, [r0, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd14      	ble.n	80023b0 <chMBFetchI+0x30>
 8002386:	1e5a      	subs	r2, r3, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8002388:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800238a:	b510      	push	{r4, lr}
 800238c:	6182      	str	r2, [r0, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 800238e:	6842      	ldr	r2, [r0, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8002390:	681c      	ldr	r4, [r3, #0]
 8002392:	3304      	adds	r3, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8002394:	4293      	cmp	r3, r2

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8002396:	60c3      	str	r3, [r0, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8002398:	bf28      	it	cs
 800239a:	6803      	ldrcs	r3, [r0, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800239c:	600c      	str	r4, [r1, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 800239e:	f100 001c 	add.w	r0, r0, #28
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80023a2:	bf28      	it	cs
 80023a4:	f840 3c10 	strcs.w	r3, [r0, #-16]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80023a8:	f7ff fad2 	bl	8001950 <chSemSignalI>

  return MSG_OK;
 80023ac:	2000      	movs	r0, #0
 80023ae:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
	...

080023c0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 80023c0:	b430      	push	{r4, r5}
 80023c2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80023c4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80023c6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80023c8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80023ca:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80023cc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80023ce:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80023d0:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80023d2:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 80023d4:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 80023d6:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80023d8:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 80023da:	bc30      	pop	{r4, r5}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop

080023e0 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80023e0:	2100      	movs	r1, #0
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80023e2:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80023e4:	6081      	str	r1, [r0, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80023e6:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 80023e8:	6142      	str	r2, [r0, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80023ea:	f06f 0101 	mvn.w	r1, #1
 80023ee:	f7ff b8df 	b.w	80015b0 <chThdDequeueAllI>
 80023f2:	bf00      	nop
	...

08002400 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8002400:	6983      	ldr	r3, [r0, #24]
 8002402:	6942      	ldr	r2, [r0, #20]
 8002404:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8002406:	b510      	push	{r4, lr}
 8002408:	6883      	ldr	r3, [r0, #8]
 800240a:	d00f      	beq.n	800242c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800240c:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 800240e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8002410:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 8002412:	6144      	str	r4, [r0, #20]
 8002414:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8002416:	6942      	ldr	r2, [r0, #20]
 8002418:	6903      	ldr	r3, [r0, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d301      	bcc.n	8002422 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800241e:	68c3      	ldr	r3, [r0, #12]
 8002420:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8002422:	2100      	movs	r1, #0
 8002424:	f7ff f8b4 	bl	8001590 <chThdDequeueNextI>

  return Q_OK;
 8002428:	2000      	movs	r0, #0
 800242a:	bd10      	pop	{r4, pc}
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ed      	beq.n	800240c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8002430:	f06f 0003 	mvn.w	r0, #3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	bf00      	nop
	...

08002440 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	2320      	movs	r3, #32
 8002444:	460e      	mov	r6, r1
 8002446:	4604      	mov	r4, r0
 8002448:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800244c:	69c3      	ldr	r3, [r0, #28]
 800244e:	b12b      	cbz	r3, 800245c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8002450:	4798      	blx	r3
 8002452:	e003      	b.n	800245c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8002454:	f7ff f884 	bl	8001560 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002458:	2800      	cmp	r0, #0
 800245a:	db15      	blt.n	8002488 <chIQGetTimeout+0x48>
 800245c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800245e:	4631      	mov	r1, r6
 8002460:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8002462:	2d00      	cmp	r5, #0
 8002464:	d0f6      	beq.n	8002454 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002466:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002468:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800246a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800246c:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800246e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
 8002472:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002474:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8002476:	bf28      	it	cs
 8002478:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800247a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800247c:	bf28      	it	cs
 800247e:	61a3      	strcs	r3, [r4, #24]
 8002480:	2300      	movs	r3, #0
 8002482:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800248c:	bd70      	pop	{r4, r5, r6, pc}
 800248e:	bf00      	nop

08002490 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002494:	4604      	mov	r4, r0
 8002496:	b083      	sub	sp, #12
 8002498:	4689      	mov	r9, r1
 800249a:	4693      	mov	fp, r2
 800249c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800249e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80024a2:	2720      	movs	r7, #32
 80024a4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80024a8:	2600      	movs	r6, #0
 80024aa:	9701      	str	r7, [sp, #4]
 80024ac:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80024ae:	f1b8 0f00 	cmp.w	r8, #0
 80024b2:	d005      	beq.n	80024c0 <chIQReadTimeout+0x30>
      nfy(iqp);
 80024b4:	4620      	mov	r0, r4
 80024b6:	47c0      	blx	r8
 80024b8:	e002      	b.n	80024c0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80024ba:	f7ff f851 	bl	8001560 <chThdEnqueueTimeoutS>
 80024be:	b9d8      	cbnz	r0, 80024f8 <chIQReadTimeout+0x68>
 80024c0:	68a7      	ldr	r7, [r4, #8]
 80024c2:	4629      	mov	r1, r5
 80024c4:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80024c6:	2f00      	cmp	r7, #0
 80024c8:	d0f7      	beq.n	80024ba <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80024ca:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80024cc:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 80024ce:	1c51      	adds	r1, r2, #1
 80024d0:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80024d2:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80024d4:	7813      	ldrb	r3, [r2, #0]
 80024d6:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 80024da:	6923      	ldr	r3, [r4, #16]
 80024dc:	69a2      	ldr	r2, [r4, #24]
 80024de:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80024e0:	bf24      	itt	cs
 80024e2:	68e3      	ldrcs	r3, [r4, #12]
 80024e4:	61a3      	strcs	r3, [r4, #24]
 80024e6:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 80024ea:	3601      	adds	r6, #1
    if (--n == 0U) {
 80024ec:	45b3      	cmp	fp, r6
 80024ee:	d005      	beq.n	80024fc <chIQReadTimeout+0x6c>
 80024f0:	9b01      	ldr	r3, [sp, #4]
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	e7da      	b.n	80024ae <chIQReadTimeout+0x1e>
 80024f8:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 80024fc:	4630      	mov	r0, r6
 80024fe:	b003      	add	sp, #12
 8002500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002510 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8002510:	b430      	push	{r4, r5}
 8002512:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8002514:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002516:	188d      	adds	r5, r1, r2
 8002518:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800251a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800251c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800251e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8002520:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8002522:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8002524:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8002526:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 8002528:	bc30      	pop	{r4, r5}
 800252a:	4770      	bx	lr
 800252c:	0000      	movs	r0, r0
	...

08002530 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 8002530:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8002532:	6902      	ldr	r2, [r0, #16]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8002534:	68c4      	ldr	r4, [r0, #12]
 8002536:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8002538:	1b12      	subs	r2, r2, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800253a:	6144      	str	r4, [r0, #20]
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800253c:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8002540:	6082      	str	r2, [r0, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
}
 8002542:	bc10      	pop	{r4}
  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8002544:	f7ff b834 	b.w	80015b0 <chThdDequeueAllI>
	...

08002550 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	4604      	mov	r4, r0
 8002554:	460f      	mov	r7, r1
 8002556:	4616      	mov	r6, r2
 8002558:	2320      	movs	r3, #32
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	e003      	b.n	8002568 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002560:	f7fe fffe 	bl	8001560 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002564:	2800      	cmp	r0, #0
 8002566:	db18      	blt.n	800259a <chOQPutTimeout+0x4a>
 8002568:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800256a:	4631      	mov	r1, r6
 800256c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800256e:	2d00      	cmp	r5, #0
 8002570:	d0f6      	beq.n	8002560 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8002572:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002574:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800257a:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 800257c:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800257e:	6923      	ldr	r3, [r4, #16]
 8002580:	6962      	ldr	r2, [r4, #20]
 8002582:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002584:	bf24      	itt	cs
 8002586:	68e3      	ldrcs	r3, [r4, #12]
 8002588:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800258a:	69e3      	ldr	r3, [r4, #28]
 800258c:	b10b      	cbz	r3, 8002592 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800258e:	4620      	mov	r0, r4
 8002590:	4798      	blx	r3
 8002592:	2000      	movs	r0, #0
 8002594:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8002598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800259a:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025a0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80025a0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80025a2:	6982      	ldr	r2, [r0, #24]
 80025a4:	6943      	ldr	r3, [r0, #20]
 80025a6:	4293      	cmp	r3, r2
 80025a8:	6883      	ldr	r3, [r0, #8]
 80025aa:	d00e      	beq.n	80025ca <chOQGetI+0x2a>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80025ac:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80025ae:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80025b0:	3301      	adds	r3, #1
 80025b2:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 80025b4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 80025b6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80025b8:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80025ba:	d301      	bcc.n	80025c0 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 80025bc:	68c3      	ldr	r3, [r0, #12]
 80025be:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 80025c0:	2100      	movs	r1, #0
 80025c2:	f7fe ffe5 	bl	8001590 <chThdDequeueNextI>

  return (msg_t)b;
 80025c6:	4620      	mov	r0, r4
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 80025ce:	f06f 0002 	mvn.w	r0, #2
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
	...

080025e0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e4:	b083      	sub	sp, #12
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	4616      	mov	r6, r2
 80025ec:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80025ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80025f2:	f04f 0920 	mov.w	r9, #32
 80025f6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 80025fa:	2700      	movs	r7, #0
 80025fc:	46ba      	mov	sl, r7
 80025fe:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8002600:	f105 0b01 	add.w	fp, r5, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8002604:	1e59      	subs	r1, r3, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002606:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8002608:	b1fb      	cbz	r3, 800264a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800260a:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800260c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	6161      	str	r1, [r4, #20]
 8002612:	7829      	ldrb	r1, [r5, #0]
 8002614:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8002616:	6923      	ldr	r3, [r4, #16]
 8002618:	6961      	ldr	r1, [r4, #20]
 800261a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800261c:	bf24      	itt	cs
 800261e:	68e3      	ldrcs	r3, [r4, #12]
 8002620:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8002622:	f1b8 0f00 	cmp.w	r8, #0
 8002626:	d000      	beq.n	800262a <chOQWriteTimeout+0x4a>
      nfy(oqp);
 8002628:	47c0      	blx	r8
 800262a:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800262e:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8002630:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8002634:	d013      	beq.n	800265e <chOQWriteTimeout+0x7e>
 8002636:	f389 8811 	msr	BASEPRI, r9
 800263a:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800263c:	465d      	mov	r5, fp
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800263e:	1e59      	subs	r1, r3, #1
    *oqp->q_wrptr++ = *bp++;
 8002640:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002644:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1df      	bne.n	800260a <chOQWriteTimeout+0x2a>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800264a:	9901      	ldr	r1, [sp, #4]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4620      	mov	r0, r4
 8002650:	f7fe ff86 	bl	8001560 <chThdEnqueueTimeoutS>
 8002654:	9b00      	ldr	r3, [sp, #0]
 8002656:	2800      	cmp	r0, #0
 8002658:	d0d1      	beq.n	80025fe <chOQWriteTimeout+0x1e>
 800265a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800265e:	4638      	mov	r0, r7
 8002660:	b003      	add	sp, #12
 8002662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
	...

08002670 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002676:	4907      	ldr	r1, [pc, #28]	; (8002694 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002678:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800267c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002680:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	200020b3 	.word	0x200020b3
 800268c:	20020000 	.word	0x20020000
 8002690:	20000e6c 	.word	0x20000e6c
 8002694:	20000e68 	.word	0x20000e68
	...

080026a0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80026a0:	b410      	push	{r4}
 80026a2:	2320      	movs	r3, #32
 80026a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80026a8:	4c09      	ldr	r4, [pc, #36]	; (80026d0 <chCoreAlloc+0x30>)
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <chCoreAlloc+0x34>)
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80026b0:	1dc3      	adds	r3, r0, #7
 80026b2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80026b6:	1a89      	subs	r1, r1, r2
 80026b8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80026ba:	bf9d      	ittte	ls
 80026bc:	189b      	addls	r3, r3, r2
 80026be:	6023      	strls	r3, [r4, #0]

  return p;
 80026c0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80026c2:	2000      	movhi	r0, #0
 80026c4:	2300      	movs	r3, #0
 80026c6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80026ca:	bc10      	pop	{r4}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000e6c 	.word	0x20000e6c
 80026d4:	20000e68 	.word	0x20000e68
	...

080026e0 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <chCoreGetStatusX+0xc>)
 80026e2:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <chCoreGetStatusX+0x10>)
 80026e4:	6810      	ldr	r0, [r2, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 80026e8:	1ac0      	subs	r0, r0, r3
 80026ea:	4770      	bx	lr
 80026ec:	20000e68 	.word	0x20000e68
 80026f0:	20000e6c 	.word	0x20000e6c
	...

08002700 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <_heap_init+0x14>)
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <_heap_init+0x18>)
 8002704:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8002706:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800270e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8002710:	f7ff b97e 	b.w	8001a10 <chMtxObjectInit>
 8002714:	20000e70 	.word	0x20000e70
 8002718:	080026a1 	.word	0x080026a1
 800271c:	00000000 	.word	0x00000000

08002720 <chHeapObjectInit>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8002720:	2300      	movs	r3, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002722:	3a08      	subs	r2, #8
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8002724:	6081      	str	r1, [r0, #8]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8002726:	6003      	str	r3, [r0, #0]
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8002728:	60c3      	str	r3, [r0, #12]
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 800272a:	3010      	adds	r0, #16

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800272c:	604a      	str	r2, [r1, #4]
  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
 800272e:	600b      	str	r3, [r1, #0]
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 8002730:	f7ff b96e 	b.w	8001a10 <chMtxObjectInit>
	...

08002740 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8002742:	4e21      	ldr	r6, [pc, #132]	; (80027c8 <chHeapAlloc+0x88>)
 8002744:	2800      	cmp	r0, #0
 8002746:	bf18      	it	ne
 8002748:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 800274a:	f106 0710 	add.w	r7, r6, #16

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 800274e:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8002750:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8002752:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8002756:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 800275a:	f7ff f9c9 	bl	8001af0 <chMtxLock>
  while (qp->h.u.next != NULL) {
 800275e:	e003      	b.n	8002768 <chHeapAlloc+0x28>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002760:	6843      	ldr	r3, [r0, #4]
 8002762:	429d      	cmp	r5, r3
 8002764:	d912      	bls.n	800278c <chHeapAlloc+0x4c>
 8002766:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	2800      	cmp	r0, #0
 800276c:	d1f8      	bne.n	8002760 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 800276e:	4638      	mov	r0, r7
 8002770:	f7ff f9e6 	bl	8001b40 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8002774:	6833      	ldr	r3, [r6, #0]
 8002776:	b32b      	cbz	r3, 80027c4 <chHeapAlloc+0x84>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002778:	f105 0008 	add.w	r0, r5, #8
 800277c:	4798      	blx	r3
    if (hp != NULL) {
 800277e:	b308      	cbz	r0, 80027c4 <chHeapAlloc+0x84>
      hp->h.u.heap = heapp;
 8002780:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8002782:	6045      	str	r5, [r0, #4]
      hp++;
 8002784:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8002788:	4620      	mov	r0, r4
 800278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 800278c:	f105 0208 	add.w	r2, r5, #8
 8002790:	4293      	cmp	r3, r2
 8002792:	d209      	bcs.n	80027a8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002794:	6803      	ldr	r3, [r0, #0]
 8002796:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002798:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 800279a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800279c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 80027a0:	f7ff f9ce 	bl	8001b40 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 80027a4:	4620      	mov	r0, r4
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80027a8:	f06f 0107 	mvn.w	r1, #7
 80027ac:	1b49      	subs	r1, r1, r5
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 80027ae:	eb00 0e02 	add.w	lr, r0, r2
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80027b2:	440b      	add	r3, r1
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80027b4:	6801      	ldr	r1, [r0, #0]
 80027b6:	5081      	str	r1, [r0, r2]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80027b8:	f8ce 3004 	str.w	r3, [lr, #4]
        qp->h.u.next = fp;
 80027bc:	f8c4 e000 	str.w	lr, [r4]
        hp->h.size = size;
 80027c0:	6045      	str	r5, [r0, #4]
 80027c2:	e7e9      	b.n	8002798 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 80027c4:	2400      	movs	r4, #0
 80027c6:	e7df      	b.n	8002788 <chHeapAlloc+0x48>
 80027c8:	20000e70 	.word	0x20000e70
 80027cc:	00000000 	.word	0x00000000

080027d0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 80027d2:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80027d6:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80027da:	4606      	mov	r6, r0
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 80027dc:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80027e0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 80027e2:	4638      	mov	r0, r7
 80027e4:	f7ff f984 	bl	8001af0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80027e8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80027ea:	42ab      	cmp	r3, r5
 80027ec:	d004      	beq.n	80027f8 <chHeapFree+0x28>
 80027ee:	42a3      	cmp	r3, r4
 80027f0:	d302      	bcc.n	80027f8 <chHeapFree+0x28>
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	42ab      	cmp	r3, r5
 80027f6:	d1fa      	bne.n	80027ee <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80027f8:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80027fa:	b11a      	cbz	r2, 8002804 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80027fc:	4294      	cmp	r4, r2
 80027fe:	d301      	bcc.n	8002804 <chHeapFree+0x34>
 8002800:	4613      	mov	r3, r2
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
  }
 8002802:	e7f2      	b.n	80027ea <chHeapFree+0x1a>
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002804:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8002808:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800280a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800280e:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8002812:	f101 0208 	add.w	r2, r1, #8
 8002816:	18a0      	adds	r0, r4, r2
 8002818:	42a8      	cmp	r0, r5
 800281a:	d00a      	beq.n	8002832 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	f101 0208 	add.w	r2, r1, #8
 8002822:	441a      	add	r2, r3
 8002824:	4294      	cmp	r4, r2
 8002826:	d012      	beq.n	800284e <chHeapFree+0x7e>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002828:	4638      	mov	r0, r7

  return;
}
 800282a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800282e:	f7ff b987 	b.w	8001b40 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002832:	6840      	ldr	r0, [r0, #4]
 8002834:	4401      	add	r1, r0
 8002836:	3108      	adds	r1, #8
 8002838:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 800283c:	58a2      	ldr	r2, [r4, r2]
 800283e:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	f101 0208 	add.w	r2, r1, #8
 8002848:	441a      	add	r2, r3
 800284a:	4294      	cmp	r4, r2
 800284c:	d1ec      	bne.n	8002828 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800284e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8002852:	440a      	add	r2, r1
 8002854:	3208      	adds	r2, #8
 8002856:	605a      	str	r2, [r3, #4]
        qp->h.u.next = hp->h.u.next;
 8002858:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800285c:	601a      	str	r2, [r3, #0]
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800285e:	4638      	mov	r0, r7

  return;
}
 8002860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002864:	f7ff b96c 	b.w	8001b40 <chMtxUnlock>
	...

08002870 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002870:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8002872:	4c0f      	ldr	r4, [pc, #60]	; (80028b0 <chHeapStatus+0x40>)
 8002874:	2800      	cmp	r0, #0
 8002876:	bf18      	it	ne
 8002878:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800287a:	f104 0510 	add.w	r5, r4, #16
 800287e:	4628      	mov	r0, r5
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002880:	460e      	mov	r6, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8002882:	f7ff f935 	bl	8001af0 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002886:	68a3      	ldr	r3, [r4, #8]
 8002888:	b173      	cbz	r3, 80028a8 <chHeapStatus+0x38>
 800288a:	2200      	movs	r2, #0
 800288c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800288e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002890:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8002892:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8002894:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 800289a:	b106      	cbz	r6, 800289e <chHeapStatus+0x2e>
    *sizep = sz;
 800289c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800289e:	4628      	mov	r0, r5
 80028a0:	f7ff f94e 	bl	8001b40 <chMtxUnlock>

  return n;
}
 80028a4:	4620      	mov	r0, r4
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 80028a8:	461a      	mov	r2, r3
  n = 0;
 80028aa:	461c      	mov	r4, r3
 80028ac:	e7f5      	b.n	800289a <chHeapStatus+0x2a>
 80028ae:	bf00      	nop
 80028b0:	20000e70 	.word	0x20000e70
	...

080028c0 <chPoolObjectInit>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80028c0:	2300      	movs	r3, #0
  mp->mp_object_size = size;
 80028c2:	6041      	str	r1, [r0, #4]
  mp->mp_provider = provider;
 80028c4:	6082      	str	r2, [r0, #8]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80028c6:	6003      	str	r3, [r0, #0]
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	0000      	movs	r0, r0
	...

080028d0 <chPoolLoadArray>:
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 80028d0:	b172      	cbz	r2, 80028f0 <chPoolLoadArray+0x20>
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 80028d2:	b430      	push	{r4, r5}
 80028d4:	2520      	movs	r5, #32
 80028d6:	2400      	movs	r4, #0
 80028d8:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80028dc:	6803      	ldr	r3, [r0, #0]
 80028de:	600b      	str	r3, [r1, #0]
  mp->mp_next = php;
 80028e0:	6001      	str	r1, [r0, #0]
 80028e2:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80028e6:	6843      	ldr	r3, [r0, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 80028e8:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80028ea:	4419      	add	r1, r3
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 80028ec:	d1f4      	bne.n	80028d8 <chPoolLoadArray+0x8>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
    /*lint -restore*/
    n--;
  }
}
 80028ee:	bc30      	pop	{r4, r5}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
	...

08002900 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8002900:	b508      	push	{r3, lr}
 8002902:	2220      	movs	r2, #32
 8002904:	4603      	mov	r3, r0
 8002906:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 800290a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 800290c:	b128      	cbz	r0, 800291a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8002918:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	2a00      	cmp	r2, #0
 800291e:	d0f8      	beq.n	8002912 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8002920:	6858      	ldr	r0, [r3, #4]
 8002922:	4790      	blx	r2
 8002924:	2300      	movs	r3, #0
 8002926:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 800292a:	bd08      	pop	{r3, pc}
 800292c:	0000      	movs	r0, r0
	...

08002930 <chPoolFree>:
 8002930:	2320      	movs	r3, #32
 8002932:	f383 8811 	msr	BASEPRI, r3
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002936:	6803      	ldr	r3, [r0, #0]
 8002938:	600b      	str	r3, [r1, #0]
 800293a:	2300      	movs	r3, #0
  mp->mp_next = php;
 800293c:	6001      	str	r1, [r0, #0]
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	4770      	bx	lr
	...

08002950 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002950:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002954:	3320      	adds	r3, #32
 8002956:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800295a:	2300      	movs	r3, #0
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
	...

08002970 <_port_irq_epilogue>:
 8002970:	2320      	movs	r3, #32
 8002972:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <_port_irq_epilogue+0x44>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800297e:	d102      	bne.n	8002986 <_port_irq_epilogue+0x16>
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8002986:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002988:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800298c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002990:	f844 3c04 	str.w	r3, [r4, #-4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002994:	f1a4 0320 	sub.w	r3, r4, #32
 8002998:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800299c:	f7fe fc18 	bl	80011d0 <chSchIsPreemptionRequired>
 80029a0:	b118      	cbz	r0, 80029aa <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <_port_irq_epilogue+0x48>)
 80029a4:	f844 3c08 	str.w	r3, [r4, #-8]
 80029a8:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <_port_irq_epilogue+0x4c>)
 80029ac:	f844 3c08 	str.w	r3, [r4, #-8]
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00
 80029b8:	080002a1 	.word	0x080002a1
 80029bc:	080002a4 	.word	0x080002a4

080029c0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80029c0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 80029c2:	f001 f8cd 	bl	8003b60 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 80029c6:	480b      	ldr	r0, [pc, #44]	; (80029f4 <halInit+0x34>)
 80029c8:	f001 fb32 	bl	8004030 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 80029cc:	f000 f838 	bl	8002a40 <adcInit>
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 80029d0:	f000 f86e 	bl	8002ab0 <gptInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 80029d4:	f000 f8ac 	bl	8002b30 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80029d8:	f000 f922 	bl	8002c20 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80029dc:	f000 fb30 	bl	8003040 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 80029e0:	f000 fb9e 	bl	8003120 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 80029e4:	f000 fa1c 	bl	8002e20 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80029e8:	f002 fdb2 	bl	8005550 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 80029ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80029f0:	f000 b806 	b.w	8002a00 <stInit>
 80029f4:	0800a2f0 	.word	0x0800a2f0
	...

08002a00 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8002a00:	f001 b966 	b.w	8003cd0 <st_lld_init>
	...

08002a10 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8002a14:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002a16:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002a18:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002a1a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	4770      	bx	lr

08002a20 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	0000      	movs	r0, r0
	...

08002a30 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a34:	6358      	str	r0, [r3, #52]	; 0x34
 8002a36:	4770      	bx	lr
	...

08002a40 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8002a40:	f001 ba46 	b.w	8003ed0 <adc_lld_init>
	...

08002a50 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8002a50:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8002a52:	2201      	movs	r2, #1
 8002a54:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8002a56:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8002a58:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8002a5a:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8002a5c:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8002a5e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8002a60:	3018      	adds	r0, #24
 8002a62:	f7fe bfd5 	b.w	8001a10 <chMtxObjectInit>
 8002a66:	bf00      	nop
	...

08002a70 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 8002a70:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002a72:	2320      	movs	r3, #32
 8002a74:	4604      	mov	r4, r0
 8002a76:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8002a7a:	6041      	str	r1, [r0, #4]
  adc_lld_start(adcp);
 8002a7c:	f001 fa48 	bl	8003f10 <adc_lld_start>
  adcp->state = ADC_READY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	7023      	strb	r3, [r4, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	0000      	movs	r0, r0
	...

08002a90 <adcStartConversion>:
 * @api
 */
void adcStartConversion(ADCDriver *adcp,
                        const ADCConversionGroup *grpp,
                        adcsample_t *samples,
                        size_t depth) {
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	2520      	movs	r5, #32
 8002a94:	f385 8811 	msr	BASEPRI, r5
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8002a98:	2503      	movs	r5, #3
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8002a9a:	60c3      	str	r3, [r0, #12]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8002a9c:	6082      	str	r2, [r0, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8002a9e:	6101      	str	r1, [r0, #16]
  adcp->state    = ADC_ACTIVE;
 8002aa0:	7005      	strb	r5, [r0, #0]
  adc_lld_start_conversion(adcp);
 8002aa2:	f001 fa6d 	bl	8003f80 <adc_lld_start_conversion>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
 8002aae:	bf00      	nop

08002ab0 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
 8002ab0:	f002 bb26 	b.w	8005100 <gpt_lld_init>
	...

08002ac0 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8002ac0:	2201      	movs	r2, #1
  gptp->config = NULL;
 8002ac2:	2300      	movs	r3, #0
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8002ac4:	7002      	strb	r2, [r0, #0]
  gptp->config = NULL;
 8002ac6:	6043      	str	r3, [r0, #4]
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	0000      	movs	r0, r0
	...

08002ad0 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8002ada:	6041      	str	r1, [r0, #4]
  gpt_lld_start(gptp);
 8002adc:	f002 fb20 	bl	8005120 <gpt_lld_start>
  gptp->state = GPT_READY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	7023      	strb	r3, [r4, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	bd10      	pop	{r4, pc}
 8002aec:	0000      	movs	r0, r0
	...

08002af0 <gptChangeInterval>:
 8002af0:	2320      	movs	r3, #32
 8002af2:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);

  osalSysLock();
  osalDbgAssert(gptp->state == GPT_CONTINUOUS,
                "invalid state");
  gptChangeIntervalI(gptp, interval);
 8002af6:	68c3      	ldr	r3, [r0, #12]
 8002af8:	3901      	subs	r1, #1
 8002afa:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002afc:	2300      	movs	r3, #0
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	4770      	bx	lr
	...

08002b10 <gptStartContinuous>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @api
 */
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
 8002b10:	b508      	push	{r3, lr}
 8002b12:	2220      	movs	r2, #32
 8002b14:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8002b18:	2203      	movs	r2, #3
 8002b1a:	7002      	strb	r2, [r0, #0]
  gpt_lld_start_timer(gptp, interval);
 8002b1c:	f002 fb38 	bl	8005190 <gpt_lld_start_timer>
 8002b20:	2300      	movs	r3, #0
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	bd08      	pop	{r3, pc}
	...

08002b30 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8002b30:	f002 bb7e 	b.w	8005230 <pwm_lld_init>
	...

08002b40 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8002b40:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8002b42:	2201      	movs	r2, #1
 8002b44:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8002b46:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8002b48:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 8002b4a:	7403      	strb	r3, [r0, #16]
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8002b50:	b510      	push	{r4, lr}
 8002b52:	2320      	movs	r3, #32
 8002b54:	4604      	mov	r4, r0
 8002b56:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8002b5a:	684b      	ldr	r3, [r1, #4]
 8002b5c:	6083      	str	r3, [r0, #8]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002b5e:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 8002b60:	f002 fb76 	bl	8005250 <pwm_lld_start>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8002b64:	2202      	movs	r2, #2
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8002b66:	2300      	movs	r3, #0
  pwmp->state = PWM_READY;
 8002b68:	7022      	strb	r2, [r4, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8002b6a:	60e3      	str	r3, [r4, #12]
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	bf00      	nop
	...

08002b80 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	2420      	movs	r4, #32
 8002b84:	f384 8811 	msr	BASEPRI, r4

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002b88:	2401      	movs	r4, #1
 8002b8a:	68c6      	ldr	r6, [r0, #12]
 8002b8c:	fa04 f301 	lsl.w	r3, r4, r1
 8002b90:	4333      	orrs	r3, r6
 8002b92:	60c3      	str	r3, [r0, #12]
 8002b94:	f002 fbd4 	bl	8005340 <pwm_lld_enable_channel>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}

08002ba0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002ba0:	300c      	adds	r0, #12
 8002ba2:	f7ff bc75 	b.w	8002490 <chIQReadTimeout>
 8002ba6:	bf00      	nop
	...

08002bb0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002bb0:	300c      	adds	r0, #12
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb6:	f7ff bc6b 	b.w	8002490 <chIQReadTimeout>
 8002bba:	bf00      	nop
 8002bbc:	0000      	movs	r0, r0
	...

08002bc0 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002bc0:	3030      	adds	r0, #48	; 0x30
 8002bc2:	f7ff bd0d 	b.w	80025e0 <chOQWriteTimeout>
 8002bc6:	bf00      	nop
	...

08002bd0 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002bd0:	3030      	adds	r0, #48	; 0x30
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd6:	f7ff bd03 	b.w	80025e0 <chOQWriteTimeout>
 8002bda:	bf00      	nop
 8002bdc:	0000      	movs	r0, r0
	...

08002be0 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002be0:	300c      	adds	r0, #12
 8002be2:	f7ff bc2d 	b.w	8002440 <chIQGetTimeout>
 8002be6:	bf00      	nop
	...

08002bf0 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002bf0:	300c      	adds	r0, #12
 8002bf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf6:	f7ff bc23 	b.w	8002440 <chIQGetTimeout>
 8002bfa:	bf00      	nop
 8002bfc:	0000      	movs	r0, r0
	...

08002c00 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002c00:	3030      	adds	r0, #48	; 0x30
 8002c02:	f7ff bca5 	b.w	8002550 <chOQPutTimeout>
 8002c06:	bf00      	nop
	...

08002c10 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002c10:	3030      	adds	r0, #48	; 0x30
 8002c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c16:	f7ff bc9b 	b.w	8002550 <chOQPutTimeout>
 8002c1a:	bf00      	nop
 8002c1c:	0000      	movs	r0, r0
	...

08002c20 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8002c20:	f002 bc2e 	b.w	8005480 <sd_lld_init>
	...

08002c30 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002c30:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002c34:	4604      	mov	r4, r0
 8002c36:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 8002c38:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002c3c:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002c3e:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002c40:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002c42:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002c44:	6060      	str	r0, [r4, #4]
 8002c46:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8002c4a:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002c4e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002c50:	2210      	movs	r2, #16
 8002c52:	f7ff fbb5 	bl	80023c0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8002c56:	9400      	str	r4, [sp, #0]
 8002c58:	462b      	mov	r3, r5
 8002c5a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8002c5e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002c62:	2210      	movs	r2, #16
 8002c64:	f7ff fc54 	bl	8002510 <chOQObjectInit>
}
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	0800a150 	.word	0x0800a150

08002c70 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8002c70:	b510      	push	{r4, lr}
 8002c72:	2320      	movs	r3, #32
 8002c74:	4604      	mov	r4, r0
 8002c76:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 8002c7a:	f002 fc11 	bl	80054a0 <sd_lld_start>
  sdp->state = SD_READY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	7223      	strb	r3, [r4, #8]
 8002c82:	2300      	movs	r3, #0
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	0000      	movs	r0, r0
	...

08002c90 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002c90:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002c92:	6943      	ldr	r3, [r0, #20]
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002c94:	4604      	mov	r4, r0
 8002c96:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002c98:	b13b      	cbz	r3, 8002caa <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f104 000c 	add.w	r0, r4, #12
 8002ca0:	f7ff fbae 	bl	8002400 <chIQPutI>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	db0b      	blt.n	8002cc0 <sdIncomingDataI+0x30>
 8002ca8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002caa:	2104      	movs	r1, #4
 8002cac:	4408      	add	r0, r1
 8002cae:	f7ff f8f7 	bl	8001ea0 <chEvtBroadcastFlagsI>
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f104 000c 	add.w	r0, r4, #12
 8002cb8:	f7ff fba2 	bl	8002400 <chIQPutI>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	daf3      	bge.n	8002ca8 <sdIncomingDataI+0x18>
 8002cc0:	1d20      	adds	r0, r4, #4
 8002cc2:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 8002cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cc8:	f7ff b8ea 	b.w	8001ea0 <chEvtBroadcastFlagsI>
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8002cd0:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002cd2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002cd4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	7819      	ldrb	r1, [r3, #0]
 8002cdc:	2904      	cmp	r1, #4
 8002cde:	d000      	beq.n	8002ce2 <onotify+0x12>
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	7a21      	ldrb	r1, [r4, #8]
 8002ce4:	2902      	cmp	r1, #2
 8002ce6:	d1fb      	bne.n	8002ce0 <onotify+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8002ce8:	7910      	ldrb	r0, [r2, #4]
 8002cea:	8919      	ldrh	r1, [r3, #8]
 8002cec:	2201      	movs	r2, #1
 8002cee:	fa02 f300 	lsl.w	r3, r2, r0
 8002cf2:	ea13 0201 	ands.w	r2, r3, r1
 8002cf6:	d1f3      	bne.n	8002ce0 <onotify+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8002cf8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002cfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cfe:	1acb      	subs	r3, r1, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8002d00:	1a1b      	subs	r3, r3, r0
 8002d02:	d0ed      	beq.n	8002ce0 <onotify+0x10>
 8002d04:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 8002d08:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002d0c:	7911      	ldrb	r1, [r2, #4]
 8002d0e:	6810      	ldr	r0, [r2, #0]
 8002d10:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8002d14:	f000 fa5c 	bl	80031d0 <usbPrepareQueuedTransmit>
 8002d18:	2320      	movs	r3, #32
 8002d1a:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8002d1e:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    }
  }
}
 8002d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8002d26:	7919      	ldrb	r1, [r3, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f000 ba71 	b.w	8003210 <usbStartTransmitI>
 8002d2e:	bf00      	nop

08002d30 <inotify>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8002d30:	b538      	push	{r3, r4, r5, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002d32:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002d34:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	7819      	ldrb	r1, [r3, #0]
 8002d3c:	2904      	cmp	r1, #4
 8002d3e:	d000      	beq.n	8002d42 <inotify+0x12>
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	7a21      	ldrb	r1, [r4, #8]
 8002d44:	2902      	cmp	r1, #2
 8002d46:	d1fb      	bne.n	8002d40 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002d48:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8002d4a:	8959      	ldrh	r1, [r3, #10]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4082      	lsls	r2, r0
 8002d50:	400a      	ands	r2, r1
 8002d52:	d1f5      	bne.n	8002d40 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002d54:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8002d58:	69a1      	ldr	r1, [r4, #24]
 8002d5a:	69e0      	ldr	r0, [r4, #28]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	6965      	ldr	r5, [r4, #20]
 8002d60:	8a5b      	ldrh	r3, [r3, #18]
 8002d62:	1a40      	subs	r0, r0, r1
 8002d64:	1b41      	subs	r1, r0, r5
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d8ea      	bhi.n	8002d40 <inotify+0x10>
 8002d6a:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
      usbPrepareQueuedReceive(sdup->config->usbp,
 8002d6e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002d72:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002d76:	fb03 f301 	mul.w	r3, r3, r1
 8002d7a:	6810      	ldr	r0, [r2, #0]
 8002d7c:	7951      	ldrb	r1, [r2, #5]
 8002d7e:	f104 020c 	add.w	r2, r4, #12
 8002d82:	f000 fa15 	bl	80031b0 <usbPrepareQueuedReceive>
 8002d86:	2320      	movs	r3, #32
 8002d88:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8002d8c:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002d90:	7959      	ldrb	r1, [r3, #5]
 8002d92:	6818      	ldr	r0, [r3, #0]
    }
  }
}
 8002d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8002d98:	f000 ba2a 	b.w	80031f0 <usbStartReceiveI>
 8002d9c:	0000      	movs	r0, r0
	...

08002da0 <readt>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 8002da0:	300c      	adds	r0, #12
 8002da2:	f7ff bb75 	b.w	8002490 <chIQReadTimeout>
 8002da6:	bf00      	nop
	...

08002db0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8002db0:	300c      	adds	r0, #12
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db6:	f7ff bb6b 	b.w	8002490 <chIQReadTimeout>
 8002dba:	bf00      	nop
 8002dbc:	0000      	movs	r0, r0
	...

08002dc0 <writet>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 8002dc0:	3030      	adds	r0, #48	; 0x30
 8002dc2:	f7ff bc0d 	b.w	80025e0 <chOQWriteTimeout>
 8002dc6:	bf00      	nop
	...

08002dd0 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8002dd0:	3030      	adds	r0, #48	; 0x30
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd6:	f7ff bc03 	b.w	80025e0 <chOQWriteTimeout>
 8002dda:	bf00      	nop
 8002ddc:	0000      	movs	r0, r0
	...

08002de0 <gett>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8002de0:	300c      	adds	r0, #12
 8002de2:	f7ff bb2d 	b.w	8002440 <chIQGetTimeout>
 8002de6:	bf00      	nop
	...

08002df0 <get>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8002df0:	300c      	adds	r0, #12
 8002df2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002df6:	f7ff bb23 	b.w	8002440 <chIQGetTimeout>
 8002dfa:	bf00      	nop
 8002dfc:	0000      	movs	r0, r0
	...

08002e00 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8002e00:	3030      	adds	r0, #48	; 0x30
 8002e02:	f7ff bba5 	b.w	8002550 <chOQPutTimeout>
 8002e06:	bf00      	nop
	...

08002e10 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002e10:	3030      	adds	r0, #48	; 0x30
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e16:	f7ff bb9b 	b.w	8002550 <chOQPutTimeout>
 8002e1a:	bf00      	nop
 8002e1c:	0000      	movs	r0, r0
	...

08002e20 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
	...

08002e30 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8002e30:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <sduObjectInit+0x40>)
 8002e36:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8002e3a:	b082      	sub	sp, #8

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8002e3c:	2201      	movs	r2, #1
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8002e3e:	4604      	mov	r4, r0

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 8002e40:	9000      	str	r0, [sp, #0]
 8002e42:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8002e46:	6043      	str	r3, [r0, #4]
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8002e48:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <sduObjectInit+0x44>)
 8002e4c:	300c      	adds	r0, #12
 8002e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e52:	f7ff fab5 	bl	80023c0 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 8002e56:	9400      	str	r4, [sp, #0]
 8002e58:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 8002e5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <sduObjectInit+0x48>)
 8002e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e66:	f7ff fb53 	bl	8002510 <chOQObjectInit>
}
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	bf00      	nop
 8002e70:	0800a170 	.word	0x0800a170
 8002e74:	08002d31 	.word	0x08002d31
 8002e78:	08002cd1 	.word	0x08002cd1
 8002e7c:	00000000 	.word	0x00000000

08002e80 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8002e80:	680b      	ldr	r3, [r1, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002e88:	790a      	ldrb	r2, [r1, #4]
 8002e8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002e8e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002e90:	794a      	ldrb	r2, [r1, #5]
 8002e92:	3209      	adds	r2, #9
 8002e94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8002e98:	798a      	ldrb	r2, [r1, #6]
 8002e9a:	b112      	cbz	r2, 8002ea2 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 8002e9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002ea0:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002ea6:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
	...

08002ec0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8002ec0:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 8002ec2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 8002ec6:	f100 060c 	add.w	r6, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8002eca:	4604      	mov	r4, r0
  USBDriver *usbp = sdup->config->usbp;

  iqResetI(&sdup->iqueue);
 8002ecc:	4630      	mov	r0, r6
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8002ece:	681d      	ldr	r5, [r3, #0]

  iqResetI(&sdup->iqueue);
 8002ed0:	f7ff fa86 	bl	80023e0 <chIQResetI>
  oqResetI(&sdup->oqueue);
 8002ed4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002ed8:	f7ff fb2a 	bl	8002530 <chOQResetI>
 8002edc:	1d20      	adds	r0, r4, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f7fe ffde 	bl	8001ea0 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8002ee4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002ee8:	7959      	ldrb	r1, [r3, #5]
 8002eea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8002eee:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8002ef0:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8002ef2:	4632      	mov	r2, r6
 8002ef4:	8a5b      	ldrh	r3, [r3, #18]
 8002ef6:	f000 f95b 	bl	80031b0 <usbPrepareQueuedReceive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8002efa:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002efe:	4628      	mov	r0, r5
 8002f00:	7959      	ldrb	r1, [r3, #5]
}
 8002f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8002f06:	f000 b973 	b.w	80031f0 <usbStartReceiveI>
 8002f0a:	bf00      	nop
 8002f0c:	0000      	movs	r0, r0
	...

08002f10 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8002f10:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d001      	beq.n	8002f20 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 8002f1c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 8002f1e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8002f20:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002f24:	2b21      	cmp	r3, #33	; 0x21
 8002f26:	d003      	beq.n	8002f30 <sduRequestsHook+0x20>
 8002f28:	2b22      	cmp	r3, #34	; 0x22
 8002f2a:	d009      	beq.n	8002f40 <sduRequestsHook+0x30>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d1f5      	bne.n	8002f1c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <sduRequestsHook+0x3c>)
 8002f32:	6383      	str	r3, [r0, #56]	; 0x38
 8002f34:	2207      	movs	r2, #7
 8002f36:	2300      	movs	r3, #0
 8002f38:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002f3a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002f40:	2300      	movs	r3, #0
 8002f42:	6383      	str	r3, [r0, #56]	; 0x38
 8002f44:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002f46:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	4770      	bx	lr
 8002f4c:	20000800 	.word	0x20000800

08002f50 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002f52:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002f56:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 8002f58:	b1bc      	cbz	r4, 8002f8a <sduDataTransmitted+0x3a>
 8002f5a:	460e      	mov	r6, r1
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	2720      	movs	r7, #32
 8002f60:	f387 8811 	msr	BASEPRI, r7
 8002f64:	2108      	movs	r1, #8
 8002f66:	1d20      	adds	r0, r4, #4
 8002f68:	f7fe ff9a 	bl	8001ea0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8002f6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f72:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8002f74:	1a5b      	subs	r3, r3, r1
 8002f76:	d110      	bne.n	8002f9a <sduDataTransmitted+0x4a>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8002f78:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	6852      	ldr	r2, [r2, #4]
 8002f82:	b91a      	cbnz	r2, 8002f8c <sduDataTransmitted+0x3c>
 8002f84:	2300      	movs	r3, #0
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8c:	8a1b      	ldrh	r3, [r3, #16]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	d1f7      	bne.n	8002f84 <sduDataTransmitted+0x34>
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	e002      	b.n	8002fa0 <sduDataTransmitted+0x50>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f382 8811 	msr	BASEPRI, r2
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 8002fa0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f000 f912 	bl	80031d0 <usbPrepareQueuedTransmit>
 8002fac:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 8002fb0:	4631      	mov	r1, r6
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 f92c 	bl	8003210 <usbStartTransmitI>
 8002fb8:	e7e4      	b.n	8002f84 <sduDataTransmitted+0x34>
 8002fba:	bf00      	nop
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8002fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002fc4:	f101 0309 	add.w	r3, r1, #9
 8002fc8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]

  if (sdup == NULL) {
 8002fcc:	b1be      	cbz	r6, 8002ffe <sduDataReceived+0x3e>
 8002fce:	4680      	mov	r8, r0
 8002fd0:	460f      	mov	r7, r1
 8002fd2:	f04f 0920 	mov.w	r9, #32
 8002fd6:	f389 8811 	msr	BASEPRI, r9
 8002fda:	2104      	movs	r1, #4
 8002fdc:	1870      	adds	r0, r6, r1
 8002fde:	f7fe ff5f 	bl	8001ea0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8002fe2:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8002fe6:	69b4      	ldr	r4, [r6, #24]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69f5      	ldr	r5, [r6, #28]
 8002fec:	6973      	ldr	r3, [r6, #20]
 8002fee:	8a51      	ldrh	r1, [r2, #18]
 8002ff0:	1b2d      	subs	r5, r5, r4
 8002ff2:	1aec      	subs	r4, r5, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8002ff4:	42a1      	cmp	r1, r4
 8002ff6:	d904      	bls.n	8003002 <sduDataReceived+0x42>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003002:	2300      	movs	r3, #0
 8003004:	f383 8811 	msr	BASEPRI, r3
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8003008:	fbb4 f3f1 	udiv	r3, r4, r1
 800300c:	f106 020c 	add.w	r2, r6, #12
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4640      	mov	r0, r8
 8003016:	4639      	mov	r1, r7
 8003018:	f000 f8ca 	bl	80031b0 <usbPrepareQueuedReceive>
 800301c:	f389 8811 	msr	BASEPRI, r9

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8003020:	4639      	mov	r1, r7
 8003022:	4640      	mov	r0, r8
 8003024:	f000 f8e4 	bl	80031f0 <usbStartReceiveI>
 8003028:	e7e6      	b.n	8002ff8 <sduDataReceived+0x38>
 800302a:	bf00      	nop
 800302c:	0000      	movs	r0, r0
	...

08003030 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
	...

08003040 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8003040:	f001 bf4e 	b.w	8004ee0 <spi_lld_init>
	...

08003050 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 8003050:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8003052:	2201      	movs	r2, #1
 8003054:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 8003056:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8003058:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800305a:	300c      	adds	r0, #12
 800305c:	f7fe bcd8 	b.w	8001a10 <chMtxObjectInit>

08003060 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8003060:	b510      	push	{r4, lr}
 8003062:	2320      	movs	r3, #32
 8003064:	4604      	mov	r4, r0
 8003066:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800306a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800306c:	f001 ff70 	bl	8004f50 <spi_lld_start>
  spip->state = SPI_READY;
 8003070:	2302      	movs	r3, #2
 8003072:	7023      	strb	r3, [r4, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	bd10      	pop	{r4, pc}
 800307c:	0000      	movs	r0, r0
	...

08003080 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8003080:	b508      	push	{r3, lr}
 8003082:	2320      	movs	r3, #32
 8003084:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8003088:	f001 ffca 	bl	8005020 <spi_lld_select>
 800308c:	2300      	movs	r3, #0
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	bd08      	pop	{r3, pc}
	...

080030a0 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 80030a0:	b508      	push	{r3, lr}
 80030a2:	2320      	movs	r3, #32
 80030a4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 80030a8:	f001 ffc2 	bl	8005030 <spi_lld_unselect>
 80030ac:	2300      	movs	r3, #0
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	bd08      	pop	{r3, pc}
	...

080030c0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4604      	mov	r4, r0
 80030c4:	2520      	movs	r5, #32
 80030c6:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80030ca:	2503      	movs	r5, #3
 80030cc:	f804 5b08 	strb.w	r5, [r4], #8
 80030d0:	f001 ffb6 	bl	8005040 <spi_lld_exchange>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fe fa23 	bl	8001520 <chThdSuspendS>
 80030da:	2300      	movs	r3, #0
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	bd38      	pop	{r3, r4, r5, pc}
 80030e2:	bf00      	nop
	...

080030f0 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 80030f0:	b510      	push	{r4, lr}
 80030f2:	2320      	movs	r3, #32
 80030f4:	4604      	mov	r4, r0
 80030f6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 80030fa:	2303      	movs	r3, #3
 80030fc:	f804 3b08 	strb.w	r3, [r4], #8
 8003100:	f001 ffbe 	bl	8005080 <spi_lld_send>
 8003104:	4620      	mov	r0, r4
 8003106:	f7fe fa0b 	bl	8001520 <chThdSuspendS>
 800310a:	2300      	movs	r3, #0
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
	...

08003120 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8003120:	f001 ba9e 	b.w	8004660 <usb_lld_init>
	...

08003130 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8003130:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8003132:	2201      	movs	r2, #1
 8003134:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8003136:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8003138:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800313a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800313c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800313e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8003140:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8003142:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8003144:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 8003146:	8143      	strh	r3, [r0, #10]
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	0000      	movs	r0, r0
	...

08003150 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4604      	mov	r4, r0
 8003154:	2320      	movs	r3, #32
 8003156:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800315a:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800315c:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800315e:	60c5      	str	r5, [r0, #12]
 8003160:	6105      	str	r5, [r0, #16]
 8003162:	6145      	str	r5, [r0, #20]
 8003164:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 8003166:	f001 fa93 	bl	8004690 <usb_lld_start>
  usbp->state = USB_READY;
 800316a:	2302      	movs	r3, #2
 800316c:	7023      	strb	r3, [r4, #0]
 800316e:	f385 8811 	msr	BASEPRI, r5
 8003172:	bd38      	pop	{r3, r4, r5, pc}
	...

08003180 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8003180:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8003182:	b410      	push	{r4}
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8003184:	b12b      	cbz	r3, 8003192 <usbInitEndpointI+0x12>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8003186:	2400      	movs	r4, #0
 8003188:	601c      	str	r4, [r3, #0]
 800318a:	605c      	str	r4, [r3, #4]
 800318c:	609c      	str	r4, [r3, #8]
 800318e:	60dc      	str	r4, [r3, #12]
 8003190:	611c      	str	r4, [r3, #16]
  }
  if (epcp->out_state != NULL) {
 8003192:	6993      	ldr	r3, [r2, #24]
 8003194:	b12b      	cbz	r3, 80031a2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8003196:	2400      	movs	r4, #0
 8003198:	601c      	str	r4, [r3, #0]
 800319a:	605c      	str	r4, [r3, #4]
 800319c:	609c      	str	r4, [r3, #8]
 800319e:	60dc      	str	r4, [r3, #12]
 80031a0:	611c      	str	r4, [r3, #16]
  }

  usbp->epc[ep] = epcp;
 80031a2:	eb00 0381 	add.w	r3, r0, r1, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 80031a6:	bc10      	pop	{r4}
  }
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  usbp->epc[ep] = epcp;
 80031a8:	60da      	str	r2, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80031aa:	f001 bb61 	b.w	8004870 <usb_lld_init_endpoint>
 80031ae:	bf00      	nop

080031b0 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 80031b0:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80031b2:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 80031b6:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80031b8:	68e4      	ldr	r4, [r4, #12]
 80031ba:	69a4      	ldr	r4, [r4, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80031bc:	2500      	movs	r5, #0
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 80031be:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
 80031c0:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 80031c2:	7026      	strb	r6, [r4, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80031c4:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 80031c6:	bc70      	pop	{r4, r5, r6}
  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80031c8:	f001 bc3a 	b.w	8004a40 <usb_lld_prepare_receive>
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 80031d0:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80031d2:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 80031d6:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80031d8:	68e4      	ldr	r4, [r4, #12]
 80031da:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80031dc:	2500      	movs	r5, #0
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 80031de:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 80031e0:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 80031e2:	7026      	strb	r6, [r4, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80031e4:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 80031e6:	bc70      	pop	{r4, r5, r6}
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80031e8:	f001 bcaa 	b.w	8004b40 <usb_lld_prepare_transmit>
 80031ec:	0000      	movs	r0, r0
	...

080031f0 <usbStartReceiveI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 80031f0:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 80031f2:	2301      	movs	r3, #1
 80031f4:	8944      	ldrh	r4, [r0, #10]
 80031f6:	fa03 f201 	lsl.w	r2, r3, r1
 80031fa:	ea14 0602 	ands.w	r6, r4, r2
 80031fe:	d001      	beq.n	8003204 <usbStartReceiveI+0x14>
    return true;
 8003200:	4618      	mov	r0, r3
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8003202:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003204:	4322      	orrs	r2, r4
 8003206:	8142      	strh	r2, [r0, #10]
  usb_lld_start_out(usbp, ep);
 8003208:	f001 fdb2 	bl	8004d70 <usb_lld_start_out>
  return false;
 800320c:	4630      	mov	r0, r6
 800320e:	bd70      	pop	{r4, r5, r6, pc}

08003210 <usbStartTransmitI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8003210:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8003212:	2301      	movs	r3, #1
 8003214:	8904      	ldrh	r4, [r0, #8]
 8003216:	fa03 f201 	lsl.w	r2, r3, r1
 800321a:	ea14 0602 	ands.w	r6, r4, r2
 800321e:	d001      	beq.n	8003224 <usbStartTransmitI+0x14>
    return true;
 8003220:	4618      	mov	r0, r3
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8003222:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003224:	4322      	orrs	r2, r4
 8003226:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8003228:	f001 fdb2 	bl	8004d90 <usb_lld_start_in>
  return false;
 800322c:	4630      	mov	r0, r6
 800322e:	bd70      	pop	{r4, r5, r6, pc}

08003230 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8003230:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8003232:	2102      	movs	r1, #2
 8003234:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 8003236:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800323a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800323e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 8003242:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 8003244:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8003246:	60c2      	str	r2, [r0, #12]
 8003248:	6102      	str	r2, [r0, #16]
 800324a:	6142      	str	r2, [r0, #20]
 800324c:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800324e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8003252:	f001 ba95 	b.w	8004780 <usb_lld_reset>
 8003256:	bf00      	nop
	...

08003260 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8003262:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8003264:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8003266:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800326a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800326e:	f001 fbd7 	bl	8004a20 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8003272:	6863      	ldr	r3, [r4, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d036      	beq.n	80032e8 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 800327a:	4620      	mov	r0, r4
 800327c:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800327e:	2800      	cmp	r0, #0
 8003280:	d032      	beq.n	80032e8 <_usb_ep0setup+0x88>
 8003282:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003284:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8003288:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800328c:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8003290:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8003294:	4282      	cmp	r2, r0
    usbp->ep0n = max;
 8003296:	bf3c      	itt	cc
 8003298:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800329a:	4610      	movcc	r0, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800329c:	061a      	lsls	r2, r3, #24
 800329e:	f100 80ab 	bmi.w	80033f8 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f000 808b 	beq.w	80033be <_usb_ep0setup+0x15e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80032a8:	68e3      	ldr	r3, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 80032aa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80032ac:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80032ae:	2200      	movs	r2, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80032b0:	2104      	movs	r1, #4
 80032b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80032b6:	4611      	mov	r1, r2
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 80032b8:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80032ba:	6058      	str	r0, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80032bc:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80032be:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80032c0:	4620      	mov	r0, r4
 80032c2:	f001 fbbd 	bl	8004a40 <usb_lld_prepare_receive>
 80032c6:	2320      	movs	r3, #32
 80032c8:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 80032cc:	8963      	ldrh	r3, [r4, #10]
 80032ce:	f013 0101 	ands.w	r1, r3, #1
 80032d2:	d105      	bne.n	80032e0 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80032da:	4620      	mov	r0, r4
 80032dc:	f001 fd48 	bl	8004d70 <usb_lld_start_out>
 80032e0:	2300      	movs	r3, #0
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80032e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80032ec:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 80032f0:	461e      	mov	r6, r3
 80032f2:	d011      	beq.n	8003318 <_usb_ep0setup+0xb8>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 80032f4:	2100      	movs	r1, #0
 80032f6:	4620      	mov	r0, r4
 80032f8:	f001 fd72 	bl	8004de0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 80032fc:	2100      	movs	r1, #0
 80032fe:	4620      	mov	r0, r4
 8003300:	f001 fd5e 	bl	8004dc0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8003304:	6863      	ldr	r3, [r4, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b113      	cbz	r3, 8003310 <_usb_ep0setup+0xb0>
 800330a:	2105      	movs	r1, #5
 800330c:	4620      	mov	r0, r4
 800330e:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8003310:	2306      	movs	r3, #6
 8003312:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003318:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800331c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003320:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 8003324:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8003328:	f000 80eb 	beq.w	8003502 <_usb_ep0setup+0x2a2>
 800332c:	d916      	bls.n	800335c <_usb_ep0setup+0xfc>
 800332e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8003332:	f000 80ce 	beq.w	80034d2 <_usb_ep0setup+0x272>
 8003336:	d92f      	bls.n	8003398 <_usb_ep0setup+0x138>
 8003338:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800333c:	d076      	beq.n	800342c <_usb_ep0setup+0x1cc>
 800333e:	f640 4202 	movw	r2, #3074	; 0xc02
 8003342:	4295      	cmp	r5, r2
 8003344:	f000 80ef 	beq.w	8003526 <_usb_ep0setup+0x2c6>
 8003348:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800334c:	d1d2      	bne.n	80032f4 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800334e:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8003352:	2001      	movs	r0, #1
 8003354:	6427      	str	r7, [r4, #64]	; 0x40
 8003356:	63a2      	str	r2, [r4, #56]	; 0x38
 8003358:	63e0      	str	r0, [r4, #60]	; 0x3c
 800335a:	e795      	b.n	8003288 <_usb_ep0setup+0x28>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800335c:	2d02      	cmp	r5, #2
 800335e:	f000 80a2 	beq.w	80034a6 <_usb_ep0setup+0x246>
 8003362:	f240 8097 	bls.w	8003494 <_usb_ep0setup+0x234>
 8003366:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800336a:	f000 8084 	beq.w	8003476 <_usb_ep0setup+0x216>
 800336e:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8003372:	d1bf      	bne.n	80032f4 <_usb_ep0setup+0x94>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8003374:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1bb      	bne.n	80032f4 <_usb_ep0setup+0x94>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800337c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8003380:	f013 010f 	ands.w	r1, r3, #15
 8003384:	d015      	beq.n	80033b2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003386:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8003388:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800338a:	f100 80f4 	bmi.w	8003576 <_usb_ep0setup+0x316>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800338e:	f001 fd37 	bl	8004e00 <usb_lld_clear_out>
 8003392:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003396:	e00c      	b.n	80033b2 <_usb_ep0setup+0x152>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003398:	f240 3302 	movw	r3, #770	; 0x302
 800339c:	429d      	cmp	r5, r3
 800339e:	d057      	beq.n	8003450 <_usb_ep0setup+0x1f0>
 80033a0:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80033a4:	d1a6      	bne.n	80032f4 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80033a6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80033aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033ae:	f000 80d0 	beq.w	8003552 <_usb_ep0setup+0x2f2>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80033b2:	2300      	movs	r3, #0
 80033b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80033b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80033b8:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80033ba:	0633      	lsls	r3, r6, #24
 80033bc:	d42a      	bmi.n	8003414 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80033c2:	2105      	movs	r1, #5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80033c4:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80033c6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80033ca:	4619      	mov	r1, r3
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80033cc:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 80033ce:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 80033d0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80033d2:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80033d4:	4620      	mov	r0, r4
 80033d6:	f001 fbb3 	bl	8004b40 <usb_lld_prepare_transmit>
 80033da:	2320      	movs	r3, #32
 80033dc:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 80033e0:	8923      	ldrh	r3, [r4, #8]
 80033e2:	f013 0101 	ands.w	r1, r3, #1
 80033e6:	f47f af7b 	bne.w	80032e0 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80033f0:	4620      	mov	r0, r4
 80033f2:	f001 fccd 	bl	8004d90 <usb_lld_start_in>
 80033f6:	e773      	b.n	80032e0 <_usb_ep0setup+0x80>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80033f8:	b160      	cbz	r0, 8003414 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80033fa:	68e3      	ldr	r3, [r4, #12]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 80033fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80033fe:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = false;
 8003400:	2200      	movs	r2, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8003402:	2101      	movs	r1, #1
 8003404:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8003408:	4611      	mov	r1, r2
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800340a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800340c:	6058      	str	r0, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800340e:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e7df      	b.n	80033d4 <_usb_ep0setup+0x174>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003414:	68e3      	ldr	r3, [r4, #12]
 8003416:	699a      	ldr	r2, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8003418:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800341a:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800341c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8003420:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8003422:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 8003424:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 8003426:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	e749      	b.n	80032c0 <_usb_ep0setup+0x60>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800342c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003430:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 8003434:	2b00      	cmp	r3, #0
 8003436:	d17d      	bne.n	8003534 <_usb_ep0setup+0x2d4>
      usbp->state = USB_SELECTED;
 8003438:	2303      	movs	r3, #3
 800343a:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0b6      	beq.n	80033b2 <_usb_ep0setup+0x152>
 8003444:	2102      	movs	r1, #2
 8003446:	4620      	mov	r0, r4
 8003448:	4798      	blx	r3
 800344a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800344e:	e7b0      	b.n	80033b2 <_usb_ep0setup+0x152>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8003450:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f af4d 	bne.w	80032f4 <_usb_ep0setup+0x94>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800345a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800345e:	f013 010f 	ands.w	r1, r3, #15
 8003462:	d0a6      	beq.n	80033b2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003464:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8003466:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003468:	f100 808a 	bmi.w	8003580 <_usb_ep0setup+0x320>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800346c:	f001 fca8 	bl	8004dc0 <usb_lld_stall_out>
 8003470:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003474:	e79d      	b.n	80033b2 <_usb_ep0setup+0x152>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8003476:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800347a:	2b01      	cmp	r3, #1
 800347c:	f47f af3a 	bne.w	80032f4 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 8003480:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003484:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8003486:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800348a:	63e7      	str	r7, [r4, #60]	; 0x3c
 800348c:	6427      	str	r7, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800348e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8003492:	e792      	b.n	80033ba <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003494:	2d00      	cmp	r5, #0
 8003496:	d143      	bne.n	8003520 <_usb_ep0setup+0x2c0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8003498:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800349c:	2002      	movs	r0, #2
 800349e:	6425      	str	r5, [r4, #64]	; 0x40
 80034a0:	63a2      	str	r2, [r4, #56]	; 0x38
 80034a2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80034a4:	e6f0      	b.n	8003288 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80034a6:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80034aa:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80034ae:	4620      	mov	r0, r4
 80034b0:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80034b4:	d141      	bne.n	800353a <_usb_ep0setup+0x2da>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80034b6:	f001 fa93 	bl	80049e0 <usb_lld_get_status_out>
 80034ba:	2801      	cmp	r0, #1
 80034bc:	d041      	beq.n	8003542 <_usb_ep0setup+0x2e2>
 80034be:	2802      	cmp	r0, #2
 80034c0:	f47f af18 	bne.w	80032f4 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <_usb_ep0setup+0x32c>)
 80034c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80034c8:	63e0      	str	r0, [r4, #60]	; 0x3c
 80034ca:	6427      	str	r7, [r4, #64]	; 0x40
 80034cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034d0:	e6da      	b.n	8003288 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80034d2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 80034d6:	6861      	ldr	r1, [r4, #4]
 80034d8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80034dc:	684d      	ldr	r5, [r1, #4]
 80034de:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80034e2:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80034e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80034ea:	4620      	mov	r0, r4
 80034ec:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 80034ee:	2800      	cmp	r0, #0
 80034f0:	f43f af00 	beq.w	80032f4 <_usb_ep0setup+0x94>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80034f4:	c809      	ldmia	r0, {r0, r3}
 80034f6:	6427      	str	r7, [r4, #64]	; 0x40
 80034f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80034fa:	63e0      	str	r0, [r4, #60]	; 0x3c
 80034fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003500:	e6c2      	b.n	8003288 <_usb_ep0setup+0x28>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8003502:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003506:	2b01      	cmp	r3, #1
 8003508:	f47f aef4 	bne.w	80032f4 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 800350c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003510:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8003512:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003516:	63e7      	str	r7, [r4, #60]	; 0x3c
 8003518:	6427      	str	r7, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800351a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800351e:	e74c      	b.n	80033ba <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003520:	2d01      	cmp	r5, #1
 8003522:	f47f aee7 	bne.w	80032f4 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8003526:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <_usb_ep0setup+0x330>)
 8003528:	63a2      	str	r2, [r4, #56]	; 0x38
 800352a:	2002      	movs	r0, #2
 800352c:	2200      	movs	r2, #0
 800352e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003530:	6422      	str	r2, [r4, #64]	; 0x40
 8003532:	e6a9      	b.n	8003288 <_usb_ep0setup+0x28>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8003534:	2304      	movs	r3, #4
 8003536:	7023      	strb	r3, [r4, #0]
 8003538:	e780      	b.n	800343c <_usb_ep0setup+0x1dc>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800353a:	f001 fa61 	bl	8004a00 <usb_lld_get_status_in>
 800353e:	2801      	cmp	r0, #1
 8003540:	d1bd      	bne.n	80034be <_usb_ep0setup+0x25e>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <_usb_ep0setup+0x334>)
 8003544:	63a3      	str	r3, [r4, #56]	; 0x38
 8003546:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003548:	6427      	str	r7, [r4, #64]	; 0x40
 800354a:	4628      	mov	r0, r5
 800354c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003550:	e69a      	b.n	8003288 <_usb_ep0setup+0x28>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8003552:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003556:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800355a:	4620      	mov	r0, r4
 800355c:	f001 f978 	bl	8004850 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b113      	cbz	r3, 800356c <_usb_ep0setup+0x30c>
 8003566:	2101      	movs	r1, #1
 8003568:	4620      	mov	r0, r4
 800356a:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800356c:	2303      	movs	r3, #3
 800356e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003572:	7023      	strb	r3, [r4, #0]
 8003574:	e71d      	b.n	80033b2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8003576:	f001 fc53 	bl	8004e20 <usb_lld_clear_in>
 800357a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800357e:	e718      	b.n	80033b2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8003580:	f001 fc2e 	bl	8004de0 <usb_lld_stall_in>
 8003584:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003588:	e713      	b.n	80033b2 <_usb_ep0setup+0x152>
 800358a:	bf00      	nop
 800358c:	0800a1a0 	.word	0x0800a1a0
 8003590:	0800a190 	.word	0x0800a190
 8003594:	0800a1b0 	.word	0x0800a1b0
	...

080035a0 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80035a0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d815      	bhi.n	80035d8 <_usb_ep0in+0x38>
 80035ac:	e8df f003 	tbb	[pc, r3]
 80035b0:	041c3b04 	.word	0x041c3b04
 80035b4:	1504      	.short	0x1504
 80035b6:	04          	.byte	0x04
 80035b7:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 80035b8:	2100      	movs	r1, #0
 80035ba:	f001 fc11 	bl	8004de0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80035be:	2100      	movs	r1, #0
 80035c0:	4620      	mov	r0, r4
 80035c2:	f001 fbfd 	bl	8004dc0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b113      	cbz	r3, 80035d2 <_usb_ep0in+0x32>
 80035cc:	2105      	movs	r1, #5
 80035ce:	4620      	mov	r0, r4
 80035d0:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 80035d2:	2306      	movs	r3, #6
 80035d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80035d8:	bd10      	pop	{r4, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 80035da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035dc:	b103      	cbz	r3, 80035e0 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 80035de:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 80035e6:	bd10      	pop	{r4, pc}
 80035e8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80035ea:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 80035ec:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80035ee:	2300      	movs	r3, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 80035f0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80035f4:	4620      	mov	r0, r4
 80035f6:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80035f8:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 80035fa:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 80035fc:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 80035fe:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003600:	f001 fa1e 	bl	8004a40 <usb_lld_prepare_receive>
 8003604:	2320      	movs	r3, #32
 8003606:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800360a:	8963      	ldrh	r3, [r4, #10]
 800360c:	f013 0101 	ands.w	r1, r3, #1
 8003610:	d105      	bne.n	800361e <_usb_ep0in+0x7e>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8003618:	4620      	mov	r0, r4
 800361a:	f001 fba9 	bl	8004d70 <usb_lld_start_out>
 800361e:	2300      	movs	r3, #0
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	bd10      	pop	{r4, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8003626:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800362a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800362e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003630:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003634:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8003636:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8003638:	d9d7      	bls.n	80035ea <_usb_ep0in+0x4a>
 800363a:	8a18      	ldrh	r0, [r3, #16]
 800363c:	fbb2 f1f0 	udiv	r1, r2, r0
 8003640:	fb00 2211 	mls	r2, r0, r1, r2
 8003644:	2a00      	cmp	r2, #0
 8003646:	d1d0      	bne.n	80035ea <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003648:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800364a:	4611      	mov	r1, r2
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800364c:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800364e:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8003650:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8003652:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8003654:	4620      	mov	r0, r4
 8003656:	f001 fa73 	bl	8004b40 <usb_lld_prepare_transmit>
 800365a:	2320      	movs	r3, #32
 800365c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8003660:	8923      	ldrh	r3, [r4, #8]
 8003662:	f013 0101 	ands.w	r1, r3, #1
 8003666:	d105      	bne.n	8003674 <_usb_ep0in+0xd4>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800366e:	4620      	mov	r0, r4
 8003670:	f001 fb8e 	bl	8004d90 <usb_lld_start_in>
 8003674:	2300      	movs	r3, #0
 8003676:	f383 8811 	msr	BASEPRI, r3
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800367a:	2302      	movs	r3, #2
 800367c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8003680:	bd10      	pop	{r4, pc}
 8003682:	bf00      	nop
	...

08003690 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8003690:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8003694:	2a06      	cmp	r2, #6
 8003696:	d80c      	bhi.n	80036b2 <_usb_ep0out+0x22>
 8003698:	2301      	movs	r3, #1
 800369a:	4093      	lsls	r3, r2
 800369c:	f013 0f67 	tst.w	r3, #103	; 0x67
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80036a0:	b510      	push	{r4, lr}
 80036a2:	4604      	mov	r4, r0
 80036a4:	d112      	bne.n	80036cc <_usb_ep0out+0x3c>
 80036a6:	f013 0208 	ands.w	r2, r3, #8
 80036aa:	d103      	bne.n	80036b4 <_usb_ep0out+0x24>
 80036ac:	06db      	lsls	r3, r3, #27
 80036ae:	d41e      	bmi.n	80036ee <_usb_ep0out+0x5e>
 80036b0:	bd10      	pop	{r4, pc}
 80036b2:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 80036b4:	68c3      	ldr	r3, [r0, #12]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f8      	bne.n	80036b0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 80036be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036c0:	b103      	cbz	r3, 80036c4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 80036c2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 80036ca:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 80036cc:	2100      	movs	r1, #0
 80036ce:	f001 fb87 	bl	8004de0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 80036d2:	2100      	movs	r1, #0
 80036d4:	4620      	mov	r0, r4
 80036d6:	f001 fb73 	bl	8004dc0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	b113      	cbz	r3, 80036e6 <_usb_ep0out+0x56>
 80036e0:	2105      	movs	r1, #5
 80036e2:	4620      	mov	r0, r4
 80036e4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 80036e6:	2306      	movs	r3, #6
 80036e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80036ec:	bd10      	pop	{r4, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80036ee:	68c3      	ldr	r3, [r0, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 80036f2:	2105      	movs	r1, #5
 80036f4:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80036f8:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 80036fa:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 80036fc:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 80036fe:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8003700:	4611      	mov	r1, r2
 8003702:	f001 fa1d 	bl	8004b40 <usb_lld_prepare_transmit>
 8003706:	2320      	movs	r3, #32
 8003708:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800370c:	8923      	ldrh	r3, [r4, #8]
 800370e:	f013 0101 	ands.w	r1, r3, #1
 8003712:	d003      	beq.n	800371c <_usb_ep0out+0x8c>
 8003714:	2300      	movs	r3, #0
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	bd10      	pop	{r4, pc}
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8003722:	4620      	mov	r0, r4
 8003724:	f001 fb34 	bl	8004d90 <usb_lld_start_in>
 8003728:	e7f4      	b.n	8003714 <_usb_ep0out+0x84>
 800372a:	bf00      	nop
 800372c:	0000      	movs	r0, r0
	...

08003730 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8003730:	0943      	lsrs	r3, r0, #5
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	b410      	push	{r4}
 8003736:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800373a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800373e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8003742:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8003746:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8003748:	f000 001f 	and.w	r0, r0, #31
 800374c:	2201      	movs	r2, #1
 800374e:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8003752:	b2c9      	uxtb	r1, r1
 8003754:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8003758:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800375c:	6018      	str	r0, [r3, #0]
}
 800375e:	bc10      	pop	{r4}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
	...

08003770 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8003770:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8003774:	4a07      	ldr	r2, [pc, #28]	; (8003794 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800377c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	b10b      	cbz	r3, 8003786 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8003782:	6850      	ldr	r0, [r2, #4]
 8003784:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800378a:	f7ff b8f1 	b.w	8002970 <_port_irq_epilogue>
 800378e:	bf00      	nop
 8003790:	40026000 	.word	0x40026000
 8003794:	20000e90 	.word	0x20000e90
	...

080037a0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80037a2:	4809      	ldr	r0, [pc, #36]	; (80037c8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80037a4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 80037a6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 80037a8:	0989      	lsrs	r1, r1, #6
 80037aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 80037ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 80037b0:	018c      	lsls	r4, r1, #6
 80037b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80037b4:	b10a      	cbz	r2, 80037ba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80037b6:	68c0      	ldr	r0, [r0, #12]
 80037b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80037be:	f7ff b8d7 	b.w	8002970 <_port_irq_epilogue>
 80037c2:	bf00      	nop
 80037c4:	40026000 	.word	0x40026000
 80037c8:	20000e90 	.word	0x20000e90
 80037cc:	00000000 	.word	0x00000000

080037d0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 80037d2:	4809      	ldr	r0, [pc, #36]	; (80037f8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80037d4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 80037d6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 80037d8:	0c09      	lsrs	r1, r1, #16
 80037da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 80037de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 80037e0:	040c      	lsls	r4, r1, #16
 80037e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80037e4:	b10a      	cbz	r2, 80037ea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80037e6:	6940      	ldr	r0, [r0, #20]
 80037e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80037ee:	f7ff b8bf 	b.w	8002970 <_port_irq_epilogue>
 80037f2:	bf00      	nop
 80037f4:	40026000 	.word	0x40026000
 80037f8:	20000e90 	.word	0x20000e90
 80037fc:	00000000 	.word	0x00000000

08003800 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8003802:	4809      	ldr	r0, [pc, #36]	; (8003828 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003804:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8003806:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003808:	0d89      	lsrs	r1, r1, #22
 800380a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800380e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 8003810:	058c      	lsls	r4, r1, #22
 8003812:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8003814:	b10a      	cbz	r2, 800381a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8003816:	69c0      	ldr	r0, [r0, #28]
 8003818:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800381a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800381e:	f7ff b8a7 	b.w	8002970 <_port_irq_epilogue>
 8003822:	bf00      	nop
 8003824:	40026000 	.word	0x40026000
 8003828:	20000e90 	.word	0x20000e90
 800382c:	00000000 	.word	0x00000000

08003830 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8003830:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8003834:	4807      	ldr	r0, [pc, #28]	; (8003854 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8003836:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8003838:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800383a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800383e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8003840:	b10a      	cbz	r2, 8003846 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8003842:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003844:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800384a:	f7ff b891 	b.w	8002970 <_port_irq_epilogue>
 800384e:	bf00      	nop
 8003850:	40026000 	.word	0x40026000
 8003854:	20000e90 	.word	0x20000e90
	...

08003860 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8003862:	4809      	ldr	r0, [pc, #36]	; (8003888 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8003864:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8003866:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8003868:	0989      	lsrs	r1, r1, #6
 800386a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800386e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 8003870:	018c      	lsls	r4, r1, #6
 8003872:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8003874:	b10a      	cbz	r2, 800387a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8003876:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003878:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800387a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800387e:	f7ff b877 	b.w	8002970 <_port_irq_epilogue>
 8003882:	bf00      	nop
 8003884:	40026000 	.word	0x40026000
 8003888:	20000e90 	.word	0x20000e90
 800388c:	00000000 	.word	0x00000000

08003890 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8003892:	4809      	ldr	r0, [pc, #36]	; (80038b8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003894:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8003896:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003898:	0c09      	lsrs	r1, r1, #16
 800389a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800389e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 80038a0:	040c      	lsls	r4, r1, #16
 80038a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 80038a4:	b10a      	cbz	r2, 80038aa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80038a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80038a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80038aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80038ae:	f7ff b85f 	b.w	8002970 <_port_irq_epilogue>
 80038b2:	bf00      	nop
 80038b4:	40026000 	.word	0x40026000
 80038b8:	20000e90 	.word	0x20000e90
 80038bc:	00000000 	.word	0x00000000

080038c0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80038c2:	4809      	ldr	r0, [pc, #36]	; (80038e8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80038c4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80038c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80038c8:	0d89      	lsrs	r1, r1, #22
 80038ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 80038ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 80038d0:	058c      	lsls	r4, r1, #22
 80038d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80038d4:	b10a      	cbz	r2, 80038da <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80038d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80038d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80038da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80038de:	f7ff b847 	b.w	8002970 <_port_irq_epilogue>
 80038e2:	bf00      	nop
 80038e4:	40026000 	.word	0x40026000
 80038e8:	20000e90 	.word	0x20000e90
 80038ec:	00000000 	.word	0x00000000

080038f0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 80038f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 80038f4:	4807      	ldr	r0, [pc, #28]	; (8003914 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80038f6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 80038f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80038fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 80038fe:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8003900:	b10a      	cbz	r2, 8003906 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8003902:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003904:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800390a:	f7ff b831 	b.w	8002970 <_port_irq_epilogue>
 800390e:	bf00      	nop
 8003910:	40026400 	.word	0x40026400
 8003914:	20000e90 	.word	0x20000e90
	...

08003920 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8003922:	4809      	ldr	r0, [pc, #36]	; (8003948 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8003924:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8003926:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8003928:	0989      	lsrs	r1, r1, #6
 800392a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800392e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 8003930:	018c      	lsls	r4, r1, #6
 8003932:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8003934:	b10a      	cbz	r2, 800393a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8003936:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003938:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800393e:	f7ff b817 	b.w	8002970 <_port_irq_epilogue>
 8003942:	bf00      	nop
 8003944:	40026400 	.word	0x40026400
 8003948:	20000e90 	.word	0x20000e90
 800394c:	00000000 	.word	0x00000000

08003950 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8003954:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8003956:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8003958:	0c09      	lsrs	r1, r1, #16
 800395a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800395e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 8003960:	040c      	lsls	r4, r1, #16
 8003962:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8003964:	b10a      	cbz	r2, 800396a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8003966:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8003968:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800396a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800396e:	f7fe bfff 	b.w	8002970 <_port_irq_epilogue>
 8003972:	bf00      	nop
 8003974:	40026400 	.word	0x40026400
 8003978:	20000e90 	.word	0x20000e90
 800397c:	00000000 	.word	0x00000000

08003980 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8003982:	4809      	ldr	r0, [pc, #36]	; (80039a8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003984:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8003986:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8003988:	0d89      	lsrs	r1, r1, #22
 800398a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800398e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 8003990:	058c      	lsls	r4, r1, #22
 8003992:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8003994:	b10a      	cbz	r2, 800399a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8003996:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003998:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800399a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800399e:	f7fe bfe7 	b.w	8002970 <_port_irq_epilogue>
 80039a2:	bf00      	nop
 80039a4:	40026400 	.word	0x40026400
 80039a8:	20000e90 	.word	0x20000e90
 80039ac:	00000000 	.word	0x00000000

080039b0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 80039b0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80039b6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80039b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80039ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 80039be:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80039c0:	b10a      	cbz	r2, 80039c6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80039c2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80039c4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80039c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80039ca:	f7fe bfd1 	b.w	8002970 <_port_irq_epilogue>
 80039ce:	bf00      	nop
 80039d0:	40026400 	.word	0x40026400
 80039d4:	20000e90 	.word	0x20000e90
	...

080039e0 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 80039e2:	4809      	ldr	r0, [pc, #36]	; (8003a08 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 80039e4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 80039e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 80039e8:	0989      	lsrs	r1, r1, #6
 80039ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 80039ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 80039f0:	018c      	lsls	r4, r1, #6
 80039f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80039f4:	b10a      	cbz	r2, 80039fa <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80039f6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80039f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80039fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80039fe:	f7fe bfb7 	b.w	8002970 <_port_irq_epilogue>
 8003a02:	bf00      	nop
 8003a04:	40026400 	.word	0x40026400
 8003a08:	20000e90 	.word	0x20000e90
 8003a0c:	00000000 	.word	0x00000000

08003a10 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8003a12:	4809      	ldr	r0, [pc, #36]	; (8003a38 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003a14:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8003a16:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8003a18:	0c09      	lsrs	r1, r1, #16
 8003a1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8003a1e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 8003a20:	040c      	lsls	r4, r1, #16
 8003a22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8003a24:	b10a      	cbz	r2, 8003a2a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8003a26:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8003a28:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8003a2e:	f7fe bf9f 	b.w	8002970 <_port_irq_epilogue>
 8003a32:	bf00      	nop
 8003a34:	40026400 	.word	0x40026400
 8003a38:	20000e90 	.word	0x20000e90
 8003a3c:	00000000 	.word	0x00000000

08003a40 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8003a42:	4809      	ldr	r0, [pc, #36]	; (8003a68 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8003a44:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8003a46:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8003a48:	0d89      	lsrs	r1, r1, #22
 8003a4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 8003a4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 8003a50:	058c      	lsls	r4, r1, #22
 8003a52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8003a54:	b10a      	cbz	r2, 8003a5a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8003a56:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003a58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8003a5e:	f7fe bf87 	b.w	8002970 <_port_irq_epilogue>
 8003a62:	bf00      	nop
 8003a64:	40026400 	.word	0x40026400
 8003a68:	20000e90 	.word	0x20000e90
 8003a6c:	00000000 	.word	0x00000000

08003a70 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8003a70:	490e      	ldr	r1, [pc, #56]	; (8003aac <dmaInit+0x3c>)
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <dmaInit+0x40>)
 8003a74:	480f      	ldr	r0, [pc, #60]	; (8003ab4 <dmaInit+0x44>)
 8003a76:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8003a78:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	4c0e      	ldr	r4, [pc, #56]	; (8003ab8 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 8003a7e:	4619      	mov	r1, r3
 8003a80:	e001      	b.n	8003a86 <dmaInit+0x16>
 8003a82:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8003a86:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8003a88:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	f102 020c 	add.w	r2, r2, #12
 8003a94:	d1f5      	bne.n	8003a82 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8003a96:	4909      	ldr	r1, [pc, #36]	; (8003abc <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8003a98:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 8003a9a:	bc10      	pop	{r4}
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa0:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8003aa2:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8003aa4:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8003aa6:	60d3      	str	r3, [r2, #12]
}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000f10 	.word	0x20000f10
 8003ab0:	0800a1cc 	.word	0x0800a1cc
 8003ab4:	40026010 	.word	0x40026010
 8003ab8:	20000e90 	.word	0x20000e90
 8003abc:	40026000 	.word	0x40026000
 8003ac0:	40026400 	.word	0x40026400
	...

08003ad0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8003ad2:	4f1f      	ldr	r7, [pc, #124]	; (8003b50 <dmaStreamAllocate+0x80>)
 8003ad4:	7a46      	ldrb	r6, [r0, #9]
 8003ad6:	683d      	ldr	r5, [r7, #0]
 8003ad8:	2401      	movs	r4, #1
 8003ada:	fa04 fe06 	lsl.w	lr, r4, r6
 8003ade:	ea1e 0f05 	tst.w	lr, r5
 8003ae2:	d131      	bne.n	8003b48 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003ae4:	4c1b      	ldr	r4, [pc, #108]	; (8003b54 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003ae6:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003aea:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8003aee:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003af2:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003af4:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003af8:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8003afc:	d004      	beq.n	8003b08 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 8003afe:	4c16      	ldr	r4, [pc, #88]	; (8003b58 <dmaStreamAllocate+0x88>)
 8003b00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b06:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 8003b08:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8003b0c:	d116      	bne.n	8003b3c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8003b0e:	6805      	ldr	r5, [r0, #0]
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	f023 031f 	bic.w	r3, r3, #31
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	f013 0401 	ands.w	r4, r3, #1
 8003b1e:	d1fb      	bne.n	8003b18 <dmaStreamAllocate+0x48>
 8003b20:	7a07      	ldrb	r7, [r0, #8]
 8003b22:	6846      	ldr	r6, [r0, #4]
 8003b24:	233d      	movs	r3, #61	; 0x3d
 8003b26:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003b28:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8003b2a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003b2c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003b2e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8003b30:	b162      	cbz	r2, 8003b4c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8003b32:	7a80      	ldrb	r0, [r0, #10]
 8003b34:	f7ff fdfc 	bl	8003730 <nvicEnableVector>

  return FALSE;
 8003b38:	4620      	mov	r0, r4
 8003b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 8003b3c:	4c06      	ldr	r4, [pc, #24]	; (8003b58 <dmaStreamAllocate+0x88>)
 8003b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b44:	6323      	str	r3, [r4, #48]	; 0x30
 8003b46:	e7e2      	b.n	8003b0e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 8003b48:	4620      	mov	r0, r4
 8003b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 8003b4c:	4610      	mov	r0, r2
}
 8003b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b50:	20000f10 	.word	0x20000f10
 8003b54:	20000e90 	.word	0x20000e90
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00000000 	.word	0x00000000

08003b60 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <hal_lld_init+0x5c>)
 8003b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8003b6a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8003b6c:	6119      	str	r1, [r3, #16]
 8003b6e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8003b70:	6958      	ldr	r0, [r3, #20]
 8003b72:	6159      	str	r1, [r3, #20]
 8003b74:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003b76:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8003b78:	4c11      	ldr	r4, [pc, #68]	; (8003bc0 <hal_lld_init+0x60>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003b7a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8003b7e:	6218      	str	r0, [r3, #32]
 8003b80:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8003b82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b84:	6259      	str	r1, [r3, #36]	; 0x24
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8003b88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b8a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003b8e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8003b90:	6821      	ldr	r1, [r4, #0]
 8003b92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003b96:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003b98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b9a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003b9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ba2:	d003      	beq.n	8003bac <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8003ba4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003ba8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003baa:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8003bac:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <hal_lld_init+0x60>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8003bae:	bc10      	pop	{r4}

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8003bb0:	6853      	ldr	r3, [r2, #4]
 8003bb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb6:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8003bb8:	f7ff bf5a 	b.w	8003a70 <dmaInit>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40007000 	.word	0x40007000
	...

08003bd0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003bd0:	492c      	ldr	r1, [pc, #176]	; (8003c84 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003bd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003bd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003bdc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003bde:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003be0:	680b      	ldr	r3, [r1, #0]
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003be8:	680a      	ldr	r2, [r1, #0]
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <stm32_clock_init+0xb4>)
 8003bec:	0790      	lsls	r0, r2, #30
 8003bee:	d5fb      	bpl.n	8003be8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	688b      	ldr	r3, [r1, #8]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c02:	f013 030c 	ands.w	r3, r3, #12
 8003c06:	d1fa      	bne.n	8003bfe <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003c08:	6811      	ldr	r1, [r2, #0]
 8003c0a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003c0e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003c10:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003c1a:	6811      	ldr	r1, [r2, #0]
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c1e:	0389      	lsls	r1, r1, #14
 8003c20:	d5fb      	bpl.n	8003c1a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003c22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003c2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c2c:	4915      	ldr	r1, [pc, #84]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c2e:	0790      	lsls	r0, r2, #30
 8003c30:	d5fb      	bpl.n	8003c2a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <stm32_clock_init+0xbc>)
 8003c34:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003c36:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003c40:	6853      	ldr	r3, [r2, #4]
 8003c42:	0459      	lsls	r1, r3, #17
 8003c44:	d5fc      	bpl.n	8003c40 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003c46:	490f      	ldr	r1, [pc, #60]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c48:	680a      	ldr	r2, [r1, #0]
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c4c:	0192      	lsls	r2, r2, #6
 8003c4e:	d5fb      	bpl.n	8003c48 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003c52:	4910      	ldr	r1, [pc, #64]	; (8003c94 <stm32_clock_init+0xc4>)
 8003c54:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003c56:	f240 7105 	movw	r1, #1797	; 0x705
 8003c5a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	f042 0202 	orr.w	r2, r2, #2
 8003c62:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003c64:	461a      	mov	r2, r3
 8003c66:	6893      	ldr	r3, [r2, #8]
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <stm32_clock_init+0xb4>)
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d1f9      	bne.n	8003c66 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8003c72:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	644b      	str	r3, [r1, #68]	; 0x44
 8003c7a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c80:	664b      	str	r3, [r1, #100]	; 0x64
 8003c82:	4770      	bx	lr
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	07405408 	.word	0x07405408
 8003c90:	40023c00 	.word	0x40023c00
 8003c94:	38089400 	.word	0x38089400
	...

08003ca0 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	0792      	lsls	r2, r2, #30
 8003ca8:	d401      	bmi.n	8003cae <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003caa:	f7fe be61 	b.w	8002970 <_port_irq_epilogue>
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003cae:	b510      	push	{r4, lr}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8003cb0:	2400      	movs	r4, #0
 8003cb2:	611c      	str	r4, [r3, #16]
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8003cba:	f7fd f8c1 	bl	8000e40 <chSysTimerHandlerI>
 8003cbe:	f384 8811 	msr	BASEPRI, r4
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8003cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003cc6:	f7fe be53 	b.w	8002970 <_port_irq_epilogue>
 8003cca:	bf00      	nop
 8003ccc:	0000      	movs	r0, r0
	...

08003cd0 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003cd2:	4810      	ldr	r0, [pc, #64]	; (8003d14 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003cd4:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8003cd6:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003cde:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8003ce4:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003ce6:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003ce8:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003cec:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003cf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003cf4:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003cf6:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8003cf8:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003cfa:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8003cfc:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8003cfe:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8003d02:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8003d04:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003d06:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003d08:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8003d0a:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8003d0c:	f7ff bd10 	b.w	8003730 <nvicEnableVector>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	e0042000 	.word	0xe0042000
	...

08003d20 <adc_lld_serve_rx_interrupt>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003d20:	f011 0f0c 	tst.w	r1, #12
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8003d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d28:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003d2a:	d02e      	beq.n	8003d8a <adc_lld_serve_rx_interrupt+0x6a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003d2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003d2e:	6803      	ldr	r3, [r0, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f022 021f 	bic.w	r2, r2, #31
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	f011 0101 	ands.w	r1, r1, #1
 8003d3e:	d1fb      	bne.n	8003d38 <adc_lld_serve_rx_interrupt+0x18>

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8003d40:	6922      	ldr	r2, [r4, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003d42:	7a07      	ldrb	r7, [r0, #8]
 8003d44:	6846      	ldr	r6, [r0, #4]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8003d46:	6895      	ldr	r5, [r2, #8]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8003d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003d4a:	223d      	movs	r2, #61	; 0x3d
 8003d4c:	40ba      	lsls	r2, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003d4e:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003d50:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8003d52:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8003d54:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003d56:	6098      	str	r0, [r3, #8]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8003d58:	b145      	cbz	r5, 8003d6c <adc_lld_serve_rx_interrupt+0x4c>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	7023      	strb	r3, [r4, #0]
 8003d5e:	4620      	mov	r0, r4
 8003d60:	47a8      	blx	r5
 8003d62:	7823      	ldrb	r3, [r4, #0]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	bf04      	itt	eq
 8003d68:	2302      	moveq	r3, #2
 8003d6a:	7023      	strbeq	r3, [r4, #0]
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	6125      	str	r5, [r4, #16]
 8003d70:	2320      	movs	r3, #32
 8003d72:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d7a:	f104 0014 	add.w	r0, r4, #20
 8003d7e:	f7fd fbdf 	bl	8001540 <chThdResumeI>
 8003d82:	f385 8811 	msr	BASEPRI, r5
 8003d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 8003d8a:	6905      	ldr	r5, [r0, #16]
 8003d8c:	b1a5      	cbz	r5, 8003db8 <adc_lld_serve_rx_interrupt+0x98>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8003d8e:	068a      	lsls	r2, r1, #26
 8003d90:	d510      	bpl.n	8003db4 <adc_lld_serve_rx_interrupt+0x94>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8003d92:	782b      	ldrb	r3, [r5, #0]
 8003d94:	b1db      	cbz	r3, 8003dce <adc_lld_serve_rx_interrupt+0xae>
 8003d96:	686b      	ldr	r3, [r5, #4]
 8003d98:	b173      	cbz	r3, 8003db8 <adc_lld_serve_rx_interrupt+0x98>
 8003d9a:	68c2      	ldr	r2, [r0, #12]
 8003d9c:	2a01      	cmp	r2, #1
 8003d9e:	d947      	bls.n	8003e30 <adc_lld_serve_rx_interrupt+0x110>
 8003da0:	8869      	ldrh	r1, [r5, #2]
 8003da2:	6884      	ldr	r4, [r0, #8]
 8003da4:	0852      	lsrs	r2, r2, #1
 8003da6:	fb02 f101 	mul.w	r1, r2, r1
 8003daa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8003dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8003db2:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8003db4:	06cb      	lsls	r3, r1, #27
 8003db6:	d401      	bmi.n	8003dbc <adc_lld_serve_rx_interrupt+0x9c>
 8003db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8003dbc:	686b      	ldr	r3, [r5, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0fa      	beq.n	8003db8 <adc_lld_serve_rx_interrupt+0x98>
 8003dc2:	68c2      	ldr	r2, [r0, #12]
 8003dc4:	6881      	ldr	r1, [r0, #8]
 8003dc6:	0852      	lsrs	r2, r2, #1
      }
    }
  }
}
 8003dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8003dcc:	4718      	bx	r3
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003dce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003dd0:	6802      	ldr	r2, [r0, #0]
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	f023 031f 	bic.w	r3, r3, #31
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	f013 0301 	ands.w	r3, r3, #1
 8003de0:	d1fb      	bne.n	8003dda <adc_lld_serve_rx_interrupt+0xba>
 8003de2:	7a07      	ldrb	r7, [r0, #8]
 8003de4:	6846      	ldr	r6, [r0, #4]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8003de6:	686d      	ldr	r5, [r5, #4]
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
 8003de8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003dea:	213d      	movs	r1, #61	; 0x3d
 8003dec:	40b9      	lsls	r1, r7
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003dee:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003df0:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 8003df2:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8003df4:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003df6:	6090      	str	r0, [r2, #8]
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8003df8:	b1ad      	cbz	r5, 8003e26 <adc_lld_serve_rx_interrupt+0x106>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	7023      	strb	r3, [r4, #0]
 8003dfe:	68e2      	ldr	r2, [r4, #12]
 8003e00:	68a1      	ldr	r1, [r4, #8]
 8003e02:	4620      	mov	r0, r4
 8003e04:	47a8      	blx	r5
 8003e06:	7823      	ldrb	r3, [r4, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d00c      	beq.n	8003e26 <adc_lld_serve_rx_interrupt+0x106>
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	f104 0014 	add.w	r0, r4, #20
 8003e18:	f7fd fb92 	bl	8001540 <chThdResumeI>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e26:	2202      	movs	r2, #2
 8003e28:	2300      	movs	r3, #0
 8003e2a:	7022      	strb	r2, [r4, #0]
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	e7ed      	b.n	8003e0c <adc_lld_serve_rx_interrupt+0xec>
 8003e30:	6881      	ldr	r1, [r0, #8]
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8003e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8003e36:	4718      	bx	r3
	...

08003e40 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector88) {
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <Vector88+0x7c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8003e46:	2100      	movs	r1, #0
 8003e48:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8003e4a:	0693      	lsls	r3, r2, #26
 8003e4c:	d531      	bpl.n	8003eb2 <Vector88+0x72>
 8003e4e:	4c1c      	ldr	r4, [pc, #112]	; (8003ec0 <Vector88+0x80>)
 8003e50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e52:	680a      	ldr	r2, [r1, #0]
 8003e54:	6853      	ldr	r3, [r2, #4]
 8003e56:	b363      	cbz	r3, 8003eb2 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8003e58:	6925      	ldr	r5, [r4, #16]
 8003e5a:	b355      	cbz	r5, 8003eb2 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	f023 031f 	bic.w	r3, r3, #31
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f013 0301 	ands.w	r3, r3, #1
 8003e6a:	d1fb      	bne.n	8003e64 <Vector88+0x24>
 8003e6c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8003e6e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003e70:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8003e72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e74:	4d12      	ldr	r5, [pc, #72]	; (8003ec0 <Vector88+0x80>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003e76:	213d      	movs	r1, #61	; 0x3d
 8003e78:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003e7c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003e7e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8003e80:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8003e82:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003e84:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8003e86:	b146      	cbz	r6, 8003e9a <Vector88+0x5a>
 8003e88:	2305      	movs	r3, #5
 8003e8a:	702b      	strb	r3, [r5, #0]
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	47b0      	blx	r6
 8003e90:	782b      	ldrb	r3, [r5, #0]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	bf04      	itt	eq
 8003e96:	2302      	moveq	r3, #2
 8003e98:	702b      	strbeq	r3, [r5, #0]
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	6125      	str	r5, [r4, #16]
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ea8:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <Vector88+0x84>)
 8003eaa:	f7fd fb49 	bl	8001540 <chThdResumeI>
 8003eae:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 8003eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 8003eb6:	f7fe bd5b 	b.w	8002970 <_port_irq_epilogue>
 8003eba:	bf00      	nop
 8003ebc:	40012000 	.word	0x40012000
 8003ec0:	20000f14 	.word	0x20000f14
 8003ec4:	20000f28 	.word	0x20000f28
	...

08003ed0 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8003ed0:	b510      	push	{r4, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8003ed2:	4c08      	ldr	r4, [pc, #32]	; (8003ef4 <adc_lld_init+0x24>)
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f7fe fdbb 	bl	8002a50 <adcObjectInit>
  ADCD1.adc = ADC1;
 8003eda:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <adc_lld_init+0x28>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8003edc:	4a07      	ldr	r2, [pc, #28]	; (8003efc <adc_lld_init+0x2c>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <adc_lld_init+0x30>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8003ee0:	62a1      	str	r1, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8003ee2:	62e2      	str	r2, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8003ee4:	6323      	str	r3, [r4, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 8003ee6:	2106      	movs	r1, #6
 8003ee8:	2012      	movs	r0, #18
}
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 8003eee:	f7ff bc1f 	b.w	8003730 <nvicEnableVector>
 8003ef2:	bf00      	nop
 8003ef4:	20000f14 	.word	0x20000f14
 8003ef8:	40012000 	.word	0x40012000
 8003efc:	0800a250 	.word	0x0800a250
 8003f00:	00022c16 	.word	0x00022c16
	...

08003f10 <adc_lld_start>:
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8003f10:	7803      	ldrb	r3, [r0, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d000      	beq.n	8003f18 <adc_lld_start+0x8>
 8003f16:	4770      	bx	lr
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <adc_lld_start+0x50>)
 8003f1a:	4298      	cmp	r0, r3
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4604      	mov	r4, r0

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8003f20:	d00d      	beq.n	8003f3e <adc_lld_start+0x2e>
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003f22:	4810      	ldr	r0, [pc, #64]	; (8003f64 <adc_lld_start+0x54>)
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8003f24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003f26:	6843      	ldr	r3, [r0, #4]
 8003f28:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8003f2c:	2100      	movs	r1, #0
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
    adcp->adc->CR2 = 0;
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003f32:	2401      	movs	r4, #1
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003f34:	6043      	str	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8003f36:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8003f38:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003f3a:	6094      	str	r4, [r2, #8]
 8003f3c:	bd10      	pop	{r4, pc}
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <adc_lld_start+0x58>)
 8003f42:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003f44:	2106      	movs	r1, #6
 8003f46:	f7ff fdc3 	bl	8003ad0 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8003f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      rccEnableADC1(FALSE);
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <adc_lld_start+0x5c>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4907      	ldr	r1, [pc, #28]	; (8003f70 <adc_lld_start+0x60>)
 8003f52:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
 8003f54:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5c:	e7e1      	b.n	8003f22 <adc_lld_start+0x12>
 8003f5e:	bf00      	nop
 8003f60:	20000f14 	.word	0x20000f14
 8003f64:	40012300 	.word	0x40012300
 8003f68:	08003d21 	.word	0x08003d21
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	4001204c 	.word	0x4001204c
	...

08003f80 <adc_lld_start_conversion>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8003f80:	6903      	ldr	r3, [r0, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
 8003f82:	6b01      	ldr	r1, [r0, #48]	; 0x30
  if (grpp->circular) {
 8003f84:	781a      	ldrb	r2, [r3, #0]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
 8003f86:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d12b      	bne.n	8003fe4 <adc_lld_start_conversion+0x64>
 8003f8c:	68c2      	ldr	r2, [r0, #12]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003f8e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8003f90:	885c      	ldrh	r4, [r3, #2]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003f92:	682d      	ldr	r5, [r5, #0]
 8003f94:	6886      	ldr	r6, [r0, #8]
 8003f96:	60ee      	str	r6, [r5, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8003f98:	fb02 f204 	mul.w	r2, r2, r4
 8003f9c:	606a      	str	r2, [r5, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003f9e:	68dc      	ldr	r4, [r3, #12]
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 8003fa0:	6029      	str	r1, [r5, #0]
  dmaStreamEnable(adcp->dmastp);
 8003fa2:	682e      	ldr	r6, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8003fa4:	6a82      	ldr	r2, [r0, #40]	; 0x28

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8003fa6:	6919      	ldr	r1, [r3, #16]
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8003fa8:	f8d3 e014 	ldr.w	lr, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 8003fac:	699f      	ldr	r7, [r3, #24]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003fae:	f044 6080 	orr.w	r0, r4, #67108864	; 0x4000000
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 8003fb2:	f046 0401 	orr.w	r4, r6, #1
 8003fb6:	602c      	str	r4, [r5, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8003fb8:	2400      	movs	r4, #0
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 8003fba:	69dd      	ldr	r5, [r3, #28]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
 8003fbc:	6014      	str	r4, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 8003fbe:	6a1c      	ldr	r4, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
 8003fc2:	f8c2 e00c 	str.w	lr, [r2, #12]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003fc6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
 8003fca:	6117      	str	r7, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 8003fcc:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8003fce:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8003fd0:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8003fd2:	004b      	lsls	r3, r1, #1
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003fd4:	6050      	str	r0, [r2, #4]
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8003fd6:	d40d      	bmi.n	8003ff4 <adc_lld_start_conversion+0x74>

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8003fd8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8003fdc:	f041 0101 	orr.w	r1, r1, #1

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  }
  else
    adcp->adc->CR2 = cr2;
 8003fe0:	6091      	str	r1, [r2, #8]
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8003fe4:	68c2      	ldr	r2, [r0, #12]
 8003fe6:	2a01      	cmp	r2, #1
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
 8003fe8:	bf94      	ite	ls
 8003fea:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
    if (adcp->depth > 1) {
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8003fee:	f441 7184 	orrhi.w	r1, r1, #264	; 0x108
 8003ff2:	e7cc      	b.n	8003f8e <adc_lld_start_conversion+0xe>

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8003ff4:	f021 4380 	bic.w	r3, r1, #1073741824	; 0x40000000
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	f443 7340 	orr.w	r3, r3, #768	; 0x300

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8004000:	f441 7140 	orr.w	r1, r1, #768	; 0x300

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8004004:	f043 0303 	orr.w	r3, r3, #3

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8004008:	f041 0103 	orr.w	r1, r1, #3

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800400c:	6093      	str	r3, [r2, #8]

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800400e:	6091      	str	r1, [r2, #8]
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004012:	bf00      	nop
	...

08004020 <adcSTM32EnableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <adcSTM32EnableTSVREFE+0xc>)
 8004022:	6853      	ldr	r3, [r2, #4]
 8004024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004028:	6053      	str	r3, [r2, #4]
 800402a:	4770      	bx	lr
 800402c:	40012300 	.word	0x40012300

08004030 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8004030:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004032:	4d65      	ldr	r5, [pc, #404]	; (80041c8 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004034:	4c65      	ldr	r4, [pc, #404]	; (80041cc <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004036:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004038:	4965      	ldr	r1, [pc, #404]	; (80041d0 <_pal_lld_init+0x1a0>)
 800403a:	4a66      	ldr	r2, [pc, #408]	; (80041d4 <_pal_lld_init+0x1a4>)
 800403c:	4b66      	ldr	r3, [pc, #408]	; (80041d8 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800403e:	f240 16ff 	movw	r6, #511	; 0x1ff
 8004042:	4337      	orrs	r7, r6
 8004044:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8004046:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8004048:	433e      	orrs	r6, r7
 800404a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800404c:	6845      	ldr	r5, [r0, #4]
 800404e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004050:	6885      	ldr	r5, [r0, #8]
 8004052:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8004054:	68c5      	ldr	r5, [r0, #12]
 8004056:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8004058:	6905      	ldr	r5, [r0, #16]
 800405a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800405c:	6945      	ldr	r5, [r0, #20]
 800405e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004060:	6985      	ldr	r5, [r0, #24]
 8004062:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004064:	6805      	ldr	r5, [r0, #0]
 8004066:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004068:	6a04      	ldr	r4, [r0, #32]
 800406a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800406c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800406e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8004070:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004072:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8004074:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004076:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004078:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800407a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800407c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800407e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004080:	69c4      	ldr	r4, [r0, #28]
 8004082:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004084:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004086:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004088:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800408a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800408c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800408e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8004090:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004092:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8004094:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004096:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8004098:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800409a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800409c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800409e:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80040a0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80040a2:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80040a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80040a6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80040a8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80040aa:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80040ac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80040ae:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80040b0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80040b2:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80040b4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80040b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80040ba:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80040bc:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80040be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 80040c2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80040c4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 80040c8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80040ca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 80040ce:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80040d2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 80040d6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80040da:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 80040de:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80040e2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80040e6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80040e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80040ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80040f0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80040f4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80040f8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 80040fc:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8004100:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8004104:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8004108:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800410c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8004110:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8004114:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8004118:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800411c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004120:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004124:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004128:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800412c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800412e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8004132:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8004134:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8004138:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800413a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800413e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8004140:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8004144:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8004146:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800414c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8004150:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004152:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8004156:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800415a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800415e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8004162:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8004166:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800416a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800416e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8004172:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 8004176:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800417a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800417e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8004182:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8004186:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800418a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800418e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8004192:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 8004196:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800419a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800419e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 80041a2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 80041a6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 80041aa:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 80041ae:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 80041b2:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 80041b6:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 80041ba:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80041be:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 80041c2:	bcf0      	pop	{r4, r5, r6, r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	00000000 	.word	0x00000000

080041e0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 80041e4:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80041e8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80041ec:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80041f0:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 80041f4:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80041f8:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80041fa:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80041fe:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8004202:	f04f 0803 	mov.w	r8, #3
 8004206:	e030      	b.n	800426a <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004208:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800420c:	ea2b 0303 	bic.w	r3, fp, r3
 8004210:	ea43 030a 	orr.w	r3, r3, sl
 8004214:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8004216:	6843      	ldr	r3, [r0, #4]
 8004218:	fa09 fa04 	lsl.w	sl, r9, r4
 800421c:	ea23 030a 	bic.w	r3, r3, sl
 8004220:	433b      	orrs	r3, r7
 8004222:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8004224:	0063      	lsls	r3, r4, #1
 8004226:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800422a:	fa08 f303 	lsl.w	r3, r8, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	ea0a 0a03 	and.w	sl, sl, r3
 8004234:	ea4a 0a06 	orr.w	sl, sl, r6
 8004238:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800423c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8004240:	ea03 0a0a 	and.w	sl, r3, sl
 8004244:	ea4a 0a05 	orr.w	sl, sl, r5
 8004248:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800424c:	f8d0 a000 	ldr.w	sl, [r0]
 8004250:	ea03 030a 	and.w	r3, r3, sl
 8004254:	ea43 030e 	orr.w	r3, r3, lr
 8004258:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800425a:	0849      	lsrs	r1, r1, #1
 800425c:	d019      	beq.n	8004292 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800425e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 8004260:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 8004262:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 8004264:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8004268:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800426a:	f004 0307 	and.w	r3, r4, #7
 800426e:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8004270:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8004274:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 8004278:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800427c:	d0ed      	beq.n	800425a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800427e:	2c07      	cmp	r4, #7
 8004280:	d9c2      	bls.n	8004208 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004282:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8004286:	ea2b 0303 	bic.w	r3, fp, r3
 800428a:	ea43 030a 	orr.w	r3, r3, sl
 800428e:	6243      	str	r3, [r0, #36]	; 0x24
 8004290:	e7c1      	b.n	8004216 <_pal_lld_setgroupmode+0x36>
 8004292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004296:	bf00      	nop
	...

080042a0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;

#if defined(_CHIBIOS_RT_)
  chRegSetThreadName("usb_lld_pump");
 80042a4:	4bb4      	ldr	r3, [pc, #720]	; (8004578 <usb_lld_pump+0x2d8>)
 80042a6:	49b5      	ldr	r1, [pc, #724]	; (800457c <usb_lld_pump+0x2dc>)
 80042a8:	699a      	ldr	r2, [r3, #24]
 *
 * @special
 */
void usb_lld_pump(void *p) {
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 80042aa:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50

#if defined(_CHIBIOS_RT_)
  chRegSetThreadName("usb_lld_pump");
 80042ae:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 80042b0:	b087      	sub	sp, #28
 80042b2:	2320      	movs	r3, #32
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	f100 0360 	add.w	r3, r0, #96	; 0x60
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 80042be:	46ca      	mov	sl, r9
 80042c0:	9305      	str	r3, [sp, #20]
 80042c2:	4681      	mov	r9, r0
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 80042c4:	f899 3000 	ldrb.w	r3, [r9]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d006      	beq.n	80042da <usb_lld_pump+0x3a>
 80042cc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80042d0:	b963      	cbnz	r3, 80042ec <usb_lld_pump+0x4c>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 80042d2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80042d6:	06db      	lsls	r3, r3, #27
 80042d8:	d408      	bmi.n	80042ec <usb_lld_pump+0x4c>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 80042da:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80042de:	9805      	ldr	r0, [sp, #20]
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	f8ca 3018 	str.w	r3, [sl, #24]
 80042e8:	f7fd f91a 	bl	8001520 <chThdSuspendS>
 80042ec:	2300      	movs	r3, #0
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	469b      	mov	fp, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 80042f4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80042f8:	f013 0310 	ands.w	r3, r3, #16
 80042fc:	d024      	beq.n	8004348 <usb_lld_pump+0xa8>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 80042fe:	f8d9 6050 	ldr.w	r6, [r9, #80]	; 0x50
 8004302:	6a33      	ldr	r3, [r6, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8004304:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
 8004308:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800430c:	d032      	beq.n	8004374 <usb_lld_pump+0xd4>
 800430e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8004312:	d1ef      	bne.n	80042f4 <usb_lld_pump+0x54>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	eb09 0282 	add.w	r2, r9, r2, lsl #2
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800431c:	f3c3 130a 	ubfx	r3, r3, #4, #11
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8004320:	68d2      	ldr	r2, [r2, #12]
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 8004322:	3303      	adds	r3, #3
  max = (max + 3) / 4;
  while (n) {
 8004324:	089b      	lsrs	r3, r3, #2
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8004326:	6a10      	ldr	r0, [r2, #32]
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 8004328:	d0e4      	beq.n	80042f4 <usb_lld_pump+0x54>
 800432a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800432e:	2202      	movs	r2, #2
    uint32_t w = *fifop;
 8004330:	6831      	ldr	r1, [r6, #0]
    if (max) {
 8004332:	b112      	cbz	r2, 800433a <usb_lld_pump+0x9a>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 8004334:	f840 1b04 	str.w	r1, [r0], #4
      buf += 4;
      max--;
 8004338:	3a01      	subs	r2, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800433a:	3b01      	subs	r3, #1
 800433c:	d1f8      	bne.n	8004330 <usb_lld_pump+0x90>

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800433e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004342:	f013 0310 	ands.w	r3, r3, #16
 8004346:	d1da      	bne.n	80042fe <usb_lld_pump+0x5e>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 8004348:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f10b 	lsl.w	r1, r1, fp
      if (usbp->txpending & epmask) {
 8004352:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8004354:	9103      	str	r1, [sp, #12]
      if (usbp->txpending & epmask) {
 8004356:	d169      	bne.n	800442c <usb_lld_pump+0x18c>
 8004358:	f10b 0301 	add.w	r3, fp, #1
 800435c:	9302      	str	r3, [sp, #8]
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800435e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8004362:	f89d b008 	ldrb.w	fp, [sp, #8]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	459b      	cmp	fp, r3
 800436a:	d9c3      	bls.n	80042f4 <usb_lld_pump+0x54>
 800436c:	9b01      	ldr	r3, [sp, #4]
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	e7a7      	b.n	80042c4 <usb_lld_pump+0x24>
 8004374:	f003 050f 	and.w	r5, r3, #15
 8004378:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800437c:	f3c3 140a 	ubfx	r4, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
 8004380:	68eb      	ldr	r3, [r5, #12]
 8004382:	6999      	ldr	r1, [r3, #24]
 8004384:	780b      	ldrb	r3, [r1, #0]
 8004386:	b9db      	cbnz	r3, 80043c0 <usb_lld_pump+0x120>
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 8004388:	684b      	ldr	r3, [r1, #4]
 800438a:	688a      	ldr	r2, [r1, #8]
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
                             usbp->epc[ep]->out_state->mode.queue.rxqueue,
                             cnt);
    }
    else {
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800438c:	68c8      	ldr	r0, [r1, #12]
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800438e:	3303      	adds	r3, #3
 8004390:	1a9a      	subs	r2, r3, r2
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 8004392:	1ce3      	adds	r3, r4, #3
  max = (max + 3) / 4;
  while (n) {
 8004394:	089b      	lsrs	r3, r3, #2
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 8004396:	ea4f 0292 	mov.w	r2, r2, lsr #2
  while (n) {
 800439a:	d009      	beq.n	80043b0 <usb_lld_pump+0x110>
 800439c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80043a0:	4686      	mov	lr, r0
    uint32_t w = *fifop;
 80043a2:	6837      	ldr	r7, [r6, #0]
    if (max) {
 80043a4:	b112      	cbz	r2, 80043ac <usb_lld_pump+0x10c>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 80043a6:	f84e 7b04 	str.w	r7, [lr], #4
      buf += 4;
      max--;
 80043aa:	3a01      	subs	r2, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 80043ac:	3b01      	subs	r3, #1
 80043ae:	d1f8      	bne.n	80043a2 <usb_lld_pump+0x102>
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                              usbp->epc[ep]->out_state->mode.linear.rxbuf,
                              cnt,
                              usbp->epc[ep]->out_state->rxsize -
                              usbp->epc[ep]->out_state->rxcnt);
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 80043b0:	4420      	add	r0, r4
 80043b2:	60c8      	str	r0, [r1, #12]
    }
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80043b4:	68eb      	ldr	r3, [r5, #12]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	6893      	ldr	r3, [r2, #8]
 80043ba:	4423      	add	r3, r4
 80043bc:	6093      	str	r3, [r2, #8]
 80043be:	e799      	b.n	80042f4 <usb_lld_pump+0x54>
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
      /* Queue associated.*/
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
 80043c0:	68c8      	ldr	r0, [r1, #12]
                                   input_queue_t *iqp,
                                   size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 80043c2:	b324      	cbz	r4, 800440e <usb_lld_pump+0x16e>
 80043c4:	6942      	ldr	r2, [r0, #20]
 80043c6:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80043ca:	4627      	mov	r7, r4
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 80043cc:	2f03      	cmp	r7, #3
 80043ce:	d906      	bls.n	80043de <usb_lld_pump+0x13e>
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
      if (iqp->q_wrptr >= iqp->q_top) {
 80043d0:	6903      	ldr	r3, [r0, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d303      	bcc.n	80043de <usb_lld_pump+0x13e>
        iqp->q_wrptr = iqp->q_buffer;
 80043d6:	68c2      	ldr	r2, [r0, #12]
 80043d8:	6142      	str	r2, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 80043da:	2f03      	cmp	r7, #3
 80043dc:	d8f8      	bhi.n	80043d0 <usb_lld_pump+0x130>
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
      break;

    /* One byte at time.*/
    w = *fifop;
 80043de:	f8d6 e000 	ldr.w	lr, [r6]
 80043e2:	2300      	movs	r3, #0
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 80043e4:	fa2e f103 	lsr.w	r1, lr, r3
 80043e8:	f102 0c01 	add.w	ip, r2, #1
 80043ec:	f8c0 c014 	str.w	ip, [r0, #20]
 80043f0:	7011      	strb	r1, [r2, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 80043f2:	6902      	ldr	r2, [r0, #16]
 80043f4:	6941      	ldr	r1, [r0, #20]
 80043f6:	4291      	cmp	r1, r2
        iqp->q_wrptr = iqp->q_buffer;
 80043f8:	bf24      	itt	cs
 80043fa:	68c2      	ldrcs	r2, [r0, #12]
 80043fc:	6142      	strcs	r2, [r0, #20]
      break;

    /* One byte at time.*/
    w = *fifop;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 80043fe:	3f01      	subs	r7, #1
 8004400:	f103 0308 	add.w	r3, r3, #8
 8004404:	d003      	beq.n	800440e <usb_lld_pump+0x16e>
 8004406:	2b20      	cmp	r3, #32
 8004408:	6942      	ldr	r2, [r0, #20]
 800440a:	d1eb      	bne.n	80043e4 <usb_lld_pump+0x144>
 800440c:	e7de      	b.n	80043cc <usb_lld_pump+0x12c>
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	f383 8811 	msr	BASEPRI, r3
    }
  }

  /* Updating queue.*/
  osalSysLock();
  iqp->q_counter += n;
 8004414:	6883      	ldr	r3, [r0, #8]
 8004416:	4423      	add	r3, r4
 8004418:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800441a:	2100      	movs	r1, #0
 800441c:	f7fd f8c8 	bl	80015b0 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 8004420:	f7fc ff26 	bl	8001270 <chSchRescheduleS>
 8004424:	2300      	movs	r3, #0
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	e7c3      	b.n	80043b4 <usb_lld_pump+0x114>
 800442c:	9a01      	ldr	r2, [sp, #4]
 800442e:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8004432:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8004436:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 800443a:	9803      	ldr	r0, [sp, #12]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800443c:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 8004440:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8004444:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8004448:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	eb09 078b 	add.w	r7, r9, fp, lsl #2
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8004454:	68fc      	ldr	r4, [r7, #12]
 8004456:	6962      	ldr	r2, [r4, #20]
 8004458:	6891      	ldr	r1, [r2, #8]
 800445a:	6853      	ldr	r3, [r2, #4]
 800445c:	4299      	cmp	r1, r3
 800445e:	f080 80b5 	bcs.w	80045cc <usb_lld_pump+0x32c>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004462:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 8004466:	8a26      	ldrh	r6, [r4, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004468:	ea4f 184b 	mov.w	r8, fp, lsl #5
 800446c:	eb00 0408 	add.w	r4, r0, r8
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8004470:	1a5b      	subs	r3, r3, r1
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004472:	f8d4 1918 	ldr.w	r1, [r4, #2328]	; 0x918
 8004476:	429e      	cmp	r6, r3
 8004478:	bf28      	it	cs
 800447a:	461e      	movcs	r6, r3
 800447c:	b28b      	uxth	r3, r1
 800447e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8004482:	f10b 0301 	add.w	r3, fp, #1
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	d82f      	bhi.n	80044ea <usb_lld_pump+0x24a>
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	f8cd a010 	str.w	sl, [sp, #16]
 8004490:	469a      	mov	sl, r3

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
 8004492:	7813      	ldrb	r3, [r2, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d13d      	bne.n	8004514 <usb_lld_pump+0x274>
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 8004498:	1cf3      	adds	r3, r6, #3
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800449a:	68d4      	ldr	r4, [r2, #12]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800449c:	089b      	lsrs	r3, r3, #2
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800449e:	eb00 0e0a 	add.w	lr, r0, sl
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80044a2:	bf18      	it	ne
 80044a4:	4621      	movne	r1, r4
 80044a6:	d005      	beq.n	80044b4 <usb_lld_pump+0x214>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 80044a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80044ac:	f8ce 0000 	str.w	r0, [lr]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80044b0:	3b01      	subs	r3, #1
 80044b2:	d1f9      	bne.n	80044a8 <usb_lld_pump+0x208>
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                                 usbp->epc[ep]->in_state->mode.linear.txbuf,
                                 n);
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 80044b4:	4434      	add	r4, r6
 80044b6:	60d4      	str	r4, [r2, #12]
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80044b8:	68fc      	ldr	r4, [r7, #12]
 80044ba:	6962      	ldr	r2, [r4, #20]
 80044bc:	6893      	ldr	r3, [r2, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80044be:	6851      	ldr	r1, [r2, #4]
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80044c0:	4433      	add	r3, r6
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80044c2:	4299      	cmp	r1, r3
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80044c4:	6093      	str	r3, [r2, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80044c6:	d97d      	bls.n	80045c4 <usb_lld_pump+0x324>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80044c8:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 80044cc:	8a24      	ldrh	r4, [r4, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80044ce:	eb00 0508 	add.w	r5, r0, r8
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80044d2:	1ace      	subs	r6, r1, r3
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80044d4:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
 80044d8:	42a6      	cmp	r6, r4
 80044da:	bf28      	it	cs
 80044dc:	4626      	movcs	r6, r4
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 80044e4:	d9d5      	bls.n	8004492 <usb_lld_pump+0x1f2>
 80044e6:	f8dd a010 	ldr.w	sl, [sp, #16]
      return FALSE;
 80044ea:	2200      	movs	r2, #0
 80044ec:	9b01      	ldr	r3, [sp, #4]
 80044ee:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 80044f2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 80044fe:	b92a      	cbnz	r2, 800450c <usb_lld_pump+0x26c>
          otgp->DIEPEMPMSK |= epmask;
 8004500:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8004504:	9a03      	ldr	r2, [sp, #12]
 8004506:	431a      	orrs	r2, r3
 8004508:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 800450c:	2300      	movs	r3, #0
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	e724      	b.n	800435e <usb_lld_pump+0xbe>
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
      /* Queue associated.*/
      otg_fifo_write_from_queue(usbp->otg->FIFO[ep],
 8004514:	eb00 0e0a 	add.w	lr, r0, sl
 8004518:	68d0      	ldr	r0, [r2, #12]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800451a:	b1f6      	cbz	r6, 800455a <usb_lld_pump+0x2ba>
 800451c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8004520:	4632      	mov	r2, r6
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 8004522:	0891      	lsrs	r1, r2, #2
 8004524:	d12c      	bne.n	8004580 <usb_lld_pump+0x2e0>
 8004526:	6983      	ldr	r3, [r0, #24]
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 8004528:	2100      	movs	r1, #0
 800452a:	460c      	mov	r4, r1

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800452c:	1c5d      	adds	r5, r3, #1
 800452e:	6185      	str	r5, [r0, #24]
 8004530:	781b      	ldrb	r3, [r3, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 8004532:	4565      	cmp	r5, ip

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 8004534:	fa03 f301 	lsl.w	r3, r3, r1
 8004538:	ea44 0403 	orr.w	r4, r4, r3
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
 800453c:	bf24      	itt	cs
 800453e:	68c3      	ldrcs	r3, [r0, #12]
 8004540:	6183      	strcs	r3, [r0, #24]
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 8004542:	3a01      	subs	r2, #1
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 8004544:	f101 0108 	add.w	r1, r1, #8
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 8004548:	d003      	beq.n	8004552 <usb_lld_pump+0x2b2>
 800454a:	2920      	cmp	r1, #32
 800454c:	d001      	beq.n	8004552 <usb_lld_pump+0x2b2>
 800454e:	6983      	ldr	r3, [r0, #24]
 8004550:	e7ec      	b.n	800452c <usb_lld_pump+0x28c>
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
      ntogo--;
      i++;
    }
    *fifop = w;
 8004552:	f8ce 4000 	str.w	r4, [lr]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 8004556:	2a00      	cmp	r2, #0
 8004558:	d1e3      	bne.n	8004522 <usb_lld_pump+0x282>
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	f383 8811 	msr	BASEPRI, r3
    *fifop = w;
  }

  /* Updating queue.*/
  osalSysLock();
  oqp->q_counter += n;
 8004560:	6883      	ldr	r3, [r0, #8]
 8004562:	4433      	add	r3, r6
 8004564:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8004566:	2100      	movs	r1, #0
 8004568:	f7fd f822 	bl	80015b0 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800456c:	f7fc fe80 	bl	8001270 <chSchRescheduleS>
 8004570:	2300      	movs	r3, #0
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	e79f      	b.n	80044b8 <usb_lld_pump+0x218>
 8004578:	20000d18 	.word	0x20000d18
 800457c:	0800a290 	.word	0x0800a290
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 8004580:	6984      	ldr	r4, [r0, #24]

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 8004582:	ebbc 0304 	subs.w	r3, ip, r4
 8004586:	bf48      	it	mi
 8004588:	3303      	addmi	r3, #3
 800458a:	109b      	asrs	r3, r3, #2
 800458c:	428b      	cmp	r3, r1
 800458e:	bf28      	it	cs
 8004590:	460b      	movcs	r3, r1
 8004592:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8004596:	ebcb 0202 	rsb	r2, fp, r2
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800459a:	b13b      	cbz	r3, 80045ac <usb_lld_pump+0x30c>
 800459c:	4621      	mov	r1, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800459e:	f851 5b04 	ldr.w	r5, [r1], #4
 80045a2:	f8ce 5000 	str.w	r5, [lr]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80045a6:	3b01      	subs	r3, #1
 80045a8:	d1f9      	bne.n	800459e <usb_lld_pump+0x2fe>
 80045aa:	445c      	add	r4, fp
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
      if (oqp->q_rdptr >= oqp->q_top) {
 80045ac:	45a4      	cmp	ip, r4
    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 80045ae:	6184      	str	r4, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 80045b0:	d804      	bhi.n	80045bc <usb_lld_pump+0x31c>
        oqp->q_rdptr = oqp->q_buffer;
 80045b2:	68c3      	ldr	r3, [r0, #12]
 80045b4:	6183      	str	r3, [r0, #24]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 80045b6:	2a00      	cmp	r2, #0
 80045b8:	d1b3      	bne.n	8004522 <usb_lld_pump+0x282>
 80045ba:	e7ce      	b.n	800455a <usb_lld_pump+0x2ba>
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 80045bc:	2a00      	cmp	r2, #0
 80045be:	d0cc      	beq.n	800455a <usb_lld_pump+0x2ba>
 80045c0:	4623      	mov	r3, r4
 80045c2:	e7b1      	b.n	8004528 <usb_lld_pump+0x288>
 80045c4:	f8dd a010 	ldr.w	sl, [sp, #16]
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;
 80045c8:	2201      	movs	r2, #1
 80045ca:	e78f      	b.n	80044ec <usb_lld_pump+0x24c>
 80045cc:	f10b 0301 	add.w	r3, fp, #1
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	e7f9      	b.n	80045c8 <usb_lld_pump+0x328>
	...

080045e0 <otg_disable_ep.isra.0>:
  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
    ;
}

static void otg_disable_ep(USBDriver *usbp) {
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80045e2:	2400      	movs	r4, #0
 80045e4:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 80045e8:	4625      	mov	r5, r4
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 80045ea:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80045f2:	e014      	b.n	800461e <otg_disable_ep.isra.0+0x3e>
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 80045f4:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 80045f8:	18c2      	adds	r2, r0, r3
 80045fa:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80045fe:	f8c2 7908 	str.w	r7, [r2, #2312]	; 0x908
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 8004602:	f8d1 6b00 	ldr.w	r6, [r1, #2816]	; 0xb00
 8004606:	2e00      	cmp	r6, #0
 8004608:	db17      	blt.n	800463a <otg_disable_ep.isra.0+0x5a>
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
 800460a:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800460e:	4403      	add	r3, r0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004610:	3401      	adds	r4, #1
 8004612:	4574      	cmp	r4, lr
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
 8004614:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004618:	f8c3 7b08 	str.w	r7, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800461c:	d814      	bhi.n	8004648 <otg_disable_ep.isra.0+0x68>
 800461e:	0163      	lsls	r3, r4, #5
 8004620:	18c1      	adds	r1, r0, r3
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 8004622:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004626:	2a00      	cmp	r2, #0
 8004628:	dae4      	bge.n	80045f4 <otg_disable_ep.isra.0+0x14>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800462a:	f8c1 c900 	str.w	ip, [r1, #2304]	; 0x900
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 800462e:	460e      	mov	r6, r1
 8004630:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 8004634:	0792      	lsls	r2, r2, #30
 8004636:	d5fb      	bpl.n	8004630 <otg_disable_ep.isra.0+0x50>
 8004638:	e7de      	b.n	80045f8 <otg_disable_ep.isra.0+0x18>
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 800463a:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 800463e:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	; 0xb08
 8004642:	06c9      	lsls	r1, r1, #27
 8004644:	d5fb      	bpl.n	800463e <otg_disable_ep.isra.0+0x5e>
 8004646:	e7e2      	b.n	800460e <otg_disable_ep.isra.0+0x2e>
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004648:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800464c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	bf00      	nop
	...

08004660 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8004660:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8004662:	4c06      	ldr	r4, [pc, #24]	; (800467c <usb_lld_init+0x1c>)
 8004664:	4620      	mov	r0, r4
 8004666:	f7fe fd63 	bl	8003130 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800466a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 8004670:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8004672:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 8004674:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8004676:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 8004678:	6663      	str	r3, [r4, #100]	; 0x64
 800467a:	bd10      	pop	{r4, pc}
 800467c:	20000f48 	.word	0x20000f48
 8004680:	0800a280 	.word	0x0800a280
	...

08004690 <usb_lld_start>:
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 8004690:	7803      	ldrb	r3, [r0, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d000      	beq.n	8004698 <usb_lld_start+0x8>
 8004696:	4770      	bx	lr
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 8004698:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <usb_lld_start+0xd0>)
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800469c:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800469e:	4298      	cmp	r0, r3
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80046a0:	b082      	sub	sp, #8
 80046a2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 80046a4:	bf18      	it	ne
 80046a6:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80046a8:	d03a      	beq.n	8004720 <usb_lld_start+0x90>
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 80046aa:	2300      	movs	r3, #0

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80046ac:	482d      	ldr	r0, [pc, #180]	; (8004764 <usb_lld_start+0xd4>)

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80046ae:	492e      	ldr	r1, [pc, #184]	; (8004768 <usb_lld_start+0xd8>)
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 80046b0:	65eb      	str	r3, [r5, #92]	; 0x5c
    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
                  GCCFG_PWRDWN;
#else
    otgp->GCCFG = GCCFG_VBUSASEN | GCCFG_VBUSBSEN | GCCFG_PWRDWN;
 80046b2:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
    usbp->txpending = 0;

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80046b6:	60f0      	str	r0, [r6, #12]

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80046b8:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 80046bc:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 80046be:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
                  GCCFG_PWRDWN;
#else
    otgp->GCCFG = GCCFG_VBUSASEN | GCCFG_VBUSBSEN | GCCFG_PWRDWN;
 80046c2:	63b2      	str	r2, [r6, #56]	; 0x38
 80046c4:	f7fc fc1c 	bl	8000f00 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80046c8:	2301      	movs	r3, #1
 80046ca:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	07db      	lsls	r3, r3, #31
 80046d0:	d4fc      	bmi.n	80046cc <usb_lld_start+0x3c>
 80046d2:	200c      	movs	r0, #12
 80046d4:	f7fc fc14 	bl	8000f00 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(12);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dafc      	bge.n	80046d8 <usb_lld_start+0x48>

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 80046de:	2400      	movs	r4, #0
 80046e0:	60b4      	str	r4, [r6, #8]

    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);
 80046e2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80046e4:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80046e6:	f7ff ff7b 	bl	80045e0 <otg_disable_ep.isra.0>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 80046ea:	686b      	ldr	r3, [r5, #4]
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 80046ec:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 80046f0:	68db      	ldr	r3, [r3, #12]
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
 80046f2:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 80046f6:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 80046fa:	b16b      	cbz	r3, 8004718 <usb_lld_start+0x88>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 80046fc:	f243 0308 	movw	r3, #12296	; 0x3008
 8004700:	61b3      	str	r3, [r6, #24]
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8004702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 8004704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004708:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800470a:	b1d3      	cbz	r3, 8004742 <usb_lld_start+0xb2>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800470c:	68b3      	ldr	r3, [r6, #8]
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	60b3      	str	r3, [r6, #8]
  }
}
 8004714:	b002      	add	sp, #8
 8004716:	bd70      	pop	{r4, r5, r6, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 8004718:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800471c:	61b3      	str	r3, [r6, #24]
 800471e:	e7f0      	b.n	8004702 <usb_lld_start+0x72>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <usb_lld_start+0xdc>)
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004728:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	2000      	movs	r0, #0
 800472e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004732:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004734:	210e      	movs	r1, #14
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
      rccResetOTG_FS();
 8004736:	6158      	str	r0, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004738:	2043      	movs	r0, #67	; 0x43
 800473a:	f7fe fff9 	bl	8003730 <nvicEnableVector>
 800473e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8004740:	e7b3      	b.n	80046aa <usb_lld_start+0x1a>
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <usb_lld_start+0xe0>)
 8004744:	9500      	str	r5, [sp, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800474c:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004750:	f7fc fdc6 	bl	80012e0 <chThdCreateI>
 8004754:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8004756:	f7fc fcb3 	bl	80010c0 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 800475a:	f7fc fd89 	bl	8001270 <chSchRescheduleS>
 800475e:	e7d5      	b.n	800470c <usb_lld_start+0x7c>
 8004760:	20000f48 	.word	0x20000f48
 8004764:	40001440 	.word	0x40001440
 8004768:	02200003 	.word	0x02200003
 800476c:	40023800 	.word	0x40023800
 8004770:	080042a1 	.word	0x080042a1
	...

08004780 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 8004782:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004784:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8004786:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004788:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800478a:	692b      	ldr	r3, [r5, #16]
 800478c:	f013 0420 	ands.w	r4, r3, #32
 8004790:	d1fb      	bne.n	800478a <usb_lld_reset+0xa>
 8004792:	200c      	movs	r0, #12
 8004794:	f7fc fbb4 	bl	8000f00 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004798:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800479c:	f8de 6008 	ldr.w	r6, [lr, #8]
 80047a0:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80047a2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 80047a6:	21ff      	movs	r1, #255	; 0xff
 80047a8:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80047ac:	3301      	adds	r3, #1
 80047ae:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80047b0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80047b4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 80047b8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 80047bc:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80047c0:	d9f2      	bls.n	80047a8 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80047c2:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 80047c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80047ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 80047ce:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 80047d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80047d4:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80047d8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80047da:	f8de 3000 	ldr.w	r3, [lr]
 80047de:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80047e0:	2310      	movs	r3, #16
 80047e2:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 80047e4:	6913      	ldr	r3, [r2, #16]
 80047e6:	f013 0410 	ands.w	r4, r3, #16
 80047ea:	d1fb      	bne.n	80047e4 <usb_lld_reset+0x64>
 80047ec:	200c      	movs	r0, #12
 80047ee:	f7fc fb87 	bl	8000f00 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80047f2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 80047f6:	4a11      	ldr	r2, [pc, #68]	; (800483c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 80047f8:	4811      	ldr	r0, [pc, #68]	; (8004840 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80047fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047fe:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8004802:	69ab      	ldr	r3, [r5, #24]
 8004804:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004808:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800480c:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800480e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8004810:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8004814:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8004818:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800481a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800481e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8004822:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8004826:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800482a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800482c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8004830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8004834:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8004836:	62ab      	str	r3, [r5, #40]	; 0x28
 8004838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483a:	bf00      	nop
 800483c:	10008040 	.word	0x10008040
 8004840:	0800a2a0 	.word	0x0800a2a0
	...

08004850 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004850:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8004852:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8004856:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800485a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800485e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004862:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8004866:	4770      	bx	lr
	...

08004870 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8004870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004874:	fa0f f881 	sxth.w	r8, r1
 8004878:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800487c:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	2a02      	cmp	r2, #2
 8004888:	d05e      	beq.n	8004948 <usb_lld_init_endpoint+0xd8>
 800488a:	2a03      	cmp	r2, #3
 800488c:	d05e      	beq.n	800494c <usb_lld_init_endpoint+0xdc>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 800488e:	4e4c      	ldr	r6, [pc, #304]	; (80049c0 <usb_lld_init_endpoint+0x150>)
 8004890:	494c      	ldr	r1, [pc, #304]	; (80049c4 <usb_lld_init_endpoint+0x154>)
 8004892:	2a01      	cmp	r2, #1
 8004894:	bf18      	it	ne
 8004896:	460e      	movne	r6, r1
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 8004898:	6d04      	ldr	r4, [r0, #80]	; 0x50
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
  if (usbp->epc[ep]->out_cb != NULL) {
 800489a:	68d9      	ldr	r1, [r3, #12]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800489c:	016a      	lsls	r2, r5, #5
 800489e:	eb04 0e02 	add.w	lr, r4, r2
 80048a2:	f04f 0c00 	mov.w	ip, #0
 80048a6:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_cb != NULL) {
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d073      	beq.n	8004996 <usb_lld_init_endpoint+0x126>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 80048ae:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80048b2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80048b6:	0149      	lsls	r1, r1, #5
 80048b8:	ea4e 0e06 	orr.w	lr, lr, r6
 80048bc:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 80048c0:	f105 0c10 	add.w	ip, r5, #16
 80048c4:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 80048c8:	f04f 0e01 	mov.w	lr, #1
 80048cc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80048d0:	ea4e 0101 	orr.w	r1, lr, r1
 80048d4:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 80048d8:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_cb != NULL) {
 80048da:	6899      	ldr	r1, [r3, #8]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 80048dc:	f04f 0e00 	mov.w	lr, #0
 80048e0:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_cb != NULL) {
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d033      	beq.n	8004950 <usb_lld_init_endpoint+0xe0>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 80048e8:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80048ea:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 80048ec:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80048ee:	ea4f 0392 	mov.w	r3, r2, lsr #2
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80048f2:	6d82      	ldr	r2, [r0, #88]	; 0x58
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 80048f4:	bf88      	it	hi
 80048f6:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80048f8:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 80048fc:	eb03 0e02 	add.w	lr, r3, r2
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004900:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004904:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004908:	01aa      	lsls	r2, r5, #6
 800490a:	f042 0220 	orr.w	r2, r2, #32
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800490e:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004912:	604b      	str	r3, [r1, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004914:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	069a      	lsls	r2, r3, #26
 800491a:	d4fc      	bmi.n	8004916 <usb_lld_init_endpoint+0xa6>
 800491c:	200c      	movs	r0, #12
 800491e:	f7fc faef 	bl	8000f00 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8004922:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8004924:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8004926:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800492a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800492e:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8004930:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8004932:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8004934:	2101      	movs	r1, #1
 8004936:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 800493a:	fa01 f505 	lsl.w	r5, r1, r5
 800493e:	431d      	orrs	r5, r3
 8004940:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 8004944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8004948:	4e1f      	ldr	r6, [pc, #124]	; (80049c8 <usb_lld_init_endpoint+0x158>)
    break;
 800494a:	e7a5      	b.n	8004898 <usb_lld_init_endpoint+0x28>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 800494c:	4e1f      	ldr	r6, [pc, #124]	; (80049cc <usb_lld_init_endpoint+0x15c>)
    break;
 800494e:	e7a3      	b.n	8004898 <usb_lld_init_endpoint+0x28>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8004950:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 8004954:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004958:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800495a:	491d      	ldr	r1, [pc, #116]	; (80049d0 <usb_lld_init_endpoint+0x160>)
 800495c:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	069b      	lsls	r3, r3, #26
 8004968:	d4fc      	bmi.n	8004964 <usb_lld_init_endpoint+0xf4>
 800496a:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 800496e:	200c      	movs	r0, #12
 8004970:	f7fc fac6 	bl	8000f00 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8004974:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8004978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800497c:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8004980:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8004984:	2201      	movs	r2, #1
 8004986:	fa02 f505 	lsl.w	r5, r2, r5
 800498a:	ea23 0305 	bic.w	r3, r3, r5
 800498e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 8004992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004996:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800499a:	f105 0910 	add.w	r9, r5, #16
  if (usbp->epc[ep]->out_cb != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800499e:	f8d1 cb00 	ldr.w	ip, [r1, #2816]	; 0xb00
 80049a2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 80049a6:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80049aa:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 80049ae:	f04f 0e01 	mov.w	lr, #1
 80049b2:	fa0e fe09 	lsl.w	lr, lr, r9
 80049b6:	ea21 010e 	bic.w	r1, r1, lr
 80049ba:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 80049be:	e78b      	b.n	80048d8 <usb_lld_init_endpoint+0x68>
 80049c0:	10048000 	.word	0x10048000
 80049c4:	10008000 	.word	0x10008000
 80049c8:	10088000 	.word	0x10088000
 80049cc:	100c8000 	.word	0x100c8000
 80049d0:	02000400 	.word	0x02000400
	...

080049e0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 80049e0:	3158      	adds	r1, #88	; 0x58
 80049e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80049e4:	0149      	lsls	r1, r1, #5
 80049e6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 80049e8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 80049ec:	d004      	beq.n	80049f8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 80049ee:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 80049f2:	bf14      	ite	ne
 80049f4:	2001      	movne	r0, #1
 80049f6:	2002      	moveq	r0, #2
}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	0000      	movs	r0, r0
	...

08004a00 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004a00:	3148      	adds	r1, #72	; 0x48
 8004a02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a04:	0149      	lsls	r1, r1, #5
 8004a06:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8004a08:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004a0c:	d004      	beq.n	8004a18 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 8004a0e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8004a12:	bf14      	ite	ne
 8004a14:	2001      	movne	r0, #1
 8004a16:	2002      	moveq	r0, #2
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	0000      	movs	r0, r0
	...

08004a20 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004a20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004a24:	68cb      	ldr	r3, [r1, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	6053      	str	r3, [r2, #4]
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
	...

08004a40 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004a40:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 8004a44:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004a46:	68dd      	ldr	r5, [r3, #12]
 8004a48:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 8004a4a:	6863      	ldr	r3, [r4, #4]
 8004a4c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 8004a4e:	b931      	cbnz	r1, 8004a5e <usb_lld_prepare_receive+0x1e>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d904      	bls.n	8004a5e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <usb_lld_prepare_receive+0x40>)
 8004a5a:	243f      	movs	r4, #63	; 0x3f
 8004a5c:	e002      	b.n	8004a64 <usb_lld_prepare_receive+0x24>
 8004a5e:	1e5c      	subs	r4, r3, #1
 8004a60:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004a64:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8004a66:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004a68:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004a6c:	192b      	adds	r3, r5, r4
 8004a6e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004a72:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8004a76:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 8004a7a:	bc30      	pop	{r4, r5}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	60000040 	.word	0x60000040
	...

08004a90 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8004a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004a94:	4e26      	ldr	r6, [pc, #152]	; (8004b30 <otg_epout_handler.constprop.7+0xa0>)
 8004a96:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8004a98:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8004a9c:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8004a9e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8004aa2:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8004aa6:	0720      	lsls	r0, r4, #28
 8004aa8:	d503      	bpl.n	8004ab2 <otg_epout_handler.constprop.7+0x22>
 8004aaa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8004aae:	0719      	lsls	r1, r3, #28
 8004ab0:	d41d      	bmi.n	8004aee <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8004ab2:	07e2      	lsls	r2, r4, #31
 8004ab4:	d519      	bpl.n	8004aea <otg_epout_handler.constprop.7+0x5a>
 8004ab6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8004aba:	07db      	lsls	r3, r3, #31
 8004abc:	d515      	bpl.n	8004aea <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004abe:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8004ac2:	4c1b      	ldr	r4, [pc, #108]	; (8004b30 <otg_epout_handler.constprop.7+0xa0>)
 8004ac4:	68f1      	ldr	r1, [r6, #12]
 8004ac6:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 8004ac8:	6858      	ldr	r0, [r3, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	4290      	cmp	r0, r2
 8004ace:	d316      	bcc.n	8004afe <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8004ad0:	8962      	ldrh	r2, [r4, #10]
 8004ad2:	68ce      	ldr	r6, [r1, #12]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	40ab      	lsls	r3, r5
 8004ad8:	ea22 0303 	bic.w	r3, r2, r3
 8004adc:	8163      	strh	r3, [r4, #10]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4633      	mov	r3, r6
    }
  }
}
 8004ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8004ae8:	4718      	bx	r3
 8004aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8004aee:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8004af2:	4629      	mov	r1, r5
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4630      	mov	r0, r6
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e7d9      	b.n	8004ab2 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8004afe:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 8004b00:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8004b02:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 8004b04:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 8004b06:	4629      	mov	r1, r5
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ff99 	bl	8004a40 <usb_lld_prepare_receive>
 8004b0e:	2320      	movs	r3, #32
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004b16:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8004b1a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8004b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b22:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8004b26:	f386 8811 	msr	BASEPRI, r6
 8004b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000f48 	.word	0x20000f48
	...

08004b40 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004b40:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8004b44:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004b46:	68dc      	ldr	r4, [r3, #12]
 8004b48:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8004b4a:	6853      	ldr	r3, [r2, #4]
 8004b4c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 8004b4e:	b1a3      	cbz	r3, 8004b7a <usb_lld_prepare_transmit+0x3a>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8004b50:	b169      	cbz	r1, 8004b6e <usb_lld_prepare_transmit+0x2e>
 8004b52:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8004b54:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004b56:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8004b58:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004b5c:	4422      	add	r2, r4
 8004b5e:	fbb2 f2f4 	udiv	r2, r2, r4
 8004b62:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8004b66:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8004b6a:	bc10      	pop	{r4}
 8004b6c:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d9ef      	bls.n	8004b52 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 8004b72:	2340      	movs	r3, #64	; 0x40
 8004b74:	6053      	str	r3, [r2, #4]
 8004b76:	223f      	movs	r2, #63	; 0x3f
 8004b78:	e7ec      	b.n	8004b54 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8004b7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8004b7c:	bc10      	pop	{r4}

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8004b7e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004b82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b86:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8004b8a:	4770      	bx	lr
 8004b8c:	0000      	movs	r0, r0
	...

08004b90 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8004b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004b94:	4f31      	ldr	r7, [pc, #196]	; (8004c5c <otg_epin_handler.constprop.8+0xcc>)
 8004b96:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8004b98:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8004b9c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8004b9e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 8004ba2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8004ba6:	07e1      	lsls	r1, r4, #31
 8004ba8:	d503      	bpl.n	8004bb2 <otg_epin_handler.constprop.8+0x22>
 8004baa:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8004bae:	07da      	lsls	r2, r3, #31
 8004bb0:	d40a      	bmi.n	8004bc8 <otg_epin_handler.constprop.8+0x38>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8004bb2:	0623      	lsls	r3, r4, #24
 8004bb4:	d506      	bpl.n	8004bc4 <otg_epin_handler.constprop.8+0x34>
 8004bb6:	2301      	movs	r3, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8004bb8:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8004bbc:	fa03 f606 	lsl.w	r6, r3, r6
 8004bc0:	4216      	tst	r6, r2
 8004bc2:	d129      	bne.n	8004c18 <otg_epin_handler.constprop.8+0x88>
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004bc8:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8004bcc:	68d9      	ldr	r1, [r3, #12]
 8004bce:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 8004bd0:	6858      	ldr	r0, [r3, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	4290      	cmp	r0, r2
 8004bd6:	d234      	bcs.n	8004c42 <otg_epin_handler.constprop.8+0xb2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8004bd8:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8004bda:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8004bde:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 8004be0:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 8004be4:	4631      	mov	r1, r6
 8004be6:	4638      	mov	r0, r7
 8004be8:	f7ff ffaa 	bl	8004b40 <usb_lld_prepare_transmit>
 8004bec:	2320      	movs	r3, #32
 8004bee:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004bf8:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004bfa:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8004bfe:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8004c02:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004c06:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8004c0a:	40b2      	lsls	r2, r6
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8004c12:	f388 8811 	msr	BASEPRI, r8
 8004c16:	e7cc      	b.n	8004bb2 <otg_epin_handler.constprop.8+0x22>
 8004c18:	2320      	movs	r3, #32
 8004c1a:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8004c1e:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8004c22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004c24:	480e      	ldr	r0, [pc, #56]	; (8004c60 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8004c26:	ea23 0306 	bic.w	r3, r3, r6
 8004c2a:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8004c2e:	4316      	orrs	r6, r2
 8004c30:	2100      	movs	r1, #0
 8004c32:	65fe      	str	r6, [r7, #92]	; 0x5c
 8004c34:	f7fc fc84 	bl	8001540 <chThdResumeI>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8004c42:	893a      	ldrh	r2, [r7, #8]
 8004c44:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	40b3      	lsls	r3, r6
 8004c4c:	ea22 0303 	bic.w	r3, r2, r3
 8004c50:	813b      	strh	r3, [r7, #8]
 8004c52:	4631      	mov	r1, r6
 8004c54:	4638      	mov	r0, r7
 8004c56:	47c0      	blx	r8
 8004c58:	e7ab      	b.n	8004bb2 <otg_epin_handler.constprop.8+0x22>
 8004c5a:	bf00      	nop
 8004c5c:	20000f48 	.word	0x20000f48
 8004c60:	20000fa8 	.word	0x20000fa8
	...

08004c70 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8004c70:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004c72:	4d3a      	ldr	r5, [pc, #232]	; (8004d5c <Vector14C+0xec>)
 8004c74:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8004c76:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 8004c78:	69b3      	ldr	r3, [r6, #24]
 8004c7a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8004c7c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 8004c7e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8004c80:	d42d      	bmi.n	8004cde <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8004c82:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 8004c84:	bf48      	it	mi
 8004c86:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8004c8a:	0723      	lsls	r3, r4, #28
 8004c8c:	d504      	bpl.n	8004c98 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 8004c8e:	686b      	ldr	r3, [r5, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	b10b      	cbz	r3, 8004c98 <Vector14C+0x28>
 8004c94:	4831      	ldr	r0, [pc, #196]	; (8004d5c <Vector14C+0xec>)
 8004c96:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 8004c98:	06e5      	lsls	r5, r4, #27
 8004c9a:	d42b      	bmi.n	8004cf4 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 8004c9c:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 8004c9e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 8004ca2:	d507      	bpl.n	8004cb4 <Vector14C+0x44>
    if (src & (1 << 0))
 8004ca4:	07e9      	lsls	r1, r5, #31
 8004ca6:	d445      	bmi.n	8004d34 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 8004ca8:	07aa      	lsls	r2, r5, #30
 8004caa:	d448      	bmi.n	8004d3e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 8004cac:	076b      	lsls	r3, r5, #29
 8004cae:	d44b      	bmi.n	8004d48 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 8004cb0:	072e      	lsls	r6, r5, #28
 8004cb2:	d44e      	bmi.n	8004d52 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8004cb4:	0324      	lsls	r4, r4, #12
 8004cb6:	d507      	bpl.n	8004cc8 <Vector14C+0x58>
    if (src & (1 << 16))
 8004cb8:	03e8      	lsls	r0, r5, #15
 8004cba:	d430      	bmi.n	8004d1e <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 8004cbc:	03a9      	lsls	r1, r5, #14
 8004cbe:	d433      	bmi.n	8004d28 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 8004cc0:	036a      	lsls	r2, r5, #13
 8004cc2:	d426      	bmi.n	8004d12 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 8004cc4:	032b      	lsls	r3, r5, #12
 8004cc6:	d403      	bmi.n	8004cd0 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8004cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8004ccc:	f7fd be50 	b.w	8002970 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 8004cd0:	2003      	movs	r0, #3
 8004cd2:	f7ff fedd 	bl	8004a90 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8004cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8004cda:	f7fd be49 	b.w	8002970 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7fe faa6 	bl	8003230 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8004ce4:	686b      	ldr	r3, [r5, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ca      	beq.n	8004c82 <Vector14C+0x12>
 8004cec:	2100      	movs	r1, #0
 8004cee:	4628      	mov	r0, r5
 8004cf0:	4798      	blx	r3
 8004cf2:	e7c6      	b.n	8004c82 <Vector14C+0x12>
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8004cfa:	69b3      	ldr	r3, [r6, #24]
 8004cfc:	4818      	ldr	r0, [pc, #96]	; (8004d60 <Vector14C+0xf0>)
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	61b3      	str	r3, [r6, #24]
 8004d04:	2100      	movs	r1, #0
 8004d06:	f7fc fc1b 	bl	8001540 <chThdResumeI>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	e7c4      	b.n	8004c9c <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 8004d12:	2002      	movs	r0, #2
 8004d14:	f7ff febc 	bl	8004a90 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 8004d18:	032b      	lsls	r3, r5, #12
 8004d1a:	d5d5      	bpl.n	8004cc8 <Vector14C+0x58>
 8004d1c:	e7d8      	b.n	8004cd0 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7ff feb6 	bl	8004a90 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 8004d24:	03a9      	lsls	r1, r5, #14
 8004d26:	d5cb      	bpl.n	8004cc0 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f7ff feb1 	bl	8004a90 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 8004d2e:	036a      	lsls	r2, r5, #13
 8004d30:	d5c8      	bpl.n	8004cc4 <Vector14C+0x54>
 8004d32:	e7ee      	b.n	8004d12 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7ff ff2b 	bl	8004b90 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 8004d3a:	07aa      	lsls	r2, r5, #30
 8004d3c:	d5b6      	bpl.n	8004cac <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f7ff ff26 	bl	8004b90 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 8004d44:	076b      	lsls	r3, r5, #29
 8004d46:	d5b3      	bpl.n	8004cb0 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 8004d48:	2002      	movs	r0, #2
 8004d4a:	f7ff ff21 	bl	8004b90 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 8004d4e:	072e      	lsls	r6, r5, #28
 8004d50:	d5b0      	bpl.n	8004cb4 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 8004d52:	2003      	movs	r0, #3
 8004d54:	f7ff ff1c 	bl	8004b90 <otg_epin_handler.constprop.8>
 8004d58:	e7ac      	b.n	8004cb4 <Vector14C+0x44>
 8004d5a:	bf00      	nop
 8004d5c:	20000f48 	.word	0x20000f48
 8004d60:	20000fa8 	.word	0x20000fa8
	...

08004d70 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8004d70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004d72:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8004d76:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d7e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004d82:	4770      	bx	lr
	...

08004d90 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004d90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8004d92:	b410      	push	{r4}
 8004d94:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004d98:	2001      	movs	r0, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004d9a:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 8004d9e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004da2:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004da6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
}
 8004daa:	bc10      	pop	{r4}
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8004dac:	fa00 f101 	lsl.w	r1, r0, r1
 8004db0:	4311      	orrs	r1, r2
 8004db2:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
}
 8004db6:	4770      	bx	lr
	...

08004dc0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8004dc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004dc2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004dc6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dce:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004dd2:	4770      	bx	lr
	...

08004de0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8004de0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004de2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8004de6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dee:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004df2:	4770      	bx	lr
	...

08004e00 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8004e00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004e02:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004e06:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e0e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004e12:	4770      	bx	lr
	...

08004e20 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004e20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004e22:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004e26:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e2e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004e32:	4770      	bx	lr
	...

08004e40 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004e40:	f011 0f0c 	tst.w	r1, #12
 8004e44:	d100      	bne.n	8004e48 <spi_lld_serve_tx_interrupt+0x8>
 8004e46:	4770      	bx	lr
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004e48:	4801      	ldr	r0, [pc, #4]	; (8004e50 <spi_lld_serve_tx_interrupt+0x10>)
 8004e4a:	f7fb bf91 	b.w	8000d70 <chSysHalt>
 8004e4e:	bf00      	nop
 8004e50:	0800a2d0 	.word	0x0800a2d0
	...

08004e60 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004e60:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004e68:	d134      	bne.n	8004ed4 <spi_lld_serve_rx_interrupt+0x74>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e6c:	6802      	ldr	r2, [r0, #0]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f023 031f 	bic.w	r3, r3, #31
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	07d9      	lsls	r1, r3, #31
 8004e7a:	d4fc      	bmi.n	8004e76 <spi_lld_serve_rx_interrupt+0x16>
 8004e7c:	7a05      	ldrb	r5, [r0, #8]
  dmaStreamDisable(spip->dmarx);
 8004e7e:	6a21      	ldr	r1, [r4, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004e80:	6840      	ldr	r0, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8004e82:	680a      	ldr	r2, [r1, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004e84:	233d      	movs	r3, #61	; 0x3d
 8004e86:	40ab      	lsls	r3, r5
 8004e88:	6003      	str	r3, [r0, #0]
  dmaStreamDisable(spip->dmarx);
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	f023 031f 	bic.w	r3, r3, #31
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	07db      	lsls	r3, r3, #31
 8004e96:	d4fc      	bmi.n	8004e92 <spi_lld_serve_rx_interrupt+0x32>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004e98:	6863      	ldr	r3, [r4, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004e9a:	7a08      	ldrb	r0, [r1, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004e9c:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004e9e:	6849      	ldr	r1, [r1, #4]
 8004ea0:	233d      	movs	r3, #61	; 0x3d
 8004ea2:	4083      	lsls	r3, r0
 8004ea4:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004ea6:	b192      	cbz	r2, 8004ece <spi_lld_serve_rx_interrupt+0x6e>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	7023      	strb	r3, [r4, #0]
 8004eac:	4620      	mov	r0, r4
 8004eae:	4790      	blx	r2
 8004eb0:	7823      	ldrb	r3, [r4, #0]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00b      	beq.n	8004ece <spi_lld_serve_rx_interrupt+0x6e>
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f104 0008 	add.w	r0, r4, #8
 8004ec2:	f7fc fb3d 	bl	8001540 <chThdResumeI>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
 8004ece:	2302      	movs	r3, #2
 8004ed0:	7023      	strb	r3, [r4, #0]
 8004ed2:	e7f0      	b.n	8004eb6 <spi_lld_serve_rx_interrupt+0x56>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <spi_lld_serve_rx_interrupt+0x7c>)
 8004ed6:	f7fb ff4b 	bl	8000d70 <chSysHalt>
 8004eda:	e7c6      	b.n	8004e6a <spi_lld_serve_rx_interrupt+0xa>
 8004edc:	0800a2d0 	.word	0x0800a2d0

08004ee0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004ee0:	b570      	push	{r4, r5, r6, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004ee2:	4e11      	ldr	r6, [pc, #68]	; (8004f28 <spi_lld_init+0x48>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <spi_lld_init+0x4c>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8004ee6:	4c12      	ldr	r4, [pc, #72]	; (8004f30 <spi_lld_init+0x50>)
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004ee8:	4d12      	ldr	r5, [pc, #72]	; (8004f34 <spi_lld_init+0x54>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004eea:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004eee:	4630      	mov	r0, r6
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004ef0:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004ef2:	f7fe f8ad 	bl	8003050 <spiObjectInit>
  SPID1.spi       = SPI1;
 8004ef6:	4910      	ldr	r1, [pc, #64]	; (8004f38 <spi_lld_init+0x58>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <spi_lld_init+0x5c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <spi_lld_init+0x60>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8004efc:	61f1      	str	r1, [r6, #28]
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8004efe:	4620      	mov	r0, r4

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004f00:	f105 0124 	add.w	r1, r5, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004f04:	6235      	str	r5, [r6, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004f06:	6271      	str	r1, [r6, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004f08:	62b2      	str	r2, [r6, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004f0a:	62f3      	str	r3, [r6, #44]	; 0x2c
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8004f0c:	f7fe f8a0 	bl	8003050 <spiObjectInit>
  SPID2.spi       = SPI2;
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <spi_lld_init+0x64>)
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <spi_lld_init+0x68>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8004f14:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <spi_lld_init+0x6c>)
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8004f16:	61e1      	str	r1, [r4, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8004f18:	f1a5 013c 	sub.w	r1, r5, #60	; 0x3c
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8004f1c:	3d30      	subs	r5, #48	; 0x30
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8004f1e:	6221      	str	r1, [r4, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8004f20:	6265      	str	r5, [r4, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8004f22:	62a2      	str	r2, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8004f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	20001118 	.word	0x20001118
 8004f2c:	20001114 	.word	0x20001114
 8004f30:	20001148 	.word	0x20001148
 8004f34:	0800a220 	.word	0x0800a220
 8004f38:	40013000 	.word	0x40013000
 8004f3c:	06010016 	.word	0x06010016
 8004f40:	06010046 	.word	0x06010046
 8004f44:	40003800 	.word	0x40003800
 8004f48:	00010016 	.word	0x00010016
 8004f4c:	00010046 	.word	0x00010046

08004f50 <spi_lld_start>:
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004f50:	7803      	ldrb	r3, [r0, #0]
 8004f52:	2b01      	cmp	r3, #1
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004f58:	d01d      	beq.n	8004f96 <spi_lld_start+0x46>
 8004f5a:	69c3      	ldr	r3, [r0, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004f5c:	6862      	ldr	r2, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004f60:	8952      	ldrh	r2, [r2, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f64:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f68:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004f6c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f70:	bf1c      	itt	ne
 8004f72:	f440 5020 	orrne.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f76:	f441 5120 	orrne.w	r1, r1, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f7a:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004f7c:	62e1      	str	r1, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004f7e:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004f82:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004f84:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004f86:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004f88:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004f8a:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	bd10      	pop	{r4, pc}
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <spi_lld_start+0xb0>)
 8004f98:	4298      	cmp	r0, r3
 8004f9a:	d00c      	beq.n	8004fb6 <spi_lld_start+0x66>
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <spi_lld_start+0xb4>)
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	d01b      	beq.n	8004fda <spi_lld_start+0x8a>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004fa2:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004fa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004fa6:	69e3      	ldr	r3, [r4, #28]
 8004fa8:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004faa:	6811      	ldr	r1, [r2, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004fac:	f103 020c 	add.w	r2, r3, #12
 8004fb0:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004fb2:	608a      	str	r2, [r1, #8]
 8004fb4:	e7d2      	b.n	8004f5c <spi_lld_start+0xc>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4a13      	ldr	r2, [pc, #76]	; (8005008 <spi_lld_start+0xb8>)
 8004fba:	6a00      	ldr	r0, [r0, #32]
 8004fbc:	210a      	movs	r1, #10
 8004fbe:	f7fe fd87 	bl	8003ad0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	4a11      	ldr	r2, [pc, #68]	; (800500c <spi_lld_start+0xbc>)
 8004fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fc8:	210a      	movs	r1, #10
 8004fca:	f7fe fd81 	bl	8003ad0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8004fce:	4a10      	ldr	r2, [pc, #64]	; (8005010 <spi_lld_start+0xc0>)
 8004fd0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd8:	e7e3      	b.n	8004fa2 <spi_lld_start+0x52>
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <spi_lld_start+0xb8>)
 8004fde:	6a00      	ldr	r0, [r0, #32]
 8004fe0:	210a      	movs	r1, #10
 8004fe2:	f7fe fd75 	bl	8003ad0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <spi_lld_start+0xbc>)
 8004fea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fec:	210a      	movs	r1, #10
 8004fee:	f7fe fd6f 	bl	8003ad0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <spi_lld_start+0xc0>)
 8004ff4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffc:	e7d1      	b.n	8004fa2 <spi_lld_start+0x52>
 8004ffe:	bf00      	nop
 8005000:	20001118 	.word	0x20001118
 8005004:	20001148 	.word	0x20001148
 8005008:	08004e61 	.word	0x08004e61
 800500c:	08004e41 	.word	0x08004e41
 8005010:	40023800 	.word	0x40023800
	...

08005020 <spi_lld_select>:
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8005020:	6842      	ldr	r2, [r0, #4]
 8005022:	8911      	ldrh	r1, [r2, #8]
 8005024:	6852      	ldr	r2, [r2, #4]
 8005026:	2301      	movs	r3, #1
 8005028:	408b      	lsls	r3, r1
 800502a:	b29b      	uxth	r3, r3
 800502c:	8353      	strh	r3, [r2, #26]
 800502e:	4770      	bx	lr

08005030 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8005030:	6842      	ldr	r2, [r0, #4]
 8005032:	8911      	ldrh	r1, [r2, #8]
 8005034:	6852      	ldr	r2, [r2, #4]
 8005036:	2301      	movs	r3, #1
 8005038:	408b      	lsls	r3, r1
 800503a:	b29b      	uxth	r3, r3
 800503c:	8313      	strh	r3, [r2, #24]
 800503e:	4770      	bx	lr

08005040 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8005040:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005042:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005044:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8005046:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005048:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800504a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800504c:	6838      	ldr	r0, [r7, #0]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800504e:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8005050:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005054:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005058:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800505a:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800505c:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800505e:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005060:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800506a:	6803      	ldr	r3, [r0, #0]
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6003      	str	r3, [r0, #0]
}
 8005072:	bcf0      	pop	{r4, r5, r6, r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
	...

08005080 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8005080:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005082:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8005084:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005086:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8005088:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800508a:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800508c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800508e:	4e09      	ldr	r6, [pc, #36]	; (80050b4 <spi_lld_send+0x34>)
 8005090:	60e6      	str	r6, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005092:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005096:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8005098:	6020      	str	r0, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800509a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800509c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800509e:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bc70      	pop	{r4, r5, r6}
 80050b2:	4770      	bx	lr
 80050b4:	20001178 	.word	0x20001178
	...

080050c0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80050c0:	b508      	push	{r3, lr}
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <VectorB4+0x30>)
  if (gptp->state == GPT_ONESHOT) {
 80050c4:	7818      	ldrb	r0, [r3, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 80050ca:	2804      	cmp	r0, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 80050cc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 80050ce:	d107      	bne.n	80050e0 <VectorB4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 80050d0:	2002      	movs	r0, #2
 80050d2:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 80050d4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 80050d6:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 80050d8:	68d1      	ldr	r1, [r2, #12]
 80050da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80050de:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4803      	ldr	r0, [pc, #12]	; (80050f0 <VectorB4+0x30>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
}
 80050e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 80050ec:	f7fd bc40 	b.w	8002970 <_port_irq_epilogue>
 80050f0:	2000117c 	.word	0x2000117c
	...

08005100 <gpt_lld_init>:
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8005100:	4802      	ldr	r0, [pc, #8]	; (800510c <gpt_lld_init+0xc>)
 8005102:	4b03      	ldr	r3, [pc, #12]	; (8005110 <gpt_lld_init+0x10>)
 8005104:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD3);
 8005106:	f7fd bcdb 	b.w	8002ac0 <gptObjectInit>
 800510a:	bf00      	nop
 800510c:	2000117c 	.word	0x2000117c
 8005110:	40000400 	.word	0x40000400
	...

08005120 <gpt_lld_start>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 8005120:	b538      	push	{r3, r4, r5, lr}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8005122:	7803      	ldrb	r3, [r0, #0]
 8005124:	2b01      	cmp	r3, #1
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 8005126:	4604      	mov	r4, r0
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8005128:	d012      	beq.n	8005150 <gpt_lld_start+0x30>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 800512a:	6860      	ldr	r0, [r4, #4]
 800512c:	68a3      	ldr	r3, [r4, #8]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 800512e:	68c1      	ldr	r1, [r0, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8005130:	6805      	ldr	r5, [r0, #0]
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8005132:	68e2      	ldr	r2, [r4, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8005134:	fbb3 f3f5 	udiv	r3, r3, r5
 8005138:	3b01      	subs	r3, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
 800513a:	6884      	ldr	r4, [r0, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 800513c:	b29b      	uxth	r3, r3
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 800513e:	2000      	movs	r0, #0
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8005140:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8005144:	6010      	str	r0, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8005146:	6054      	str	r4, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8005148:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 800514a:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 800514c:	60d1      	str	r1, [r2, #12]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <gpt_lld_start+0x5c>)
 8005152:	4298      	cmp	r0, r3
 8005154:	d1e9      	bne.n	800512a <gpt_lld_start+0xa>
      rccEnableTIM3(FALSE);
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <gpt_lld_start+0x60>)
 8005158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515a:	f042 0202 	orr.w	r2, r2, #2
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	2000      	movs	r0, #0
 8005164:	f042 0202 	orr.w	r2, r2, #2
 8005168:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
 800516a:	2107      	movs	r1, #7
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 800516c:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
 800516e:	201d      	movs	r0, #29
 8005170:	f7fe fade 	bl	8003730 <nvicEnableVector>
      gptp->clock = STM32_TIMCLK1;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <gpt_lld_start+0x64>)
 8005176:	60a3      	str	r3, [r4, #8]
 8005178:	e7d7      	b.n	800512a <gpt_lld_start+0xa>
 800517a:	bf00      	nop
 800517c:	2000117c 	.word	0x2000117c
 8005180:	40023800 	.word	0x40023800
 8005184:	0501bd00 	.word	0x0501bd00
	...

08005190 <gpt_lld_start_timer>:

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8005190:	6842      	ldr	r2, [r0, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8005192:	68c3      	ldr	r3, [r0, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8005194:	6850      	ldr	r0, [r2, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8005196:	3901      	subs	r1, #1
 8005198:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 800519a:	2200      	movs	r2, #0
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 800519c:	2101      	movs	r1, #1
 800519e:	6159      	str	r1, [r3, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 80051a2:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 80051a4:	b110      	cbz	r0, 80051ac <gpt_lld_start_timer+0x1c>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80051ac:	2205      	movs	r2, #5
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
	...

080051c0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80051c0:	b538      	push	{r3, r4, r5, lr}
 * @param[in] pwmp      pointer to a @p PWMDriver object
 */
static void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80051c2:	4d17      	ldr	r5, [pc, #92]	; (8005220 <VectorB8+0x60>)
 80051c4:	69ab      	ldr	r3, [r5, #24]
 80051c6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4014      	ands	r4, r2
  pwmp->tim->SR = ~sr;
 80051cc:	b2e2      	uxtb	r2, r4
 80051ce:	43d2      	mvns	r2, r2
 80051d0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80051d2:	07a3      	lsls	r3, r4, #30
 80051d4:	d504      	bpl.n	80051e0 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80051d6:	686b      	ldr	r3, [r5, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80051da:	b10b      	cbz	r3, 80051e0 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80051dc:	4628      	mov	r0, r5
 80051de:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80051e0:	0760      	lsls	r0, r4, #29
 80051e2:	d504      	bpl.n	80051ee <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80051e4:	686b      	ldr	r3, [r5, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80051e8:	b10b      	cbz	r3, 80051ee <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 80051ea:	480d      	ldr	r0, [pc, #52]	; (8005220 <VectorB8+0x60>)
 80051ec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80051ee:	0721      	lsls	r1, r4, #28
 80051f0:	d504      	bpl.n	80051fc <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80051f2:	686b      	ldr	r3, [r5, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80051f6:	b10b      	cbz	r3, 80051fc <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <VectorB8+0x60>)
 80051fa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80051fc:	06e2      	lsls	r2, r4, #27
 80051fe:	d504      	bpl.n	800520a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8005200:	686b      	ldr	r3, [r5, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8005204:	b10b      	cbz	r3, 800520a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8005206:	4806      	ldr	r0, [pc, #24]	; (8005220 <VectorB8+0x60>)
 8005208:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800520a:	07e3      	lsls	r3, r4, #31
 800520c:	d504      	bpl.n	8005218 <VectorB8+0x58>
 800520e:	686b      	ldr	r3, [r5, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	b10b      	cbz	r3, 8005218 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
 8005214:	4802      	ldr	r0, [pc, #8]	; (8005220 <VectorB8+0x60>)
 8005216:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);

  OSAL_IRQ_EPILOGUE();
}
 8005218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);

  OSAL_IRQ_EPILOGUE();
 800521c:	f7fd bba8 	b.w	8002970 <_port_irq_epilogue>
 8005220:	2000118c 	.word	0x2000118c
	...

08005230 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8005230:	b510      	push	{r4, lr}
  PWMD3.tim = STM32_TIM3;
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
 8005232:	4c04      	ldr	r4, [pc, #16]	; (8005244 <pwm_lld_init+0x14>)
 8005234:	4620      	mov	r0, r4
 8005236:	f7fd fc83 	bl	8002b40 <pwmObjectInit>
  PWMD4.channels = STM32_TIM4_CHANNELS;
 800523a:	2204      	movs	r2, #4
  PWMD4.tim = STM32_TIM4;
 800523c:	4b02      	ldr	r3, [pc, #8]	; (8005248 <pwm_lld_init+0x18>)
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
  PWMD4.channels = STM32_TIM4_CHANNELS;
 800523e:	7422      	strb	r2, [r4, #16]
  PWMD4.tim = STM32_TIM4;
 8005240:	61a3      	str	r3, [r4, #24]
 8005242:	bd10      	pop	{r4, pc}
 8005244:	2000118c 	.word	0x2000118c
 8005248:	40000800 	.word	0x40000800
 800524c:	00000000 	.word	0x00000000

08005250 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8005252:	7803      	ldrb	r3, [r0, #0]
 8005254:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8005256:	4604      	mov	r4, r0
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8005258:	d04b      	beq.n	80052f2 <pwm_lld_start+0xa2>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 800525a:	6983      	ldr	r3, [r0, #24]
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8005260:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8005264:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800526a:	6861      	ldr	r1, [r4, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 800526c:	68a5      	ldr	r5, [r4, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800526e:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8005270:	6960      	ldr	r0, [r4, #20]
 8005272:	680f      	ldr	r7, [r1, #0]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8005274:	6ace      	ldr	r6, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8005276:	fbb0 f0f7 	udiv	r0, r0, r7
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800527a:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 800527e:	1e6c      	subs	r4, r5, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8005280:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8005282:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8005284:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8005286:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8005288:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800528a:	d003      	beq.n	8005294 <pwm_lld_start+0x44>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 800528c:	2a02      	cmp	r2, #2
 800528e:	bf0c      	ite	eq
 8005290:	2203      	moveq	r2, #3
 8005292:	2200      	movne	r2, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8005294:	6948      	ldr	r0, [r1, #20]
 8005296:	f000 000f 	and.w	r0, r0, #15
 800529a:	2801      	cmp	r0, #1
 800529c:	d026      	beq.n	80052ec <pwm_lld_start+0x9c>
 800529e:	2802      	cmp	r0, #2
 80052a0:	d022      	beq.n	80052e8 <pwm_lld_start+0x98>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80052a2:	69c8      	ldr	r0, [r1, #28]
 80052a4:	f000 000f 	and.w	r0, r0, #15
 80052a8:	2801      	cmp	r0, #1
 80052aa:	d01a      	beq.n	80052e2 <pwm_lld_start+0x92>
 80052ac:	2802      	cmp	r0, #2
 80052ae:	d016      	beq.n	80052de <pwm_lld_start+0x8e>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80052b0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80052b2:	f000 000f 	and.w	r0, r0, #15
 80052b6:	2801      	cmp	r0, #1
 80052b8:	d003      	beq.n	80052c2 <pwm_lld_start+0x72>
 80052ba:	2802      	cmp	r0, #2
 80052bc:	d103      	bne.n	80052c6 <pwm_lld_start+0x76>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 80052be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 80052c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80052c6:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 80052c8:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80052ca:	2401      	movs	r4, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80052cc:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80052d0:	2000      	movs	r0, #0
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80052d2:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80052d4:	615c      	str	r4, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80052d6:	6118      	str	r0, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80052d8:	60da      	str	r2, [r3, #12]
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80052da:	6019      	str	r1, [r3, #0]
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 80052de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 80052e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e6:	e7e3      	b.n	80052b0 <pwm_lld_start+0x60>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 80052e8:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 80052ec:	f042 0210 	orr.w	r2, r2, #16
 80052f0:	e7d7      	b.n	80052a2 <pwm_lld_start+0x52>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
      pwmp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <pwm_lld_start+0xd8>)
 80052f4:	4298      	cmp	r0, r3
 80052f6:	d005      	beq.n	8005304 <pwm_lld_start+0xb4>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80052f8:	69a3      	ldr	r3, [r4, #24]
 80052fa:	f646 0268 	movw	r2, #26728	; 0x6868
 80052fe:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8005300:	61da      	str	r2, [r3, #28]
 8005302:	e7b2      	b.n	800526a <pwm_lld_start+0x1a>
      pwmp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
      rccEnableTIM4(FALSE);
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <pwm_lld_start+0xdc>)
 8005306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005308:	f042 0204 	orr.w	r2, r2, #4
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM4();
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	2000      	movs	r0, #0
 8005312:	f042 0204 	orr.w	r2, r2, #4
 8005316:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_PWM_TIM4_IRQ_PRIORITY);
 8005318:	2107      	movs	r1, #7
    }
#endif
#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 800531a:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_PWM_TIM4_IRQ_PRIORITY);
 800531c:	201e      	movs	r0, #30
 800531e:	f7fe fa07 	bl	8003730 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK1;
 8005322:	4b03      	ldr	r3, [pc, #12]	; (8005330 <pwm_lld_start+0xe0>)
 8005324:	6163      	str	r3, [r4, #20]
 8005326:	e7e7      	b.n	80052f8 <pwm_lld_start+0xa8>
 8005328:	2000118c 	.word	0x2000118c
 800532c:	40023800 	.word	0x40023800
 8005330:	0501bd00 	.word	0x0501bd00
	...

08005340 <pwm_lld_enable_channel>:
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8005340:	6983      	ldr	r3, [r0, #24]
 8005342:	310c      	adds	r1, #12
 8005344:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	4770      	bx	lr
 800534c:	0000      	movs	r0, r0
	...

08005350 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8005350:	4a02      	ldr	r2, [pc, #8]	; (800535c <notify2+0xc>)
 8005352:	68d3      	ldr	r3, [r2, #12]
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	60d3      	str	r3, [r2, #12]
 800535a:	4770      	bx	lr
 800535c:	40004400 	.word	0x40004400

08005360 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8005362:	4e43      	ldr	r6, [pc, #268]	; (8005470 <VectorD8+0x110>)
 8005364:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8005366:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 8005368:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800536a:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800536c:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800536e:	d44f      	bmi.n	8005410 <VectorD8+0xb0>
 8005370:	2320      	movs	r3, #32
 8005372:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005376:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800537a:	d108      	bne.n	800538e <VectorD8+0x2e>
 800537c:	e029      	b.n	80053d2 <VectorD8+0x72>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800537e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8005380:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8005382:	d41d      	bmi.n	80053c0 <VectorD8+0x60>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8005384:	682c      	ldr	r4, [r5, #0]
 8005386:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005388:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800538c:	d021      	beq.n	80053d2 <VectorD8+0x72>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800538e:	0723      	lsls	r3, r4, #28
 8005390:	d0f5      	beq.n	800537e <VectorD8+0x1e>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8005392:	f014 0f08 	tst.w	r4, #8
 8005396:	bf0c      	ite	eq
 8005398:	2100      	moveq	r1, #0
 800539a:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800539c:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800539e:	bf48      	it	mi
 80053a0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80053a4:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80053a6:	bf48      	it	mi
 80053a8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80053ac:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80053ae:	bf48      	it	mi
 80053b0:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80053b4:	482f      	ldr	r0, [pc, #188]	; (8005474 <VectorD8+0x114>)
 80053b6:	f7fc fd73 	bl	8001ea0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 80053ba:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 80053bc:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 80053be:	d5e1      	bpl.n	8005384 <VectorD8+0x24>
      sdIncomingDataI(sdp, b);
 80053c0:	b2c9      	uxtb	r1, r1
 80053c2:	482b      	ldr	r0, [pc, #172]	; (8005470 <VectorD8+0x110>)
 80053c4:	f7fd fc64 	bl	8002c90 <sdIncomingDataI>
    sr = u->SR;
 80053c8:	682c      	ldr	r4, [r5, #0]
 80053ca:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80053cc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80053d0:	d1dd      	bne.n	800538e <VectorD8+0x2e>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80053d8:	0639      	lsls	r1, r7, #24
 80053da:	d501      	bpl.n	80053e0 <VectorD8+0x80>
 80053dc:	0622      	lsls	r2, r4, #24
 80053de:	d426      	bmi.n	800542e <VectorD8+0xce>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80053e0:	0663      	lsls	r3, r4, #25
 80053e2:	d511      	bpl.n	8005408 <VectorD8+0xa8>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80053ea:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80053ec:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80053ee:	4820      	ldr	r0, [pc, #128]	; (8005470 <VectorD8+0x110>)
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d029      	beq.n	8005448 <VectorD8+0xe8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80053f4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80053f8:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 80053fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80053fe:	60eb      	str	r3, [r5, #12]
 8005400:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8005402:	602a      	str	r2, [r5, #0]
 8005404:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8005408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 800540c:	f7fd bab0 	b.w	8002970 <_port_irq_epilogue>
 8005410:	2320      	movs	r3, #32
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800541a:	1d30      	adds	r0, r6, #4
 800541c:	f7fc fd40 	bl	8001ea0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8005420:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	e7a0      	b.n	8005370 <VectorD8+0x10>
 800542e:	2320      	movs	r3, #32
 8005430:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8005434:	4810      	ldr	r0, [pc, #64]	; (8005478 <VectorD8+0x118>)
 8005436:	f7fd f8b3 	bl	80025a0 <chOQGetI>
    if (b < Q_OK) {
 800543a:	2800      	cmp	r0, #0
 800543c:	db0c      	blt.n	8005458 <VectorD8+0xf8>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800543e:	6068      	str	r0, [r5, #4]
 8005440:	2300      	movs	r3, #0
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	e7cb      	b.n	80053e0 <VectorD8+0x80>
 8005448:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0d2      	beq.n	80053f4 <VectorD8+0x94>
 800544e:	3004      	adds	r0, #4
 8005450:	2110      	movs	r1, #16
 8005452:	f7fc fd25 	bl	8001ea0 <chEvtBroadcastFlagsI>
 8005456:	e7cd      	b.n	80053f4 <VectorD8+0x94>
 8005458:	2108      	movs	r1, #8
 800545a:	4806      	ldr	r0, [pc, #24]	; (8005474 <VectorD8+0x114>)
 800545c:	f7fc fd20 	bl	8001ea0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8005460:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8005464:	403b      	ands	r3, r7
 8005466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800546a:	60eb      	str	r3, [r5, #12]
 800546c:	e7e8      	b.n	8005440 <VectorD8+0xe0>
 800546e:	bf00      	nop
 8005470:	200011a8 	.word	0x200011a8
 8005474:	200011ac 	.word	0x200011ac
 8005478:	200011d8 	.word	0x200011d8
 800547c:	00000000 	.word	0x00000000

08005480 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8005480:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8005482:	4c04      	ldr	r4, [pc, #16]	; (8005494 <sd_lld_init+0x14>)
 8005484:	4a04      	ldr	r2, [pc, #16]	; (8005498 <sd_lld_init+0x18>)
 8005486:	4620      	mov	r0, r4
 8005488:	2100      	movs	r1, #0
 800548a:	f7fd fbd1 	bl	8002c30 <sdObjectInit>
  SD2.usart = USART2;
 800548e:	4b03      	ldr	r3, [pc, #12]	; (800549c <sd_lld_init+0x1c>)
 8005490:	6763      	str	r3, [r4, #116]	; 0x74
 8005492:	bd10      	pop	{r4, pc}
 8005494:	200011a8 	.word	0x200011a8
 8005498:	08005351 	.word	0x08005351
 800549c:	40004400 	.word	0x40004400

080054a0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 80054a0:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 80054a2:	4c1f      	ldr	r4, [pc, #124]	; (8005520 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 80054a4:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 80054a6:	2900      	cmp	r1, #0
 80054a8:	bf18      	it	ne
 80054aa:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 80054ac:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 80054ae:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80054b0:	d022      	beq.n	80054f8 <sd_lld_start+0x58>
 80054b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <sd_lld_start+0x84>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02b      	beq.n	8005512 <sd_lld_start+0x72>
 80054ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054be:	4293      	cmp	r3, r2
 80054c0:	d027      	beq.n	8005512 <sd_lld_start+0x72>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 80054c2:	6821      	ldr	r1, [r4, #0]
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <sd_lld_start+0x88>)
 80054c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80054ca:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80054cc:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80054ce:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80054d0:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80054d2:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80054d6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80054da:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80054de:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80054e2:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80054e4:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80054e6:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80054e8:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80054ea:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80054ec:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80054ee:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80054f0:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80054f2:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <sd_lld_start+0x8c>)
 80054fa:	4298      	cmp	r0, r3
 80054fc:	d1d9      	bne.n	80054b2 <sd_lld_start+0x12>
      rccEnableUSART2(FALSE);
 80054fe:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <sd_lld_start+0x90>)
 8005500:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005506:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8005508:	210c      	movs	r1, #12
 800550a:	2026      	movs	r0, #38	; 0x26
 800550c:	f7fe f910 	bl	8003730 <nvicEnableVector>
 8005510:	e7cf      	b.n	80054b2 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	4a07      	ldr	r2, [pc, #28]	; (8005534 <sd_lld_start+0x94>)
 8005516:	fbb2 f2f1 	udiv	r2, r2, r1
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	e7d6      	b.n	80054cc <sd_lld_start+0x2c>
 800551e:	bf00      	nop
 8005520:	0800a2e0 	.word	0x0800a2e0
 8005524:	40011000 	.word	0x40011000
 8005528:	0280de80 	.word	0x0280de80
 800552c:	200011a8 	.word	0x200011a8
 8005530:	40023800 	.word	0x40023800
 8005534:	0501bd00 	.word	0x0501bd00
	...

08005540 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8005540:	f7fe bb46 	b.w	8003bd0 <stm32_clock_init>
	...

08005550 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
	...

08005560 <tmr>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <tmr+0x8>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	4770      	bx	lr
 8005568:	2000188d 	.word	0x2000188d
 800556c:	00000000 	.word	0x00000000

08005570 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4e09      	ldr	r6, [pc, #36]	; (8005598 <print_line+0x28>)
 8005574:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8005576:	6830      	ldr	r0, [r6, #0]
 8005578:	4d07      	ldr	r5, [pc, #28]	; (8005598 <print_line+0x28>)
 800557a:	6803      	ldr	r3, [r0, #0]
 800557c:	212d      	movs	r1, #45	; 0x2d
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8005582:	3c01      	subs	r4, #1
 8005584:	d1f7      	bne.n	8005576 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005586:	6828      	ldr	r0, [r5, #0]
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <print_line+0x2c>)
 800558a:	6803      	ldr	r3, [r0, #0]
 800558c:	2202      	movs	r2, #2
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005594:	4718      	bx	r3
 8005596:	bf00      	nop
 8005598:	200018bc 	.word	0x200018bc
 800559c:	0800b12c 	.word	0x0800b12c

080055a0 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 80055a0:	b310      	cbz	r0, 80055e8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80055a2:	b570      	push	{r4, r5, r6, lr}
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <test_printn+0x54>)
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80055a6:	b084      	sub	sp, #16
 80055a8:	466d      	mov	r5, sp
 80055aa:	466c      	mov	r4, sp
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80055ac:	fba2 1300 	umull	r1, r3, r2, r0
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80055b6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80055ba:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80055be:	b2c9      	uxtb	r1, r1
 80055c0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80055c4:	4618      	mov	r0, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80055ca:	42ac      	cmp	r4, r5
 80055cc:	d90a      	bls.n	80055e4 <test_printn+0x44>
 80055ce:	4e0a      	ldr	r6, [pc, #40]	; (80055f8 <test_printn+0x58>)
 80055d0:	3c01      	subs	r4, #1
 80055d2:	e001      	b.n	80055d8 <test_printn+0x38>
 80055d4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 80055d8:	6830      	ldr	r0, [r6, #0]
 80055da:	6803      	ldr	r3, [r0, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80055e0:	42ac      	cmp	r4, r5
 80055e2:	d1f7      	bne.n	80055d4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 80055e4:	b004      	add	sp, #16
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <test_printn+0x58>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	2130      	movs	r1, #48	; 0x30
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4718      	bx	r3
 80055f4:	cccccccd 	.word	0xcccccccd
 80055f8:	200018bc 	.word	0x200018bc
 80055fc:	00000000 	.word	0x00000000

08005600 <test_print>:
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005600:	7801      	ldrb	r1, [r0, #0]
 8005602:	b159      	cbz	r1, 800561c <test_print+0x1c>
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d06      	ldr	r5, [pc, #24]	; (8005620 <test_print+0x20>)
 8005608:	4604      	mov	r4, r0

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800560a:	6828      	ldr	r0, [r5, #0]
 800560c:	6803      	ldr	r3, [r0, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005612:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005616:	2900      	cmp	r1, #0
 8005618:	d1f7      	bne.n	800560a <test_print+0xa>
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200018bc 	.word	0x200018bc
	...

08005630 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8005630:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005632:	7801      	ldrb	r1, [r0, #0]
 8005634:	b189      	cbz	r1, 800565a <test_println+0x2a>
 8005636:	4d0a      	ldr	r5, [pc, #40]	; (8005660 <test_println+0x30>)
 8005638:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800563a:	6828      	ldr	r0, [r5, #0]
 800563c:	6803      	ldr	r3, [r0, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005642:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005646:	2900      	cmp	r1, #0
 8005648:	d1f7      	bne.n	800563a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800564a:	6828      	ldr	r0, [r5, #0]
 800564c:	4905      	ldr	r1, [pc, #20]	; (8005664 <test_println+0x34>)
 800564e:	6803      	ldr	r3, [r0, #0]
 8005650:	2202      	movs	r2, #2
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005658:	4718      	bx	r3
 800565a:	4d01      	ldr	r5, [pc, #4]	; (8005660 <test_println+0x30>)
 800565c:	e7f5      	b.n	800564a <test_println+0x1a>
 800565e:	bf00      	nop
 8005660:	200018bc 	.word	0x200018bc
 8005664:	0800b12c 	.word	0x0800b12c
	...

08005670 <test_emit_token>:
 8005670:	2320      	movs	r3, #32
 8005672:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <test_emit_token+0x18>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	1c51      	adds	r1, r2, #1
 800567c:	6019      	str	r1, [r3, #0]
 800567e:	7010      	strb	r0, [r2, #0]
 8005680:	2300      	movs	r3, #0
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	4770      	bx	lr
 8005688:	20001890 	.word	0x20001890
 800568c:	00000000 	.word	0x00000000

08005690 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005690:	b951      	cbnz	r1, 80056a8 <_test_assert+0x18>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8005692:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8005696:	4c07      	ldr	r4, [pc, #28]	; (80056b4 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8005698:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800569e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80056a0:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	bc10      	pop	{r4}
 80056a6:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	2000188c 	.word	0x2000188c
 80056b4:	200018d0 	.word	0x200018d0
 80056b8:	20001888 	.word	0x20001888
 80056bc:	00000000 	.word	0x00000000

080056c0 <_test_assert_sequence>:

bool _test_assert_sequence(unsigned point, char *expected) {
 80056c0:	b4f0      	push	{r4, r5, r6, r7}
 80056c2:	4e0e      	ldr	r6, [pc, #56]	; (80056fc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80056c4:	4f0e      	ldr	r7, [pc, #56]	; (8005700 <_test_assert_sequence+0x40>)
 80056c6:	6835      	ldr	r5, [r6, #0]
 80056c8:	463b      	mov	r3, r7
  while (cp < tokp) {
 80056ca:	e005      	b.n	80056d8 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 80056cc:	f813 4b01 	ldrb.w	r4, [r3], #1
 80056d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d4:	4294      	cmp	r4, r2
 80056d6:	d107      	bne.n	80056e8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80056d8:	42ab      	cmp	r3, r5
 80056da:	d3f7      	bcc.n	80056cc <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80056dc:	780b      	ldrb	r3, [r1, #0]
 80056de:	b91b      	cbnz	r3, 80056e8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80056e0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	bcf0      	pop	{r4, r5, r6, r7}
 80056e6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80056e8:	4c06      	ldr	r4, [pc, #24]	; (8005704 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 80056ea:	4907      	ldr	r1, [pc, #28]	; (8005708 <_test_assert_sequence+0x48>)
  failpoint = point;
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80056f2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80056f4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	bcf0      	pop	{r4, r5, r6, r7}
 80056fa:	4770      	bx	lr
 80056fc:	20001890 	.word	0x20001890
 8005700:	200018c0 	.word	0x200018c0
 8005704:	200018d0 	.word	0x200018d0
 8005708:	2000188c 	.word	0x2000188c
 800570c:	20001888 	.word	0x20001888

08005710 <_test_assert_time_window>:

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8005710:	b410      	push	{r4}
 8005712:	2320      	movs	r3, #32
 8005714:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005718:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800571c:	2300      	movs	r3, #0
 800571e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8005720:	f383 8811 	msr	BASEPRI, r3
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005724:	1a64      	subs	r4, r4, r1
 8005726:	1a52      	subs	r2, r2, r1
 8005728:	4294      	cmp	r4, r2
 800572a:	d306      	bcc.n	800573a <_test_assert_time_window+0x2a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800572c:	4c04      	ldr	r4, [pc, #16]	; (8005740 <_test_assert_time_window+0x30>)
  local_fail = TRUE;
 800572e:	4905      	ldr	r1, [pc, #20]	; (8005744 <_test_assert_time_window+0x34>)
  failpoint = point;
 8005730:	4a05      	ldr	r2, [pc, #20]	; (8005748 <_test_assert_time_window+0x38>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 8005736:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8005738:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800573a:	4618      	mov	r0, r3
 800573c:	bc10      	pop	{r4}
 800573e:	4770      	bx	lr
 8005740:	200018d0 	.word	0x200018d0
 8005744:	2000188c 	.word	0x2000188c
 8005748:	20001888 	.word	0x20001888
 800574c:	00000000 	.word	0x00000000

08005750 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4c06      	ldr	r4, [pc, #24]	; (800576c <test_terminate_threads+0x1c>)
 8005754:	f104 0514 	add.w	r5, r4, #20
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8005758:	f854 3b04 	ldr.w	r3, [r4], #4
      chThdTerminate(threads[i]);
 800575c:	4618      	mov	r0, r3
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800575e:	b10b      	cbz	r3, 8005764 <test_terminate_threads+0x14>
      chThdTerminate(threads[i]);
 8005760:	f7fb fe4e 	bl	8001400 <chThdTerminate>
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005764:	42ac      	cmp	r4, r5
 8005766:	d1f7      	bne.n	8005758 <test_terminate_threads+0x8>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	200018a8 	.word	0x200018a8

08005770 <test_wait_threads>:

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4c07      	ldr	r4, [pc, #28]	; (8005790 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8005774:	2600      	movs	r6, #0
 8005776:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800577a:	f854 0b04 	ldr.w	r0, [r4], #4
 800577e:	b118      	cbz	r0, 8005788 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8005780:	f7fb feae 	bl	80014e0 <chThdWait>
      threads[i] = NULL;
 8005784:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005788:	42ac      	cmp	r4, r5
 800578a:	d1f6      	bne.n	800577a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	bf00      	nop
 8005790:	200018a8 	.word	0x200018a8
	...

080057a0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 80057a0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fb fe3c 	bl	8001420 <chThdSleep>
 80057a8:	2320      	movs	r3, #32
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057b2:	2300      	movs	r3, #0
 80057b4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80057b6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80057ba:	bd08      	pop	{r3, pc}
 80057bc:	0000      	movs	r0, r0
	...

080057c0 <test_start_timer>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 80057c0:	b510      	push	{r4, lr}

  systime_t duration = MS2ST(ms);
 80057c2:	f242 7410 	movw	r4, #10000	; 0x2710
 80057c6:	fb04 f000 	mul.w	r0, r4, r0
 80057ca:	490d      	ldr	r1, [pc, #52]	; (8005800 <test_start_timer+0x40>)
  test_timer_done = FALSE;
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <test_start_timer+0x44>)
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 80057ce:	f200 34e7 	addw	r4, r0, #999	; 0x3e7
 80057d2:	fba1 2404 	umull	r2, r4, r1, r4
  test_timer_done = FALSE;
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 80057da:	09a4      	lsrs	r4, r4, #6
 80057dc:	2320      	movs	r3, #32
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	4809      	ldr	r0, [pc, #36]	; (8005808 <test_start_timer+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80057e4:	68c3      	ldr	r3, [r0, #12]
 80057e6:	b10b      	cbz	r3, 80057ec <test_start_timer+0x2c>
    chVTDoResetI(vtp);
 80057e8:	f7fb fbea 	bl	8000fc0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80057ec:	4621      	mov	r1, r4
 80057ee:	2300      	movs	r3, #0
 80057f0:	4a06      	ldr	r2, [pc, #24]	; (800580c <test_start_timer+0x4c>)
 80057f2:	4805      	ldr	r0, [pc, #20]	; (8005808 <test_start_timer+0x48>)
 80057f4:	f7fb fba4 	bl	8000f40 <chVTDoSetI>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	10624dd3 	.word	0x10624dd3
 8005804:	2000188d 	.word	0x2000188d
 8005808:	20001894 	.word	0x20001894
 800580c:	08005561 	.word	0x08005561

08005810 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8005814:	4c9f      	ldr	r4, [pc, #636]	; (8005a94 <TestThread+0x284>)
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
 8005816:	4da0      	ldr	r5, [pc, #640]	; (8005a98 <TestThread+0x288>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8005818:	6020      	str	r0, [r4, #0]
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 800581a:	b085      	sub	sp, #20
  int i, j;

  chp = p;
  test_println("");
 800581c:	489f      	ldr	r0, [pc, #636]	; (8005a9c <TestThread+0x28c>)
 800581e:	f7ff ff07 	bl	8005630 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8005822:	489f      	ldr	r0, [pc, #636]	; (8005aa0 <TestThread+0x290>)
 8005824:	f7ff ff04 	bl	8005630 <test_println>
  test_println("***");
 8005828:	489e      	ldr	r0, [pc, #632]	; (8005aa4 <TestThread+0x294>)
 800582a:	f7ff ff01 	bl	8005630 <test_println>
 800582e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	6803      	ldr	r3, [r0, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005838:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800583c:	2900      	cmp	r1, #0
 800583e:	d1f7      	bne.n	8005830 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8005840:	4899      	ldr	r0, [pc, #612]	; (8005aa8 <TestThread+0x298>)
 8005842:	4d9a      	ldr	r5, [pc, #616]	; (8005aac <TestThread+0x29c>)
 8005844:	f7ff fef4 	bl	8005630 <test_println>
 8005848:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	6803      	ldr	r3, [r0, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005852:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005856:	2900      	cmp	r1, #0
 8005858:	d1f7      	bne.n	800584a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800585a:	4895      	ldr	r0, [pc, #596]	; (8005ab0 <TestThread+0x2a0>)
 800585c:	4d95      	ldr	r5, [pc, #596]	; (8005ab4 <TestThread+0x2a4>)
 800585e:	f7ff fee7 	bl	8005630 <test_println>
 8005862:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800586c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005870:	2900      	cmp	r1, #0
 8005872:	d1f7      	bne.n	8005864 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8005874:	4890      	ldr	r0, [pc, #576]	; (8005ab8 <TestThread+0x2a8>)
 8005876:	4d91      	ldr	r5, [pc, #580]	; (8005abc <TestThread+0x2ac>)
 8005878:	f7ff feda 	bl	8005630 <test_println>
 800587c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	6803      	ldr	r3, [r0, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005886:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800588a:	2900      	cmp	r1, #0
 800588c:	d1f7      	bne.n	800587e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800588e:	488c      	ldr	r0, [pc, #560]	; (8005ac0 <TestThread+0x2b0>)
 8005890:	4d8c      	ldr	r5, [pc, #560]	; (8005ac4 <TestThread+0x2b4>)
 8005892:	f7ff fecd 	bl	8005630 <test_println>
 8005896:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	6803      	ldr	r3, [r0, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80058a0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80058a4:	2900      	cmp	r1, #0
 80058a6:	d1f7      	bne.n	8005898 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 80058a8:	4887      	ldr	r0, [pc, #540]	; (8005ac8 <TestThread+0x2b8>)
 80058aa:	4d88      	ldr	r5, [pc, #544]	; (8005acc <TestThread+0x2bc>)
 80058ac:	f7ff fec0 	bl	8005630 <test_println>
 80058b0:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80058ba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80058be:	2900      	cmp	r1, #0
 80058c0:	d1f7      	bne.n	80058b2 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 80058c2:	4883      	ldr	r0, [pc, #524]	; (8005ad0 <TestThread+0x2c0>)
 80058c4:	4d83      	ldr	r5, [pc, #524]	; (8005ad4 <TestThread+0x2c4>)
 80058c6:	f7ff feb3 	bl	8005630 <test_println>
 80058ca:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80058d4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80058d8:	2900      	cmp	r1, #0
 80058da:	d1f7      	bne.n	80058cc <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80058dc:	487e      	ldr	r0, [pc, #504]	; (8005ad8 <TestThread+0x2c8>)
 80058de:	4d7f      	ldr	r5, [pc, #508]	; (8005adc <TestThread+0x2cc>)
 80058e0:	f7ff fea6 	bl	8005630 <test_println>
 80058e4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	6803      	ldr	r3, [r0, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80058ee:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d1f7      	bne.n	80058e6 <TestThread+0xd6>
 80058f6:	4b7a      	ldr	r3, [pc, #488]	; (8005ae0 <TestThread+0x2d0>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80058f8:	487a      	ldr	r0, [pc, #488]	; (8005ae4 <TestThread+0x2d4>)
 80058fa:	9302      	str	r3, [sp, #8]
#endif
  test_println("");

  test_global_fail = FALSE;
 80058fc:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <TestThread+0x2d8>)
 80058fe:	9101      	str	r1, [sp, #4]
 8005900:	9303      	str	r3, [sp, #12]
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8005902:	f7ff fe95 	bl	8005630 <test_println>
#endif
  test_println("");
 8005906:	4865      	ldr	r0, [pc, #404]	; (8005a9c <TestThread+0x28c>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005908:	f8df b188 	ldr.w	fp, [pc, #392]	; 8005a94 <TestThread+0x284>
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  test_global_fail = FALSE;
 800590c:	4f77      	ldr	r7, [pc, #476]	; (8005aec <TestThread+0x2dc>)
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");
 800590e:	f7ff fe8f 	bl	8005630 <test_println>

  test_global_fail = FALSE;
 8005912:	4b77      	ldr	r3, [pc, #476]	; (8005af0 <TestThread+0x2e0>)
 8005914:	9901      	ldr	r1, [sp, #4]
 8005916:	7019      	strb	r1, [r3, #0]
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	3301      	adds	r3, #1
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	3f04      	subs	r7, #4
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8005920:	f04f 0800 	mov.w	r8, #0

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8005924:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8087 	beq.w	8005a3c <TestThread+0x22c>
      print_line();
 800592e:	4d71      	ldr	r5, [pc, #452]	; (8005af4 <TestThread+0x2e4>)
 8005930:	f7ff fe1e 	bl	8005570 <print_line>
 8005934:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	6803      	ldr	r3, [r0, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800593e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005942:	2900      	cmp	r1, #0
 8005944:	d1f7      	bne.n	8005936 <TestThread+0x126>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8005946:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(j + 1);
 8005948:	4d6b      	ldr	r5, [pc, #428]	; (8005af8 <TestThread+0x2e8>)
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 800594a:	f7ff fe29 	bl	80055a0 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800594e:	f8db 0000 	ldr.w	r0, [fp]
 8005952:	6803      	ldr	r3, [r0, #0]
 8005954:	212e      	movs	r1, #46	; 0x2e
 8005956:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8005958:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800595c:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 800595e:	4640      	mov	r0, r8
 8005960:	f7ff fe1e 	bl	80055a0 <test_printn>
 8005964:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	6803      	ldr	r3, [r0, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800596e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005972:	2900      	cmp	r1, #0
 8005974:	d1f7      	bne.n	8005966 <TestThread+0x156>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800597a:	7829      	ldrb	r1, [r5, #0]
 800597c:	b139      	cbz	r1, 800598e <TestThread+0x17e>
    chSequentialStreamPut(chp, *msgp++);
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005986:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800598a:	2900      	cmp	r1, #0
 800598c:	d1f7      	bne.n	800597e <TestThread+0x16e>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800598e:	485b      	ldr	r0, [pc, #364]	; (8005afc <TestThread+0x2ec>)
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8005990:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8005b24 <TestThread+0x314>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8005994:	4e5a      	ldr	r6, [pc, #360]	; (8005b00 <TestThread+0x2f0>)
 8005996:	4d5b      	ldr	r5, [pc, #364]	; (8005b04 <TestThread+0x2f4>)
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8005998:	f7ff fe4a 	bl	8005630 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 800599c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059a0:	f7fb fd3e 	bl	8001420 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80059a4:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <TestThread+0x2f8>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 80059a6:	f8d7 a000 	ldr.w	sl, [r7]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80059aa:	6035      	str	r5, [r6, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80059ac:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	6093      	str	r3, [r2, #8]
 80059b4:	60d3      	str	r3, [r2, #12]
 80059b6:	6113      	str	r3, [r2, #16]

  if (tcp->setup != NULL)
 80059b8:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80059bc:	f889 3000 	strb.w	r3, [r9]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80059c0:	b102      	cbz	r2, 80059c4 <TestThread+0x1b4>
    tcp->setup();
 80059c2:	4790      	blx	r2
  tcp->execute();
 80059c4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80059c8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80059ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80059ce:	b103      	cbz	r3, 80059d2 <TestThread+0x1c2>
    tcp->teardown();
 80059d0:	4798      	blx	r3

  test_wait_threads();
 80059d2:	f7ff fecd 	bl	8005770 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 80059d6:	f899 3000 	ldrb.w	r3, [r9]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d038      	beq.n	8005a50 <TestThread+0x240>
 80059de:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005b28 <TestThread+0x318>
 80059e2:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	6803      	ldr	r3, [r0, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80059ec:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80059f0:	2900      	cmp	r1, #0
 80059f2:	d1f7      	bne.n	80059e4 <TestThread+0x1d4>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 80059f4:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <TestThread+0x2fc>)
 80059f6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8005b2c <TestThread+0x31c>
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	f7ff fdd0 	bl	80055a0 <test_printn>
 8005a00:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	6803      	ldr	r3, [r0, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005a0a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	d1f7      	bne.n	8005a02 <TestThread+0x1f2>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8005a12:	6833      	ldr	r3, [r6, #0]
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	d909      	bls.n	8005a2c <TestThread+0x21c>
 8005a18:	4d3a      	ldr	r5, [pc, #232]	; (8005b04 <TestThread+0x2f4>)
    chSequentialStreamPut(chp, *cp++);
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005a20:	6803      	ldr	r3, [r0, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	429d      	cmp	r5, r3
 8005a2a:	d3f6      	bcc.n	8005a1a <TestThread+0x20a>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8005a2c:	4838      	ldr	r0, [pc, #224]	; (8005b10 <TestThread+0x300>)
 8005a2e:	f7ff fdff 	bl	8005630 <test_println>

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8005a32:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f47f af79 	bne.w	800592e <TestThread+0x11e>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	b15b      	cbz	r3, 8005a58 <TestThread+0x248>
 8005a40:	461f      	mov	r7, r3
 8005a42:	9b02      	ldr	r3, [sp, #8]
 8005a44:	461a      	mov	r2, r3
 8005a46:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005a4a:	9303      	str	r3, [sp, #12]
 8005a4c:	9202      	str	r2, [sp, #8]
 8005a4e:	e763      	b.n	8005918 <TestThread+0x108>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8005a50:	4830      	ldr	r0, [pc, #192]	; (8005b14 <TestThread+0x304>)
 8005a52:	f7ff fded 	bl	8005630 <test_println>
 8005a56:	e765      	b.n	8005924 <TestThread+0x114>
      j++;
    }
    i++;
  }
  print_line();
 8005a58:	f7ff fd8a 	bl	8005570 <print_line>
  test_println("");
 8005a5c:	4d2e      	ldr	r5, [pc, #184]	; (8005b18 <TestThread+0x308>)
 8005a5e:	480f      	ldr	r0, [pc, #60]	; (8005a9c <TestThread+0x28c>)
 8005a60:	f7ff fde6 	bl	8005630 <test_println>
 8005a64:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005a66:	6820      	ldr	r0, [r4, #0]
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005a6e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d1f7      	bne.n	8005a66 <TestThread+0x256>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8005a76:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <TestThread+0x2e0>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b92b      	cbnz	r3, 8005a88 <TestThread+0x278>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8005a7c:	4827      	ldr	r0, [pc, #156]	; (8005b1c <TestThread+0x30c>)
}
 8005a7e:	b005      	add	sp, #20
 8005a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8005a84:	f7ff bdd4 	b.w	8005630 <test_println>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8005a88:	4825      	ldr	r0, [pc, #148]	; (8005b20 <TestThread+0x310>)
  else
    test_println("SUCCESS");
}
 8005a8a:	b005      	add	sp, #20
 8005a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8005a90:	f7ff bdce 	b.w	8005630 <test_println>
 8005a94:	200018bc 	.word	0x200018bc
 8005a98:	0800a450 	.word	0x0800a450
 8005a9c:	0800b1ec 	.word	0x0800b1ec
 8005aa0:	0800a530 	.word	0x0800a530
 8005aa4:	0800a54c 	.word	0x0800a54c
 8005aa8:	0800a574 	.word	0x0800a574
 8005aac:	0800a464 	.word	0x0800a464
 8005ab0:	0800a57c 	.word	0x0800a57c
 8005ab4:	0800a478 	.word	0x0800a478
 8005ab8:	0800a594 	.word	0x0800a594
 8005abc:	0800a48c 	.word	0x0800a48c
 8005ac0:	0800a5dc 	.word	0x0800a5dc
 8005ac4:	0800a4a0 	.word	0x0800a4a0
 8005ac8:	0800a5e8 	.word	0x0800a5e8
 8005acc:	0800a4b4 	.word	0x0800a4b4
 8005ad0:	0800a5f4 	.word	0x0800a5f4
 8005ad4:	0800a4c8 	.word	0x0800a4c8
 8005ad8:	0800a60c 	.word	0x0800a60c
 8005adc:	0800a4dc 	.word	0x0800a4dc
 8005ae0:	0800a414 	.word	0x0800a414
 8005ae4:	0800a638 	.word	0x0800a638
 8005ae8:	0800a6a0 	.word	0x0800a6a0
 8005aec:	0800ac90 	.word	0x0800ac90
 8005af0:	200018d0 	.word	0x200018d0
 8005af4:	0800a4f0 	.word	0x0800a4f0
 8005af8:	0800a500 	.word	0x0800a500
 8005afc:	0800a550 	.word	0x0800a550
 8005b00:	20001890 	.word	0x20001890
 8005b04:	200018c0 	.word	0x200018c0
 8005b08:	200018a8 	.word	0x200018a8
 8005b0c:	20001888 	.word	0x20001888
 8005b10:	0800a554 	.word	0x0800a554
 8005b14:	0800a558 	.word	0x0800a558
 8005b18:	0800a520 	.word	0x0800a520
 8005b1c:	0800a564 	.word	0x0800a564
 8005b20:	0800a56c 	.word	0x0800a56c
 8005b24:	2000188c 	.word	0x2000188c
 8005b28:	0800a504 	.word	0x0800a504
 8005b2c:	0800a51c 	.word	0x0800a51c

08005b30 <thd1_execute>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b32:	4f27      	ldr	r7, [pc, #156]	; (8005bd0 <thd1_execute+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005b34:	4e27      	ldr	r6, [pc, #156]	; (8005bd4 <thd1_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4d27      	ldr	r5, [pc, #156]	; (8005bd8 <thd1_execute+0xa8>)
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <thd1_execute+0xac>)
 8005b3e:	6830      	ldr	r0, [r6, #0]
 8005b40:	4c27      	ldr	r4, [pc, #156]	; (8005be0 <thd1_execute+0xb0>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8005b42:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005b44:	3a05      	subs	r2, #5
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	f7fb fbf7 	bl	8001340 <chThdCreateStatic>
 8005b52:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b54:	4923      	ldr	r1, [pc, #140]	; (8005be4 <thd1_execute+0xb4>)
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	6873      	ldr	r3, [r6, #4]
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005b5a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	3a04      	subs	r2, #4
 8005b60:	4618      	mov	r0, r3
 8005b62:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b66:	462b      	mov	r3, r5
 8005b68:	f7fb fbea 	bl	8001340 <chThdCreateStatic>
 8005b6c:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005b6e:	68b3      	ldr	r3, [r6, #8]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	491d      	ldr	r1, [pc, #116]	; (8005be8 <thd1_execute+0xb8>)
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b74:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005b76:	9100      	str	r1, [sp, #0]
 8005b78:	3a03      	subs	r2, #3
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b80:	462b      	mov	r3, r5
 8005b82:	f7fb fbdd 	bl	8001340 <chThdCreateStatic>
 8005b86:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005b88:	68f3      	ldr	r3, [r6, #12]
 8005b8a:	6892      	ldr	r2, [r2, #8]
 8005b8c:	4917      	ldr	r1, [pc, #92]	; (8005bec <thd1_execute+0xbc>)

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005b8e:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005b90:	9100      	str	r1, [sp, #0]
 8005b92:	3a02      	subs	r2, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b9a:	462b      	mov	r3, r5
 8005b9c:	f7fb fbd0 	bl	8001340 <chThdCreateStatic>
 8005ba0:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005ba2:	6933      	ldr	r3, [r6, #16]
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	4912      	ldr	r1, [pc, #72]	; (8005bf0 <thd1_execute+0xc0>)
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005ba8:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005baa:	3a01      	subs	r2, #1
 8005bac:	9100      	str	r1, [sp, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	f7fb fbc3 	bl	8001340 <chThdCreateStatic>
 8005bba:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8005bbc:	f7ff fdd8 	bl	8005770 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005bc0:	490c      	ldr	r1, [pc, #48]	; (8005bf4 <thd1_execute+0xc4>)
 8005bc2:	2001      	movs	r0, #1
}
 8005bc4:	b003      	add	sp, #12
 8005bc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005bca:	f7ff bd79 	b.w	80056c0 <_test_assert_sequence>
 8005bce:	bf00      	nop
 8005bd0:	20000d18 	.word	0x20000d18
 8005bd4:	0800a3f0 	.word	0x0800a3f0
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	0800a6d0 	.word	0x0800a6d0
 8005be0:	200018a8 	.word	0x200018a8
 8005be4:	0800b5b8 	.word	0x0800b5b8
 8005be8:	0800a6c0 	.word	0x0800a6c0
 8005bec:	0800a6c4 	.word	0x0800a6c4
 8005bf0:	0800a6c8 	.word	0x0800a6c8
 8005bf4:	0800a6cc 	.word	0x0800a6cc
	...

08005c00 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8005c00:	7800      	ldrb	r0, [r0, #0]
 8005c02:	f7ff bd35 	b.w	8005670 <test_emit_token>
 8005c06:	bf00      	nop
	...

08005c10 <thd2_execute>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005c10:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005c12:	4f2b      	ldr	r7, [pc, #172]	; (8005cc0 <thd2_execute+0xb0>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005c14:	4e2b      	ldr	r6, [pc, #172]	; (8005cc4 <thd2_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4d2b      	ldr	r5, [pc, #172]	; (8005cc8 <thd2_execute+0xb8>)
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <thd2_execute+0xbc>)
 8005c1e:	6870      	ldr	r0, [r6, #4]
 8005c20:	4c2b      	ldr	r4, [pc, #172]	; (8005cd0 <thd2_execute+0xc0>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005c22:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005c24:	3a04      	subs	r2, #4
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	f7fb fb87 	bl	8001340 <chThdCreateStatic>
 8005c32:	69bb      	ldr	r3, [r7, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005c34:	4927      	ldr	r1, [pc, #156]	; (8005cd4 <thd2_execute+0xc4>)
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	6833      	ldr	r3, [r6, #0]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005c3a:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005c3c:	9100      	str	r1, [sp, #0]
 8005c3e:	3a05      	subs	r2, #5
 8005c40:	4618      	mov	r0, r3
 8005c42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c46:	462b      	mov	r3, r5
 8005c48:	f7fb fb7a 	bl	8001340 <chThdCreateStatic>
 8005c4c:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005c4e:	6933      	ldr	r3, [r6, #16]
 8005c50:	6892      	ldr	r2, [r2, #8]
 8005c52:	4921      	ldr	r1, [pc, #132]	; (8005cd8 <thd2_execute+0xc8>)
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005c54:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005c56:	9100      	str	r1, [sp, #0]
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c60:	462b      	mov	r3, r5
 8005c62:	f7fb fb6d 	bl	8001340 <chThdCreateStatic>
 8005c66:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005c68:	68f3      	ldr	r3, [r6, #12]
 8005c6a:	6892      	ldr	r2, [r2, #8]
 8005c6c:	491b      	ldr	r1, [pc, #108]	; (8005cdc <thd2_execute+0xcc>)

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005c6e:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005c70:	9100      	str	r1, [sp, #0]
 8005c72:	3a02      	subs	r2, #2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	f7fb fb60 	bl	8001340 <chThdCreateStatic>
 8005c80:	2320      	movs	r3, #32
 8005c82:	60e0      	str	r0, [r4, #12]
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005c8a:	68b0      	ldr	r0, [r6, #8]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <thd2_execute+0xd0>)
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	3a03      	subs	r2, #3
 8005c94:	462b      	mov	r3, r5
 8005c96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c9a:	f7fb fb21 	bl	80012e0 <chThdCreateI>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60a0      	str	r0, [r4, #8]
 8005ca2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  chThdStart(threads[2]);
 8005ca6:	68a0      	ldr	r0, [r4, #8]
 8005ca8:	f7fb fb82 	bl	80013b0 <chThdStart>
  test_wait_threads();
 8005cac:	f7ff fd60 	bl	8005770 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005cb0:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <thd2_execute+0xd4>)
 8005cb2:	2001      	movs	r0, #1
}
 8005cb4:	b003      	add	sp, #12
 8005cb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005cba:	f7ff bd01 	b.w	80056c0 <_test_assert_sequence>
 8005cbe:	bf00      	nop
 8005cc0:	20000d18 	.word	0x20000d18
 8005cc4:	0800a3f0 	.word	0x0800a3f0
 8005cc8:	08005c01 	.word	0x08005c01
 8005ccc:	0800b5b8 	.word	0x0800b5b8
 8005cd0:	200018a8 	.word	0x200018a8
 8005cd4:	0800a6d0 	.word	0x0800a6d0
 8005cd8:	0800a6c8 	.word	0x0800a6c8
 8005cdc:	0800a6c4 	.word	0x0800a6c4
 8005ce0:	0800a6c0 	.word	0x0800a6c0
 8005ce4:	0800a6cc 	.word	0x0800a6cc
	...

08005cf0 <thd3_execute>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005cf2:	4e49      	ldr	r6, [pc, #292]	; (8005e18 <thd3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005cf4:	69b3      	ldr	r3, [r6, #24]
 8005cf6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8005cf8:	1c65      	adds	r5, r4, #1
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7fb fb68 	bl	80013d0 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8005d00:	1b01      	subs	r1, r0, r4
 8005d02:	fab1 f181 	clz	r1, r1

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8005d06:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8005d08:	0949      	lsrs	r1, r1, #5
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	f7ff fcc0 	bl	8005690 <_test_assert>
 8005d10:	b100      	cbz	r0, 8005d14 <thd3_execute+0x24>
 8005d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d14:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	1b49      	subs	r1, r1, r5
 8005d1a:	fab1 f181 	clz	r1, r1
 8005d1e:	2002      	movs	r0, #2
 8005d20:	0949      	lsrs	r1, r1, #5
 8005d22:	f7ff fcb5 	bl	8005690 <_test_assert>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d1f3      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7fb fb50 	bl	80013d0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8005d30:	1a29      	subs	r1, r5, r0
 8005d32:	fab1 f181 	clz	r1, r1
 8005d36:	0949      	lsrs	r1, r1, #5
 8005d38:	2003      	movs	r0, #3
 8005d3a:	f7ff fca9 	bl	8005690 <_test_assert>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d1e7      	bne.n	8005d12 <thd3_execute+0x22>
 8005d42:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8005d44:	6899      	ldr	r1, [r3, #8]
 8005d46:	1b09      	subs	r1, r1, r4
 8005d48:	fab1 f181 	clz	r1, r1
 8005d4c:	2004      	movs	r0, #4
 8005d4e:	0949      	lsrs	r1, r1, #5
 8005d50:	f7ff fc9e 	bl	8005690 <_test_assert>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d1dc      	bne.n	8005d12 <thd3_execute+0x22>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005d5e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8005d60:	6893      	ldr	r3, [r2, #8]
 8005d62:	3302      	adds	r3, #2
 8005d64:	6093      	str	r3, [r2, #8]
 8005d66:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005d6a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	1ca7      	adds	r7, r4, #2
 8005d70:	1bc9      	subs	r1, r1, r7
 8005d72:	fab1 f181 	clz	r1, r1
 8005d76:	0949      	lsrs	r1, r1, #5
 8005d78:	2005      	movs	r0, #5
 8005d7a:	f7ff fc89 	bl	8005690 <_test_assert>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1c7      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7fb fb24 	bl	80013d0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8005d88:	1b01      	subs	r1, r0, r4
 8005d8a:	fab1 f181 	clz	r1, r1
 8005d8e:	0949      	lsrs	r1, r1, #5
 8005d90:	2006      	movs	r0, #6
 8005d92:	f7ff fc7d 	bl	8005690 <_test_assert>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d1bb      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8005d9a:	69b3      	ldr	r3, [r6, #24]
 8005d9c:	6899      	ldr	r1, [r3, #8]
 8005d9e:	1bc9      	subs	r1, r1, r7
 8005da0:	fab1 f181 	clz	r1, r1
 8005da4:	2007      	movs	r0, #7
 8005da6:	0949      	lsrs	r1, r1, #5
 8005da8:	f7ff fc72 	bl	8005690 <_test_assert>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d1b0      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8005db0:	69b3      	ldr	r3, [r6, #24]
 8005db2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005db4:	1b49      	subs	r1, r1, r5
 8005db6:	fab1 f181 	clz	r1, r1
 8005dba:	2008      	movs	r0, #8
 8005dbc:	0949      	lsrs	r1, r1, #5
 8005dbe:	f7ff fc67 	bl	8005690 <_test_assert>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1a5      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8005dc6:	1ce7      	adds	r7, r4, #3
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7fb fb01 	bl	80013d0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8005dce:	1a28      	subs	r0, r5, r0
 8005dd0:	4241      	negs	r1, r0
 8005dd2:	4141      	adcs	r1, r0
 8005dd4:	2009      	movs	r0, #9
 8005dd6:	f7ff fc5b 	bl	8005690 <_test_assert>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d199      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8005dde:	69b3      	ldr	r3, [r6, #24]
 8005de0:	6899      	ldr	r1, [r3, #8]
 8005de2:	1bca      	subs	r2, r1, r7
 8005de4:	4251      	negs	r1, r2
 8005de6:	4151      	adcs	r1, r2
 8005de8:	200a      	movs	r0, #10
 8005dea:	f7ff fc51 	bl	8005690 <_test_assert>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d18f      	bne.n	8005d12 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8005df2:	69b3      	ldr	r3, [r6, #24]
 8005df4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005df6:	1bcb      	subs	r3, r1, r7
 8005df8:	4259      	negs	r1, r3
 8005dfa:	4159      	adcs	r1, r3
 8005dfc:	200b      	movs	r0, #11
 8005dfe:	f7ff fc47 	bl	8005690 <_test_assert>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d185      	bne.n	8005d12 <thd3_execute+0x22>
 8005e06:	2320      	movs	r3, #32
 8005e08:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e0c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8005e0e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8005e10:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005e12:	f380 8811 	msr	BASEPRI, r0
 8005e16:	e77c      	b.n	8005d12 <thd3_execute+0x22>
 8005e18:	20000d18 	.word	0x20000d18
 8005e1c:	00000000 	.word	0x00000000

08005e20 <thd4_execute>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8005e20:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8005e22:	f7ff fcbd 	bl	80057a0 <test_wait_tick>
 8005e26:	2620      	movs	r6, #32
 8005e28:	f386 8811 	msr	BASEPRI, r6
 8005e2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8005e30:	2300      	movs	r3, #0
 8005e32:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005e34:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8005e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e3c:	f7fb faf0 	bl	8001420 <chThdSleep>
  test_assert_time_window(1,
 8005e40:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005e44:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f7ff fc61 	bl	8005710 <_test_assert_time_window>
 8005e4e:	b100      	cbz	r0, 8005e52 <thd4_execute+0x32>
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	f386 8811 	msr	BASEPRI, r6
 8005e56:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005e58:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8005e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e60:	f7fb fade 	bl	8001420 <chThdSleep>
  test_assert_time_window(2,
 8005e64:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005e68:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f7ff fc4f 	bl	8005710 <_test_assert_time_window>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d1ec      	bne.n	8005e50 <thd4_execute+0x30>
 8005e76:	f386 8811 	msr	BASEPRI, r6
 8005e7a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005e7c:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8005e80:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e84:	f7fb facc 	bl	8001420 <chThdSleep>
  test_assert_time_window(3,
 8005e88:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	3110      	adds	r1, #16
 8005e90:	3213      	adds	r2, #19
 8005e92:	2003      	movs	r0, #3
 8005e94:	f7ff fc3c 	bl	8005710 <_test_assert_time_window>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1d9      	bne.n	8005e50 <thd4_execute+0x30>
 8005e9c:	f386 8811 	msr	BASEPRI, r6
 8005ea0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005ea2:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8005ea6:	f504 757a 	add.w	r5, r4, #1000	; 0x3e8
  chThdSleepUntil(time);
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7fb fac8 	bl	8001440 <chThdSleepUntil>
  test_assert_time_window(4,
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005eb6:	2004      	movs	r0, #4
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8005eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8005ebc:	f7ff bc28 	b.w	8005710 <_test_assert_time_window>

08005ec0 <sem1_execute>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8005ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4e48      	ldr	r6, [pc, #288]	; (8005fe8 <sem1_execute+0x128>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005ec6:	4f49      	ldr	r7, [pc, #292]	; (8005fec <sem1_execute+0x12c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005ec8:	69b3      	ldr	r3, [r6, #24]
 8005eca:	f8d7 8000 	ldr.w	r8, [r7]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8006010 <sem1_execute+0x150>
 8005ed4:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <sem1_execute+0x130>)
 8005ed6:	4d47      	ldr	r5, [pc, #284]	; (8005ff4 <sem1_execute+0x134>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  chSemSignal(&sem1);
 8005ed8:	4c47      	ldr	r4, [pc, #284]	; (8005ff8 <sem1_execute+0x138>)

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8005eda:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005edc:	3205      	adds	r2, #5
 8005ede:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ee2:	f8cd 9000 	str.w	r9, [sp]
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f7fb fa2a 	bl	8001340 <chThdCreateStatic>
 8005eec:	69b3      	ldr	r3, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <sem1_execute+0x13c>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005ef4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005ef6:	3201      	adds	r2, #1
 8005ef8:	4608      	mov	r0, r1
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f00:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <sem1_execute+0x130>)
 8005f02:	f7fb fa1d 	bl	8001340 <chThdCreateStatic>
 8005f06:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	4b3c      	ldr	r3, [pc, #240]	; (8006000 <sem1_execute+0x140>)
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005f0e:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005f10:	3203      	adds	r2, #3
 8005f12:	4608      	mov	r0, r1
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <sem1_execute+0x130>)
 8005f1c:	f7fb fa10 	bl	8001340 <chThdCreateStatic>
 8005f20:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <sem1_execute+0x144>)

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005f28:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005f2a:	3204      	adds	r2, #4
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f34:	4b2e      	ldr	r3, [pc, #184]	; (8005ff0 <sem1_execute+0x130>)
 8005f36:	f7fb fa03 	bl	8001340 <chThdCreateStatic>
 8005f3a:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	4b31      	ldr	r3, [pc, #196]	; (8006008 <sem1_execute+0x148>)
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005f42:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005f44:	3202      	adds	r2, #2
 8005f46:	4608      	mov	r0, r1
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f4e:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <sem1_execute+0x130>)
 8005f50:	f7fb f9f6 	bl	8001340 <chThdCreateStatic>
 8005f54:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7fb fcda 	bl	8001910 <chSemSignal>
  chSemSignal(&sem1);
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7fb fcd7 	bl	8001910 <chSemSignal>
  chSemSignal(&sem1);
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7fb fcd4 	bl	8001910 <chSemSignal>
  chSemSignal(&sem1);
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7fb fcd1 	bl	8001910 <chSemSignal>
  chSemSignal(&sem1);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7fb fcce 	bl	8001910 <chSemSignal>
  test_wait_threads();
 8005f74:	f7ff fbfc 	bl	8005770 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8005f78:	4924      	ldr	r1, [pc, #144]	; (800600c <sem1_execute+0x14c>)
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7ff fba0 	bl	80056c0 <_test_assert_sequence>
 8005f80:	b110      	cbz	r0, 8005f88 <sem1_execute+0xc8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8005f82:	b003      	add	sp, #12
 8005f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f88:	69b2      	ldr	r2, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005f8a:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <sem1_execute+0x130>)
 8005f8c:	6892      	ldr	r2, [r2, #8]
 8005f8e:	f8cd 9000 	str.w	r9, [sp]
 8005f92:	4607      	mov	r7, r0
 8005f94:	3205      	adds	r2, #5
 8005f96:	4640      	mov	r0, r8
 8005f98:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f9c:	f7fb f9d0 	bl	8001340 <chThdCreateStatic>
 8005fa0:	2620      	movs	r6, #32
 8005fa2:	6028      	str	r0, [r5, #0]
 8005fa4:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  chSemAddCounterI(&sem1, 2);
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7fb fce0 	bl	8001970 <chSemAddCounterI>
  chSchRescheduleS();
 8005fb0:	f7fb f95e 	bl	8001270 <chSchRescheduleS>
 8005fb4:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_wait_threads();
 8005fb8:	f7ff fbda 	bl	8005770 <test_wait_threads>
 8005fbc:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8005fc0:	68a1      	ldr	r1, [r4, #8]
 8005fc2:	f1a1 0101 	sub.w	r1, r1, #1
 8005fc6:	fab1 f181 	clz	r1, r1
 8005fca:	2002      	movs	r0, #2
 8005fcc:	0949      	lsrs	r1, r1, #5
 8005fce:	f7ff fb5f 	bl	8005690 <_test_assert>
 8005fd2:	b920      	cbnz	r0, 8005fde <sem1_execute+0x11e>
 8005fd4:	f380 8811 	msr	BASEPRI, r0
}
 8005fd8:	b003      	add	sp, #12
 8005fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fde:	f387 8811 	msr	BASEPRI, r7
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fe8:	20000d18 	.word	0x20000d18
 8005fec:	0800a3f0 	.word	0x0800a3f0
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	200018a8 	.word	0x200018a8
 8005ff8:	20000808 	.word	0x20000808
 8005ffc:	0800a6c4 	.word	0x0800a6c4
 8006000:	0800a6c0 	.word	0x0800a6c0
 8006004:	0800b5b8 	.word	0x0800b5b8
 8006008:	0800a6d0 	.word	0x0800a6d0
 800600c:	0800a6cc 	.word	0x0800a6cc
 8006010:	0800a6c8 	.word	0x0800a6c8
	...

08006020 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8006020:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8006022:	4c04      	ldr	r4, [pc, #16]	; (8006034 <thread3+0x14>)
 8006024:	4620      	mov	r0, r4
 8006026:	f7fb fc03 	bl	8001830 <chSemWait>
  chSemSignal(&sem1);
 800602a:	4620      	mov	r0, r4
}
 800602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8006030:	f7fb bc6e 	b.w	8001910 <chSemSignal>
 8006034:	20000808 	.word	0x20000808
	...

08006040 <thread1>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8006044:	4803      	ldr	r0, [pc, #12]	; (8006054 <thread1+0x14>)
 8006046:	f7fb fbf3 	bl	8001830 <chSemWait>
  test_emit_token(*(char *)p);
 800604a:	7820      	ldrb	r0, [r4, #0]
}
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8006050:	f7ff bb0e 	b.w	8005670 <test_emit_token>
 8006054:	20000808 	.word	0x20000808
	...

08006060 <sem3_setup>:
 * correct after each operation.
 */

static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
 8006060:	2100      	movs	r1, #0
 8006062:	4801      	ldr	r0, [pc, #4]	; (8006068 <sem3_setup+0x8>)
 8006064:	f7fb bbb4 	b.w	80017d0 <chSemObjectInit>
 8006068:	20000808 	.word	0x20000808
 800606c:	00000000 	.word	0x00000000

08006070 <sem2_setup>:
 8006070:	f7ff bff6 	b.w	8006060 <sem3_setup>
	...

08006080 <sem1_setup>:
 8006080:	f7ff bfee 	b.w	8006060 <sem3_setup>
	...

08006090 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8006090:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8006092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006096:	f7fb f9c3 	bl	8001420 <chThdSleep>
 800609a:	2320      	movs	r3, #32
 800609c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80060a0:	4804      	ldr	r0, [pc, #16]	; (80060b4 <thread2+0x24>)
 80060a2:	f7fb fc55 	bl	8001950 <chSemSignalI>
  chSchRescheduleS();
 80060a6:	f7fb f8e3 	bl	8001270 <chSchRescheduleS>
 80060aa:	2300      	movs	r3, #0
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	bd08      	pop	{r3, pc}
 80060b2:	bf00      	nop
 80060b4:	20000808 	.word	0x20000808
	...

080060c0 <sem2_execute>:
  chSysUnlock();
}

static void sem2_execute(void) {
 80060c0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80060c2:	4c4e      	ldr	r4, [pc, #312]	; (80061fc <sem2_execute+0x13c>)
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 80060c4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80060c6:	2100      	movs	r1, #0
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7fb fbd9 	bl	8001880 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80060ce:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 80060d2:	fab1 f181 	clz	r1, r1
 80060d6:	0949      	lsrs	r1, r1, #5
 80060d8:	2001      	movs	r0, #1
 80060da:	f7ff fad9 	bl	8005690 <_test_assert>
 80060de:	b108      	cbz	r0, 80060e4 <sem2_execute+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80060e0:	b002      	add	sp, #8
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80060e4:	6821      	ldr	r1, [r4, #0]
 80060e6:	1b09      	subs	r1, r1, r4
 80060e8:	fab1 f181 	clz	r1, r1
 80060ec:	2002      	movs	r0, #2
 80060ee:	0949      	lsrs	r1, r1, #5
 80060f0:	f7ff face 	bl	8005690 <_test_assert>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d1f3      	bne.n	80060e0 <sem2_execute+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 80060f8:	68a1      	ldr	r1, [r4, #8]
 80060fa:	fab1 f181 	clz	r1, r1
 80060fe:	0949      	lsrs	r1, r1, #5
 8006100:	2003      	movs	r0, #3
 8006102:	f7ff fac5 	bl	8005690 <_test_assert>
 8006106:	2800      	cmp	r0, #0
 8006108:	d1ea      	bne.n	80060e0 <sem2_execute+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <sem2_execute+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800610c:	4a3d      	ldr	r2, [pc, #244]	; (8006204 <sem2_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <sem2_execute+0x148>)
 8006116:	9000      	str	r0, [sp, #0]
 8006118:	3a01      	subs	r2, #1
 800611a:	4608      	mov	r0, r1
 800611c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006120:	f7fb f90e 	bl	8001340 <chThdCreateStatic>
 8006124:	4b39      	ldr	r3, [pc, #228]	; (800620c <sem2_execute+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8006126:	f241 3188 	movw	r1, #5000	; 0x1388
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800612a:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800612c:	4620      	mov	r0, r4
 800612e:	f7fb fba7 	bl	8001880 <chSemWaitTimeout>
 8006132:	4605      	mov	r5, r0
  test_wait_threads();
 8006134:	f7ff fb1c 	bl	8005770 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8006138:	fab5 f185 	clz	r1, r5
 800613c:	0949      	lsrs	r1, r1, #5
 800613e:	2004      	movs	r0, #4
 8006140:	f7ff faa6 	bl	8005690 <_test_assert>
 8006144:	2800      	cmp	r0, #0
 8006146:	d1cb      	bne.n	80060e0 <sem2_execute+0x20>
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8006148:	6821      	ldr	r1, [r4, #0]
 800614a:	1b09      	subs	r1, r1, r4
 800614c:	fab1 f181 	clz	r1, r1
 8006150:	2005      	movs	r0, #5
 8006152:	0949      	lsrs	r1, r1, #5
 8006154:	f7ff fa9c 	bl	8005690 <_test_assert>
 8006158:	2800      	cmp	r0, #0
 800615a:	d1c1      	bne.n	80060e0 <sem2_execute+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 800615c:	68a1      	ldr	r1, [r4, #8]
 800615e:	fab1 f181 	clz	r1, r1
 8006162:	0949      	lsrs	r1, r1, #5
 8006164:	2006      	movs	r0, #6
 8006166:	f7ff fa93 	bl	8005690 <_test_assert>
 800616a:	4605      	mov	r5, r0
 800616c:	2800      	cmp	r0, #0
 800616e:	d1b7      	bne.n	80060e0 <sem2_execute+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8006170:	f7ff fb16 	bl	80057a0 <test_wait_tick>
 8006174:	2320      	movs	r3, #32
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8006180:	f385 8811 	msr	BASEPRI, r5
 8006184:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fa72 	bl	8005670 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 800618c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006190:	481a      	ldr	r0, [pc, #104]	; (80061fc <sem2_execute+0x13c>)
 8006192:	f7fb fb75 	bl	8001880 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8006196:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 800619a:	fab1 f181 	clz	r1, r1
 800619e:	0949      	lsrs	r1, r1, #5
 80061a0:	2007      	movs	r0, #7
 80061a2:	f7ff fa75 	bl	8005690 <_test_assert>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d19a      	bne.n	80060e0 <sem2_execute+0x20>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	1b09      	subs	r1, r1, r4
 80061ae:	fab1 f181 	clz	r1, r1
 80061b2:	2008      	movs	r0, #8
 80061b4:	0949      	lsrs	r1, r1, #5
 80061b6:	f7ff fa6b 	bl	8005690 <_test_assert>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d190      	bne.n	80060e0 <sem2_execute+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80061be:	68a1      	ldr	r1, [r4, #8]
 80061c0:	fab1 f181 	clz	r1, r1
 80061c4:	0949      	lsrs	r1, r1, #5
 80061c6:	2009      	movs	r0, #9
 80061c8:	f7ff fa62 	bl	8005690 <_test_assert>
 80061cc:	3501      	adds	r5, #1
 80061ce:	b2ed      	uxtb	r5, r5
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d185      	bne.n	80060e0 <sem2_execute+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80061d4:	2d46      	cmp	r5, #70	; 0x46
 80061d6:	d1d6      	bne.n	8006186 <sem2_execute+0xc6>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80061d8:	490d      	ldr	r1, [pc, #52]	; (8006210 <sem2_execute+0x150>)
 80061da:	200a      	movs	r0, #10
 80061dc:	f7ff fa70 	bl	80056c0 <_test_assert_sequence>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f47f af7d 	bne.w	80060e0 <sem2_execute+0x20>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80061e6:	f606 12d8 	addw	r2, r6, #2520	; 0x9d8
 80061ea:	f606 11c4 	addw	r1, r6, #2500	; 0x9c4
 80061ee:	200b      	movs	r0, #11
}
 80061f0:	b002      	add	sp, #8
 80061f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80061f6:	f7ff ba8b 	b.w	8005710 <_test_assert_time_window>
 80061fa:	bf00      	nop
 80061fc:	20000808 	.word	0x20000808
 8006200:	20000d18 	.word	0x20000d18
 8006204:	0800a3f0 	.word	0x0800a3f0
 8006208:	08006091 	.word	0x08006091
 800620c:	200018a8 	.word	0x200018a8
 8006210:	0800a6cc 	.word	0x0800a6cc
	...

08006220 <sem3_execute>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8006220:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <sem3_execute+0x84>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <sem3_execute+0x88>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	6810      	ldr	r0, [r2, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <sem3_execute+0x8c>)
  chSemSignalWait(&sem1, &sem1);
 800622e:	4c20      	ldr	r4, [pc, #128]	; (80062b0 <sem3_execute+0x90>)
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8006230:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8006232:	2100      	movs	r1, #0
 8006234:	3201      	adds	r2, #1
 8006236:	9100      	str	r1, [sp, #0]
 8006238:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800623c:	f7fb f880 	bl	8001340 <chThdCreateStatic>
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <sem3_execute+0x94>)
  chSemSignalWait(&sem1, &sem1);
 8006242:	4621      	mov	r1, r4
  chSemSignal(&sem1);
}

static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8006244:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8006246:	4620      	mov	r0, r4
 8006248:	f7fb fbaa 	bl	80019a0 <chSemSignalWait>
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 800624c:	6821      	ldr	r1, [r4, #0]
 800624e:	1b09      	subs	r1, r1, r4
 8006250:	fab1 f181 	clz	r1, r1
 8006254:	2001      	movs	r0, #1
 8006256:	0949      	lsrs	r1, r1, #5
 8006258:	f7ff fa1a 	bl	8005690 <_test_assert>
 800625c:	b108      	cbz	r0, 8006262 <sem3_execute+0x42>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 800625e:	b002      	add	sp, #8
 8006260:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8006262:	68a1      	ldr	r1, [r4, #8]
 8006264:	fab1 f181 	clz	r1, r1
 8006268:	0949      	lsrs	r1, r1, #5
 800626a:	2002      	movs	r0, #2
 800626c:	f7ff fa10 	bl	8005690 <_test_assert>
 8006270:	2800      	cmp	r0, #0
 8006272:	d1f4      	bne.n	800625e <sem3_execute+0x3e>

  chSemSignalWait(&sem1, &sem1);
 8006274:	4621      	mov	r1, r4
 8006276:	4620      	mov	r0, r4
 8006278:	f7fb fb92 	bl	80019a0 <chSemSignalWait>
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	1b09      	subs	r1, r1, r4
 8006280:	fab1 f181 	clz	r1, r1
 8006284:	2003      	movs	r0, #3
 8006286:	0949      	lsrs	r1, r1, #5
 8006288:	f7ff fa02 	bl	8005690 <_test_assert>
 800628c:	2800      	cmp	r0, #0
 800628e:	d1e6      	bne.n	800625e <sem3_execute+0x3e>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8006290:	68a1      	ldr	r1, [r4, #8]
 8006292:	fab1 f181 	clz	r1, r1
 8006296:	0949      	lsrs	r1, r1, #5
 8006298:	2004      	movs	r0, #4
}
 800629a:	b002      	add	sp, #8
 800629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80062a0:	f7ff b9f6 	b.w	8005690 <_test_assert>
 80062a4:	20000d18 	.word	0x20000d18
 80062a8:	0800a3f0 	.word	0x0800a3f0
 80062ac:	08006021 	.word	0x08006021
 80062b0:	20000808 	.word	0x20000808
 80062b4:	200018a8 	.word	0x200018a8
	...

080062c0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 80062c0:	b508      	push	{r3, lr}
 80062c2:	2220      	movs	r2, #32
 80062c4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80062c8:	6883      	ldr	r3, [r0, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd05      	ble.n	80062da <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80062ce:	f7fa ffcf 	bl	8001270 <chSchRescheduleS>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80062da:	f7fb fb39 	bl	8001950 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80062de:	f7fa ffc7 	bl	8001270 <chSchRescheduleS>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	bd08      	pop	{r3, pc}
 80062ea:	bf00      	nop
 80062ec:	0000      	movs	r0, r0
	...

080062f0 <sem4_execute>:

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	b086      	sub	sp, #24
 *
 * @init
 */
static inline void chBSemObjectInit(binary_semaphore_t *bsp, bool taken) {

  chSemObjectInit(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80062f4:	a803      	add	r0, sp, #12
 80062f6:	2100      	movs	r1, #0
 80062f8:	f7fb fa6a 	bl	80017d0 <chSemObjectInit>
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {

  chSemReset(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80062fc:	a803      	add	r0, sp, #12
 80062fe:	2100      	movs	r1, #0
 8006300:	f7fb fa86 	bl	8001810 <chSemReset>
 8006304:	2520      	movs	r5, #32
 8006306:	f385 8811 	msr	BASEPRI, r5
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800630a:	9905      	ldr	r1, [sp, #20]
 800630c:	2900      	cmp	r1, #0
 800630e:	bfcc      	ite	gt
 8006310:	2100      	movgt	r1, #0
 8006312:	2101      	movle	r1, #1
 8006314:	2001      	movs	r0, #1
 8006316:	f7ff f9bb 	bl	8005690 <_test_assert>
 800631a:	b120      	cbz	r0, 8006326 <sem4_execute+0x36>
 800631c:	2300      	movs	r3, #0
 800631e:	f383 8811 	msr	BASEPRI, r3

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8006322:	b006      	add	sp, #24
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	4604      	mov	r4, r0
 8006328:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800632c:	4b40      	ldr	r3, [pc, #256]	; (8006430 <sem4_execute+0x140>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800632e:	4a41      	ldr	r2, [pc, #260]	; (8006434 <sem4_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	6810      	ldr	r0, [r2, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	4b40      	ldr	r3, [pc, #256]	; (8006438 <sem4_execute+0x148>)
 8006338:	a903      	add	r1, sp, #12
 800633a:	9100      	str	r1, [sp, #0]
 800633c:	3a01      	subs	r2, #1
 800633e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006342:	f7fa fffd 	bl	8001340 <chThdCreateStatic>
 8006346:	4b3d      	ldr	r3, [pc, #244]	; (800643c <sem4_execute+0x14c>)
 8006348:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 800634a:	a803      	add	r0, sp, #12
 800634c:	f7fb fa70 	bl	8001830 <chSemWait>
 8006350:	f385 8811 	msr	BASEPRI, r5
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8006354:	9905      	ldr	r1, [sp, #20]
 8006356:	2900      	cmp	r1, #0
 8006358:	bfcc      	ite	gt
 800635a:	2100      	movgt	r1, #0
 800635c:	2101      	movle	r1, #1
 800635e:	2002      	movs	r0, #2
 8006360:	f7ff f996 	bl	8005690 <_test_assert>
 8006364:	b118      	cbz	r0, 800636e <sem4_execute+0x7e>
 8006366:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 800636a:	b006      	add	sp, #24
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	f380 8811 	msr	BASEPRI, r0
 8006372:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8006376:	9b05      	ldr	r3, [sp, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	dd24      	ble.n	80063c6 <sem4_execute+0xd6>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800637c:	f7fa ff78 	bl	8001270 <chSchRescheduleS>
 8006380:	2400      	movs	r4, #0
 8006382:	f384 8811 	msr	BASEPRI, r4
 8006386:	2620      	movs	r6, #32
 8006388:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 800638c:	9905      	ldr	r1, [sp, #20]
 800638e:	42a1      	cmp	r1, r4
 8006390:	f04f 0003 	mov.w	r0, #3
 8006394:	bfd4      	ite	le
 8006396:	2100      	movle	r1, #0
 8006398:	2101      	movgt	r1, #1
 800639a:	f7ff f979 	bl	8005690 <_test_assert>
 800639e:	4605      	mov	r5, r0
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1e0      	bne.n	8006366 <sem4_execute+0x76>
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80063ac:	9905      	ldr	r1, [sp, #20]
 80063ae:	f1a1 0101 	sub.w	r1, r1, #1
 80063b2:	fab1 f181 	clz	r1, r1
 80063b6:	2004      	movs	r0, #4
 80063b8:	0949      	lsrs	r1, r1, #5
 80063ba:	f7ff f969 	bl	8005690 <_test_assert>
 80063be:	b130      	cbz	r0, 80063ce <sem4_execute+0xde>
 80063c0:	f385 8811 	msr	BASEPRI, r5
 80063c4:	e7ad      	b.n	8006322 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80063c6:	a803      	add	r0, sp, #12
 80063c8:	f7fb fac2 	bl	8001950 <chSemSignalI>
 80063cc:	e7d6      	b.n	800637c <sem4_execute+0x8c>
 80063ce:	f380 8811 	msr	BASEPRI, r0
 80063d2:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dd25      	ble.n	8006428 <sem4_execute+0x138>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80063dc:	f7fa ff48 	bl	8001270 <chSchRescheduleS>
 80063e0:	2400      	movs	r4, #0
 80063e2:	f384 8811 	msr	BASEPRI, r4
 80063e6:	2620      	movs	r6, #32
 80063e8:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80063ec:	9905      	ldr	r1, [sp, #20]
 80063ee:	42a1      	cmp	r1, r4
 80063f0:	f04f 0003 	mov.w	r0, #3
 80063f4:	bfd4      	ite	le
 80063f6:	2100      	movle	r1, #0
 80063f8:	2101      	movgt	r1, #1
 80063fa:	f7ff f949 	bl	8005690 <_test_assert>
 80063fe:	4605      	mov	r5, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d1b0      	bne.n	8006366 <sem4_execute+0x76>
 8006404:	f380 8811 	msr	BASEPRI, r0
 8006408:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 800640c:	9905      	ldr	r1, [sp, #20]
 800640e:	f1a1 0101 	sub.w	r1, r1, #1
 8006412:	fab1 f181 	clz	r1, r1
 8006416:	2005      	movs	r0, #5
 8006418:	0949      	lsrs	r1, r1, #5
 800641a:	f7ff f939 	bl	8005690 <_test_assert>
 800641e:	2800      	cmp	r0, #0
 8006420:	d1ce      	bne.n	80063c0 <sem4_execute+0xd0>
 8006422:	f380 8811 	msr	BASEPRI, r0
 8006426:	e77c      	b.n	8006322 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8006428:	a803      	add	r0, sp, #12
 800642a:	f7fb fa91 	bl	8001950 <chSemSignalI>
 800642e:	e7d5      	b.n	80063dc <sem4_execute+0xec>
 8006430:	20000d18 	.word	0x20000d18
 8006434:	0800a3f0 	.word	0x0800a3f0
 8006438:	080062c1 	.word	0x080062c1
 800643c:	200018a8 	.word	0x200018a8

08006440 <mtx1_execute>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8006440:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006442:	4f2b      	ldr	r7, [pc, #172]	; (80064f0 <mtx1_execute+0xb0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8006444:	4e2b      	ldr	r6, [pc, #172]	; (80064f4 <mtx1_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006446:	69bb      	ldr	r3, [r7, #24]
}

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8006448:	482b      	ldr	r0, [pc, #172]	; (80064f8 <mtx1_execute+0xb8>)
 800644a:	689c      	ldr	r4, [r3, #8]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800644c:	4d2b      	ldr	r5, [pc, #172]	; (80064fc <mtx1_execute+0xbc>)
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 800644e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8006450:	f7fb fb4e 	bl	8001af0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8006454:	4b2a      	ldr	r3, [pc, #168]	; (8006500 <mtx1_execute+0xc0>)
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	1c62      	adds	r2, r4, #1
 800645a:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <mtx1_execute+0xc4>)
 800645c:	6830      	ldr	r0, [r6, #0]
 800645e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006462:	f7fa ff6d 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8006466:	6871      	ldr	r1, [r6, #4]
 8006468:	4b27      	ldr	r3, [pc, #156]	; (8006508 <mtx1_execute+0xc8>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800646a:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800646c:	1ca2      	adds	r2, r4, #2
 800646e:	4608      	mov	r0, r1
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <mtx1_execute+0xc4>)
 8006478:	f7fa ff62 	bl	8001340 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800647c:	68b1      	ldr	r1, [r6, #8]
 800647e:	4b23      	ldr	r3, [pc, #140]	; (800650c <mtx1_execute+0xcc>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8006480:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8006482:	1ce2      	adds	r2, r4, #3
 8006484:	4608      	mov	r0, r1
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800648c:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <mtx1_execute+0xc4>)
 800648e:	f7fa ff57 	bl	8001340 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8006492:	68f1      	ldr	r1, [r6, #12]
 8006494:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <mtx1_execute+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8006496:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8006498:	1d22      	adds	r2, r4, #4
 800649a:	4608      	mov	r0, r1
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80064a2:	4b18      	ldr	r3, [pc, #96]	; (8006504 <mtx1_execute+0xc4>)
 80064a4:	f7fa ff4c 	bl	8001340 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80064a8:	6931      	ldr	r1, [r6, #16]
 80064aa:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <mtx1_execute+0xd4>)
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80064ac:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80064ae:	1d62      	adds	r2, r4, #5
 80064b0:	4608      	mov	r0, r1
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <mtx1_execute+0xc4>)
 80064ba:	f7fa ff41 	bl	8001340 <chThdCreateStatic>
 80064be:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 80064c0:	480d      	ldr	r0, [pc, #52]	; (80064f8 <mtx1_execute+0xb8>)
 80064c2:	f7fb fb3d 	bl	8001b40 <chMtxUnlock>
  test_wait_threads();
 80064c6:	f7ff f953 	bl	8005770 <test_wait_threads>
 80064ca:	69bb      	ldr	r3, [r7, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80064cc:	6899      	ldr	r1, [r3, #8]
 80064ce:	1b09      	subs	r1, r1, r4
 80064d0:	fab1 f181 	clz	r1, r1
 80064d4:	2001      	movs	r0, #1
 80064d6:	0949      	lsrs	r1, r1, #5
 80064d8:	f7ff f8da 	bl	8005690 <_test_assert>
 80064dc:	b108      	cbz	r0, 80064e2 <mtx1_execute+0xa2>
  test_assert_sequence(2, "ABCDE");
}
 80064de:	b003      	add	sp, #12
 80064e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80064e2:	490d      	ldr	r1, [pc, #52]	; (8006518 <mtx1_execute+0xd8>)
 80064e4:	2002      	movs	r0, #2
}
 80064e6:	b003      	add	sp, #12
 80064e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80064ec:	f7ff b8e8 	b.w	80056c0 <_test_assert_sequence>
 80064f0:	20000d18 	.word	0x20000d18
 80064f4:	0800a3f0 	.word	0x0800a3f0
 80064f8:	20000814 	.word	0x20000814
 80064fc:	200018a8 	.word	0x200018a8
 8006500:	0800a6d0 	.word	0x0800a6d0
 8006504:	08006521 	.word	0x08006521
 8006508:	0800b5b8 	.word	0x0800b5b8
 800650c:	0800a6c0 	.word	0x0800a6c0
 8006510:	0800a6c4 	.word	0x0800a6c4
 8006514:	0800a6c8 	.word	0x0800a6c8
 8006518:	0800a6cc 	.word	0x0800a6cc
 800651c:	00000000 	.word	0x00000000

08006520 <thread1>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8006520:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8006522:	4c06      	ldr	r4, [pc, #24]	; (800653c <thread1+0x1c>)
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8006524:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8006526:	4620      	mov	r0, r4
 8006528:	f7fb fae2 	bl	8001af0 <chMtxLock>
  test_emit_token(*(char *)p);
 800652c:	7828      	ldrb	r0, [r5, #0]
 800652e:	f7ff f89f 	bl	8005670 <test_emit_token>
  chMtxUnlock(&m1);
 8006532:	4620      	mov	r0, r4
}
 8006534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8006538:	f7fb bb02 	b.w	8001b40 <chMtxUnlock>
 800653c:	20000814 	.word	0x20000814

08006540 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8006540:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8006542:	4c06      	ldr	r4, [pc, #24]	; (800655c <thread12+0x1c>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8006544:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8006546:	4620      	mov	r0, r4
 8006548:	f7fb fad2 	bl	8001af0 <chMtxLock>
  test_emit_token(*(char *)p);
 800654c:	7828      	ldrb	r0, [r5, #0]
 800654e:	f7ff f88f 	bl	8005670 <test_emit_token>
  chMtxUnlock(&m2);
 8006552:	4620      	mov	r0, r4
}
 8006554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8006558:	f7fb baf2 	b.w	8001b40 <chMtxUnlock>
 800655c:	20000824 	.word	0x20000824

08006560 <mtx4_setup>:
 * thread with precise timing.<br>
 * The test expects that the priority changes caused by the priority
 * inheritance algorithm happen at the right moment and with the right values.
 */

static void mtx4_setup(void) {
 8006560:	b508      	push	{r3, lr}

  chMtxObjectInit(&m1);
 8006562:	4804      	ldr	r0, [pc, #16]	; (8006574 <mtx4_setup+0x14>)
 8006564:	f7fb fa54 	bl	8001a10 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8006568:	4803      	ldr	r0, [pc, #12]	; (8006578 <mtx4_setup+0x18>)
}
 800656a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx4_setup(void) {

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 800656e:	f7fb ba4f 	b.w	8001a10 <chMtxObjectInit>
 8006572:	bf00      	nop
 8006574:	20000814 	.word	0x20000814
 8006578:	20000824 	.word	0x20000824
 800657c:	00000000 	.word	0x00000000

08006580 <mtx5_setup>:
 * operation.
 */

static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <mtx5_setup+0x8>)
 8006582:	f7fb ba45 	b.w	8001a10 <chMtxObjectInit>
 8006586:	bf00      	nop
 8006588:	20000814 	.word	0x20000814
 800658c:	00000000 	.word	0x00000000

08006590 <mtx1_setup>:
 8006590:	f7ff bff6 	b.w	8006580 <mtx5_setup>
	...

080065a0 <thread4b>:
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread4b, p) {
 80065a0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 80065a2:	4c06      	ldr	r4, [pc, #24]	; (80065bc <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 80065a4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80065a8:	f7fa ff3a 	bl	8001420 <chThdSleep>
  chMtxLock(&m1);
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7fb fa9f 	bl	8001af0 <chMtxLock>
  chMtxUnlock(&m1);
 80065b2:	4620      	mov	r0, r4
}
 80065b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 80065b8:	f7fb bac2 	b.w	8001b40 <chMtxUnlock>
 80065bc:	20000814 	.word	0x20000814

080065c0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 80065c0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80065c2:	4c06      	ldr	r4, [pc, #24]	; (80065dc <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80065c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065c8:	f7fa ff2a 	bl	8001420 <chThdSleep>
  chMtxLock(&m2);
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7fb fa8f 	bl	8001af0 <chMtxLock>
  chMtxUnlock(&m2);
 80065d2:	4620      	mov	r0, r4
}
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 80065d8:	f7fb bab2 	b.w	8001b40 <chMtxUnlock>
 80065dc:	20000824 	.word	0x20000824

080065e0 <mtx4_execute>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80065e0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80065e4:	4d8e      	ldr	r5, [pc, #568]	; (8006820 <mtx4_execute+0x240>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80065e6:	4e8f      	ldr	r6, [pc, #572]	; (8006824 <mtx4_execute+0x244>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80065e8:	69ab      	ldr	r3, [r5, #24]
 80065ea:	6832      	ldr	r2, [r6, #0]
 80065ec:	689c      	ldr	r4, [r3, #8]
 80065ee:	4b8e      	ldr	r3, [pc, #568]	; (8006828 <mtx4_execute+0x248>)
 80065f0:	4f8e      	ldr	r7, [pc, #568]	; (800682c <mtx4_execute+0x24c>)
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80065f2:	b085      	sub	sp, #20
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80065f4:	f104 0901 	add.w	r9, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80065f8:	4610      	mov	r0, r2
 80065fa:	9203      	str	r2, [sp, #12]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	464a      	mov	r2, r9
 8006600:	4b8b      	ldr	r3, [pc, #556]	; (8006830 <mtx4_execute+0x250>)
 8006602:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006606:	f7fa fe9b 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 800660a:	6876      	ldr	r6, [r6, #4]
 800660c:	4b89      	ldr	r3, [pc, #548]	; (8006834 <mtx4_execute+0x254>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800660e:	6038      	str	r0, [r7, #0]
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8006610:	f104 0a02 	add.w	sl, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8006614:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006618:	4652      	mov	r2, sl
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4630      	mov	r0, r6
 800661e:	4b86      	ldr	r3, [pc, #536]	; (8006838 <mtx4_execute+0x258>)
 8006620:	f7fa fe8e 	bl	8001340 <chThdCreateStatic>
 8006624:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8006626:	4885      	ldr	r0, [pc, #532]	; (800683c <mtx4_execute+0x25c>)
 8006628:	f7fb fa62 	bl	8001af0 <chMtxLock>
 800662c:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 800662e:	6899      	ldr	r1, [r3, #8]
 8006630:	1b09      	subs	r1, r1, r4
 8006632:	fab1 f181 	clz	r1, r1
 8006636:	2001      	movs	r0, #1
 8006638:	0949      	lsrs	r1, r1, #5
 800663a:	f7ff f829 	bl	8005690 <_test_assert>
 800663e:	b110      	cbz	r0, 8006646 <mtx4_execute+0x66>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8006640:	b005      	add	sp, #20
 8006642:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8006646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800664a:	f7fa fee9 	bl	8001420 <chThdSleep>
 800664e:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	ebc9 0101 	rsb	r1, r9, r1
 8006656:	fab1 f181 	clz	r1, r1
 800665a:	2002      	movs	r0, #2
 800665c:	0949      	lsrs	r1, r1, #5
 800665e:	f7ff f817 	bl	8005690 <_test_assert>
 8006662:	2800      	cmp	r0, #0
 8006664:	d1ec      	bne.n	8006640 <mtx4_execute+0x60>
  chMtxLock(&m1);
 8006666:	4876      	ldr	r0, [pc, #472]	; (8006840 <mtx4_execute+0x260>)
 8006668:	f7fb fa42 	bl	8001af0 <chMtxLock>
 800666c:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 800666e:	6899      	ldr	r1, [r3, #8]
 8006670:	ebc9 0101 	rsb	r1, r9, r1
 8006674:	fab1 f181 	clz	r1, r1
 8006678:	2003      	movs	r0, #3
 800667a:	0949      	lsrs	r1, r1, #5
 800667c:	f7ff f808 	bl	8005690 <_test_assert>
 8006680:	2800      	cmp	r0, #0
 8006682:	d1dd      	bne.n	8006640 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8006684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006688:	f7fa feca 	bl	8001420 <chThdSleep>
 800668c:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800668e:	6899      	ldr	r1, [r3, #8]
 8006690:	ebca 0101 	rsb	r1, sl, r1
 8006694:	fab1 f181 	clz	r1, r1
 8006698:	2004      	movs	r0, #4
 800669a:	0949      	lsrs	r1, r1, #5
 800669c:	f7fe fff8 	bl	8005690 <_test_assert>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1cd      	bne.n	8006640 <mtx4_execute+0x60>
  chMtxUnlock(&m1);
 80066a4:	4866      	ldr	r0, [pc, #408]	; (8006840 <mtx4_execute+0x260>)
 80066a6:	f7fb fa4b 	bl	8001b40 <chMtxUnlock>
 80066aa:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 80066ac:	6899      	ldr	r1, [r3, #8]
 80066ae:	ebc9 0101 	rsb	r1, r9, r1
 80066b2:	fab1 f181 	clz	r1, r1
 80066b6:	2005      	movs	r0, #5
 80066b8:	0949      	lsrs	r1, r1, #5
 80066ba:	f7fe ffe9 	bl	8005690 <_test_assert>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d1be      	bne.n	8006640 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 80066c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066c6:	f7fa feab 	bl	8001420 <chThdSleep>
 80066ca:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80066cc:	6899      	ldr	r1, [r3, #8]
 80066ce:	ebc9 0101 	rsb	r1, r9, r1
 80066d2:	fab1 f181 	clz	r1, r1
 80066d6:	2006      	movs	r0, #6
 80066d8:	0949      	lsrs	r1, r1, #5
 80066da:	f7fe ffd9 	bl	8005690 <_test_assert>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d1ae      	bne.n	8006640 <mtx4_execute+0x60>
  chMtxUnlockAll();
 80066e2:	f7fb fa85 	bl	8001bf0 <chMtxUnlockAll>
 80066e6:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80066e8:	6899      	ldr	r1, [r3, #8]
 80066ea:	1b09      	subs	r1, r1, r4
 80066ec:	fab1 f181 	clz	r1, r1
 80066f0:	2007      	movs	r0, #7
 80066f2:	0949      	lsrs	r1, r1, #5
 80066f4:	f7fe ffcc 	bl	8005690 <_test_assert>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1a1      	bne.n	8006640 <mtx4_execute+0x60>
  test_wait_threads();
 80066fc:	f7ff f838 	bl	8005770 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8006700:	4b50      	ldr	r3, [pc, #320]	; (8006844 <mtx4_execute+0x264>)
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	464a      	mov	r2, r9
 8006706:	4b4a      	ldr	r3, [pc, #296]	; (8006830 <mtx4_execute+0x250>)
 8006708:	9803      	ldr	r0, [sp, #12]
 800670a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800670e:	f7fa fe17 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8006712:	4b4d      	ldr	r3, [pc, #308]	; (8006848 <mtx4_execute+0x268>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8006714:	6038      	str	r0, [r7, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8006716:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	4652      	mov	r2, sl
 800671e:	4b46      	ldr	r3, [pc, #280]	; (8006838 <mtx4_execute+0x258>)
 8006720:	4630      	mov	r0, r6
 8006722:	f7fa fe0d 	bl	8001340 <chThdCreateStatic>
 8006726:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8006728:	4844      	ldr	r0, [pc, #272]	; (800683c <mtx4_execute+0x25c>)
 800672a:	f7fb f9e1 	bl	8001af0 <chMtxLock>
 800672e:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	1b09      	subs	r1, r1, r4
 8006734:	fab1 f181 	clz	r1, r1
 8006738:	2008      	movs	r0, #8
 800673a:	0949      	lsrs	r1, r1, #5
 800673c:	f7fe ffa8 	bl	8005690 <_test_assert>
 8006740:	2800      	cmp	r0, #0
 8006742:	f47f af7d 	bne.w	8006640 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8006746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800674a:	f7fa fe69 	bl	8001420 <chThdSleep>
 800674e:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8006750:	6899      	ldr	r1, [r3, #8]
 8006752:	ebc9 0c01 	rsb	ip, r9, r1
 8006756:	f1dc 0100 	rsbs	r1, ip, #0
 800675a:	eb41 010c 	adc.w	r1, r1, ip
 800675e:	2009      	movs	r0, #9
 8006760:	f7fe ff96 	bl	8005690 <_test_assert>
 8006764:	2800      	cmp	r0, #0
 8006766:	f47f af6b 	bne.w	8006640 <mtx4_execute+0x60>
  chMtxLock(&m1);
 800676a:	4835      	ldr	r0, [pc, #212]	; (8006840 <mtx4_execute+0x260>)
 800676c:	f7fb f9c0 	bl	8001af0 <chMtxLock>
 8006770:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8006772:	6899      	ldr	r1, [r3, #8]
 8006774:	ebc9 0e01 	rsb	lr, r9, r1
 8006778:	f1de 0100 	rsbs	r1, lr, #0
 800677c:	eb41 010e 	adc.w	r1, r1, lr
 8006780:	200a      	movs	r0, #10
 8006782:	f7fe ff85 	bl	8005690 <_test_assert>
 8006786:	2800      	cmp	r0, #0
 8006788:	f47f af5a 	bne.w	8006640 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 800678c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006790:	f7fa fe46 	bl	8001420 <chThdSleep>
 8006794:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	ebca 0701 	rsb	r7, sl, r1
 800679c:	4279      	negs	r1, r7
 800679e:	f04f 000b 	mov.w	r0, #11
 80067a2:	4179      	adcs	r1, r7
 80067a4:	f7fe ff74 	bl	8005690 <_test_assert>
 80067a8:	4606      	mov	r6, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f47f af48 	bne.w	8006640 <mtx4_execute+0x60>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 80067b6:	4822      	ldr	r0, [pc, #136]	; (8006840 <mtx4_execute+0x260>)
 80067b8:	f7fb f9f2 	bl	8001ba0 <chMtxUnlockS>
  chSchRescheduleS();
 80067bc:	f7fa fd58 	bl	8001270 <chSchRescheduleS>
 80067c0:	f386 8811 	msr	BASEPRI, r6
 80067c4:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	ebc9 0601 	rsb	r6, r9, r1
 80067cc:	4271      	negs	r1, r6
 80067ce:	4171      	adcs	r1, r6
 80067d0:	200c      	movs	r0, #12
 80067d2:	f7fe ff5d 	bl	8005690 <_test_assert>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f47f af32 	bne.w	8006640 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 80067dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067e0:	f7fa fe1e 	bl	8001420 <chThdSleep>
 80067e4:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80067e6:	6899      	ldr	r1, [r3, #8]
 80067e8:	ebc9 0201 	rsb	r2, r9, r1
 80067ec:	4251      	negs	r1, r2
 80067ee:	4151      	adcs	r1, r2
 80067f0:	200d      	movs	r0, #13
 80067f2:	f7fe ff4d 	bl	8005690 <_test_assert>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	f47f af22 	bne.w	8006640 <mtx4_execute+0x60>
  chMtxUnlockAll();
 80067fc:	f7fb f9f8 	bl	8001bf0 <chMtxUnlockAll>
 8006800:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8006802:	6899      	ldr	r1, [r3, #8]
 8006804:	1b0b      	subs	r3, r1, r4
 8006806:	4259      	negs	r1, r3
 8006808:	4159      	adcs	r1, r3
 800680a:	200e      	movs	r0, #14
 800680c:	f7fe ff40 	bl	8005690 <_test_assert>
 8006810:	2800      	cmp	r0, #0
 8006812:	f47f af15 	bne.w	8006640 <mtx4_execute+0x60>
  test_wait_threads();
}
 8006816:	b005      	add	sp, #20
 8006818:	e8bd 46f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 800681c:	f7fe bfa8 	b.w	8005770 <test_wait_threads>
 8006820:	20000d18 	.word	0x20000d18
 8006824:	0800a3f0 	.word	0x0800a3f0
 8006828:	0800a6c4 	.word	0x0800a6c4
 800682c:	200018a8 	.word	0x200018a8
 8006830:	080065c1 	.word	0x080065c1
 8006834:	0800a6c8 	.word	0x0800a6c8
 8006838:	080065a1 	.word	0x080065a1
 800683c:	20000824 	.word	0x20000824
 8006840:	20000814 	.word	0x20000814
 8006844:	0800b5b8 	.word	0x0800b5b8
 8006848:	0800a6c0 	.word	0x0800a6c0
 800684c:	00000000 	.word	0x00000000

08006850 <mtx5_execute>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006852:	4d2b      	ldr	r5, [pc, #172]	; (8006900 <mtx5_execute+0xb0>)

#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
 8006854:	4c2b      	ldr	r4, [pc, #172]	; (8006904 <mtx5_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006856:	69ab      	ldr	r3, [r5, #24]
 8006858:	4620      	mov	r0, r4
 800685a:	689e      	ldr	r6, [r3, #8]
 800685c:	f7fb f958 	bl	8001b10 <chMtxTryLock>
  test_assert(1, b, "already locked");
 8006860:	4601      	mov	r1, r0
 8006862:	2001      	movs	r0, #1
 8006864:	f7fe ff14 	bl	8005690 <_test_assert>
 8006868:	b100      	cbz	r0, 800686c <mtx5_execute+0x1c>
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  b = chMtxTryLock(&m1);
 800686c:	4620      	mov	r0, r4
 800686e:	f7fb f94f 	bl	8001b10 <chMtxTryLock>
  test_assert(2, !b, "not locked");
 8006872:	f080 0101 	eor.w	r1, r0, #1
 8006876:	b2c9      	uxtb	r1, r1
 8006878:	2002      	movs	r0, #2
 800687a:	f7fe ff09 	bl	8005690 <_test_assert>
 800687e:	4607      	mov	r7, r0
 8006880:	2800      	cmp	r0, #0
 8006882:	d1f2      	bne.n	800686a <mtx5_execute+0x1a>
 8006884:	2320      	movs	r3, #32
 8006886:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 800688a:	4620      	mov	r0, r4
 800688c:	f7fb f988 	bl	8001ba0 <chMtxUnlockS>
 8006890:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8006894:	6821      	ldr	r1, [r4, #0]
 8006896:	1b09      	subs	r1, r1, r4
 8006898:	fab1 f181 	clz	r1, r1
 800689c:	2003      	movs	r0, #3
 800689e:	0949      	lsrs	r1, r1, #5
 80068a0:	f7fe fef6 	bl	8005690 <_test_assert>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1e0      	bne.n	800686a <mtx5_execute+0x1a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 80068a8:	68a1      	ldr	r1, [r4, #8]
 80068aa:	fab1 f181 	clz	r1, r1
 80068ae:	0949      	lsrs	r1, r1, #5
 80068b0:	2004      	movs	r0, #4
 80068b2:	f7fe feed 	bl	8005690 <_test_assert>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d1d7      	bne.n	800686a <mtx5_execute+0x1a>
 80068ba:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 80068bc:	6899      	ldr	r1, [r3, #8]
 80068be:	1b89      	subs	r1, r1, r6
 80068c0:	fab1 f181 	clz	r1, r1
 80068c4:	2005      	movs	r0, #5
 80068c6:	0949      	lsrs	r1, r1, #5
 80068c8:	f7fe fee2 	bl	8005690 <_test_assert>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d1cc      	bne.n	800686a <mtx5_execute+0x1a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7fb f90d 	bl	8001af0 <chMtxLock>
  chMtxUnlockAll();
 80068d6:	f7fb f98b 	bl	8001bf0 <chMtxUnlockAll>
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 80068da:	6821      	ldr	r1, [r4, #0]
 80068dc:	1b09      	subs	r1, r1, r4
 80068de:	fab1 f181 	clz	r1, r1
 80068e2:	2006      	movs	r0, #6
 80068e4:	0949      	lsrs	r1, r1, #5
 80068e6:	f7fe fed3 	bl	8005690 <_test_assert>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d1bd      	bne.n	800686a <mtx5_execute+0x1a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 80068ee:	68a1      	ldr	r1, [r4, #8]
 80068f0:	fab1 f181 	clz	r1, r1
 80068f4:	0949      	lsrs	r1, r1, #5
 80068f6:	2007      	movs	r0, #7
}
 80068f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 80068fc:	f7fe bec8 	b.w	8005690 <_test_assert>
 8006900:	20000d18 	.word	0x20000d18
 8006904:	20000814 	.word	0x20000814
	...

08006910 <mtx6_execute>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8006910:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006912:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <mtx6_execute+0xc0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006914:	4f2f      	ldr	r7, [pc, #188]	; (80069d4 <mtx6_execute+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4d2f      	ldr	r5, [pc, #188]	; (80069d8 <mtx6_execute+0xc8>)
 800691a:	689e      	ldr	r6, [r3, #8]
 800691c:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <mtx6_execute+0xcc>)
 800691e:	6838      	ldr	r0, [r7, #0]
 8006920:	4c2f      	ldr	r4, [pc, #188]	; (80069e0 <mtx6_execute+0xd0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8006922:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006924:	1c72      	adds	r2, r6, #1
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800692c:	462b      	mov	r3, r5
 800692e:	f7fa fd07 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	492b      	ldr	r1, [pc, #172]	; (80069e4 <mtx6_execute+0xd4>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006936:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006938:	1cb2      	adds	r2, r6, #2
 800693a:	9100      	str	r1, [sp, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006942:	462b      	mov	r3, r5
 8006944:	f7fa fcfc 	bl	8001340 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4927      	ldr	r1, [pc, #156]	; (80069e8 <mtx6_execute+0xd8>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800694c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 800694e:	1cf2      	adds	r2, r6, #3
 8006950:	9100      	str	r1, [sp, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006958:	462b      	mov	r3, r5
 800695a:	f7fa fcf1 	bl	8001340 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4922      	ldr	r1, [pc, #136]	; (80069ec <mtx6_execute+0xdc>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006962:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006964:	1d32      	adds	r2, r6, #4
 8006966:	9100      	str	r1, [sp, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800696e:	462b      	mov	r3, r5
 8006970:	f7fa fce6 	bl	8001340 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	491e      	ldr	r1, [pc, #120]	; (80069f0 <mtx6_execute+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006978:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800697a:	1d72      	adds	r2, r6, #5
 800697c:	9100      	str	r1, [sp, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006984:	462b      	mov	r3, r5
 8006986:	f7fa fcdb 	bl	8001340 <chThdCreateStatic>
 800698a:	2320      	movs	r3, #32
 800698c:	6120      	str	r0, [r4, #16]
 800698e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8006992:	4c18      	ldr	r4, [pc, #96]	; (80069f4 <mtx6_execute+0xe4>)
 8006994:	4620      	mov	r0, r4
 8006996:	f7fb f97b 	bl	8001c90 <chCondSignalI>
  chCondSignalI(&c1);
 800699a:	4620      	mov	r0, r4
 800699c:	f7fb f978 	bl	8001c90 <chCondSignalI>
  chCondSignalI(&c1);
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fb f975 	bl	8001c90 <chCondSignalI>
  chCondSignalI(&c1);
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7fb f972 	bl	8001c90 <chCondSignalI>
  chCondSignalI(&c1);
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7fb f96f 	bl	8001c90 <chCondSignalI>
  chSchRescheduleS();
 80069b2:	f7fa fc5d 	bl	8001270 <chSchRescheduleS>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 80069bc:	f7fe fed8 	bl	8005770 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80069c0:	490d      	ldr	r1, [pc, #52]	; (80069f8 <mtx6_execute+0xe8>)
 80069c2:	2001      	movs	r0, #1
}
 80069c4:	b003      	add	sp, #12
 80069c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80069ca:	f7fe be79 	b.w	80056c0 <_test_assert_sequence>
 80069ce:	bf00      	nop
 80069d0:	20000d18 	.word	0x20000d18
 80069d4:	0800a3f0 	.word	0x0800a3f0
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	0800a6d0 	.word	0x0800a6d0
 80069e0:	200018a8 	.word	0x200018a8
 80069e4:	0800b5b8 	.word	0x0800b5b8
 80069e8:	0800a6c0 	.word	0x0800a6c0
 80069ec:	0800a6c4 	.word	0x0800a6c4
 80069f0:	0800a6c8 	.word	0x0800a6c8
 80069f4:	20000834 	.word	0x20000834
 80069f8:	0800a6cc 	.word	0x0800a6cc
 80069fc:	00000000 	.word	0x00000000

08006a00 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8006a00:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8006a02:	4c08      	ldr	r4, [pc, #32]	; (8006a24 <thread10+0x24>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8006a04:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7fb f872 	bl	8001af0 <chMtxLock>
  chCondWait(&c1);
 8006a0c:	4806      	ldr	r0, [pc, #24]	; (8006a28 <thread10+0x28>)
 8006a0e:	f7fb f997 	bl	8001d40 <chCondWait>
  test_emit_token(*(char *)p);
 8006a12:	7828      	ldrb	r0, [r5, #0]
 8006a14:	f7fe fe2c 	bl	8005670 <test_emit_token>
  chMtxUnlock(&m1);
 8006a18:	4620      	mov	r0, r4
}
 8006a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8006a1e:	f7fb b88f 	b.w	8001b40 <chMtxUnlock>
 8006a22:	bf00      	nop
 8006a24:	20000814 	.word	0x20000814
 8006a28:	20000834 	.word	0x20000834
 8006a2c:	00000000 	.word	0x00000000

08006a30 <mtx7_setup>:
 * tester thread then proceeds to broadcast the conditional variable.<br>
 * The test expects the threads to reach their goal in increasing priority
 * order regardless of the initial order.
 */

static void mtx7_setup(void) {
 8006a30:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8006a32:	4804      	ldr	r0, [pc, #16]	; (8006a44 <mtx7_setup+0x14>)
 8006a34:	f7fb f90c 	bl	8001c50 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8006a38:	4803      	ldr	r0, [pc, #12]	; (8006a48 <mtx7_setup+0x18>)
}
 8006a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx7_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
 8006a3e:	f7fa bfe7 	b.w	8001a10 <chMtxObjectInit>
 8006a42:	bf00      	nop
 8006a44:	20000834 	.word	0x20000834
 8006a48:	20000814 	.word	0x20000814
 8006a4c:	00000000 	.word	0x00000000

08006a50 <mtx6_setup>:
 8006a50:	f7ff bfee 	b.w	8006a30 <mtx7_setup>
	...

08006a60 <mtx8_setup>:
 * This test case verifies the priority boost of a thread waiting on a
 * conditional variable queue. It tests this very specific situation in order
 * to complete the code coverage.
 */

static void mtx8_setup(void) {
 8006a60:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8006a62:	4805      	ldr	r0, [pc, #20]	; (8006a78 <mtx8_setup+0x18>)
 8006a64:	f7fb f8f4 	bl	8001c50 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8006a68:	4804      	ldr	r0, [pc, #16]	; (8006a7c <mtx8_setup+0x1c>)
 8006a6a:	f7fa ffd1 	bl	8001a10 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8006a6e:	4804      	ldr	r0, [pc, #16]	; (8006a80 <mtx8_setup+0x20>)
}
 8006a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

static void mtx8_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 8006a74:	f7fa bfcc 	b.w	8001a10 <chMtxObjectInit>
 8006a78:	20000834 	.word	0x20000834
 8006a7c:	20000814 	.word	0x20000814
 8006a80:	20000824 	.word	0x20000824
	...

08006a90 <mtx7_execute>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8006a90:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <mtx7_execute+0x94>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006a94:	4f24      	ldr	r7, [pc, #144]	; (8006b28 <mtx7_execute+0x98>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	4d24      	ldr	r5, [pc, #144]	; (8006b2c <mtx7_execute+0x9c>)
 8006a9a:	689e      	ldr	r6, [r3, #8]
 8006a9c:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <mtx7_execute+0xa0>)
 8006a9e:	6838      	ldr	r0, [r7, #0]
 8006aa0:	4c24      	ldr	r4, [pc, #144]	; (8006b34 <mtx7_execute+0xa4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8006aa2:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006aa4:	1c72      	adds	r2, r6, #1
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006aac:	462b      	mov	r3, r5
 8006aae:	f7fa fc47 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4920      	ldr	r1, [pc, #128]	; (8006b38 <mtx7_execute+0xa8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006ab6:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006ab8:	1cb2      	adds	r2, r6, #2
 8006aba:	9100      	str	r1, [sp, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	f7fa fc3c 	bl	8001340 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	491c      	ldr	r1, [pc, #112]	; (8006b3c <mtx7_execute+0xac>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006acc:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006ace:	1cf2      	adds	r2, r6, #3
 8006ad0:	9100      	str	r1, [sp, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006ad8:	462b      	mov	r3, r5
 8006ada:	f7fa fc31 	bl	8001340 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4917      	ldr	r1, [pc, #92]	; (8006b40 <mtx7_execute+0xb0>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006ae2:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006ae4:	1d32      	adds	r2, r6, #4
 8006ae6:	9100      	str	r1, [sp, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006aee:	462b      	mov	r3, r5
 8006af0:	f7fa fc26 	bl	8001340 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4913      	ldr	r1, [pc, #76]	; (8006b44 <mtx7_execute+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006af8:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8006afa:	1d72      	adds	r2, r6, #5
 8006afc:	9100      	str	r1, [sp, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b04:	462b      	mov	r3, r5
 8006b06:	f7fa fc1b 	bl	8001340 <chThdCreateStatic>
 8006b0a:	6120      	str	r0, [r4, #16]
  chCondBroadcast(&c1);
 8006b0c:	480e      	ldr	r0, [pc, #56]	; (8006b48 <mtx7_execute+0xb8>)
 8006b0e:	f7fb f8cf 	bl	8001cb0 <chCondBroadcast>
  test_wait_threads();
 8006b12:	f7fe fe2d 	bl	8005770 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8006b16:	490d      	ldr	r1, [pc, #52]	; (8006b4c <mtx7_execute+0xbc>)
 8006b18:	2001      	movs	r0, #1
}
 8006b1a:	b003      	add	sp, #12
 8006b1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8006b20:	f7fe bdce 	b.w	80056c0 <_test_assert_sequence>
 8006b24:	20000d18 	.word	0x20000d18
 8006b28:	0800a3f0 	.word	0x0800a3f0
 8006b2c:	08006a01 	.word	0x08006a01
 8006b30:	0800a6d0 	.word	0x0800a6d0
 8006b34:	200018a8 	.word	0x200018a8
 8006b38:	0800b5b8 	.word	0x0800b5b8
 8006b3c:	0800a6c0 	.word	0x0800a6c0
 8006b40:	0800a6c4 	.word	0x0800a6c4
 8006b44:	0800a6c8 	.word	0x0800a6c8
 8006b48:	20000834 	.word	0x20000834
 8006b4c:	0800a6cc 	.word	0x0800a6cc

08006b50 <mtx8_execute>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8006b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <mtx8_execute+0x70>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8006b54:	4e1b      	ldr	r6, [pc, #108]	; (8006bc4 <mtx8_execute+0x74>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	6830      	ldr	r0, [r6, #0]
 8006b5a:	689d      	ldr	r5, [r3, #8]
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <mtx8_execute+0x78>)
 8006b5e:	4c1b      	ldr	r4, [pc, #108]	; (8006bcc <mtx8_execute+0x7c>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
 8006b60:	4f1b      	ldr	r7, [pc, #108]	; (8006bd0 <mtx8_execute+0x80>)
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8006b62:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8006b64:	1c6a      	adds	r2, r5, #1
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <mtx8_execute+0x84>)
 8006b6e:	f7fa fbe7 	bl	8001340 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8006b72:	6871      	ldr	r1, [r6, #4]
 8006b74:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <mtx8_execute+0x88>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8006b76:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8006b78:	1caa      	adds	r2, r5, #2
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <mtx8_execute+0x8c>)
 8006b80:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b84:	f7fa fbdc 	bl	8001340 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8006b88:	68b1      	ldr	r1, [r6, #8]
 8006b8a:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <mtx8_execute+0x90>)

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8006b8c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8006b8e:	1cea      	adds	r2, r5, #3
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4608      	mov	r0, r1
 8006b94:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <mtx8_execute+0x94>)
 8006b96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b9a:	f7fa fbd1 	bl	8001340 <chThdCreateStatic>
 8006b9e:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7fb f85d 	bl	8001c60 <chCondSignal>
  chCondSignal(&c1);
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7fb f85a 	bl	8001c60 <chCondSignal>
  test_wait_threads();
 8006bac:	f7fe fde0 	bl	8005770 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8006bb0:	490d      	ldr	r1, [pc, #52]	; (8006be8 <mtx8_execute+0x98>)
 8006bb2:	2001      	movs	r0, #1
}
 8006bb4:	b003      	add	sp, #12
 8006bb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8006bba:	f7fe bd81 	b.w	80056c0 <_test_assert_sequence>
 8006bbe:	bf00      	nop
 8006bc0:	20000d18 	.word	0x20000d18
 8006bc4:	0800a3f0 	.word	0x0800a3f0
 8006bc8:	0800a6c8 	.word	0x0800a6c8
 8006bcc:	200018a8 	.word	0x200018a8
 8006bd0:	20000834 	.word	0x20000834
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	0800a6c0 	.word	0x0800a6c0
 8006bdc:	08006a01 	.word	0x08006a01
 8006be0:	0800a6c4 	.word	0x0800a6c4
 8006be4:	08006541 	.word	0x08006541
 8006be8:	0800a850 	.word	0x0800a850
 8006bec:	00000000 	.word	0x00000000

08006bf0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8006bf0:	b570      	push	{r4, r5, r6, lr}

  chMtxLock(&m2);
 8006bf2:	4c0c      	ldr	r4, [pc, #48]	; (8006c24 <thread11+0x34>)
  chMtxLock(&m1);
 8006bf4:	4d0c      	ldr	r5, [pc, #48]	; (8006c28 <thread11+0x38>)
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8006bf6:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7fa ff79 	bl	8001af0 <chMtxLock>
  chMtxLock(&m1);
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7fa ff76 	bl	8001af0 <chMtxLock>
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
 8006c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c08:	4808      	ldr	r0, [pc, #32]	; (8006c2c <thread11+0x3c>)
 8006c0a:	f7fb f8d1 	bl	8001db0 <chCondWaitTimeout>
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8006c0e:	7830      	ldrb	r0, [r6, #0]
 8006c10:	f7fe fd2e 	bl	8005670 <test_emit_token>
  chMtxUnlock(&m1);
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7fa ff93 	bl	8001b40 <chMtxUnlock>
  chMtxUnlock(&m2);
 8006c1a:	4620      	mov	r0, r4
}
 8006c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8006c20:	f7fa bf8e 	b.w	8001b40 <chMtxUnlock>
 8006c24:	20000824 	.word	0x20000824
 8006c28:	20000814 	.word	0x20000814
 8006c2c:	20000834 	.word	0x20000834

08006c30 <msg1_execute>:
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8006c30:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006c32:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <msg1_execute+0x64>)
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8006c34:	4b18      	ldr	r3, [pc, #96]	; (8006c98 <msg1_execute+0x68>)
 8006c36:	6991      	ldr	r1, [r2, #24]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	688a      	ldr	r2, [r1, #8]
 8006c3c:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <msg1_execute+0x6c>)
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8006c3e:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8006c40:	3201      	adds	r2, #1
 8006c42:	9100      	str	r1, [sp, #0]
 8006c44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c48:	f7fa fb7a 	bl	8001340 <chThdCreateStatic>
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <msg1_execute+0x70>)
 8006c4e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8006c50:	f7fb fa76 	bl	8002140 <chMsgWait>
 8006c54:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8006c56:	4621      	mov	r1, r4
 8006c58:	f7fb fa92 	bl	8002180 <chMsgRelease>
  test_emit_token(msg);
 8006c5c:	b2e0      	uxtb	r0, r4
 8006c5e:	f7fe fd07 	bl	8005670 <test_emit_token>
  tp = chMsgWait();
 8006c62:	f7fb fa6d 	bl	8002140 <chMsgWait>
 8006c66:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8006c68:	4621      	mov	r1, r4
 8006c6a:	f7fb fa89 	bl	8002180 <chMsgRelease>
  test_emit_token(msg);
 8006c6e:	b2e0      	uxtb	r0, r4
 8006c70:	f7fe fcfe 	bl	8005670 <test_emit_token>
  tp = chMsgWait();
 8006c74:	f7fb fa64 	bl	8002140 <chMsgWait>
 8006c78:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	f7fb fa80 	bl	8002180 <chMsgRelease>
  test_emit_token(msg);
 8006c80:	b2e0      	uxtb	r0, r4
 8006c82:	f7fe fcf5 	bl	8005670 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8006c86:	4907      	ldr	r1, [pc, #28]	; (8006ca4 <msg1_execute+0x74>)
 8006c88:	2001      	movs	r0, #1
}
 8006c8a:	b002      	add	sp, #8
 8006c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8006c90:	f7fe bd16 	b.w	80056c0 <_test_assert_sequence>
 8006c94:	20000d18 	.word	0x20000d18
 8006c98:	0800a3f0 	.word	0x0800a3f0
 8006c9c:	08006cb1 	.word	0x08006cb1
 8006ca0:	200018a8 	.word	0x200018a8
 8006ca4:	0800a850 	.word	0x0800a850
	...

08006cb0 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8006cb0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8006cb2:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8006cb4:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8006cb6:	f7fb fa23 	bl	8002100 <chMsgSend>
  chMsgSend(p, 'B');
 8006cba:	4620      	mov	r0, r4
 8006cbc:	2142      	movs	r1, #66	; 0x42
 8006cbe:	f7fb fa1f 	bl	8002100 <chMsgSend>
  chMsgSend(p, 'C');
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	2143      	movs	r1, #67	; 0x43
}
 8006cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8006cca:	f7fb ba19 	b.w	8002100 <chMsgSend>
 8006cce:	bf00      	nop

08006cd0 <mbox1_execute>:
static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}

static void mbox1_execute(void) {
 8006cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	4ecb      	ldr	r6, [pc, #812]	; (800700c <mbox1_execute+0x33c>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8006cde:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8006ce0:	f1a1 0105 	sub.w	r1, r1, #5
 8006ce4:	fab1 f181 	clz	r1, r1
 8006ce8:	2001      	movs	r0, #1
 8006cea:	0949      	lsrs	r1, r1, #5
 8006cec:	f7fe fcd0 	bl	8005690 <_test_assert>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f040 8118 	bne.w	8006f26 <mbox1_execute+0x256>
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8006cfc:	4dc3      	ldr	r5, [pc, #780]	; (800700c <mbox1_execute+0x33c>)
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7fb fa8b 	bl	8002220 <chMBPost>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8006d0a:	fab0 f180 	clz	r1, r0
 8006d0e:	0949      	lsrs	r1, r1, #5
 8006d10:	2002      	movs	r0, #2
 8006d12:	f7fe fcbd 	bl	8005690 <_test_assert>
 8006d16:	3401      	adds	r4, #1
 8006d18:	b980      	cbnz	r0, 8006d3c <mbox1_execute+0x6c>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8006d1a:	2c46      	cmp	r4, #70	; 0x46
 8006d1c:	d1ee      	bne.n	8006cfc <mbox1_execute+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8006d1e:	2141      	movs	r1, #65	; 0x41
 8006d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7fb fac3 	bl	80022b0 <chMBPostAhead>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8006d2a:	fab0 f180 	clz	r1, r0
 8006d2e:	0949      	lsrs	r1, r1, #5
 8006d30:	2003      	movs	r0, #3
 8006d32:	f7fe fcad 	bl	8005690 <_test_assert>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f000 80fb 	beq.w	8006f32 <mbox1_execute+0x262>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8006d3c:	b002      	add	sp, #8
 8006d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d42:	f385 8811 	msr	BASEPRI, r5
 8006d46:	f387 8811 	msr	BASEPRI, r7
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006d4a:	69a1      	ldr	r1, [r4, #24]
 8006d4c:	fab1 f181 	clz	r1, r1
 8006d50:	0949      	lsrs	r1, r1, #5
 8006d52:	201f      	movs	r0, #31
 8006d54:	f7fe fc9c 	bl	8005690 <_test_assert>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 829c 	bne.w	8007296 <mbox1_execute+0x5c6>
 8006d5e:	f385 8811 	msr	BASEPRI, r5
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006d62:	68e1      	ldr	r1, [r4, #12]
 8006d64:	68a3      	ldr	r3, [r4, #8]
 8006d66:	1acb      	subs	r3, r1, r3
 8006d68:	4259      	negs	r1, r3
 8006d6a:	4159      	adcs	r1, r3
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7fe fc8f 	bl	8005690 <_test_assert>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1e2      	bne.n	8006d3c <mbox1_execute+0x6c>
 8006d76:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8006d7a:	2145      	movs	r1, #69	; 0x45
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7fb fabf 	bl	8002300 <chMBPostAheadI>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8006d82:	fab0 f180 	clz	r1, r0
 8006d86:	0949      	lsrs	r1, r1, #5
 8006d88:	2021      	movs	r0, #33	; 0x21
 8006d8a:	f7fe fc81 	bl	8005690 <_test_assert>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d1d4      	bne.n	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8006d92:	2144      	movs	r1, #68	; 0x44
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7fb fab3 	bl	8002300 <chMBPostAheadI>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8006d9a:	fab0 f180 	clz	r1, r0
 8006d9e:	0949      	lsrs	r1, r1, #5
 8006da0:	2022      	movs	r0, #34	; 0x22
 8006da2:	f7fe fc75 	bl	8005690 <_test_assert>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d1c8      	bne.n	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8006daa:	2143      	movs	r1, #67	; 0x43
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fb faa7 	bl	8002300 <chMBPostAheadI>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8006db2:	fab0 f180 	clz	r1, r0
 8006db6:	0949      	lsrs	r1, r1, #5
 8006db8:	2023      	movs	r0, #35	; 0x23
 8006dba:	f7fe fc69 	bl	8005690 <_test_assert>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d1bc      	bne.n	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8006dc2:	2142      	movs	r1, #66	; 0x42
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7fb fa9b 	bl	8002300 <chMBPostAheadI>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8006dca:	fab0 f180 	clz	r1, r0
 8006dce:	0949      	lsrs	r1, r1, #5
 8006dd0:	2024      	movs	r0, #36	; 0x24
 8006dd2:	f7fe fc5d 	bl	8005690 <_test_assert>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d1b0      	bne.n	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8006dda:	4c8c      	ldr	r4, [pc, #560]	; (800700c <mbox1_execute+0x33c>)
 8006ddc:	2141      	movs	r1, #65	; 0x41
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7fb fa8e 	bl	8002300 <chMBPostAheadI>
 8006de4:	2300      	movs	r3, #0
 8006de6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8006dea:	fab0 f180 	clz	r1, r0
 8006dee:	0949      	lsrs	r1, r1, #5
 8006df0:	2025      	movs	r0, #37	; 0x25
 8006df2:	f7fe fc4d 	bl	8005690 <_test_assert>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1a0      	bne.n	8006d3c <mbox1_execute+0x6c>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006dfa:	68e1      	ldr	r1, [r4, #12]
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	ebc3 0801 	rsb	r8, r3, r1
 8006e02:	f1d8 0100 	rsbs	r1, r8, #0
 8006e06:	eb41 0108 	adc.w	r1, r1, r8
 8006e0a:	2026      	movs	r0, #38	; 0x26
 8006e0c:	f7fe fc40 	bl	8005690 <_test_assert>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d193      	bne.n	8006d3c <mbox1_execute+0x6c>
 8006e14:	4607      	mov	r7, r0
 8006e16:	2405      	movs	r4, #5
 8006e18:	f04f 0820 	mov.w	r8, #32
 8006e1c:	2620      	movs	r6, #32
 8006e1e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006e22:	4d7a      	ldr	r5, [pc, #488]	; (800700c <mbox1_execute+0x33c>)
 8006e24:	a901      	add	r1, sp, #4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7fb faaa 	bl	8002380 <chMBFetchI>
 8006e2c:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8006e30:	fab0 f180 	clz	r1, r0
 8006e34:	0949      	lsrs	r1, r1, #5
 8006e36:	2027      	movs	r0, #39	; 0x27
 8006e38:	f7fe fc2a 	bl	8005690 <_test_assert>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f47f af7d 	bne.w	8006d3c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8006e42:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006e46:	f7fe fc13 	bl	8005670 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8006e4a:	3c01      	subs	r4, #1
 8006e4c:	d1e6      	bne.n	8006e1c <mbox1_execute+0x14c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8006e4e:	4970      	ldr	r1, [pc, #448]	; (8007010 <mbox1_execute+0x340>)
 8006e50:	2028      	movs	r0, #40	; 0x28
 8006e52:	f7fe fc35 	bl	80056c0 <_test_assert_sequence>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f47f af70 	bne.w	8006d3c <mbox1_execute+0x6c>
 8006e5c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006e60:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006e62:	f1a1 0c05 	sub.w	ip, r1, #5
 8006e66:	f1dc 0100 	rsbs	r1, ip, #0
 8006e6a:	eb41 010c 	adc.w	r1, r1, ip
 8006e6e:	2029      	movs	r0, #41	; 0x29
 8006e70:	f7fe fc0e 	bl	8005690 <_test_assert>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f040 80c5 	bne.w	8007004 <mbox1_execute+0x334>
 8006e7a:	f384 8811 	msr	BASEPRI, r4
 8006e7e:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006e82:	69a9      	ldr	r1, [r5, #24]
 8006e84:	fab1 f181 	clz	r1, r1
 8006e88:	0949      	lsrs	r1, r1, #5
 8006e8a:	202a      	movs	r0, #42	; 0x2a
 8006e8c:	f7fe fc00 	bl	8005690 <_test_assert>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f040 80b7 	bne.w	8007004 <mbox1_execute+0x334>
 8006e96:	f384 8811 	msr	BASEPRI, r4
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006e9a:	68e9      	ldr	r1, [r5, #12]
 8006e9c:	68ab      	ldr	r3, [r5, #8]
 8006e9e:	ebc3 0e01 	rsb	lr, r3, r1
 8006ea2:	f1de 0100 	rsbs	r1, lr, #0
 8006ea6:	eb41 010e 	adc.w	r1, r1, lr
 8006eaa:	202b      	movs	r0, #43	; 0x2b
 8006eac:	f7fe fbf0 	bl	8005690 <_test_assert>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f47f af43 	bne.w	8006d3c <mbox1_execute+0x6c>

  /*
   * Testing reset.
   */
  chMBReset(&mb1);
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7fb f9a2 	bl	8002200 <chMBReset>
 8006ebc:	f386 8811 	msr	BASEPRI, r6

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006ec0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006ec2:	1f4f      	subs	r7, r1, #5
 8006ec4:	4279      	negs	r1, r7
 8006ec6:	4179      	adcs	r1, r7
 8006ec8:	202c      	movs	r0, #44	; 0x2c
 8006eca:	f7fe fbe1 	bl	8005690 <_test_assert>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f040 8098 	bne.w	8007004 <mbox1_execute+0x334>
 8006ed4:	f384 8811 	msr	BASEPRI, r4
 8006ed8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006edc:	69a9      	ldr	r1, [r5, #24]
 8006ede:	fab1 f181 	clz	r1, r1
 8006ee2:	0949      	lsrs	r1, r1, #5
 8006ee4:	202d      	movs	r0, #45	; 0x2d
 8006ee6:	f7fe fbd3 	bl	8005690 <_test_assert>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f040 808a 	bne.w	8007004 <mbox1_execute+0x334>
 8006ef0:	f384 8811 	msr	BASEPRI, r4
 8006ef4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8006ef8:	6829      	ldr	r1, [r5, #0]
 8006efa:	68ab      	ldr	r3, [r5, #8]
 8006efc:	1aca      	subs	r2, r1, r3
 8006efe:	4251      	negs	r1, r2
 8006f00:	4151      	adcs	r1, r2
 8006f02:	202e      	movs	r0, #46	; 0x2e
 8006f04:	f7fe fbc4 	bl	8005690 <_test_assert>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d17b      	bne.n	8007004 <mbox1_execute+0x334>
 8006f0c:	f384 8811 	msr	BASEPRI, r4
 8006f10:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8006f14:	6829      	ldr	r1, [r5, #0]
 8006f16:	68eb      	ldr	r3, [r5, #12]
 8006f18:	1acb      	subs	r3, r1, r3
 8006f1a:	4259      	negs	r1, r3
 8006f1c:	f04f 002f 	mov.w	r0, #47	; 0x2f
 8006f20:	4159      	adcs	r1, r3
 8006f22:	f7fe fbb5 	bl	8005690 <_test_assert>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f383 8811 	msr	BASEPRI, r3
}
 8006f2c:	b002      	add	sp, #8
 8006f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8006f32:	2201      	movs	r2, #1
 8006f34:	2158      	movs	r1, #88	; 0x58
 8006f36:	4628      	mov	r0, r5
 8006f38:	f7fb f972 	bl	8002220 <chMBPost>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006f3c:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8006f40:	fab1 f181 	clz	r1, r1
 8006f44:	0949      	lsrs	r1, r1, #5
 8006f46:	2004      	movs	r0, #4
 8006f48:	f7fe fba2 	bl	8005690 <_test_assert>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f47f aef4 	bne.w	8006d3c <mbox1_execute+0x6c>
 8006f54:	2720      	movs	r7, #32
 8006f56:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8006f5a:	2158      	movs	r1, #88	; 0x58
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7fb f987 	bl	8002270 <chMBPostI>
 8006f62:	4601      	mov	r1, r0
 8006f64:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006f68:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8006f6c:	fab1 f181 	clz	r1, r1
 8006f70:	2005      	movs	r0, #5
 8006f72:	0949      	lsrs	r1, r1, #5
 8006f74:	f7fe fb8c 	bl	8005690 <_test_assert>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f47f aedf 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8006f7e:	2201      	movs	r2, #1
 8006f80:	2158      	movs	r1, #88	; 0x58
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7fb f994 	bl	80022b0 <chMBPostAhead>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006f88:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8006f8c:	fab1 f181 	clz	r1, r1
 8006f90:	0949      	lsrs	r1, r1, #5
 8006f92:	2006      	movs	r0, #6
 8006f94:	f7fe fb7c 	bl	8005690 <_test_assert>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	f47f aece 	bne.w	8006d3c <mbox1_execute+0x6c>
 8006fa0:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8006fa4:	2158      	movs	r1, #88	; 0x58
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7fb f9aa 	bl	8002300 <chMBPostAheadI>
 8006fac:	4601      	mov	r1, r0
 8006fae:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006fb2:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8006fb6:	fab1 f181 	clz	r1, r1
 8006fba:	2007      	movs	r0, #7
 8006fbc:	0949      	lsrs	r1, r1, #5
 8006fbe:	f7fe fb67 	bl	8005690 <_test_assert>
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f47f aeb9 	bne.w	8006d3c <mbox1_execute+0x6c>
 8006fca:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006fce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006fd0:	fab1 f181 	clz	r1, r1
 8006fd4:	0949      	lsrs	r1, r1, #5
 8006fd6:	2008      	movs	r0, #8
 8006fd8:	f7fe fb5a 	bl	8005690 <_test_assert>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	b110      	cbz	r0, 8006fe6 <mbox1_execute+0x316>
 8006fe0:	f388 8811 	msr	BASEPRI, r8
 8006fe4:	e6aa      	b.n	8006d3c <mbox1_execute+0x6c>
 8006fe6:	f380 8811 	msr	BASEPRI, r0
 8006fea:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006fee:	69a9      	ldr	r1, [r5, #24]
 8006ff0:	f1a1 0e05 	sub.w	lr, r1, #5
 8006ff4:	f1de 0100 	rsbs	r1, lr, #0
 8006ff8:	eb41 010e 	adc.w	r1, r1, lr
 8006ffc:	2009      	movs	r0, #9
 8006ffe:	f7fe fb47 	bl	8005690 <_test_assert>
 8007002:	b138      	cbz	r0, 8007014 <mbox1_execute+0x344>
 8007004:	f384 8811 	msr	BASEPRI, r4
 8007008:	e698      	b.n	8006d3c <mbox1_execute+0x6c>
 800700a:	bf00      	nop
 800700c:	2000083c 	.word	0x2000083c
 8007010:	0800a6cc 	.word	0x0800a6cc
 8007014:	f380 8811 	msr	BASEPRI, r0
 8007018:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800701c:	68e9      	ldr	r1, [r5, #12]
 800701e:	68ab      	ldr	r3, [r5, #8]
 8007020:	1acc      	subs	r4, r1, r3
 8007022:	4261      	negs	r1, r4
 8007024:	f04f 000a 	mov.w	r0, #10
 8007028:	4161      	adcs	r1, r4
 800702a:	f7fe fb31 	bl	8005690 <_test_assert>
 800702e:	2300      	movs	r3, #0
 8007030:	2800      	cmp	r0, #0
 8007032:	f47f af79 	bne.w	8006f28 <mbox1_execute+0x258>
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	2505      	movs	r5, #5
 800703c:	e005      	b.n	800704a <mbox1_execute+0x37a>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800703e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007042:	f7fe fb15 	bl	8005670 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8007046:	3d01      	subs	r5, #1
 8007048:	d00f      	beq.n	800706a <mbox1_execute+0x39a>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 800704a:	4c94      	ldr	r4, [pc, #592]	; (800729c <mbox1_execute+0x5cc>)
 800704c:	a901      	add	r1, sp, #4
 800704e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007052:	4620      	mov	r0, r4
 8007054:	f7fb f96c 	bl	8002330 <chMBFetch>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8007058:	fab0 f180 	clz	r1, r0
 800705c:	0949      	lsrs	r1, r1, #5
 800705e:	200b      	movs	r0, #11
 8007060:	f7fe fb16 	bl	8005690 <_test_assert>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0ea      	beq.n	800703e <mbox1_execute+0x36e>
 8007068:	e668      	b.n	8006d3c <mbox1_execute+0x6c>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 800706a:	498d      	ldr	r1, [pc, #564]	; (80072a0 <mbox1_execute+0x5d0>)
 800706c:	200c      	movs	r0, #12
 800706e:	f7fe fb27 	bl	80056c0 <_test_assert_sequence>
 8007072:	2800      	cmp	r0, #0
 8007074:	f47f ae62 	bne.w	8006d3c <mbox1_execute+0x6c>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8007078:	2147      	movs	r1, #71	; 0x47
 800707a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707e:	4620      	mov	r0, r4
 8007080:	f7fb f8ce 	bl	8002220 <chMBPost>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8007084:	fab0 f180 	clz	r1, r0
 8007088:	0949      	lsrs	r1, r1, #5
 800708a:	200d      	movs	r0, #13
 800708c:	f7fe fb00 	bl	8005690 <_test_assert>
 8007090:	2800      	cmp	r0, #0
 8007092:	f47f ae53 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8007096:	a901      	add	r1, sp, #4
 8007098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800709c:	4620      	mov	r0, r4
 800709e:	f7fb f947 	bl	8002330 <chMBFetch>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80070a2:	fab0 f180 	clz	r1, r0
 80070a6:	0949      	lsrs	r1, r1, #5
 80070a8:	200e      	movs	r0, #14
 80070aa:	f7fe faf1 	bl	8005690 <_test_assert>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f47f ae44 	bne.w	8006d3c <mbox1_execute+0x6c>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80070b4:	6821      	ldr	r1, [r4, #0]
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	1aca      	subs	r2, r1, r3
 80070ba:	4251      	negs	r1, r2
 80070bc:	4151      	adcs	r1, r2
 80070be:	200f      	movs	r0, #15
 80070c0:	f7fe fae6 	bl	8005690 <_test_assert>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f47f ae39 	bne.w	8006d3c <mbox1_execute+0x6c>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80070ca:	6821      	ldr	r1, [r4, #0]
 80070cc:	68e3      	ldr	r3, [r4, #12]
 80070ce:	1acb      	subs	r3, r1, r3
 80070d0:	4259      	negs	r1, r3
 80070d2:	4159      	adcs	r1, r3
 80070d4:	2010      	movs	r0, #16
 80070d6:	f7fe fadb 	bl	8005690 <_test_assert>
 80070da:	2800      	cmp	r0, #0
 80070dc:	f47f ae2e 	bne.w	8006d3c <mbox1_execute+0x6c>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 80070e0:	a901      	add	r1, sp, #4
 80070e2:	2201      	movs	r2, #1
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7fb f923 	bl	8002330 <chMBFetch>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80070ea:	f100 0801 	add.w	r8, r0, #1
 80070ee:	f1d8 0100 	rsbs	r1, r8, #0
 80070f2:	eb41 0108 	adc.w	r1, r1, r8
 80070f6:	2011      	movs	r0, #17
 80070f8:	f7fe faca 	bl	8005690 <_test_assert>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f47f ae1d 	bne.w	8006d3c <mbox1_execute+0x6c>
 8007102:	2720      	movs	r7, #32
 8007104:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8007108:	a901      	add	r1, sp, #4
 800710a:	4620      	mov	r0, r4
 800710c:	f7fb f938 	bl	8002380 <chMBFetchI>
 8007110:	4601      	mov	r1, r0
 8007112:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8007116:	f101 0c01 	add.w	ip, r1, #1
 800711a:	f1dc 0100 	rsbs	r1, ip, #0
 800711e:	eb41 010c 	adc.w	r1, r1, ip
 8007122:	2012      	movs	r0, #18
 8007124:	f7fe fab4 	bl	8005690 <_test_assert>
 8007128:	2800      	cmp	r0, #0
 800712a:	f47f ae07 	bne.w	8006d3c <mbox1_execute+0x6c>
 800712e:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8007132:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007134:	f1a1 0e05 	sub.w	lr, r1, #5
 8007138:	f1de 0100 	rsbs	r1, lr, #0
 800713c:	eb41 010e 	adc.w	r1, r1, lr
 8007140:	2013      	movs	r0, #19
 8007142:	f7fe faa5 	bl	8005690 <_test_assert>
 8007146:	2800      	cmp	r0, #0
 8007148:	f47f aeed 	bne.w	8006f26 <mbox1_execute+0x256>
 800714c:	2700      	movs	r7, #0
 800714e:	f387 8811 	msr	BASEPRI, r7
 8007152:	2520      	movs	r5, #32
 8007154:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8007158:	69b1      	ldr	r1, [r6, #24]
 800715a:	4c50      	ldr	r4, [pc, #320]	; (800729c <mbox1_execute+0x5cc>)
 800715c:	fab1 f181 	clz	r1, r1
 8007160:	0949      	lsrs	r1, r1, #5
 8007162:	2014      	movs	r0, #20
 8007164:	f7fe fa94 	bl	8005690 <_test_assert>
 8007168:	4606      	mov	r6, r0
 800716a:	b110      	cbz	r0, 8007172 <mbox1_execute+0x4a2>
 800716c:	f387 8811 	msr	BASEPRI, r7
 8007170:	e5e4      	b.n	8006d3c <mbox1_execute+0x6c>
 8007172:	f380 8811 	msr	BASEPRI, r0
 8007176:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800717a:	68e1      	ldr	r1, [r4, #12]
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	1acf      	subs	r7, r1, r3
 8007180:	4279      	negs	r1, r7
 8007182:	4179      	adcs	r1, r7
 8007184:	2015      	movs	r0, #21
 8007186:	f7fe fa83 	bl	8005690 <_test_assert>
 800718a:	b110      	cbz	r0, 8007192 <mbox1_execute+0x4c2>
 800718c:	f386 8811 	msr	BASEPRI, r6
 8007190:	e5d4      	b.n	8006d3c <mbox1_execute+0x6c>
 8007192:	f380 8811 	msr	BASEPRI, r0
 8007196:	f385 8811 	msr	BASEPRI, r5

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 800719a:	2141      	movs	r1, #65	; 0x41
 800719c:	4620      	mov	r0, r4
 800719e:	f7fb f867 	bl	8002270 <chMBPostI>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 80071a2:	fab0 f180 	clz	r1, r0
 80071a6:	0949      	lsrs	r1, r1, #5
 80071a8:	2016      	movs	r0, #22
 80071aa:	f7fe fa71 	bl	8005690 <_test_assert>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f47f adc4 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'B');
 80071b4:	2142      	movs	r1, #66	; 0x42
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7fb f85a 	bl	8002270 <chMBPostI>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 80071bc:	fab0 f180 	clz	r1, r0
 80071c0:	0949      	lsrs	r1, r1, #5
 80071c2:	2017      	movs	r0, #23
 80071c4:	f7fe fa64 	bl	8005690 <_test_assert>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f47f adb7 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'C');
 80071ce:	2143      	movs	r1, #67	; 0x43
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7fb f84d 	bl	8002270 <chMBPostI>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80071d6:	fab0 f180 	clz	r1, r0
 80071da:	0949      	lsrs	r1, r1, #5
 80071dc:	2018      	movs	r0, #24
 80071de:	f7fe fa57 	bl	8005690 <_test_assert>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f47f adaa 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'D');
 80071e8:	2144      	movs	r1, #68	; 0x44
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7fb f840 	bl	8002270 <chMBPostI>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 80071f0:	fab0 f180 	clz	r1, r0
 80071f4:	0949      	lsrs	r1, r1, #5
 80071f6:	2019      	movs	r0, #25
 80071f8:	f7fe fa4a 	bl	8005690 <_test_assert>
 80071fc:	4606      	mov	r6, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f47f ad9c 	bne.w	8006d3c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'E');
 8007204:	2145      	movs	r1, #69	; 0x45
 8007206:	4620      	mov	r0, r4
 8007208:	f7fb f832 	bl	8002270 <chMBPostI>
 800720c:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8007210:	fab0 f180 	clz	r1, r0
 8007214:	0949      	lsrs	r1, r1, #5
 8007216:	201a      	movs	r0, #26
 8007218:	f7fe fa3a 	bl	8005690 <_test_assert>
 800721c:	2800      	cmp	r0, #0
 800721e:	f47f ad8d 	bne.w	8006d3c <mbox1_execute+0x6c>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8007222:	68e1      	ldr	r1, [r4, #12]
 8007224:	68a3      	ldr	r3, [r4, #8]
 8007226:	1acc      	subs	r4, r1, r3
 8007228:	4261      	negs	r1, r4
 800722a:	4161      	adcs	r1, r4
 800722c:	201b      	movs	r0, #27
 800722e:	f7fe fa2f 	bl	8005690 <_test_assert>
 8007232:	2800      	cmp	r0, #0
 8007234:	f47f ad82 	bne.w	8006d3c <mbox1_execute+0x6c>
 8007238:	462e      	mov	r6, r5
 800723a:	4680      	mov	r8, r0
 800723c:	2505      	movs	r5, #5
 800723e:	2720      	movs	r7, #32
 8007240:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8007244:	4c15      	ldr	r4, [pc, #84]	; (800729c <mbox1_execute+0x5cc>)
 8007246:	a901      	add	r1, sp, #4
 8007248:	4620      	mov	r0, r4
 800724a:	f7fb f899 	bl	8002380 <chMBFetchI>
 800724e:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8007252:	fab0 f180 	clz	r1, r0
 8007256:	0949      	lsrs	r1, r1, #5
 8007258:	201c      	movs	r0, #28
 800725a:	f7fe fa19 	bl	8005690 <_test_assert>
 800725e:	2800      	cmp	r0, #0
 8007260:	f47f ad6c 	bne.w	8006d3c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8007264:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007268:	f7fe fa02 	bl	8005670 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800726c:	3d01      	subs	r5, #1
 800726e:	d1e6      	bne.n	800723e <mbox1_execute+0x56e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8007270:	490b      	ldr	r1, [pc, #44]	; (80072a0 <mbox1_execute+0x5d0>)
 8007272:	201d      	movs	r0, #29
 8007274:	f7fe fa24 	bl	80056c0 <_test_assert_sequence>
 8007278:	2800      	cmp	r0, #0
 800727a:	f47f ad5f 	bne.w	8006d3c <mbox1_execute+0x6c>
 800727e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8007282:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007284:	1f4a      	subs	r2, r1, #5
 8007286:	4251      	negs	r1, r2
 8007288:	4151      	adcs	r1, r2
 800728a:	201e      	movs	r0, #30
 800728c:	f7fe fa00 	bl	8005690 <_test_assert>
 8007290:	2800      	cmp	r0, #0
 8007292:	f43f ad56 	beq.w	8006d42 <mbox1_execute+0x72>
 8007296:	f385 8811 	msr	BASEPRI, r5
 800729a:	e54f      	b.n	8006d3c <mbox1_execute+0x6c>
 800729c:	2000083c 	.word	0x2000083c
 80072a0:	0800a6cc 	.word	0x0800a6cc
	...

080072b0 <mbox1_setup>:
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
 80072b0:	2205      	movs	r2, #5
 80072b2:	4902      	ldr	r1, [pc, #8]	; (80072bc <mbox1_setup+0xc>)
 80072b4:	4802      	ldr	r0, [pc, #8]	; (80072c0 <mbox1_setup+0x10>)
 80072b6:	f7fa bf73 	b.w	80021a0 <chMBObjectInit>
 80072ba:	bf00      	nop
 80072bc:	20001220 	.word	0x20001220
 80072c0:	2000083c 	.word	0x2000083c
	...

080072d0 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80072d0:	2043      	movs	r0, #67	; 0x43
 80072d2:	f7fe b9cd 	b.w	8005670 <test_emit_token>
 80072d6:	bf00      	nop
	...

080072e0 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80072e0:	2042      	movs	r0, #66	; 0x42
 80072e2:	f7fe b9c5 	b.w	8005670 <test_emit_token>
 80072e6:	bf00      	nop
	...

080072f0 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 80072f0:	2041      	movs	r0, #65	; 0x41
 80072f2:	f7fe b9bd 	b.w	8005670 <test_emit_token>
 80072f6:	bf00      	nop
	...

08007300 <evt1_execute>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8007300:	b510      	push	{r4, lr}
 8007302:	4c1f      	ldr	r4, [pc, #124]	; (8007380 <evt1_execute+0x80>)
 8007304:	b08a      	sub	sp, #40	; 0x28
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8007306:	4620      	mov	r0, r4
 8007308:	4669      	mov	r1, sp
 800730a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800730e:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8007310:	6024      	str	r4, [r4, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8007312:	f7fa fd5d 	bl	8001dd0 <chEvtRegisterMaskWithFlags>
 8007316:	4620      	mov	r0, r4
 8007318:	a905      	add	r1, sp, #20
 800731a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731e:	2202      	movs	r2, #2
 8007320:	f7fa fd56 	bl	8001dd0 <chEvtRegisterMaskWithFlags>
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8007324:	6821      	ldr	r1, [r4, #0]
 8007326:	1b09      	subs	r1, r1, r4
 8007328:	bf18      	it	ne
 800732a:	2101      	movne	r1, #1
 800732c:	2001      	movs	r0, #1
 800732e:	f7fe f9af 	bl	8005690 <_test_assert>
 8007332:	b108      	cbz	r0, 8007338 <evt1_execute+0x38>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8007334:	b00a      	add	sp, #40	; 0x28
 8007336:	bd10      	pop	{r4, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8007338:	4669      	mov	r1, sp
 800733a:	4620      	mov	r0, r4
 800733c:	f7fa fd60 	bl	8001e00 <chEvtUnregister>
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8007340:	6821      	ldr	r1, [r4, #0]
 8007342:	1b09      	subs	r1, r1, r4
 8007344:	bf18      	it	ne
 8007346:	2101      	movne	r1, #1
 8007348:	2002      	movs	r0, #2
 800734a:	f7fe f9a1 	bl	8005690 <_test_assert>
 800734e:	2800      	cmp	r0, #0
 8007350:	d1f0      	bne.n	8007334 <evt1_execute+0x34>
  chEvtUnregister(&es1, &el2);
 8007352:	a905      	add	r1, sp, #20
 8007354:	4620      	mov	r0, r4
 8007356:	f7fa fd53 	bl	8001e00 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800735a:	6821      	ldr	r1, [r4, #0]
 800735c:	1b09      	subs	r1, r1, r4
 800735e:	fab1 f181 	clz	r1, r1
 8007362:	2003      	movs	r0, #3
 8007364:	0949      	lsrs	r1, r1, #5
 8007366:	f7fe f993 	bl	8005690 <_test_assert>
 800736a:	2800      	cmp	r0, #0
 800736c:	d1e2      	bne.n	8007334 <evt1_execute+0x34>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
 800736e:	2107      	movs	r1, #7
 8007370:	4804      	ldr	r0, [pc, #16]	; (8007384 <evt1_execute+0x84>)
 8007372:	f7fa fdcd 	bl	8001f10 <chEvtDispatch>
  test_assert_sequence(4, "ABC");
 8007376:	4904      	ldr	r1, [pc, #16]	; (8007388 <evt1_execute+0x88>)
 8007378:	2004      	movs	r0, #4
 800737a:	f7fe f9a1 	bl	80056c0 <_test_assert_sequence>
 800737e:	e7d9      	b.n	8007334 <evt1_execute+0x34>
 8007380:	20000864 	.word	0x20000864
 8007384:	0800aa30 	.word	0x0800aa30
 8007388:	0800a850 	.word	0x0800a850
 800738c:	00000000 	.word	0x00000000

08007390 <evt3_setup>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	f7fa bd4c 	b.w	8001e30 <chEvtGetAndClearEvents>
	...

080073a0 <evt2_setup>:
 80073a0:	f7ff bff6 	b.w	8007390 <evt3_setup>
	...

080073b0 <evt1_setup>:
 80073b0:	f7ff bfee 	b.w	8007390 <evt3_setup>
	...

080073c0 <evt2_execute>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80073c4:	2007      	movs	r0, #7
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80073c6:	b08d      	sub	sp, #52	; 0x34
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80073c8:	f7fa fd42 	bl	8001e50 <chEvtAddEvents>
  m = chEvtWaitOne(ALL_EVENTS);
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d0:	f7fa fdbe 	bl	8001f50 <chEvtWaitOne>
  test_assert(1, m == 1, "single event error");
 80073d4:	f1a0 0101 	sub.w	r1, r0, #1
 80073d8:	fab1 f181 	clz	r1, r1
 80073dc:	0949      	lsrs	r1, r1, #5
 80073de:	2001      	movs	r0, #1
 80073e0:	f7fe f956 	bl	8005690 <_test_assert>
 80073e4:	b110      	cbz	r0, 80073ec <evt2_execute+0x2c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80073e6:	b00d      	add	sp, #52	; 0x34
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f0:	f7fa fdae 	bl	8001f50 <chEvtWaitOne>
  test_assert(2, m == 2, "single event error");
 80073f4:	f1a0 0102 	sub.w	r1, r0, #2
 80073f8:	fab1 f181 	clz	r1, r1
 80073fc:	0949      	lsrs	r1, r1, #5
 80073fe:	2002      	movs	r0, #2
 8007400:	f7fe f946 	bl	8005690 <_test_assert>
 8007404:	2800      	cmp	r0, #0
 8007406:	d1ee      	bne.n	80073e6 <evt2_execute+0x26>
  m = chEvtWaitOne(ALL_EVENTS);
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740c:	f7fa fda0 	bl	8001f50 <chEvtWaitOne>
  test_assert(3, m == 4, "single event error");
 8007410:	f1a0 0104 	sub.w	r1, r0, #4
 8007414:	fab1 f181 	clz	r1, r1
 8007418:	0949      	lsrs	r1, r1, #5
 800741a:	2003      	movs	r0, #3
 800741c:	f7fe f938 	bl	8005690 <_test_assert>
 8007420:	2800      	cmp	r0, #0
 8007422:	d1e0      	bne.n	80073e6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007428:	f7fa fd02 	bl	8001e30 <chEvtGetAndClearEvents>
  test_assert(4, m == 0, "stuck event");
 800742c:	fab0 f180 	clz	r1, r0
 8007430:	0949      	lsrs	r1, r1, #5
 8007432:	2004      	movs	r0, #4
 8007434:	f7fe f92c 	bl	8005690 <_test_assert>
 8007438:	4604      	mov	r4, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d1d3      	bne.n	80073e6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 800743e:	f7fe f9af 	bl	80057a0 <test_wait_tick>
 8007442:	f04f 0920 	mov.w	r9, #32
 8007446:	f389 8811 	msr	BASEPRI, r9
 800744a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800744e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8007452:	f384 8811 	msr	BASEPRI, r4
 8007456:	4f76      	ldr	r7, [pc, #472]	; (8007630 <evt2_execute+0x270>)
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007458:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800764c <evt2_execute+0x28c>
 800745c:	69b9      	ldr	r1, [r7, #24]
 800745e:	f8da 6000 	ldr.w	r6, [sl]
 8007462:	688a      	ldr	r2, [r1, #8]
 8007464:	4b73      	ldr	r3, [pc, #460]	; (8007634 <evt2_execute+0x274>)
 8007466:	9100      	str	r1, [sp, #0]
 8007468:	3a01      	subs	r2, #1
 800746a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800746e:	4630      	mov	r0, r6
 8007470:	f7f9 ff66 	bl	8001340 <chThdCreateStatic>
 8007474:	4c70      	ldr	r4, [pc, #448]	; (8007638 <evt2_execute+0x278>)
 8007476:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8007478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800747c:	f7fa fd68 	bl	8001f50 <chEvtWaitOne>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8007480:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8007484:	4683      	mov	fp, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8007486:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 800748a:	2005      	movs	r0, #5
 800748c:	f7fe f940 	bl	8005710 <_test_assert_time_window>
 8007490:	2800      	cmp	r0, #0
 8007492:	d1a8      	bne.n	80073e6 <evt2_execute+0x26>
  test_assert(6, m == 1, "single event error");
 8007494:	f1ab 0101 	sub.w	r1, fp, #1
 8007498:	fab1 f181 	clz	r1, r1
 800749c:	0949      	lsrs	r1, r1, #5
 800749e:	2006      	movs	r0, #6
 80074a0:	f7fe f8f6 	bl	8005690 <_test_assert>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d19e      	bne.n	80073e6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ac:	f7fa fcc0 	bl	8001e30 <chEvtGetAndClearEvents>
  test_assert(7, m == 0, "stuck event");
 80074b0:	fab0 f180 	clz	r1, r0
 80074b4:	0949      	lsrs	r1, r1, #5
 80074b6:	2007      	movs	r0, #7
 80074b8:	f7fe f8ea 	bl	8005690 <_test_assert>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d192      	bne.n	80073e6 <evt2_execute+0x26>
  test_wait_threads();
 80074c0:	f7fe f956 	bl	8005770 <test_wait_threads>

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
 80074c4:	2005      	movs	r0, #5
 80074c6:	f7fa fcc3 	bl	8001e50 <chEvtAddEvents>
  m = chEvtWaitAny(ALL_EVENTS);
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ce:	f7fa fd5f 	bl	8001f90 <chEvtWaitAny>
  test_assert(8, m == 5, "unexpected pending bit");
 80074d2:	1f45      	subs	r5, r0, #5
 80074d4:	4269      	negs	r1, r5
 80074d6:	4169      	adcs	r1, r5
 80074d8:	2008      	movs	r0, #8
 80074da:	f7fe f8d9 	bl	8005690 <_test_assert>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d181      	bne.n	80073e6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e6:	f7fa fca3 	bl	8001e30 <chEvtGetAndClearEvents>
  test_assert(9, m == 0, "stuck event");
 80074ea:	fab0 f180 	clz	r1, r0
 80074ee:	0949      	lsrs	r1, r1, #5
 80074f0:	2009      	movs	r0, #9
 80074f2:	f7fe f8cd 	bl	8005690 <_test_assert>
 80074f6:	4683      	mov	fp, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f47f af74 	bne.w	80073e6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80074fe:	f7fe f94f 	bl	80057a0 <test_wait_tick>
 8007502:	f389 8811 	msr	BASEPRI, r9
 8007506:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 800750a:	f38b 8811 	msr	BASEPRI, fp
 800750e:	69b9      	ldr	r1, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007510:	4b48      	ldr	r3, [pc, #288]	; (8007634 <evt2_execute+0x274>)
 8007512:	688a      	ldr	r2, [r1, #8]
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	3a01      	subs	r2, #1
 8007518:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800751c:	4630      	mov	r0, r6
 800751e:	f7f9 ff0f 	bl	8001340 <chThdCreateStatic>
 8007522:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8007524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007528:	f7fa fd32 	bl	8001f90 <chEvtWaitAny>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800752c:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8007530:	4606      	mov	r6, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8007532:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 8007536:	200a      	movs	r0, #10
 8007538:	f7fe f8ea 	bl	8005710 <_test_assert_time_window>
 800753c:	2800      	cmp	r0, #0
 800753e:	f47f af52 	bne.w	80073e6 <evt2_execute+0x26>
  test_assert(11, m == 1, "single event error");
 8007542:	1e70      	subs	r0, r6, #1
 8007544:	4241      	negs	r1, r0
 8007546:	4141      	adcs	r1, r0
 8007548:	200b      	movs	r0, #11
 800754a:	f7fe f8a1 	bl	8005690 <_test_assert>
 800754e:	2800      	cmp	r0, #0
 8007550:	f47f af49 	bne.w	80073e6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007558:	f7fa fc6a 	bl	8001e30 <chEvtGetAndClearEvents>
  test_assert(12, m == 0, "stuck event");
 800755c:	fab0 f180 	clz	r1, r0
 8007560:	0949      	lsrs	r1, r1, #5
 8007562:	200c      	movs	r0, #12
 8007564:	f7fe f894 	bl	8005690 <_test_assert>
 8007568:	4681      	mov	r9, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	f47f af3b 	bne.w	80073e6 <evt2_execute+0x26>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8007570:	4e32      	ldr	r6, [pc, #200]	; (800763c <evt2_execute+0x27c>)
 8007572:	4d33      	ldr	r5, [pc, #204]	; (8007640 <evt2_execute+0x280>)
  test_wait_threads();
 8007574:	f7fe f8fc 	bl	8005770 <test_wait_threads>
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8007578:	4630      	mov	r0, r6
 800757a:	a902      	add	r1, sp, #8
 800757c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007580:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8007582:	6036      	str	r6, [r6, #0]
 8007584:	602d      	str	r5, [r5, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8007586:	f7fa fc23 	bl	8001dd0 <chEvtRegisterMaskWithFlags>
 800758a:	4628      	mov	r0, r5
 800758c:	a907      	add	r1, sp, #28
 800758e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007592:	2204      	movs	r2, #4
 8007594:	f7fa fc1c 	bl	8001dd0 <chEvtRegisterMaskWithFlags>
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8007598:	f7fe f902 	bl	80057a0 <test_wait_tick>
 800759c:	2320      	movs	r3, #32
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
 80075a6:	f389 8811 	msr	BASEPRI, r9
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80075aa:	69ba      	ldr	r2, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80075ac:	4b25      	ldr	r3, [pc, #148]	; (8007644 <evt2_execute+0x284>)
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	f8da 0000 	ldr.w	r0, [sl]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	3a01      	subs	r2, #1
 80075b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80075bc:	4b22      	ldr	r3, [pc, #136]	; (8007648 <evt2_execute+0x288>)
 80075be:	f7f9 febf 	bl	8001340 <chThdCreateStatic>
 80075c2:	6020      	str	r0, [r4, #0]
                                 thread2, "A");
  m = chEvtWaitAll(5);
 80075c4:	2005      	movs	r0, #5
 80075c6:	f7fa fd03 	bl	8001fd0 <chEvtWaitAll>
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80075ca:	f208 2226 	addw	r2, r8, #550	; 0x226
 80075ce:	f508 71fa 	add.w	r1, r8, #500	; 0x1f4
 80075d2:	200d      	movs	r0, #13
 80075d4:	f7fe f89c 	bl	8005710 <_test_assert_time_window>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f47f af04 	bne.w	80073e6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80075de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e2:	f7fa fc25 	bl	8001e30 <chEvtGetAndClearEvents>
  test_assert(14, m == 0, "stuck event");
 80075e6:	fab0 f180 	clz	r1, r0
 80075ea:	0949      	lsrs	r1, r1, #5
 80075ec:	200e      	movs	r0, #14
 80075ee:	f7fe f84f 	bl	8005690 <_test_assert>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f47f aef7 	bne.w	80073e6 <evt2_execute+0x26>
  test_wait_threads();
 80075f8:	f7fe f8ba 	bl	8005770 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80075fc:	a902      	add	r1, sp, #8
 80075fe:	4630      	mov	r0, r6
 8007600:	f7fa fbfe 	bl	8001e00 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8007604:	a907      	add	r1, sp, #28
 8007606:	4628      	mov	r0, r5
 8007608:	f7fa fbfa 	bl	8001e00 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800760c:	6831      	ldr	r1, [r6, #0]
 800760e:	1b8a      	subs	r2, r1, r6
 8007610:	4251      	negs	r1, r2
 8007612:	4151      	adcs	r1, r2
 8007614:	200f      	movs	r0, #15
 8007616:	f7fe f83b 	bl	8005690 <_test_assert>
 800761a:	2800      	cmp	r0, #0
 800761c:	f47f aee3 	bne.w	80073e6 <evt2_execute+0x26>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8007620:	6829      	ldr	r1, [r5, #0]
 8007622:	1b4b      	subs	r3, r1, r5
 8007624:	4259      	negs	r1, r3
 8007626:	4159      	adcs	r1, r3
 8007628:	2010      	movs	r0, #16
 800762a:	f7fe f831 	bl	8005690 <_test_assert>
 800762e:	e6da      	b.n	80073e6 <evt2_execute+0x26>
 8007630:	20000d18 	.word	0x20000d18
 8007634:	08007681 	.word	0x08007681
 8007638:	200018a8 	.word	0x200018a8
 800763c:	20000864 	.word	0x20000864
 8007640:	20000868 	.word	0x20000868
 8007644:	0800a6c8 	.word	0x0800a6c8
 8007648:	08007651 	.word	0x08007651
 800764c:	0800a3f0 	.word	0x0800a3f0

08007650 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8007650:	b508      	push	{r3, lr}
 *
 * @api
 */
static inline void chEvtBroadcast(event_source_t *esp) {

  chEvtBroadcastFlags(esp, (eventflags_t)0);
 8007652:	2100      	movs	r1, #0
 8007654:	4806      	ldr	r0, [pc, #24]	; (8007670 <thread2+0x20>)
 8007656:	f7fa fc4b 	bl	8001ef0 <chEvtBroadcastFlags>

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 800765a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800765e:	f7f9 fedf 	bl	8001420 <chThdSleep>
 8007662:	2100      	movs	r1, #0
 8007664:	4803      	ldr	r0, [pc, #12]	; (8007674 <thread2+0x24>)
  chEvtBroadcast(&es2);
}
 8007666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800766a:	f7fa bc41 	b.w	8001ef0 <chEvtBroadcastFlags>
 800766e:	bf00      	nop
 8007670:	20000864 	.word	0x20000864
 8007674:	20000868 	.word	0x20000868
	...

08007680 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8007680:	b510      	push	{r4, lr}
 8007682:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8007684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007688:	f7f9 feca 	bl	8001420 <chThdSleep>
  chEvtSignal((thread_t *)p, 1);
 800768c:	4620      	mov	r0, r4
 800768e:	2101      	movs	r1, #1
}
 8007690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
 8007694:	f7fa bc1c 	b.w	8001ed0 <chEvtSignal>
	...

080076a0 <evt3_execute>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 80076a0:	b508      	push	{r3, lr}
  eventmask_t m;

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80076a2:	2100      	movs	r1, #0
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a8:	f7fa fcb2 	bl	8002010 <chEvtWaitOneTimeout>
  test_assert(1, m == 0, "spurious event");
 80076ac:	fab0 f180 	clz	r1, r0
 80076b0:	0949      	lsrs	r1, r1, #5
 80076b2:	2001      	movs	r0, #1
 80076b4:	f7fd ffec 	bl	8005690 <_test_assert>
 80076b8:	b100      	cbz	r0, 80076bc <evt3_execute+0x1c>
 80076ba:	bd08      	pop	{r3, pc}
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80076bc:	4601      	mov	r1, r0
 80076be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c2:	f7fa fccd 	bl	8002060 <chEvtWaitAnyTimeout>
  test_assert(2, m == 0, "spurious event");
 80076c6:	fab0 f180 	clz	r1, r0
 80076ca:	0949      	lsrs	r1, r1, #5
 80076cc:	2002      	movs	r0, #2
 80076ce:	f7fd ffdf 	bl	8005690 <_test_assert>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1f1      	bne.n	80076ba <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80076d6:	4601      	mov	r1, r0
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076dc:	f7fa fce8 	bl	80020b0 <chEvtWaitAllTimeout>
  test_assert(3, m == 0, "spurious event");
 80076e0:	fab0 f180 	clz	r1, r0
 80076e4:	0949      	lsrs	r1, r1, #5
 80076e6:	2003      	movs	r0, #3
 80076e8:	f7fd ffd2 	bl	8005690 <_test_assert>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1e4      	bne.n	80076ba <evt3_execute+0x1a>
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
 80076f0:	210a      	movs	r1, #10
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f6:	f7fa fc8b 	bl	8002010 <chEvtWaitOneTimeout>
  test_assert(4, m == 0, "spurious event");
 80076fa:	fab0 f180 	clz	r1, r0
 80076fe:	0949      	lsrs	r1, r1, #5
 8007700:	2004      	movs	r0, #4
 8007702:	f7fd ffc5 	bl	8005690 <_test_assert>
 8007706:	2800      	cmp	r0, #0
 8007708:	d1d7      	bne.n	80076ba <evt3_execute+0x1a>
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
 800770a:	210a      	movs	r1, #10
 800770c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007710:	f7fa fca6 	bl	8002060 <chEvtWaitAnyTimeout>
  test_assert(5, m == 0, "spurious event");
 8007714:	fab0 f180 	clz	r1, r0
 8007718:	0949      	lsrs	r1, r1, #5
 800771a:	2005      	movs	r0, #5
 800771c:	f7fd ffb8 	bl	8005690 <_test_assert>
 8007720:	2800      	cmp	r0, #0
 8007722:	d1ca      	bne.n	80076ba <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
 8007724:	210a      	movs	r1, #10
 8007726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800772a:	f7fa fcc1 	bl	80020b0 <chEvtWaitAllTimeout>
  test_assert(6, m == 0, "spurious event");
 800772e:	fab0 f180 	clz	r1, r0
 8007732:	0949      	lsrs	r1, r1, #5
 8007734:	2006      	movs	r0, #6
}
 8007736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 800773a:	f7fd bfa9 	b.w	8005690 <_test_assert>
 800773e:	bf00      	nop

08007740 <heap1_execute>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	b082      	sub	sp, #8
  void *p1, *p2, *p3;
  size_t n, sz;

  /* Unrelated, for coverage only.*/
  (void)chCoreGetStatusX();
 8007744:	f7fa ffcc 	bl	80026e0 <chCoreGetStatusX>

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8007748:	a901      	add	r1, sp, #4
 800774a:	2000      	movs	r0, #0
 800774c:	f7fb f890 	bl	8002870 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8007750:	2110      	movs	r1, #16
 8007752:	2000      	movs	r0, #0
 8007754:	f7fa fff4 	bl	8002740 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8007758:	1c01      	adds	r1, r0, #0
 800775a:	4605      	mov	r5, r0
 800775c:	bf18      	it	ne
 800775e:	2101      	movne	r1, #1
 8007760:	2001      	movs	r0, #1
 8007762:	f7fd ff95 	bl	8005690 <_test_assert>
 8007766:	b108      	cbz	r0, 800776c <heap1_execute+0x2c>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8007768:	b002      	add	sp, #8
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	4604      	mov	r4, r0
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800776e:	4628      	mov	r0, r5
 8007770:	f7fb f82e 	bl	80027d0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8007774:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8007778:	4620      	mov	r0, r4
 800777a:	f7fa ffe1 	bl	8002740 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800777e:	fab0 f180 	clz	r1, r0
 8007782:	0949      	lsrs	r1, r1, #5
 8007784:	2002      	movs	r0, #2
 8007786:	f7fd ff83 	bl	8005690 <_test_assert>
 800778a:	2800      	cmp	r0, #0
 800778c:	d1ec      	bne.n	8007768 <heap1_execute+0x28>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800778e:	a901      	add	r1, sp, #4
 8007790:	487b      	ldr	r0, [pc, #492]	; (8007980 <heap1_execute+0x240>)
 8007792:	f7fb f86d 	bl	8002870 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8007796:	2110      	movs	r1, #16
 8007798:	4879      	ldr	r0, [pc, #484]	; (8007980 <heap1_execute+0x240>)
 800779a:	f7fa ffd1 	bl	8002740 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800779e:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80077a0:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80077a2:	4877      	ldr	r0, [pc, #476]	; (8007980 <heap1_execute+0x240>)
 80077a4:	f7fa ffcc 	bl	8002740 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80077a8:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80077aa:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80077ac:	4874      	ldr	r0, [pc, #464]	; (8007980 <heap1_execute+0x240>)
 80077ae:	f7fa ffc7 	bl	8002740 <chHeapAlloc>
 80077b2:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7fb f80b 	bl	80027d0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7fb f808 	bl	80027d0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7fb f805 	bl	80027d0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80077c6:	4669      	mov	r1, sp
 80077c8:	486d      	ldr	r0, [pc, #436]	; (8007980 <heap1_execute+0x240>)
 80077ca:	f7fb f851 	bl	8002870 <chHeapStatus>
 80077ce:	f1a0 0101 	sub.w	r1, r0, #1
 80077d2:	fab1 f181 	clz	r1, r1
 80077d6:	0949      	lsrs	r1, r1, #5
 80077d8:	2003      	movs	r0, #3
 80077da:	f7fd ff59 	bl	8005690 <_test_assert>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d1c2      	bne.n	8007768 <heap1_execute+0x28>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80077e2:	2110      	movs	r1, #16
 80077e4:	4866      	ldr	r0, [pc, #408]	; (8007980 <heap1_execute+0x240>)
 80077e6:	f7fa ffab 	bl	8002740 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80077ea:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80077ec:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80077ee:	4864      	ldr	r0, [pc, #400]	; (8007980 <heap1_execute+0x240>)
 80077f0:	f7fa ffa6 	bl	8002740 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80077f4:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80077f6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80077f8:	4861      	ldr	r0, [pc, #388]	; (8007980 <heap1_execute+0x240>)
 80077fa:	f7fa ffa1 	bl	8002740 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 80077fe:	f7fa ffe7 	bl	80027d0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8007802:	4628      	mov	r0, r5
 8007804:	f7fa ffe4 	bl	80027d0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8007808:	4620      	mov	r0, r4
 800780a:	f7fa ffe1 	bl	80027d0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800780e:	4669      	mov	r1, sp
 8007810:	485b      	ldr	r0, [pc, #364]	; (8007980 <heap1_execute+0x240>)
 8007812:	f7fb f82d 	bl	8002870 <chHeapStatus>
 8007816:	f1a0 0101 	sub.w	r1, r0, #1
 800781a:	fab1 f181 	clz	r1, r1
 800781e:	0949      	lsrs	r1, r1, #5
 8007820:	2004      	movs	r0, #4
 8007822:	f7fd ff35 	bl	8005690 <_test_assert>
 8007826:	2800      	cmp	r0, #0
 8007828:	d19e      	bne.n	8007768 <heap1_execute+0x28>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 800782a:	2111      	movs	r1, #17
 800782c:	4854      	ldr	r0, [pc, #336]	; (8007980 <heap1_execute+0x240>)
 800782e:	f7fa ff87 	bl	8002740 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8007832:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8007834:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8007836:	4852      	ldr	r0, [pc, #328]	; (8007980 <heap1_execute+0x240>)
 8007838:	f7fa ff82 	bl	8002740 <chHeapAlloc>
 800783c:	4605      	mov	r5, r0
  chHeapFree(p1);
 800783e:	4620      	mov	r0, r4
 8007840:	f7fa ffc6 	bl	80027d0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8007844:	4669      	mov	r1, sp
 8007846:	484e      	ldr	r0, [pc, #312]	; (8007980 <heap1_execute+0x240>)
 8007848:	f7fb f812 	bl	8002870 <chHeapStatus>
 800784c:	f1a0 0102 	sub.w	r1, r0, #2
 8007850:	fab1 f181 	clz	r1, r1
 8007854:	0949      	lsrs	r1, r1, #5
 8007856:	2005      	movs	r0, #5
 8007858:	f7fd ff1a 	bl	8005690 <_test_assert>
 800785c:	2800      	cmp	r0, #0
 800785e:	d183      	bne.n	8007768 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8007860:	2110      	movs	r1, #16
 8007862:	4847      	ldr	r0, [pc, #284]	; (8007980 <heap1_execute+0x240>)
 8007864:	f7fa ff6c 	bl	8002740 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8007868:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 800786a:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 800786c:	4844      	ldr	r0, [pc, #272]	; (8007980 <heap1_execute+0x240>)
 800786e:	f7fa ffff 	bl	8002870 <chHeapStatus>
 8007872:	2801      	cmp	r0, #1
 8007874:	f000 8081 	beq.w	800797a <heap1_execute+0x23a>
 8007878:	4669      	mov	r1, sp
 800787a:	4841      	ldr	r0, [pc, #260]	; (8007980 <heap1_execute+0x240>)
 800787c:	f7fa fff8 	bl	8002870 <chHeapStatus>
 8007880:	f1a0 0102 	sub.w	r1, r0, #2
 8007884:	fab1 f181 	clz	r1, r1
 8007888:	0949      	lsrs	r1, r1, #5
 800788a:	2006      	movs	r0, #6
 800788c:	f7fd ff00 	bl	8005690 <_test_assert>
 8007890:	2800      	cmp	r0, #0
 8007892:	f47f af69 	bne.w	8007768 <heap1_execute+0x28>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8007896:	4628      	mov	r0, r5
 8007898:	f7fa ff9a 	bl	80027d0 <chHeapFree>
  chHeapFree(p1);
 800789c:	4620      	mov	r0, r4
 800789e:	f7fa ff97 	bl	80027d0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80078a2:	4669      	mov	r1, sp
 80078a4:	4836      	ldr	r0, [pc, #216]	; (8007980 <heap1_execute+0x240>)
 80078a6:	f7fa ffe3 	bl	8002870 <chHeapStatus>
 80078aa:	1e46      	subs	r6, r0, #1
 80078ac:	4271      	negs	r1, r6
 80078ae:	4171      	adcs	r1, r6
 80078b0:	2007      	movs	r0, #7
 80078b2:	f7fd feed 	bl	8005690 <_test_assert>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f47f af56 	bne.w	8007768 <heap1_execute+0x28>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80078bc:	2110      	movs	r1, #16
 80078be:	4830      	ldr	r0, [pc, #192]	; (8007980 <heap1_execute+0x240>)
 80078c0:	f7fa ff3e 	bl	8002740 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80078c4:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80078c6:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80078c8:	482d      	ldr	r0, [pc, #180]	; (8007980 <heap1_execute+0x240>)
 80078ca:	f7fa ff39 	bl	8002740 <chHeapAlloc>
 80078ce:	4604      	mov	r4, r0
  chHeapFree(p1);
 80078d0:	4628      	mov	r0, r5
 80078d2:	f7fa ff7d 	bl	80027d0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80078d6:	4669      	mov	r1, sp
 80078d8:	4829      	ldr	r0, [pc, #164]	; (8007980 <heap1_execute+0x240>)
 80078da:	f7fa ffc9 	bl	8002870 <chHeapStatus>
 80078de:	1e85      	subs	r5, r0, #2
 80078e0:	4269      	negs	r1, r5
 80078e2:	4169      	adcs	r1, r5
 80078e4:	2008      	movs	r0, #8
 80078e6:	f7fd fed3 	bl	8005690 <_test_assert>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f47f af3c 	bne.w	8007768 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 80078f0:	2120      	movs	r1, #32
 80078f2:	4823      	ldr	r0, [pc, #140]	; (8007980 <heap1_execute+0x240>)
 80078f4:	f7fa ff24 	bl	8002740 <chHeapAlloc>
  chHeapFree(p1);
 80078f8:	f7fa ff6a 	bl	80027d0 <chHeapFree>
  chHeapFree(p2);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7fa ff67 	bl	80027d0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8007902:	4669      	mov	r1, sp
 8007904:	481e      	ldr	r0, [pc, #120]	; (8007980 <heap1_execute+0x240>)
 8007906:	f7fa ffb3 	bl	8002870 <chHeapStatus>
 800790a:	3801      	subs	r0, #1
 800790c:	4241      	negs	r1, r0
 800790e:	4141      	adcs	r1, r0
 8007910:	2009      	movs	r0, #9
 8007912:	f7fd febd 	bl	8005690 <_test_assert>
 8007916:	2800      	cmp	r0, #0
 8007918:	f47f af26 	bne.w	8007768 <heap1_execute+0x28>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 800791c:	4669      	mov	r1, sp
 800791e:	4818      	ldr	r0, [pc, #96]	; (8007980 <heap1_execute+0x240>)
 8007920:	f7fa ffa6 	bl	8002870 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8007924:	9900      	ldr	r1, [sp, #0]
 8007926:	4816      	ldr	r0, [pc, #88]	; (8007980 <heap1_execute+0x240>)
 8007928:	f7fa ff0a 	bl	8002740 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800792c:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800792e:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8007930:	4813      	ldr	r0, [pc, #76]	; (8007980 <heap1_execute+0x240>)
 8007932:	f7fa ff9d 	bl	8002870 <chHeapStatus>
 8007936:	fab0 f180 	clz	r1, r0
 800793a:	0949      	lsrs	r1, r1, #5
 800793c:	200a      	movs	r0, #10
 800793e:	f7fd fea7 	bl	8005690 <_test_assert>
 8007942:	2800      	cmp	r0, #0
 8007944:	f47f af10 	bne.w	8007768 <heap1_execute+0x28>
  chHeapFree(p1);
 8007948:	4620      	mov	r0, r4
 800794a:	f7fa ff41 	bl	80027d0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800794e:	4669      	mov	r1, sp
 8007950:	480b      	ldr	r0, [pc, #44]	; (8007980 <heap1_execute+0x240>)
 8007952:	f7fa ff8d 	bl	8002870 <chHeapStatus>
 8007956:	1e42      	subs	r2, r0, #1
 8007958:	4251      	negs	r1, r2
 800795a:	4151      	adcs	r1, r2
 800795c:	200b      	movs	r0, #11
 800795e:	f7fd fe97 	bl	8005690 <_test_assert>
 8007962:	2800      	cmp	r0, #0
 8007964:	f47f af00 	bne.w	8007768 <heap1_execute+0x28>
  test_assert(12, n == sz, "size changed");
 8007968:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800796c:	1acb      	subs	r3, r1, r3
 800796e:	4259      	negs	r1, r3
 8007970:	4159      	adcs	r1, r3
 8007972:	200c      	movs	r0, #12
 8007974:	f7fd fe8c 	bl	8005690 <_test_assert>
 8007978:	e6f6      	b.n	8007768 <heap1_execute+0x28>
 800797a:	4601      	mov	r1, r0
 800797c:	e785      	b.n	800788a <heap1_execute+0x14a>
 800797e:	bf00      	nop
 8007980:	200018d8 	.word	0x200018d8
	...

08007990 <heap1_setup>:
 * sequence.
 */

static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
 8007990:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8007994:	4901      	ldr	r1, [pc, #4]	; (800799c <heap1_setup+0xc>)
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <heap1_setup+0x10>)
 8007998:	f7fa bec2 	b.w	8002720 <chHeapObjectInit>
 800799c:	20001220 	.word	0x20001220
 80079a0:	200018d8 	.word	0x200018d8
	...

080079b0 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 80079b0:	2000      	movs	r0, #0
 80079b2:	4770      	bx	lr
	...

080079c0 <pools1_setup>:

static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 80079c0:	2200      	movs	r2, #0
 80079c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80079c6:	4801      	ldr	r0, [pc, #4]	; (80079cc <pools1_setup+0xc>)
 80079c8:	f7fa bf7a 	b.w	80028c0 <chPoolObjectInit>
 80079cc:	2000086c 	.word	0x2000086c

080079d0 <pools1_execute>:
}

static void pools1_execute(void) {
 80079d0:	b538      	push	{r3, r4, r5, lr}
  int i;

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);
 80079d2:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <pools1_execute+0xb0>)
 80079d4:	482b      	ldr	r0, [pc, #172]	; (8007a84 <pools1_execute+0xb4>)
 80079d6:	681d      	ldr	r5, [r3, #0]
 80079d8:	2205      	movs	r2, #5
 80079da:	4629      	mov	r1, r5
 80079dc:	f7fa ff78 	bl	80028d0 <chPoolLoadArray>
 80079e0:	2405      	movs	r4, #5

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 80079e2:	4828      	ldr	r0, [pc, #160]	; (8007a84 <pools1_execute+0xb4>)
 80079e4:	f7fa ff8c 	bl	8002900 <chPoolAlloc>
 80079e8:	1c01      	adds	r1, r0, #0
 80079ea:	bf18      	it	ne
 80079ec:	2101      	movne	r1, #1
 80079ee:	2001      	movs	r0, #1
 80079f0:	f7fd fe4e 	bl	8005690 <_test_assert>
 80079f4:	bb90      	cbnz	r0, 8007a5c <pools1_execute+0x8c>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 80079f6:	3c01      	subs	r4, #1
 80079f8:	d1f3      	bne.n	80079e2 <pools1_execute+0x12>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 80079fa:	4822      	ldr	r0, [pc, #136]	; (8007a84 <pools1_execute+0xb4>)
 80079fc:	f7fa ff80 	bl	8002900 <chPoolAlloc>
 8007a00:	fab0 f180 	clz	r1, r0
 8007a04:	0949      	lsrs	r1, r1, #5
 8007a06:	2002      	movs	r0, #2
 8007a08:	f7fd fe42 	bl	8005690 <_test_assert>
 8007a0c:	bb30      	cbnz	r0, 8007a5c <pools1_execute+0x8c>
 8007a0e:	4c1c      	ldr	r4, [pc, #112]	; (8007a80 <pools1_execute+0xb0>)

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8007a10:	481c      	ldr	r0, [pc, #112]	; (8007a84 <pools1_execute+0xb4>)
  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8007a12:	4629      	mov	r1, r5
 8007a14:	f104 0510 	add.w	r5, r4, #16

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8007a18:	f7fa ff8a 	bl	8002930 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8007a1c:	42a5      	cmp	r5, r4
 8007a1e:	d006      	beq.n	8007a2e <pools1_execute+0x5e>
 8007a20:	f854 1f04 	ldr.w	r1, [r4, #4]!
    chPoolFree(&mp1, wa[i]);
 8007a24:	4817      	ldr	r0, [pc, #92]	; (8007a84 <pools1_execute+0xb4>)
 8007a26:	f7fa ff83 	bl	8002930 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8007a2a:	42a5      	cmp	r5, r4
 8007a2c:	d1f8      	bne.n	8007a20 <pools1_execute+0x50>
 8007a2e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8007a30:	4814      	ldr	r0, [pc, #80]	; (8007a84 <pools1_execute+0xb4>)
 8007a32:	f7fa ff65 	bl	8002900 <chPoolAlloc>
 8007a36:	1c01      	adds	r1, r0, #0
 8007a38:	bf18      	it	ne
 8007a3a:	2101      	movne	r1, #1
 8007a3c:	2003      	movs	r0, #3
 8007a3e:	f7fd fe27 	bl	8005690 <_test_assert>
 8007a42:	b958      	cbnz	r0, 8007a5c <pools1_execute+0x8c>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8007a44:	3c01      	subs	r4, #1
 8007a46:	d1f3      	bne.n	8007a30 <pools1_execute+0x60>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8007a48:	480e      	ldr	r0, [pc, #56]	; (8007a84 <pools1_execute+0xb4>)
 8007a4a:	f7fa ff59 	bl	8002900 <chPoolAlloc>
 8007a4e:	fab0 f180 	clz	r1, r0
 8007a52:	0949      	lsrs	r1, r1, #5
 8007a54:	2004      	movs	r0, #4
 8007a56:	f7fd fe1b 	bl	8005690 <_test_assert>
 8007a5a:	b100      	cbz	r0, 8007a5e <pools1_execute+0x8e>
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
 8007a5e:	2110      	movs	r1, #16
 8007a60:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <pools1_execute+0xb8>)
 8007a62:	4808      	ldr	r0, [pc, #32]	; (8007a84 <pools1_execute+0xb4>)
 8007a64:	f7fa ff2c 	bl	80028c0 <chPoolObjectInit>
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8007a68:	4806      	ldr	r0, [pc, #24]	; (8007a84 <pools1_execute+0xb4>)
 8007a6a:	f7fa ff49 	bl	8002900 <chPoolAlloc>
 8007a6e:	fab0 f180 	clz	r1, r0
 8007a72:	0949      	lsrs	r1, r1, #5
 8007a74:	2005      	movs	r0, #5
}
 8007a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8007a7a:	f7fd be09 	b.w	8005690 <_test_assert>
 8007a7e:	bf00      	nop
 8007a80:	0800a3f0 	.word	0x0800a3f0
 8007a84:	2000086c 	.word	0x2000086c
 8007a88:	080079b1 	.word	0x080079b1
 8007a8c:	00000000 	.word	0x00000000

08007a90 <dyn1_execute>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8007a90:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007a92:	4b34      	ldr	r3, [pc, #208]	; (8007b64 <dyn1_execute+0xd4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8007a94:	4834      	ldr	r0, [pc, #208]	; (8007b68 <dyn1_execute+0xd8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007a96:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8007a98:	4c34      	ldr	r4, [pc, #208]	; (8007b6c <dyn1_execute+0xdc>)
 8007a9a:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8007a9c:	b084      	sub	sp, #16
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8007a9e:	a903      	add	r1, sp, #12
 8007aa0:	f7fa fee6 	bl	8002870 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8007aa4:	4b32      	ldr	r3, [pc, #200]	; (8007b70 <dyn1_execute+0xe0>)
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	1e6a      	subs	r2, r5, #1
 8007aaa:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <dyn1_execute+0xe4>)
 8007aac:	482e      	ldr	r0, [pc, #184]	; (8007b68 <dyn1_execute+0xd8>)
 8007aae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ab2:	f7f9 fe1d 	bl	80016f0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <dyn1_execute+0xe8>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8007ab8:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8007aba:	1eaa      	subs	r2, r5, #2
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ac2:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <dyn1_execute+0xe4>)
 8007ac4:	4828      	ldr	r0, [pc, #160]	; (8007b68 <dyn1_execute+0xd8>)
 8007ac6:	f7f9 fe13 	bl	80016f0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8007aca:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8007acc:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8007ace:	4826      	ldr	r0, [pc, #152]	; (8007b68 <dyn1_execute+0xd8>)
 8007ad0:	f7fa fece 	bl	8002870 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8007ad4:	9902      	ldr	r1, [sp, #8]
 8007ad6:	4824      	ldr	r0, [pc, #144]	; (8007b68 <dyn1_execute+0xd8>)
 8007ad8:	f7fa fe32 	bl	8002740 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8007adc:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <dyn1_execute+0xec>)
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8007ae4:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8007ae6:	1eea      	subs	r2, r5, #3
 8007ae8:	4b22      	ldr	r3, [pc, #136]	; (8007b74 <dyn1_execute+0xe4>)
 8007aea:	481f      	ldr	r0, [pc, #124]	; (8007b68 <dyn1_execute+0xd8>)
 8007aec:	f7f9 fe00 	bl	80016f0 <chThdCreateFromHeap>
 8007af0:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7fa fe6c 	bl	80027d0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8007af8:	6821      	ldr	r1, [r4, #0]
 8007afa:	b121      	cbz	r1, 8007b06 <dyn1_execute+0x76>
 8007afc:	6861      	ldr	r1, [r4, #4]
 8007afe:	b111      	cbz	r1, 8007b06 <dyn1_execute+0x76>
 8007b00:	68a1      	ldr	r1, [r4, #8]
 8007b02:	b331      	cbz	r1, 8007b52 <dyn1_execute+0xc2>
 8007b04:	2100      	movs	r1, #0
 8007b06:	2001      	movs	r0, #1
 8007b08:	f7fd fdc2 	bl	8005690 <_test_assert>
 8007b0c:	b108      	cbz	r0, 8007b12 <dyn1_execute+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8007b0e:	b004      	add	sp, #16
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8007b12:	f7fd fe2d 	bl	8005770 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8007b16:	491a      	ldr	r1, [pc, #104]	; (8007b80 <dyn1_execute+0xf0>)
 8007b18:	2002      	movs	r0, #2
 8007b1a:	f7fd fdd1 	bl	80056c0 <_test_assert_sequence>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d1f5      	bne.n	8007b0e <dyn1_execute+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8007b22:	a902      	add	r1, sp, #8
 8007b24:	4810      	ldr	r0, [pc, #64]	; (8007b68 <dyn1_execute+0xd8>)
 8007b26:	f7fa fea3 	bl	8002870 <chHeapStatus>
 8007b2a:	f1a0 0101 	sub.w	r1, r0, #1
 8007b2e:	fab1 f181 	clz	r1, r1
 8007b32:	0949      	lsrs	r1, r1, #5
 8007b34:	2003      	movs	r0, #3
 8007b36:	f7fd fdab 	bl	8005690 <_test_assert>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d1e7      	bne.n	8007b0e <dyn1_execute+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8007b3e:	9902      	ldr	r1, [sp, #8]
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	1ac9      	subs	r1, r1, r3
 8007b44:	fab1 f181 	clz	r1, r1
 8007b48:	0949      	lsrs	r1, r1, #5
 8007b4a:	2004      	movs	r0, #4
 8007b4c:	f7fd fda0 	bl	8005690 <_test_assert>
 8007b50:	e7dd      	b.n	8007b0e <dyn1_execute+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8007b52:	68e3      	ldr	r3, [r4, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1d6      	bne.n	8007b06 <dyn1_execute+0x76>
 8007b58:	6921      	ldr	r1, [r4, #16]
 8007b5a:	fab1 f181 	clz	r1, r1
 8007b5e:	0949      	lsrs	r1, r1, #5
 8007b60:	e7d1      	b.n	8007b06 <dyn1_execute+0x76>
 8007b62:	bf00      	nop
 8007b64:	20000d18 	.word	0x20000d18
 8007b68:	20001908 	.word	0x20001908
 8007b6c:	200018a8 	.word	0x200018a8
 8007b70:	0800a6c8 	.word	0x0800a6c8
 8007b74:	08007b91 	.word	0x08007b91
 8007b78:	0800a6c4 	.word	0x0800a6c4
 8007b7c:	0800a6c0 	.word	0x0800a6c0
 8007b80:	0800ab10 	.word	0x0800ab10
	...

08007b90 <thread>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8007b90:	7800      	ldrb	r0, [r0, #0]
 8007b92:	f7fd bd6d 	b.w	8005670 <test_emit_token>
 8007b96:	bf00      	nop
	...

08007ba0 <dyn3_setup>:
  return found;
}

static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
 8007ba0:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <dyn3_setup+0xc>)
 8007ba6:	4802      	ldr	r0, [pc, #8]	; (8007bb0 <dyn3_setup+0x10>)
 8007ba8:	f7fa bdba 	b.w	8002720 <chHeapObjectInit>
 8007bac:	20001220 	.word	0x20001220
 8007bb0:	20001908 	.word	0x20001908
	...

08007bc0 <dyn1_setup>:
 8007bc0:	f7ff bfee 	b.w	8007ba0 <dyn3_setup>
	...

08007bd0 <dyn2_execute>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007bd0:	4b31      	ldr	r3, [pc, #196]	; (8007c98 <dyn2_execute+0xc8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007bd2:	699b      	ldr	r3, [r3, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4c31      	ldr	r4, [pc, #196]	; (8007c9c <dyn2_execute+0xcc>)
 8007bd8:	689d      	ldr	r5, [r3, #8]
 8007bda:	f104 0610 	add.w	r6, r4, #16
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8007bde:	f854 1b04 	ldr.w	r1, [r4], #4
 8007be2:	482f      	ldr	r0, [pc, #188]	; (8007ca0 <dyn2_execute+0xd0>)
 8007be4:	f7fa fea4 	bl	8002930 <chPoolFree>
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d1f8      	bne.n	8007bde <dyn2_execute+0xe>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8007bec:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <dyn2_execute+0xd4>)
 8007bee:	4a2e      	ldr	r2, [pc, #184]	; (8007ca8 <dyn2_execute+0xd8>)
 8007bf0:	482b      	ldr	r0, [pc, #172]	; (8007ca0 <dyn2_execute+0xd0>)
 8007bf2:	4c2e      	ldr	r4, [pc, #184]	; (8007cac <dyn2_execute+0xdc>)
 8007bf4:	1e69      	subs	r1, r5, #1
 8007bf6:	f7f9 fd9b 	bl	8001730 <chThdCreateFromMemoryPool>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8007bfa:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <dyn2_execute+0xe0>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8007bfc:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8007bfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <dyn2_execute+0xd8>)
 8007c00:	4827      	ldr	r0, [pc, #156]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c02:	1ea9      	subs	r1, r5, #2
 8007c04:	f7f9 fd94 	bl	8001730 <chThdCreateFromMemoryPool>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8007c08:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <dyn2_execute+0xe4>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8007c0a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8007c0c:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <dyn2_execute+0xd8>)
 8007c0e:	4824      	ldr	r0, [pc, #144]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c10:	1ee9      	subs	r1, r5, #3
 8007c12:	f7f9 fd8d 	bl	8001730 <chThdCreateFromMemoryPool>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8007c16:	4b28      	ldr	r3, [pc, #160]	; (8007cb8 <dyn2_execute+0xe8>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8007c18:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8007c1a:	4a23      	ldr	r2, [pc, #140]	; (8007ca8 <dyn2_execute+0xd8>)
 8007c1c:	4820      	ldr	r0, [pc, #128]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c1e:	1f29      	subs	r1, r5, #4
 8007c20:	f7f9 fd86 	bl	8001730 <chThdCreateFromMemoryPool>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8007c24:	1f69      	subs	r1, r5, #5

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8007c26:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8007c28:	4b24      	ldr	r3, [pc, #144]	; (8007cbc <dyn2_execute+0xec>)
 8007c2a:	4a1f      	ldr	r2, [pc, #124]	; (8007ca8 <dyn2_execute+0xd8>)
 8007c2c:	481c      	ldr	r0, [pc, #112]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c2e:	f7f9 fd7f 	bl	8001730 <chThdCreateFromMemoryPool>

  test_assert(1, (threads[0] != NULL) &&
 8007c32:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8007c34:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8007c36:	b141      	cbz	r1, 8007c4a <dyn2_execute+0x7a>
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	b131      	cbz	r1, 8007c4a <dyn2_execute+0x7a>
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	b121      	cbz	r1, 8007c4a <dyn2_execute+0x7a>
 8007c40:	68e1      	ldr	r1, [r4, #12]
 8007c42:	b111      	cbz	r1, 8007c4a <dyn2_execute+0x7a>
 8007c44:	fab0 f180 	clz	r1, r0
 8007c48:	0949      	lsrs	r1, r1, #5
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	f7fd fd20 	bl	8005690 <_test_assert>
 8007c50:	b100      	cbz	r0, 8007c54 <dyn2_execute+0x84>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8007c54:	f7fd fd8c 	bl	8005770 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8007c58:	4919      	ldr	r1, [pc, #100]	; (8007cc0 <dyn2_execute+0xf0>)
 8007c5a:	2002      	movs	r0, #2
 8007c5c:	f7fd fd30 	bl	80056c0 <_test_assert_sequence>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1f6      	bne.n	8007c52 <dyn2_execute+0x82>
 8007c64:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007c66:	480e      	ldr	r0, [pc, #56]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c68:	f7fa fe4a 	bl	8002900 <chPoolAlloc>
 8007c6c:	1c01      	adds	r1, r0, #0
 8007c6e:	bf18      	it	ne
 8007c70:	2101      	movne	r1, #1
 8007c72:	2003      	movs	r0, #3
 8007c74:	f7fd fd0c 	bl	8005690 <_test_assert>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d1ea      	bne.n	8007c52 <dyn2_execute+0x82>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	d1f2      	bne.n	8007c66 <dyn2_execute+0x96>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007c80:	4807      	ldr	r0, [pc, #28]	; (8007ca0 <dyn2_execute+0xd0>)
 8007c82:	f7fa fe3d 	bl	8002900 <chPoolAlloc>
 8007c86:	fab0 f180 	clz	r1, r0
 8007c8a:	0949      	lsrs	r1, r1, #5
 8007c8c:	2004      	movs	r0, #4
}
 8007c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007c92:	f7fd bcfd 	b.w	8005690 <_test_assert>
 8007c96:	bf00      	nop
 8007c98:	20000d18 	.word	0x20000d18
 8007c9c:	0800a3f0 	.word	0x0800a3f0
 8007ca0:	200018f8 	.word	0x200018f8
 8007ca4:	0800a6c8 	.word	0x0800a6c8
 8007ca8:	08007b91 	.word	0x08007b91
 8007cac:	200018a8 	.word	0x200018a8
 8007cb0:	0800a6c4 	.word	0x0800a6c4
 8007cb4:	0800a6c0 	.word	0x0800a6c0
 8007cb8:	0800b5b8 	.word	0x0800b5b8
 8007cbc:	0800a6d0 	.word	0x0800a6d0
 8007cc0:	0800ab14 	.word	0x0800ab14
	...

08007cd0 <dyn2_setup>:
 * one to fail.
 */

static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007cd6:	4801      	ldr	r0, [pc, #4]	; (8007cdc <dyn2_setup+0xc>)
 8007cd8:	f7fa bdf2 	b.w	80028c0 <chPoolObjectInit>
 8007cdc:	200018f8 	.word	0x200018f8

08007ce0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
 8007ce4:	f7f9 fd4c 	bl	8001780 <chRegFirstThread>
 * coverage.
 */

static bool regfind(thread_t *tp) {
  thread_t *ftp;
  bool found = false;
 8007ce8:	2400      	movs	r4, #0

  ftp = chRegFirstThread();
 8007cea:	4603      	mov	r3, r0
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8007cec:	4618      	mov	r0, r3
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	bf08      	it	eq
 8007cf2:	f044 0401 	orreq.w	r4, r4, #1
 8007cf6:	f7f9 fd53 	bl	80017a0 <chRegNextThread>
  } while (ftp != NULL);
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1f5      	bne.n	8007cec <regfind+0xc>
  return found;
}
 8007d00:	4620      	mov	r0, r4
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
	...

08007d10 <dyn3_execute>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8007d10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007d12:	4b48      	ldr	r3, [pc, #288]	; (8007e34 <dyn3_execute+0x124>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007d14:	4948      	ldr	r1, [pc, #288]	; (8007e38 <dyn3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	4848      	ldr	r0, [pc, #288]	; (8007e3c <dyn3_execute+0x12c>)
 8007d1a:	6892      	ldr	r2, [r2, #8]
 8007d1c:	4b48      	ldr	r3, [pc, #288]	; (8007e40 <dyn3_execute+0x130>)
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8007d1e:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007d20:	3a01      	subs	r2, #1
 8007d22:	9100      	str	r1, [sp, #0]
 8007d24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d28:	f7f9 fce2 	bl	80016f0 <chThdCreateFromHeap>
 8007d2c:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8007d2e:	2001      	movs	r0, #1
 8007d30:	7fa1      	ldrb	r1, [r4, #30]
 8007d32:	1a09      	subs	r1, r1, r0
 8007d34:	fab1 f181 	clz	r1, r1
 8007d38:	0949      	lsrs	r1, r1, #5
 8007d3a:	f7fd fca9 	bl	8005690 <_test_assert>
 8007d3e:	b108      	cbz	r0, 8007d44 <dyn3_execute+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8007d40:	b002      	add	sp, #8
 8007d42:	bd10      	pop	{r4, pc}
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7f9 fc9b 	bl	8001680 <chThdAddRef>
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8007d4a:	7fa1      	ldrb	r1, [r4, #30]
 8007d4c:	2002      	movs	r0, #2
 8007d4e:	1a09      	subs	r1, r1, r0
 8007d50:	fab1 f181 	clz	r1, r1
 8007d54:	0949      	lsrs	r1, r1, #5
 8007d56:	f7fd fc9b 	bl	8005690 <_test_assert>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d1f0      	bne.n	8007d40 <dyn3_execute+0x30>
  chThdRelease(tp);
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7f9 fc9e 	bl	80016a0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8007d64:	7fa1      	ldrb	r1, [r4, #30]
 8007d66:	f1a1 0101 	sub.w	r1, r1, #1
 8007d6a:	fab1 f181 	clz	r1, r1
 8007d6e:	2003      	movs	r0, #3
 8007d70:	0949      	lsrs	r1, r1, #5
 8007d72:	f7fd fc8d 	bl	8005690 <_test_assert>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d1e2      	bne.n	8007d40 <dyn3_execute+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7ff ffb0 	bl	8007ce0 <regfind>
 8007d80:	4601      	mov	r1, r0
 8007d82:	2004      	movs	r0, #4
 8007d84:	f7fd fc84 	bl	8005690 <_test_assert>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d1d9      	bne.n	8007d40 <dyn3_execute+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff ffa7 	bl	8007ce0 <regfind>
 8007d92:	4601      	mov	r1, r0
 8007d94:	2005      	movs	r0, #5
 8007d96:	f7fd fc7b 	bl	8005690 <_test_assert>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1d0      	bne.n	8007d40 <dyn3_execute+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7f9 fc7e 	bl	80016a0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8007da4:	7fa1      	ldrb	r1, [r4, #30]
 8007da6:	fab1 f181 	clz	r1, r1
 8007daa:	0949      	lsrs	r1, r1, #5
 8007dac:	2006      	movs	r0, #6
 8007dae:	f7fd fc6f 	bl	8005690 <_test_assert>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1c4      	bne.n	8007d40 <dyn3_execute+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8007db6:	7f21      	ldrb	r1, [r4, #28]
 8007db8:	fab1 f181 	clz	r1, r1
 8007dbc:	0949      	lsrs	r1, r1, #5
 8007dbe:	2007      	movs	r0, #7
 8007dc0:	f7fd fc66 	bl	8005690 <_test_assert>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d1bb      	bne.n	8007d40 <dyn3_execute+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff ff89 	bl	8007ce0 <regfind>
 8007dce:	4601      	mov	r1, r0
 8007dd0:	2008      	movs	r0, #8
 8007dd2:	f7fd fc5d 	bl	8005690 <_test_assert>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d1b2      	bne.n	8007d40 <dyn3_execute+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff ff80 	bl	8007ce0 <regfind>
 8007de0:	4601      	mov	r1, r0
 8007de2:	2009      	movs	r0, #9
 8007de4:	f7fd fc54 	bl	8005690 <_test_assert>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1a9      	bne.n	8007d40 <dyn3_execute+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8007dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007df0:	f7f9 fb16 	bl	8001420 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8007df4:	7f21      	ldrb	r1, [r4, #28]
 8007df6:	f1a1 030f 	sub.w	r3, r1, #15
 8007dfa:	4259      	negs	r1, r3
 8007dfc:	4159      	adcs	r1, r3
 8007dfe:	200a      	movs	r0, #10
 8007e00:	f7fd fc46 	bl	8005690 <_test_assert>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d19b      	bne.n	8007d40 <dyn3_execute+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7ff ff69 	bl	8007ce0 <regfind>
 8007e0e:	4601      	mov	r1, r0
 8007e10:	200b      	movs	r0, #11
 8007e12:	f7fd fc3d 	bl	8005690 <_test_assert>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d192      	bne.n	8007d40 <dyn3_execute+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ff60 	bl	8007ce0 <regfind>
 8007e20:	f080 0101 	eor.w	r1, r0, #1
 8007e24:	b2c9      	uxtb	r1, r1
 8007e26:	200c      	movs	r0, #12
}
 8007e28:	b002      	add	sp, #8
 8007e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8007e2e:	f7fd bc2f 	b.w	8005690 <_test_assert>
 8007e32:	bf00      	nop
 8007e34:	20000d18 	.word	0x20000d18
 8007e38:	0800a6c8 	.word	0x0800a6c8
 8007e3c:	20001908 	.word	0x20001908
 8007e40:	08007b91 	.word	0x08007b91
	...

08007e50 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
	...

08007e60 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8007e60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <thread1+0xc>)
 8007e66:	f7fa baeb 	b.w	8002440 <chIQGetTimeout>
 8007e6a:	bf00      	nop
 8007e6c:	2000089c 	.word	0x2000089c

08007e70 <queues1_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8007e70:	b500      	push	{lr}

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007e72:	4a06      	ldr	r2, [pc, #24]	; (8007e8c <queues1_setup+0x1c>)
 8007e74:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <queues1_setup+0x20>)
 8007e76:	6811      	ldr	r1, [r2, #0]
 8007e78:	4806      	ldr	r0, [pc, #24]	; (8007e94 <queues1_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8007e7a:	b083      	sub	sp, #12

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	9200      	str	r2, [sp, #0]
 8007e80:	2204      	movs	r2, #4
 8007e82:	f7fa fa9d 	bl	80023c0 <chIQObjectInit>
}
 8007e86:	b003      	add	sp, #12
 8007e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e8c:	0800a3f0 	.word	0x0800a3f0
 8007e90:	08007e51 	.word	0x08007e51
 8007e94:	2000089c 	.word	0x2000089c
	...

08007ea0 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8007ea0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4801      	ldr	r0, [pc, #4]	; (8007eac <thread2+0xc>)
 8007ea8:	f7fa bb52 	b.w	8002550 <chOQPutTimeout>
 8007eac:	20000878 	.word	0x20000878

08007eb0 <queues2_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8007eb0:	b500      	push	{lr}

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007eb2:	4a06      	ldr	r2, [pc, #24]	; (8007ecc <queues2_setup+0x1c>)
 8007eb4:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <queues2_setup+0x20>)
 8007eb6:	6811      	ldr	r1, [r2, #0]
 8007eb8:	4806      	ldr	r0, [pc, #24]	; (8007ed4 <queues2_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8007eba:	b083      	sub	sp, #12

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	9200      	str	r2, [sp, #0]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f7fa fb25 	bl	8002510 <chOQObjectInit>
}
 8007ec6:	b003      	add	sp, #12
 8007ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ecc:	0800a3f0 	.word	0x0800a3f0
 8007ed0:	08007e51 	.word	0x08007e51
 8007ed4:	20000878 	.word	0x20000878
	...

08007ee0 <queues1_execute>:

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
}

static void queues1_execute(void) {
 8007ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee4:	2420      	movs	r4, #32
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	f384 8811 	msr	BASEPRI, r4
 8007eec:	4b90      	ldr	r3, [pc, #576]	; (8008130 <queues1_execute+0x250>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8007eee:	6899      	ldr	r1, [r3, #8]
 8007ef0:	fab1 f181 	clz	r1, r1
 8007ef4:	0949      	lsrs	r1, r1, #5
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7fd fbca 	bl	8005690 <_test_assert>
 8007efc:	b9f0      	cbnz	r0, 8007f3c <queues1_execute+0x5c>
 8007efe:	4606      	mov	r6, r0
 8007f00:	f380 8811 	msr	BASEPRI, r0
 8007f04:	f384 8811 	msr	BASEPRI, r4
 8007f08:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8007f0a:	4d89      	ldr	r5, [pc, #548]	; (8008130 <queues1_execute+0x250>)
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	3401      	adds	r4, #1
 8007f10:	4628      	mov	r0, r5
 8007f12:	b2e4      	uxtb	r4, r4
 8007f14:	f7fa fa74 	bl	8002400 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007f18:	2c45      	cmp	r4, #69	; 0x45
 8007f1a:	d1f6      	bne.n	8007f0a <queues1_execute+0x2a>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	2320      	movs	r3, #32
 8007f24:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8007f28:	696a      	ldr	r2, [r5, #20]
 8007f2a:	69ab      	ldr	r3, [r5, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d03a      	beq.n	8007fa6 <queues1_execute+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8007f30:	4631      	mov	r1, r6
 8007f32:	2002      	movs	r0, #2
 8007f34:	f7fd fbac 	bl	8005690 <_test_assert>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	b128      	cbz	r0, 8007f48 <queues1_execute+0x68>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8007f42:	b002      	add	sp, #8
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	f380 8811 	msr	BASEPRI, r0
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8007f52:	4877      	ldr	r0, [pc, #476]	; (8008130 <queues1_execute+0x250>)
 8007f54:	4621      	mov	r1, r4
 8007f56:	f7fa fa53 	bl	8002400 <chIQPutI>
 8007f5a:	3004      	adds	r0, #4
 8007f5c:	bf14      	ite	ne
 8007f5e:	2100      	movne	r1, #0
 8007f60:	2101      	moveq	r1, #1
 8007f62:	2003      	movs	r0, #3
 8007f64:	f7fd fb94 	bl	8005690 <_test_assert>
 8007f68:	b9c0      	cbnz	r0, 8007f9c <queues1_execute+0xbc>
 8007f6a:	f380 8811 	msr	BASEPRI, r0
 8007f6e:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8007f70:	4d6f      	ldr	r5, [pc, #444]	; (8008130 <queues1_execute+0x250>)
 8007f72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7fa fa62 	bl	8002440 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8007f7c:	b2c0      	uxtb	r0, r0
 8007f7e:	f7fd fb77 	bl	8005670 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007f82:	3c01      	subs	r4, #1
 8007f84:	d1f4      	bne.n	8007f70 <queues1_execute+0x90>
 8007f86:	2620      	movs	r6, #32
 8007f88:	f386 8811 	msr	BASEPRI, r6
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8007f8c:	68a9      	ldr	r1, [r5, #8]
 8007f8e:	fab1 f181 	clz	r1, r1
 8007f92:	0949      	lsrs	r1, r1, #5
 8007f94:	2004      	movs	r0, #4
 8007f96:	f7fd fb7b 	bl	8005690 <_test_assert>
 8007f9a:	b148      	cbz	r0, 8007fb0 <queues1_execute+0xd0>
 8007f9c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8007fa0:	b002      	add	sp, #8
 8007fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8007fa6:	68ae      	ldr	r6, [r5, #8]
 8007fa8:	3600      	adds	r6, #0
 8007faa:	bf18      	it	ne
 8007fac:	2601      	movne	r6, #1
 8007fae:	e7bf      	b.n	8007f30 <queues1_execute+0x50>
 8007fb0:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8007fb4:	495f      	ldr	r1, [pc, #380]	; (8008134 <queues1_execute+0x254>)
 8007fb6:	2005      	movs	r0, #5
 8007fb8:	f7fd fb82 	bl	80056c0 <_test_assert_sequence>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1c0      	bne.n	8007f42 <queues1_execute+0x62>
 8007fc0:	f386 8811 	msr	BASEPRI, r6
 8007fc4:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8007fc6:	4d5a      	ldr	r5, [pc, #360]	; (8008130 <queues1_execute+0x250>)
 8007fc8:	4621      	mov	r1, r4
 8007fca:	3401      	adds	r4, #1
 8007fcc:	4628      	mov	r0, r5
 8007fce:	b2e4      	uxtb	r4, r4
 8007fd0:	f7fa fa16 	bl	8002400 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007fd4:	2c45      	cmp	r4, #69	; 0x45
 8007fd6:	d1f6      	bne.n	8007fc6 <queues1_execute+0xe6>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8007fde:	4e56      	ldr	r6, [pc, #344]	; (8008138 <queues1_execute+0x258>)
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	6871      	ldr	r1, [r6, #4]
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f7fa fa53 	bl	8002490 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8007fea:	f1a0 0104 	sub.w	r1, r0, #4
 8007fee:	fab1 f181 	clz	r1, r1
 8007ff2:	0949      	lsrs	r1, r1, #5
 8007ff4:	2006      	movs	r0, #6
 8007ff6:	f7fd fb4b 	bl	8005690 <_test_assert>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1a0      	bne.n	8007f42 <queues1_execute+0x62>
 8008000:	2720      	movs	r7, #32
 8008002:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8008006:	68a9      	ldr	r1, [r5, #8]
 8008008:	fab1 f181 	clz	r1, r1
 800800c:	0949      	lsrs	r1, r1, #5
 800800e:	2007      	movs	r0, #7
 8008010:	f7fd fb3e 	bl	8005690 <_test_assert>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1c1      	bne.n	8007f9c <queues1_execute+0xbc>
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	f387 8811 	msr	BASEPRI, r7
 8008020:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8008022:	4d43      	ldr	r5, [pc, #268]	; (8008130 <queues1_execute+0x250>)
 8008024:	4621      	mov	r1, r4
 8008026:	3401      	adds	r4, #1
 8008028:	4628      	mov	r0, r5
 800802a:	b2e4      	uxtb	r4, r4
 800802c:	f7fa f9e8 	bl	8002400 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8008030:	2c45      	cmp	r4, #69	; 0x45
 8008032:	d1f6      	bne.n	8008022 <queues1_execute+0x142>
 8008034:	2300      	movs	r3, #0
 8008036:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 800803a:	6874      	ldr	r4, [r6, #4]
 800803c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008138 <queues1_execute+0x258>
 8008040:	4621      	mov	r1, r4
 8008042:	4628      	mov	r0, r5
 8008044:	2202      	movs	r2, #2
 8008046:	f7fa fa23 	bl	8002490 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800804a:	f1a0 0102 	sub.w	r1, r0, #2
 800804e:	fab1 f181 	clz	r1, r1
 8008052:	0949      	lsrs	r1, r1, #5
 8008054:	2008      	movs	r0, #8
 8008056:	f7fd fb1b 	bl	8005690 <_test_assert>
 800805a:	2800      	cmp	r0, #0
 800805c:	f47f af71 	bne.w	8007f42 <queues1_execute+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8008060:	4603      	mov	r3, r0
 8008062:	4621      	mov	r1, r4
 8008064:	2202      	movs	r2, #2
 8008066:	4628      	mov	r0, r5
 8008068:	f7fa fa12 	bl	8002490 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800806c:	f1a0 0102 	sub.w	r1, r0, #2
 8008070:	fab1 f181 	clz	r1, r1
 8008074:	0949      	lsrs	r1, r1, #5
 8008076:	2009      	movs	r0, #9
 8008078:	f7fd fb0a 	bl	8005690 <_test_assert>
 800807c:	4606      	mov	r6, r0
 800807e:	2800      	cmp	r0, #0
 8008080:	f47f af5f 	bne.w	8007f42 <queues1_execute+0x62>
 8008084:	2720      	movs	r7, #32
 8008086:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800808a:	68a9      	ldr	r1, [r5, #8]
 800808c:	fab1 f181 	clz	r1, r1
 8008090:	0949      	lsrs	r1, r1, #5
 8008092:	200a      	movs	r0, #10
 8008094:	f7fd fafc 	bl	8005690 <_test_assert>
 8008098:	4604      	mov	r4, r0
 800809a:	b110      	cbz	r0, 80080a2 <queues1_execute+0x1c2>
 800809c:	f386 8811 	msr	BASEPRI, r6
 80080a0:	e74f      	b.n	8007f42 <queues1_execute+0x62>
 80080a2:	f380 8811 	msr	BASEPRI, r0
 80080a6:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 80080aa:	4601      	mov	r1, r0
 80080ac:	4628      	mov	r0, r5
 80080ae:	f7fa f9a7 	bl	8002400 <chIQPutI>
  chIQResetI(&iq);
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7fa f994 	bl	80023e0 <chIQResetI>
 80080b8:	f384 8811 	msr	BASEPRI, r4
 80080bc:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80080c0:	68a9      	ldr	r1, [r5, #8]
 80080c2:	fab1 f181 	clz	r1, r1
 80080c6:	0949      	lsrs	r1, r1, #5
 80080c8:	200b      	movs	r0, #11
 80080ca:	f7fd fae1 	bl	8005690 <_test_assert>
 80080ce:	4606      	mov	r6, r0
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f47f af63 	bne.w	8007f9c <queues1_execute+0xbc>
 80080d6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80080da:	4b18      	ldr	r3, [pc, #96]	; (800813c <queues1_execute+0x25c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80080dc:	f8d8 0000 	ldr.w	r0, [r8]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	4b17      	ldr	r3, [pc, #92]	; (8008140 <queues1_execute+0x260>)
 80080e4:	6892      	ldr	r2, [r2, #8]
 80080e6:	9600      	str	r6, [sp, #0]
 80080e8:	3201      	adds	r2, #1
 80080ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80080ee:	f7f9 f927 	bl	8001340 <chThdCreateStatic>
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <queues1_execute+0x264>)
 80080f4:	6018      	str	r0, [r3, #0]
 80080f6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 80080fa:	68a9      	ldr	r1, [r5, #8]
 80080fc:	fab1 f181 	clz	r1, r1
 8008100:	0949      	lsrs	r1, r1, #5
 8008102:	200c      	movs	r0, #12
 8008104:	f7fd fac4 	bl	8005690 <_test_assert>
 8008108:	2800      	cmp	r0, #0
 800810a:	d1c7      	bne.n	800809c <queues1_execute+0x1bc>
 800810c:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8008110:	f7fd fb2e 	bl	8005770 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8008114:	4628      	mov	r0, r5
 8008116:	210a      	movs	r1, #10
 8008118:	f7fa f992 	bl	8002440 <chIQGetTimeout>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	4259      	negs	r1, r3
 8008120:	4159      	adcs	r1, r3
 8008122:	200d      	movs	r0, #13
}
 8008124:	b002      	add	sp, #8
 8008126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800812a:	f7fd bab1 	b.w	8005690 <_test_assert>
 800812e:	bf00      	nop
 8008130:	2000089c 	.word	0x2000089c
 8008134:	0800ab14 	.word	0x0800ab14
 8008138:	0800a3f0 	.word	0x0800a3f0
 800813c:	20000d18 	.word	0x20000d18
 8008140:	08007e61 	.word	0x08007e61
 8008144:	200018a8 	.word	0x200018a8
	...

08008150 <queues2_execute>:

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
}

static void queues2_execute(void) {
 8008150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008154:	2320      	movs	r3, #32
 8008156:	b083      	sub	sp, #12
 8008158:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800815c:	4b85      	ldr	r3, [pc, #532]	; (8008374 <queues2_execute+0x224>)
 800815e:	6999      	ldr	r1, [r3, #24]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	4291      	cmp	r1, r2
 8008164:	d05d      	beq.n	8008222 <queues2_execute+0xd2>
 8008166:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8008168:	2001      	movs	r0, #1
 800816a:	f7fd fa91 	bl	8005690 <_test_assert>
 800816e:	bbb8      	cbnz	r0, 80081e0 <queues2_execute+0x90>
 8008170:	f380 8811 	msr	BASEPRI, r0
 8008174:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8008176:	4d7f      	ldr	r5, [pc, #508]	; (8008374 <queues2_execute+0x224>)
 8008178:	4621      	mov	r1, r4
 800817a:	3401      	adds	r4, #1
 800817c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008180:	4628      	mov	r0, r5
 8008182:	b2e4      	uxtb	r4, r4
 8008184:	f7fa f9e4 	bl	8002550 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8008188:	2c45      	cmp	r4, #69	; 0x45
 800818a:	d1f4      	bne.n	8008176 <queues2_execute+0x26>
 800818c:	2620      	movs	r6, #32
 800818e:	f386 8811 	msr	BASEPRI, r6
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8008192:	68a9      	ldr	r1, [r5, #8]
 8008194:	fab1 f181 	clz	r1, r1
 8008198:	0949      	lsrs	r1, r1, #5
 800819a:	2002      	movs	r0, #2
 800819c:	f7fd fa78 	bl	8005690 <_test_assert>
 80081a0:	4607      	mov	r7, r0
 80081a2:	b9e8      	cbnz	r0, 80081e0 <queues2_execute+0x90>
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	2404      	movs	r4, #4
 80081aa:	4681      	mov	r9, r0
 80081ac:	f04f 0820 	mov.w	r8, #32
 80081b0:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80081b4:	4d6f      	ldr	r5, [pc, #444]	; (8008374 <queues2_execute+0x224>)
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7fa f9f2 	bl	80025a0 <chOQGetI>
 80081bc:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 80081c0:	b2c0      	uxtb	r0, r0
 80081c2:	f7fd fa55 	bl	8005670 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 80081c6:	3c01      	subs	r4, #1
 80081c8:	d1f0      	bne.n	80081ac <queues2_execute+0x5c>
 80081ca:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80081ce:	696a      	ldr	r2, [r5, #20]
 80081d0:	69ab      	ldr	r3, [r5, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d02a      	beq.n	800822c <queues2_execute+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 80081d6:	4639      	mov	r1, r7
 80081d8:	2003      	movs	r0, #3
 80081da:	f7fd fa59 	bl	8005690 <_test_assert>
 80081de:	b128      	cbz	r0, 80081ec <queues2_execute+0x9c>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ec:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 80081f0:	4961      	ldr	r1, [pc, #388]	; (8008378 <queues2_execute+0x228>)
 80081f2:	2004      	movs	r0, #4
 80081f4:	f7fd fa64 	bl	80056c0 <_test_assert_sequence>
 80081f8:	4604      	mov	r4, r0
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d1f3      	bne.n	80081e6 <queues2_execute+0x96>
 80081fe:	2620      	movs	r6, #32
 8008200:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8008204:	4d5b      	ldr	r5, [pc, #364]	; (8008374 <queues2_execute+0x224>)
 8008206:	4628      	mov	r0, r5
 8008208:	f7fa f9ca 	bl	80025a0 <chOQGetI>
 800820c:	3003      	adds	r0, #3
 800820e:	bf14      	ite	ne
 8008210:	2100      	movne	r1, #0
 8008212:	2101      	moveq	r1, #1
 8008214:	2005      	movs	r0, #5
 8008216:	f7fd fa3b 	bl	8005690 <_test_assert>
 800821a:	b160      	cbz	r0, 8008236 <queues2_execute+0xe6>
 800821c:	f384 8811 	msr	BASEPRI, r4
 8008220:	e7e1      	b.n	80081e6 <queues2_execute+0x96>
 8008222:	6899      	ldr	r1, [r3, #8]
 8008224:	3100      	adds	r1, #0
 8008226:	bf18      	it	ne
 8008228:	2101      	movne	r1, #1
 800822a:	e79d      	b.n	8008168 <queues2_execute+0x18>
 800822c:	68af      	ldr	r7, [r5, #8]
 800822e:	3700      	adds	r7, #0
 8008230:	bf18      	it	ne
 8008232:	2701      	movne	r7, #1
 8008234:	e7cf      	b.n	80081d6 <queues2_execute+0x86>
 8008236:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 800823a:	4f50      	ldr	r7, [pc, #320]	; (800837c <queues2_execute+0x22c>)
 800823c:	687c      	ldr	r4, [r7, #4]
 800823e:	4603      	mov	r3, r0
 8008240:	4621      	mov	r1, r4
 8008242:	2208      	movs	r2, #8
 8008244:	4628      	mov	r0, r5
 8008246:	f7fa f9cb 	bl	80025e0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 800824a:	f1a0 0104 	sub.w	r1, r0, #4
 800824e:	fab1 f181 	clz	r1, r1
 8008252:	0949      	lsrs	r1, r1, #5
 8008254:	2006      	movs	r0, #6
 8008256:	f7fd fa1b 	bl	8005690 <_test_assert>
 800825a:	4680      	mov	r8, r0
 800825c:	2800      	cmp	r0, #0
 800825e:	d1c2      	bne.n	80081e6 <queues2_execute+0x96>
 8008260:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8008264:	68a9      	ldr	r1, [r5, #8]
 8008266:	fab1 f181 	clz	r1, r1
 800826a:	0949      	lsrs	r1, r1, #5
 800826c:	2007      	movs	r0, #7
 800826e:	f7fd fa0f 	bl	8005690 <_test_assert>
 8008272:	4681      	mov	r9, r0
 8008274:	b110      	cbz	r0, 800827c <queues2_execute+0x12c>
 8008276:	f388 8811 	msr	BASEPRI, r8
 800827a:	e7b4      	b.n	80081e6 <queues2_execute+0x96>
 800827c:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008280:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <queues2_execute+0x230>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008282:	6838      	ldr	r0, [r7, #0]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	4b3f      	ldr	r3, [pc, #252]	; (8008384 <queues2_execute+0x234>)
 8008288:	6892      	ldr	r2, [r2, #8]
 800828a:	f8cd 9000 	str.w	r9, [sp]
 800828e:	3201      	adds	r2, #1
 8008290:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008294:	f7f9 f854 	bl	8001340 <chThdCreateStatic>
 8008298:	4b3b      	ldr	r3, [pc, #236]	; (8008388 <queues2_execute+0x238>)
 800829a:	6018      	str	r0, [r3, #0]
 800829c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 80082a0:	68e9      	ldr	r1, [r5, #12]
 80082a2:	692b      	ldr	r3, [r5, #16]
 80082a4:	68aa      	ldr	r2, [r5, #8]
 80082a6:	1a5b      	subs	r3, r3, r1
 80082a8:	1a99      	subs	r1, r3, r2
 80082aa:	f1a1 0104 	sub.w	r1, r1, #4
 80082ae:	fab1 f181 	clz	r1, r1
 80082b2:	0949      	lsrs	r1, r1, #5
 80082b4:	2008      	movs	r0, #8
 80082b6:	f7fd f9eb 	bl	8005690 <_test_assert>
 80082ba:	4607      	mov	r7, r0
 80082bc:	b110      	cbz	r0, 80082c4 <queues2_execute+0x174>
 80082be:	f389 8811 	msr	BASEPRI, r9
 80082c2:	e790      	b.n	80081e6 <queues2_execute+0x96>
 80082c4:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80082c8:	f7fd fa52 	bl	8005770 <test_wait_threads>
 80082cc:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7fa f92d 	bl	8002530 <chOQResetI>
 80082d6:	f387 8811 	msr	BASEPRI, r7
 80082da:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 80082de:	f105 0108 	add.w	r1, r5, #8
 80082e2:	c90e      	ldmia	r1, {r1, r2, r3}
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	1a59      	subs	r1, r3, r1
 80082e8:	fab1 f181 	clz	r1, r1
 80082ec:	0949      	lsrs	r1, r1, #5
 80082ee:	2009      	movs	r0, #9
 80082f0:	f7fd f9ce 	bl	8005690 <_test_assert>
 80082f4:	4603      	mov	r3, r0
 80082f6:	b110      	cbz	r0, 80082fe <queues2_execute+0x1ae>
 80082f8:	f387 8811 	msr	BASEPRI, r7
 80082fc:	e773      	b.n	80081e6 <queues2_execute+0x96>
 80082fe:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8008302:	2202      	movs	r2, #2
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f7fa f96a 	bl	80025e0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800830c:	3802      	subs	r0, #2
 800830e:	4241      	negs	r1, r0
 8008310:	4141      	adcs	r1, r0
 8008312:	200a      	movs	r0, #10
 8008314:	f7fd f9bc 	bl	8005690 <_test_assert>
 8008318:	4603      	mov	r3, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	f47f af63 	bne.w	80081e6 <queues2_execute+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8008320:	4621      	mov	r1, r4
 8008322:	2202      	movs	r2, #2
 8008324:	4628      	mov	r0, r5
 8008326:	f7fa f95b 	bl	80025e0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800832a:	1e82      	subs	r2, r0, #2
 800832c:	4251      	negs	r1, r2
 800832e:	4151      	adcs	r1, r2
 8008330:	200b      	movs	r0, #11
 8008332:	f7fd f9ad 	bl	8005690 <_test_assert>
 8008336:	2800      	cmp	r0, #0
 8008338:	f47f af55 	bne.w	80081e6 <queues2_execute+0x96>
 800833c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8008340:	68a9      	ldr	r1, [r5, #8]
 8008342:	fab1 f181 	clz	r1, r1
 8008346:	0949      	lsrs	r1, r1, #5
 8008348:	200c      	movs	r0, #12
 800834a:	f7fd f9a1 	bl	8005690 <_test_assert>
 800834e:	2800      	cmp	r0, #0
 8008350:	f47f af46 	bne.w	80081e0 <queues2_execute+0x90>
 8008354:	2100      	movs	r1, #0
 8008356:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800835a:	220a      	movs	r2, #10
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <queues2_execute+0x224>)
 800835e:	f7fa f8f7 	bl	8002550 <chOQPutTimeout>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	4259      	negs	r1, r3
 8008366:	4159      	adcs	r1, r3
 8008368:	200d      	movs	r0, #13
}
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8008370:	f7fd b98e 	b.w	8005690 <_test_assert>
 8008374:	20000878 	.word	0x20000878
 8008378:	0800ab14 	.word	0x0800ab14
 800837c:	0800a3f0 	.word	0x0800a3f0
 8008380:	20000d18 	.word	0x20000d18
 8008384:	08007ea1 	.word	0x08007ea1
 8008388:	200018a8 	.word	0x200018a8
 800838c:	00000000 	.word	0x00000000

08008390 <sys2_execute>:
 8008390:	2320      	movs	r3, #32
 8008392:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008396:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008398:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800839a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800839e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80083a0:	2300      	movs	r3, #0
 80083a2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80083a6:	b662      	cpsie	i
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 80083b0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80083b2:	2320      	movs	r3, #32
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	2400      	movs	r4, #0
 80083ba:	f384 8811 	msr	BASEPRI, r4
 80083be:	f383 8811 	msr	BASEPRI, r3
  chSysLockFromISR();
  chSysUnlockFromISR();

  /* Reentrant case.*/
  chSysLockFromISR();
  sts = chSysGetStatusAndLockX();
 80083c2:	f7f8 fd7d 	bl	8000ec0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 80083c6:	f7f8 fd8b 	bl	8000ee0 <chSysRestoreStatusX>
 80083ca:	f384 8811 	msr	BASEPRI, r4
 80083ce:	bd10      	pop	{r4, pc}

080083d0 <sys3_execute>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2420      	movs	r4, #32
 80083d4:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80083d8:	2001      	movs	r0, #1
 80083da:	f7f8 fcd1 	bl	8000d80 <chSysIntegrityCheckI>
 80083de:	2300      	movs	r3, #0
 80083e0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 80083e4:	f080 0101 	eor.w	r1, r0, #1
 80083e8:	b2c9      	uxtb	r1, r1
 80083ea:	2001      	movs	r0, #1
 80083ec:	f7fd f950 	bl	8005690 <_test_assert>
 80083f0:	b100      	cbz	r0, 80083f4 <sys3_execute+0x24>
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	4605      	mov	r5, r0
 80083f6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80083fa:	2002      	movs	r0, #2
 80083fc:	f7f8 fcc0 	bl	8000d80 <chSysIntegrityCheckI>
 8008400:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 8008404:	f080 0101 	eor.w	r1, r0, #1
 8008408:	b2c9      	uxtb	r1, r1
 800840a:	2002      	movs	r0, #2
 800840c:	f7fd f940 	bl	8005690 <_test_assert>
 8008410:	4605      	mov	r5, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d1ed      	bne.n	80083f2 <sys3_execute+0x22>
 8008416:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 800841a:	2004      	movs	r0, #4
 800841c:	f7f8 fcb0 	bl	8000d80 <chSysIntegrityCheckI>
 8008420:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8008424:	f080 0101 	eor.w	r1, r0, #1
 8008428:	b2c9      	uxtb	r1, r1
 800842a:	2003      	movs	r0, #3
 800842c:	f7fd f930 	bl	8005690 <_test_assert>
 8008430:	4605      	mov	r5, r0
 8008432:	2800      	cmp	r0, #0
 8008434:	d1dd      	bne.n	80083f2 <sys3_execute+0x22>
 8008436:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 800843a:	2008      	movs	r0, #8
 800843c:	f7f8 fca0 	bl	8000d80 <chSysIntegrityCheckI>
 8008440:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8008444:	f080 0101 	eor.w	r1, r0, #1
 8008448:	b2c9      	uxtb	r1, r1
 800844a:	2004      	movs	r0, #4
}
 800844c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8008450:	f7fd b91e 	b.w	8005690 <_test_assert>
	...

08008460 <sys1_execute>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8008460:	b510      	push	{r4, lr}
 8008462:	b086      	sub	sp, #24
  syssts_t sts;
  virtual_timer_t vt;

  /* Testing normal case.*/
  sts = chSysGetStatusAndLockX();
 8008464:	f7f8 fd2c 	bl	8000ec0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8008468:	f7f8 fd3a 	bl	8000ee0 <chSysRestoreStatusX>
 800846c:	2420      	movs	r4, #32
 800846e:	f384 8811 	msr	BASEPRI, r4

  /* Reentrant case.*/
  chSysLock();
  sts = chSysGetStatusAndLockX();
 8008472:	f7f8 fd25 	bl	8000ec0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8008476:	f7f8 fd33 	bl	8000ee0 <chSysRestoreStatusX>
 800847a:	2300      	movs	r3, #0
 800847c:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8008480:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8008484:	b90b      	cbnz	r3, 800848a <sys1_execute+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8008486:	f384 8811 	msr	BASEPRI, r4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800848a:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 800848e:	b913      	cbnz	r3, 8008496 <sys1_execute+0x36>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8008490:	2320      	movs	r3, #32
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	2300      	movs	r3, #0
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	2220      	movs	r2, #32
 800849e:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80084a2:	f3ef 8212 	mrs	r2, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 80084a6:	b10a      	cbz	r2, 80084ac <sys1_execute+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80084a8:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80084ac:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 80084b0:	b113      	cbz	r3, 80084b8 <sys1_execute+0x58>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80084b2:	2300      	movs	r3, #0
 80084b4:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	2320      	movs	r3, #32
 80084be:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80084c2:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 80084c4:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80084c6:	b113      	cbz	r3, 80084ce <sys1_execute+0x6e>
    chVTDoResetI(vtp);
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7f8 fd79 	bl	8000fc0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80084ce:	4620      	mov	r0, r4
 80084d0:	2300      	movs	r3, #0
 80084d2:	4a0c      	ldr	r2, [pc, #48]	; (8008504 <sys1_execute+0xa4>)
 80084d4:	2101      	movs	r1, #1
 80084d6:	f7f8 fd33 	bl	8000f40 <chVTDoSetI>
 80084da:	2400      	movs	r4, #0
 80084dc:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 80084e0:	200a      	movs	r0, #10
 80084e2:	f7f8 ff9d 	bl	8001420 <chThdSleep>
 80084e6:	2320      	movs	r3, #32
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	9904      	ldr	r1, [sp, #16]
 80084ee:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80084f2:	fab1 f181 	clz	r1, r1
 80084f6:	0949      	lsrs	r1, r1, #5
 80084f8:	2001      	movs	r0, #1
 80084fa:	f7fd f8c9 	bl	8005690 <_test_assert>
}
 80084fe:	b006      	add	sp, #24
 8008500:	bd10      	pop	{r4, pc}
 8008502:	bf00      	nop
 8008504:	080083b1 	.word	0x080083b1
	...

08008510 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
	...

08008520 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8008520:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8008522:	482f      	ldr	r0, [pc, #188]	; (80085e0 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8008524:	4c2f      	ldr	r4, [pc, #188]	; (80085e4 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8008526:	f7fd f86b 	bl	8005600 <test_print>
  test_printn(sizeof(ch_system_t));
 800852a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800852e:	f7fd f837 	bl	80055a0 <test_printn>
  test_println(" bytes");
 8008532:	4620      	mov	r0, r4
 8008534:	f7fd f87c 	bl	8005630 <test_println>
  test_print("--- Thread: ");
 8008538:	482b      	ldr	r0, [pc, #172]	; (80085e8 <bmk13_execute+0xc8>)
 800853a:	f7fd f861 	bl	8005600 <test_print>
  test_printn(sizeof(thread_t));
 800853e:	2044      	movs	r0, #68	; 0x44
 8008540:	f7fd f82e 	bl	80055a0 <test_printn>
  test_println(" bytes");
 8008544:	4620      	mov	r0, r4
 8008546:	f7fd f873 	bl	8005630 <test_println>
  test_print("--- Timer : ");
 800854a:	4828      	ldr	r0, [pc, #160]	; (80085ec <bmk13_execute+0xcc>)
 800854c:	f7fd f858 	bl	8005600 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8008550:	2014      	movs	r0, #20
 8008552:	f7fd f825 	bl	80055a0 <test_printn>
  test_println(" bytes");
 8008556:	4620      	mov	r0, r4
 8008558:	f7fd f86a 	bl	8005630 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800855c:	4824      	ldr	r0, [pc, #144]	; (80085f0 <bmk13_execute+0xd0>)
 800855e:	f7fd f84f 	bl	8005600 <test_print>
  test_printn(sizeof(semaphore_t));
 8008562:	200c      	movs	r0, #12
 8008564:	f7fd f81c 	bl	80055a0 <test_printn>
  test_println(" bytes");
 8008568:	4620      	mov	r0, r4
 800856a:	f7fd f861 	bl	8005630 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800856e:	4821      	ldr	r0, [pc, #132]	; (80085f4 <bmk13_execute+0xd4>)
 8008570:	f7fd f846 	bl	8005600 <test_print>
  test_printn(sizeof(event_source_t));
 8008574:	2004      	movs	r0, #4
 8008576:	f7fd f813 	bl	80055a0 <test_printn>
  test_println(" bytes");
 800857a:	4620      	mov	r0, r4
 800857c:	f7fd f858 	bl	8005630 <test_println>
  test_print("--- EventL: ");
 8008580:	481d      	ldr	r0, [pc, #116]	; (80085f8 <bmk13_execute+0xd8>)
 8008582:	f7fd f83d 	bl	8005600 <test_print>
  test_printn(sizeof(event_listener_t));
 8008586:	2014      	movs	r0, #20
 8008588:	f7fd f80a 	bl	80055a0 <test_printn>
  test_println(" bytes");
 800858c:	4620      	mov	r0, r4
 800858e:	f7fd f84f 	bl	8005630 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8008592:	481a      	ldr	r0, [pc, #104]	; (80085fc <bmk13_execute+0xdc>)
 8008594:	f7fd f834 	bl	8005600 <test_print>
  test_printn(sizeof(mutex_t));
 8008598:	2010      	movs	r0, #16
 800859a:	f7fd f801 	bl	80055a0 <test_printn>
  test_println(" bytes");
 800859e:	4620      	mov	r0, r4
 80085a0:	f7fd f846 	bl	8005630 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80085a4:	4816      	ldr	r0, [pc, #88]	; (8008600 <bmk13_execute+0xe0>)
 80085a6:	f7fd f82b 	bl	8005600 <test_print>
  test_printn(sizeof(condition_variable_t));
 80085aa:	2008      	movs	r0, #8
 80085ac:	f7fc fff8 	bl	80055a0 <test_printn>
  test_println(" bytes");
 80085b0:	4620      	mov	r0, r4
 80085b2:	f7fd f83d 	bl	8005630 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 80085b6:	4813      	ldr	r0, [pc, #76]	; (8008604 <bmk13_execute+0xe4>)
 80085b8:	f7fd f822 	bl	8005600 <test_print>
  test_printn(sizeof(io_queue_t));
 80085bc:	2024      	movs	r0, #36	; 0x24
 80085be:	f7fc ffef 	bl	80055a0 <test_printn>
  test_println(" bytes");
 80085c2:	4620      	mov	r0, r4
 80085c4:	f7fd f834 	bl	8005630 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80085c8:	480f      	ldr	r0, [pc, #60]	; (8008608 <bmk13_execute+0xe8>)
 80085ca:	f7fd f819 	bl	8005600 <test_print>
  test_printn(sizeof(mailbox_t));
 80085ce:	2028      	movs	r0, #40	; 0x28
 80085d0:	f7fc ffe6 	bl	80055a0 <test_printn>
  test_println(" bytes");
 80085d4:	4620      	mov	r0, r4
#endif
}
 80085d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80085da:	f7fd b829 	b.w	8005630 <test_println>
 80085de:	bf00      	nop
 80085e0:	0800ad50 	.word	0x0800ad50
 80085e4:	0800ad60 	.word	0x0800ad60
 80085e8:	0800ad68 	.word	0x0800ad68
 80085ec:	0800ad78 	.word	0x0800ad78
 80085f0:	0800ad88 	.word	0x0800ad88
 80085f4:	0800ad98 	.word	0x0800ad98
 80085f8:	0800ada8 	.word	0x0800ada8
 80085fc:	0800adb8 	.word	0x0800adb8
 8008600:	0800adc8 	.word	0x0800adc8
 8008604:	0800add8 	.word	0x0800add8
 8008608:	0800ade8 	.word	0x0800ade8
 800860c:	00000000 	.word	0x00000000

08008610 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8008610:	b510      	push	{r4, lr}
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8008612:	f7f9 fd95 	bl	8002140 <chMsgWait>
 8008616:	6b04      	ldr	r4, [r0, #48]	; 0x30
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
 8008618:	4621      	mov	r1, r4
 800861a:	f7f9 fdb1 	bl	8002180 <chMsgRelease>
  } while (msg);
 800861e:	2c00      	cmp	r4, #0
 8008620:	d1f7      	bne.n	8008612 <thread2+0x2>
}
 8008622:	bd10      	pop	{r4, pc}
	...

08008630 <bmk6_execute>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008634:	4b14      	ldr	r3, [pc, #80]	; (8008688 <bmk6_execute+0x58>)

  uint32_t n = 0;
  void *wap = wa[0];
 8008636:	4a15      	ldr	r2, [pc, #84]	; (800868c <bmk6_execute+0x5c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() + 1;
 800863e:	689d      	ldr	r5, [r3, #8]
 8008640:	4f13      	ldr	r7, [pc, #76]	; (8008690 <bmk6_execute+0x60>)
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8008642:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
 8008644:	f7fd f8ac 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800864c:	f7fd f8b8 	bl	80057c0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8008650:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8008652:	3501      	adds	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8008654:	4626      	mov	r6, r4
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <bmk6_execute+0x64>)
 8008658:	9600      	str	r6, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008660:	4640      	mov	r0, r8
 8008662:	f7f8 fe6d 	bl	8001340 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008666:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 8008668:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f3      	beq.n	8008656 <bmk6_execute+0x26>
  test_print("--- Score : ");
 800866e:	480a      	ldr	r0, [pc, #40]	; (8008698 <bmk6_execute+0x68>)
 8008670:	f7fc ffc6 	bl	8005600 <test_print>
  test_printn(n);
 8008674:	4620      	mov	r0, r4
 8008676:	f7fc ff93 	bl	80055a0 <test_printn>
  test_println(" threads/S");
 800867a:	4808      	ldr	r0, [pc, #32]	; (800869c <bmk6_execute+0x6c>)
}
 800867c:	b002      	add	sp, #8
 800867e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8008682:	f7fc bfd5 	b.w	8005630 <test_println>
 8008686:	bf00      	nop
 8008688:	20000d18 	.word	0x20000d18
 800868c:	0800a3f0 	.word	0x0800a3f0
 8008690:	2000188d 	.word	0x2000188d
 8008694:	080088a1 	.word	0x080088a1
 8008698:	0800adf8 	.word	0x0800adf8
 800869c:	0800ae08 	.word	0x0800ae08

080086a0 <msg_loop_test>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 80086a4:	f7fd f87c 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 80086a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086ac:	f7fd f888 	bl	80057c0 <test_start_timer>
 80086b0:	4e07      	ldr	r6, [pc, #28]	; (80086d0 <msg_loop_test+0x30>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 80086b2:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 80086b4:	2101      	movs	r1, #1
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7f9 fd22 	bl	8002100 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80086bc:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 80086be:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0f7      	beq.n	80086b4 <msg_loop_test+0x14>
  (void)chMsgSend(tp, 0);
 80086c4:	4628      	mov	r0, r5
 80086c6:	2100      	movs	r1, #0
 80086c8:	f7f9 fd1a 	bl	8002100 <chMsgSend>
  return n;
}
 80086cc:	4620      	mov	r0, r4
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	2000188d 	.word	0x2000188d
	...

080086e0 <bmk1_execute>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80086e0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80086e2:	4b13      	ldr	r3, [pc, #76]	; (8008730 <bmk1_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80086e4:	4a13      	ldr	r2, [pc, #76]	; (8008734 <bmk1_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	6810      	ldr	r0, [r2, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	4b12      	ldr	r3, [pc, #72]	; (8008738 <bmk1_execute+0x58>)
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80086ee:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80086f0:	2100      	movs	r1, #0
 80086f2:	3a01      	subs	r2, #1
 80086f4:	9100      	str	r1, [sp, #0]
 80086f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80086fa:	f7f8 fe21 	bl	8001340 <chThdCreateStatic>
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <bmk1_execute+0x5c>)
 8008700:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8008702:	f7ff ffcd 	bl	80086a0 <msg_loop_test>
 8008706:	4604      	mov	r4, r0
  test_wait_threads();
 8008708:	f7fd f832 	bl	8005770 <test_wait_threads>
  test_print("--- Score : ");
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <bmk1_execute+0x60>)
 800870e:	f7fc ff77 	bl	8005600 <test_print>
  test_printn(n);
 8008712:	4620      	mov	r0, r4
 8008714:	f7fc ff44 	bl	80055a0 <test_printn>
  test_print(" msgs/S, ");
 8008718:	480a      	ldr	r0, [pc, #40]	; (8008744 <bmk1_execute+0x64>)
 800871a:	f7fc ff71 	bl	8005600 <test_print>
  test_printn(n << 1);
 800871e:	0060      	lsls	r0, r4, #1
 8008720:	f7fc ff3e 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 8008724:	4808      	ldr	r0, [pc, #32]	; (8008748 <bmk1_execute+0x68>)
}
 8008726:	b002      	add	sp, #8
 8008728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800872c:	f7fc bf80 	b.w	8005630 <test_println>
 8008730:	20000d18 	.word	0x20000d18
 8008734:	0800a3f0 	.word	0x0800a3f0
 8008738:	08008611 	.word	0x08008611
 800873c:	200018a8 	.word	0x200018a8
 8008740:	0800adf8 	.word	0x0800adf8
 8008744:	0800ae14 	.word	0x0800ae14
 8008748:	0800ae20 	.word	0x0800ae20
 800874c:	00000000 	.word	0x00000000

08008750 <bmk2_execute>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8008750:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008752:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <bmk2_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <bmk2_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	6810      	ldr	r0, [r2, #0]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <bmk2_execute+0x58>)
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 800875e:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008760:	2100      	movs	r1, #0
 8008762:	3201      	adds	r2, #1
 8008764:	9100      	str	r1, [sp, #0]
 8008766:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800876a:	f7f8 fde9 	bl	8001340 <chThdCreateStatic>
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <bmk2_execute+0x5c>)
 8008770:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8008772:	f7ff ff95 	bl	80086a0 <msg_loop_test>
 8008776:	4604      	mov	r4, r0
  test_wait_threads();
 8008778:	f7fc fffa 	bl	8005770 <test_wait_threads>
  test_print("--- Score : ");
 800877c:	480c      	ldr	r0, [pc, #48]	; (80087b0 <bmk2_execute+0x60>)
 800877e:	f7fc ff3f 	bl	8005600 <test_print>
  test_printn(n);
 8008782:	4620      	mov	r0, r4
 8008784:	f7fc ff0c 	bl	80055a0 <test_printn>
  test_print(" msgs/S, ");
 8008788:	480a      	ldr	r0, [pc, #40]	; (80087b4 <bmk2_execute+0x64>)
 800878a:	f7fc ff39 	bl	8005600 <test_print>
  test_printn(n << 1);
 800878e:	0060      	lsls	r0, r4, #1
 8008790:	f7fc ff06 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 8008794:	4808      	ldr	r0, [pc, #32]	; (80087b8 <bmk2_execute+0x68>)
}
 8008796:	b002      	add	sp, #8
 8008798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800879c:	f7fc bf48 	b.w	8005630 <test_println>
 80087a0:	20000d18 	.word	0x20000d18
 80087a4:	0800a3f0 	.word	0x0800a3f0
 80087a8:	08008611 	.word	0x08008611
 80087ac:	200018a8 	.word	0x200018a8
 80087b0:	0800adf8 	.word	0x0800adf8
 80087b4:	0800ae14 	.word	0x0800ae14
 80087b8:	0800ae20 	.word	0x0800ae20
 80087bc:	00000000 	.word	0x00000000

080087c0 <bmk3_execute>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80087c4:	4f2c      	ldr	r7, [pc, #176]	; (8008878 <bmk3_execute+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80087c6:	4e2d      	ldr	r6, [pc, #180]	; (800887c <bmk3_execute+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	6830      	ldr	r0, [r6, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	4b2c      	ldr	r3, [pc, #176]	; (8008880 <bmk3_execute+0xc0>)
 80087d0:	4c2c      	ldr	r4, [pc, #176]	; (8008884 <bmk3_execute+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80087d2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008894 <bmk3_execute+0xd4>
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 80087d6:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80087d8:	2500      	movs	r5, #0
 80087da:	3201      	adds	r2, #1
 80087dc:	9500      	str	r5, [sp, #0]
 80087de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80087e2:	f7f8 fdad 	bl	8001340 <chThdCreateStatic>
 80087e6:	69ba      	ldr	r2, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80087e8:	6873      	ldr	r3, [r6, #4]
 80087ea:	6892      	ldr	r2, [r2, #8]
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80087ec:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80087ee:	3a02      	subs	r2, #2
 80087f0:	9500      	str	r5, [sp, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80087f8:	4643      	mov	r3, r8
 80087fa:	f7f8 fda1 	bl	8001340 <chThdCreateStatic>
 80087fe:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8008800:	68b3      	ldr	r3, [r6, #8]
 8008802:	6892      	ldr	r2, [r2, #8]

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008804:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8008806:	3a03      	subs	r2, #3
 8008808:	9500      	str	r5, [sp, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008810:	4643      	mov	r3, r8
 8008812:	f7f8 fd95 	bl	8001340 <chThdCreateStatic>
 8008816:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8008818:	68f3      	ldr	r3, [r6, #12]
 800881a:	6892      	ldr	r2, [r2, #8]
static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 800881c:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800881e:	3a04      	subs	r2, #4
 8008820:	9500      	str	r5, [sp, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008828:	4643      	mov	r3, r8
 800882a:	f7f8 fd89 	bl	8001340 <chThdCreateStatic>
 800882e:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8008830:	6933      	ldr	r3, [r6, #16]
 8008832:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8008834:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8008836:	3a05      	subs	r2, #5
 8008838:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800883c:	4618      	mov	r0, r3
 800883e:	9500      	str	r5, [sp, #0]
 8008840:	4643      	mov	r3, r8
 8008842:	f7f8 fd7d 	bl	8001340 <chThdCreateStatic>
 8008846:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	f7ff ff29 	bl	80086a0 <msg_loop_test>
 800884e:	4604      	mov	r4, r0
  test_wait_threads();
 8008850:	f7fc ff8e 	bl	8005770 <test_wait_threads>
  test_print("--- Score : ");
 8008854:	480c      	ldr	r0, [pc, #48]	; (8008888 <bmk3_execute+0xc8>)
 8008856:	f7fc fed3 	bl	8005600 <test_print>
  test_printn(n);
 800885a:	4620      	mov	r0, r4
 800885c:	f7fc fea0 	bl	80055a0 <test_printn>
  test_print(" msgs/S, ");
 8008860:	480a      	ldr	r0, [pc, #40]	; (800888c <bmk3_execute+0xcc>)
 8008862:	f7fc fecd 	bl	8005600 <test_print>
  test_printn(n << 1);
 8008866:	0060      	lsls	r0, r4, #1
 8008868:	f7fc fe9a 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 800886c:	4808      	ldr	r0, [pc, #32]	; (8008890 <bmk3_execute+0xd0>)
}
 800886e:	b002      	add	sp, #8
 8008870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8008874:	f7fc bedc 	b.w	8005630 <test_println>
 8008878:	20000d18 	.word	0x20000d18
 800887c:	0800a3f0 	.word	0x0800a3f0
 8008880:	08008611 	.word	0x08008611
 8008884:	200018a8 	.word	0x200018a8
 8008888:	0800adf8 	.word	0x0800adf8
 800888c:	0800ae14 	.word	0x0800ae14
 8008890:	0800ae20 	.word	0x0800ae20
 8008894:	080088a1 	.word	0x080088a1
	...

080088a0 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 80088a0:	f7f8 be16 	b.w	80014d0 <chThdExit>
	...

080088b0 <bmk4_execute>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 80088b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <bmk4_execute+0xa0>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80088b6:	4a27      	ldr	r2, [pc, #156]	; (8008954 <bmk4_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	6810      	ldr	r0, [r2, #0]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	4b26      	ldr	r3, [pc, #152]	; (8008958 <bmk4_execute+0xa8>)
 80088c0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008968 <bmk4_execute+0xb8>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 80088c4:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80088c6:	2500      	movs	r5, #0
 80088c8:	3201      	adds	r2, #1
 80088ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80088ce:	9500      	str	r5, [sp, #0]
 80088d0:	f7f8 fd36 	bl	8001340 <chThdCreateStatic>
 80088d4:	4b21      	ldr	r3, [pc, #132]	; (800895c <bmk4_execute+0xac>)
 80088d6:	4604      	mov	r4, r0
 80088d8:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 80088da:	f7fc ff61 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 80088de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088e2:	f7fc ff6d 	bl	80057c0 <test_start_timer>
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80088e6:	46aa      	mov	sl, r5
 80088e8:	f04f 0820 	mov.w	r8, #32
 80088ec:	2720      	movs	r7, #32
 80088ee:	f388 8811 	msr	BASEPRI, r8
 80088f2:	2100      	movs	r1, #0
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7f8 fc3b 	bl	8001170 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80088fa:	4620      	mov	r0, r4
 80088fc:	2100      	movs	r1, #0
 80088fe:	f7f8 fc37 	bl	8001170 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008902:	4620      	mov	r0, r4
 8008904:	2100      	movs	r1, #0
 8008906:	f7f8 fc33 	bl	8001170 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 800890a:	4620      	mov	r0, r4
 800890c:	2100      	movs	r1, #0
 800890e:	f7f8 fc2f 	bl	8001170 <chSchWakeupS>
 8008912:	2600      	movs	r6, #0
 8008914:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008918:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 800891c:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0e4      	beq.n	80088ec <bmk4_execute+0x3c>
 8008922:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8008926:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800892a:	4620      	mov	r0, r4
 800892c:	f7f8 fc20 	bl	8001170 <chSchWakeupS>
 8008930:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 8008934:	f7fc ff1c 	bl	8005770 <test_wait_threads>
  test_print("--- Score : ");
 8008938:	4809      	ldr	r0, [pc, #36]	; (8008960 <bmk4_execute+0xb0>)
 800893a:	f7fc fe61 	bl	8005600 <test_print>
  test_printn(n * 2);
 800893e:	0068      	lsls	r0, r5, #1
 8008940:	f7fc fe2e 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 8008944:	4807      	ldr	r0, [pc, #28]	; (8008964 <bmk4_execute+0xb4>)
}
 8008946:	b002      	add	sp, #8
 8008948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 800894c:	f7fc be70 	b.w	8005630 <test_println>
 8008950:	20000d18 	.word	0x20000d18
 8008954:	0800a3f0 	.word	0x0800a3f0
 8008958:	08008971 	.word	0x08008971
 800895c:	200018a8 	.word	0x200018a8
 8008960:	0800adf8 	.word	0x0800adf8
 8008964:	0800ae20 	.word	0x0800ae20
 8008968:	2000188d 	.word	0x2000188d
 800896c:	00000000 	.word	0x00000000

08008970 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008970:	4a07      	ldr	r2, [pc, #28]	; (8008990 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8008972:	b510      	push	{r4, lr}
 8008974:	2320      	movs	r3, #32
 8008976:	6994      	ldr	r4, [r2, #24]
 8008978:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800897c:	2003      	movs	r0, #3
 800897e:	f7f8 fbb7 	bl	80010f0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8008982:	6a23      	ldr	r3, [r4, #32]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f9      	beq.n	800897c <thread4+0xc>
 8008988:	2300      	movs	r3, #0
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	bd10      	pop	{r4, pc}
 8008990:	20000d18 	.word	0x20000d18
	...

080089a0 <bmk5_execute>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80089a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <bmk5_execute+0x5c>)

  uint32_t n = 0;
  void *wap = wa[0];
 80089a6:	4a16      	ldr	r2, [pc, #88]	; (8008a00 <bmk5_execute+0x60>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() - 1;
 80089ae:	689d      	ldr	r5, [r3, #8]
 80089b0:	4f14      	ldr	r7, [pc, #80]	; (8008a04 <bmk5_execute+0x64>)
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80089b2:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
 80089b4:	f7fc fef4 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 80089b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089bc:	f7fc ff00 	bl	80057c0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 80089c0:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80089c2:	3d01      	subs	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 80089c4:	4626      	mov	r6, r4
 80089c6:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <bmk5_execute+0x68>)
 80089c8:	9600      	str	r6, [sp, #0]
 80089ca:	462a      	mov	r2, r5
 80089cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80089d0:	4640      	mov	r0, r8
 80089d2:	f7f8 fcb5 	bl	8001340 <chThdCreateStatic>
 80089d6:	f7f8 fd83 	bl	80014e0 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80089da:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 80089dc:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f1      	beq.n	80089c6 <bmk5_execute+0x26>
  test_print("--- Score : ");
 80089e2:	480a      	ldr	r0, [pc, #40]	; (8008a0c <bmk5_execute+0x6c>)
 80089e4:	f7fc fe0c 	bl	8005600 <test_print>
  test_printn(n);
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7fc fdd9 	bl	80055a0 <test_printn>
  test_println(" threads/S");
 80089ee:	4808      	ldr	r0, [pc, #32]	; (8008a10 <bmk5_execute+0x70>)
}
 80089f0:	b002      	add	sp, #8
 80089f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80089f6:	f7fc be1b 	b.w	8005630 <test_println>
 80089fa:	bf00      	nop
 80089fc:	20000d18 	.word	0x20000d18
 8008a00:	0800a3f0 	.word	0x0800a3f0
 8008a04:	2000188d 	.word	0x2000188d
 8008a08:	080088a1 	.word	0x080088a1
 8008a0c:	0800adf8 	.word	0x0800adf8
 8008a10:	0800ae08 	.word	0x0800ae08
	...

08008a20 <bmk7_execute>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008a24:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8008b28 <bmk7_execute+0x108>
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008a28:	4f37      	ldr	r7, [pc, #220]	; (8008b08 <bmk7_execute+0xe8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008a2a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008a2e:	6838      	ldr	r0, [r7, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	4b36      	ldr	r3, [pc, #216]	; (8008b0c <bmk7_execute+0xec>)
 8008a34:	4e36      	ldr	r6, [pc, #216]	; (8008b10 <bmk7_execute+0xf0>)
 8008a36:	4d37      	ldr	r5, [pc, #220]	; (8008b14 <bmk7_execute+0xf4>)
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8008a38:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008a3a:	2400      	movs	r4, #0
 8008a3c:	3205      	adds	r2, #5
 8008a3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a42:	9400      	str	r4, [sp, #0]
 8008a44:	f7f8 fc7c 	bl	8001340 <chThdCreateStatic>
 8008a48:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6892      	ldr	r2, [r2, #8]
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008a50:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008a52:	3204      	adds	r2, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a5a:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <bmk7_execute+0xec>)
 8008a5c:	9400      	str	r4, [sp, #0]
 8008a5e:	f7f8 fc6f 	bl	8001340 <chThdCreateStatic>
 8008a62:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6892      	ldr	r2, [r2, #8]

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008a6a:	6070      	str	r0, [r6, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8008a6c:	3203      	adds	r2, #3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a74:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <bmk7_execute+0xec>)
 8008a76:	9400      	str	r4, [sp, #0]
 8008a78:	f7f8 fc62 	bl	8001340 <chThdCreateStatic>
 8008a7c:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6892      	ldr	r2, [r2, #8]
static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8008a84:	60b0      	str	r0, [r6, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008a86:	3202      	adds	r2, #2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a8e:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <bmk7_execute+0xec>)
 8008a90:	9400      	str	r4, [sp, #0]
 8008a92:	f7f8 fc55 	bl	8001340 <chThdCreateStatic>
 8008a96:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008a9e:	60f0      	str	r0, [r6, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008aa8:	4b18      	ldr	r3, [pc, #96]	; (8008b0c <bmk7_execute+0xec>)
 8008aaa:	9400      	str	r4, [sp, #0]
 8008aac:	f7f8 fc48 	bl	8001340 <chThdCreateStatic>
 8008ab0:	6130      	str	r0, [r6, #16]

  n = 0;
  test_wait_tick();
 8008ab2:	f7fc fe75 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008aba:	f7fc fe81 	bl	80057c0 <test_start_timer>
  do {
    chSemReset(&sem1, 0);
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4815      	ldr	r0, [pc, #84]	; (8008b18 <bmk7_execute+0xf8>)
 8008ac2:	f7f8 fea5 	bl	8001810 <chSemReset>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008ac6:	782b      	ldrb	r3, [r5, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8008ac8:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f7      	beq.n	8008abe <bmk7_execute+0x9e>
  test_terminate_threads();
 8008ace:	f7fc fe3f 	bl	8005750 <test_terminate_threads>
  chSemReset(&sem1, 0);
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4810      	ldr	r0, [pc, #64]	; (8008b18 <bmk7_execute+0xf8>)
 8008ad6:	f7f8 fe9b 	bl	8001810 <chSemReset>
  test_wait_threads();
 8008ada:	f7fc fe49 	bl	8005770 <test_wait_threads>

  test_print("--- Score : ");
 8008ade:	480f      	ldr	r0, [pc, #60]	; (8008b1c <bmk7_execute+0xfc>)
 8008ae0:	f7fc fd8e 	bl	8005600 <test_print>
  test_printn(n);
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7fc fd5b 	bl	80055a0 <test_printn>
  test_print(" reschedules/S, ");
 8008aea:	480d      	ldr	r0, [pc, #52]	; (8008b20 <bmk7_execute+0x100>)
 8008aec:	f7fc fd88 	bl	8005600 <test_print>
  test_printn(n * 6);
 8008af0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008af4:	0040      	lsls	r0, r0, #1
 8008af6:	f7fc fd53 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 8008afa:	480a      	ldr	r0, [pc, #40]	; (8008b24 <bmk7_execute+0x104>)
}
 8008afc:	b002      	add	sp, #8
 8008afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8008b02:	f7fc bd95 	b.w	8005630 <test_println>
 8008b06:	bf00      	nop
 8008b08:	0800a3f0 	.word	0x0800a3f0
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	200018a8 	.word	0x200018a8
 8008b14:	2000188d 	.word	0x2000188d
 8008b18:	20001970 	.word	0x20001970
 8008b1c:	0800adf8 	.word	0x0800adf8
 8008b20:	0800ae2c 	.word	0x0800ae2c
 8008b24:	0800ae20 	.word	0x0800ae20
 8008b28:	20000d18 	.word	0x20000d18
 8008b2c:	00000000 	.word	0x00000000

08008b30 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8008b30:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008b32:	4c06      	ldr	r4, [pc, #24]	; (8008b4c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8008b34:	69a3      	ldr	r3, [r4, #24]

  (void)p;
  while (!chThdShouldTerminateX())
 8008b36:	7f5b      	ldrb	r3, [r3, #29]
 8008b38:	075a      	lsls	r2, r3, #29
 8008b3a:	d406      	bmi.n	8008b4a <thread3+0x1a>
    chSemWait(&sem1);
 8008b3c:	4804      	ldr	r0, [pc, #16]	; (8008b50 <thread3+0x20>)
 8008b3e:	f7f8 fe77 	bl	8001830 <chSemWait>
 8008b42:	69a3      	ldr	r3, [r4, #24]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8008b44:	7f5b      	ldrb	r3, [r3, #29]
 8008b46:	075b      	lsls	r3, r3, #29
 8008b48:	d5f8      	bpl.n	8008b3c <thread3+0xc>
 8008b4a:	bd10      	pop	{r4, pc}
 8008b4c:	20000d18 	.word	0x20000d18
 8008b50:	20001970 	.word	0x20001970
	...

08008b60 <bmk7_setup>:
    chSemWait(&sem1);
}

static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
 8008b60:	2100      	movs	r1, #0
 8008b62:	4801      	ldr	r0, [pc, #4]	; (8008b68 <bmk7_setup+0x8>)
 8008b64:	f7f8 be34 	b.w	80017d0 <chSemObjectInit>
 8008b68:	20001970 	.word	0x20001970
 8008b6c:	00000000 	.word	0x00000000

08008b70 <bmk11_setup>:
 * a second of continuous operations.
 */

static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
 8008b70:	2101      	movs	r1, #1
 8008b72:	4801      	ldr	r0, [pc, #4]	; (8008b78 <bmk11_setup+0x8>)
 8008b74:	f7f8 be2c 	b.w	80017d0 <chSemObjectInit>
 8008b78:	20001970 	.word	0x20001970
 8008b7c:	00000000 	.word	0x00000000

08008b80 <bmk8_execute>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8008b86:	ac04      	add	r4, sp, #16
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008b88:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8008c58 <bmk8_execute+0xd8>
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008b8c:	4f2d      	ldr	r7, [pc, #180]	; (8008c44 <bmk8_execute+0xc4>)
 8008b8e:	4e2e      	ldr	r6, [pc, #184]	; (8008c48 <bmk8_execute+0xc8>)
 8008b90:	4d2e      	ldr	r5, [pc, #184]	; (8008c4c <bmk8_execute+0xcc>)
}

static void bmk8_execute(void) {
  uint32_t n;

  n = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8008b98:	f7fc fe02 	bl	80057a0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008b9c:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008ba0:	6838      	ldr	r0, [r7, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	9400      	str	r4, [sp, #0]
 8008ba6:	4633      	mov	r3, r6
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008bae:	f7f8 fbc7 	bl	8001340 <chThdCreateStatic>
 8008bb2:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bba:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	9400      	str	r4, [sp, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008bc6:	4633      	mov	r3, r6
 8008bc8:	f7f8 fbba 	bl	8001340 <chThdCreateStatic>
 8008bcc:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	6892      	ldr	r2, [r2, #8]

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bd4:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	9400      	str	r4, [sp, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008be0:	4633      	mov	r3, r6
 8008be2:	f7f8 fbad 	bl	8001340 <chThdCreateStatic>
 8008be6:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6892      	ldr	r2, [r2, #8]
  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bee:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bf0:	3a01      	subs	r2, #1
 8008bf2:	9400      	str	r4, [sp, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008bfa:	4633      	mov	r3, r6
 8008bfc:	f7f8 fba0 	bl	8001340 <chThdCreateStatic>
 8008c00:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	6892      	ldr	r2, [r2, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c08:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c0a:	3a01      	subs	r2, #1
 8008c0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c10:	9400      	str	r4, [sp, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	4633      	mov	r3, r6
 8008c16:	f7f8 fb93 	bl	8001340 <chThdCreateStatic>
 8008c1a:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8008c1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c20:	f7f8 fbfe 	bl	8001420 <chThdSleep>
  test_terminate_threads();
 8008c24:	f7fc fd94 	bl	8005750 <test_terminate_threads>
  test_wait_threads();
 8008c28:	f7fc fda2 	bl	8005770 <test_wait_threads>

  test_print("--- Score : ");
 8008c2c:	4808      	ldr	r0, [pc, #32]	; (8008c50 <bmk8_execute+0xd0>)
 8008c2e:	f7fc fce7 	bl	8005600 <test_print>
  test_printn(n);
 8008c32:	9803      	ldr	r0, [sp, #12]
 8008c34:	f7fc fcb4 	bl	80055a0 <test_printn>
  test_println(" ctxswc/S");
 8008c38:	4806      	ldr	r0, [pc, #24]	; (8008c54 <bmk8_execute+0xd4>)
 8008c3a:	f7fc fcf9 	bl	8005630 <test_println>
}
 8008c3e:	b004      	add	sp, #16
 8008c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c44:	0800a3f0 	.word	0x0800a3f0
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	200018a8 	.word	0x200018a8
 8008c50:	0800adf8 	.word	0x0800adf8
 8008c54:	0800ae20 	.word	0x0800ae20
 8008c58:	20000d18 	.word	0x20000d18
 8008c5c:	00000000 	.word	0x00000000

08008c60 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d09      	ldr	r5, [pc, #36]	; (8008c88 <thread8+0x28>)
 8008c64:	4604      	mov	r4, r0

  do {
    chThdYield();
 8008c66:	f7f8 fbfb 	bl	8001460 <chThdYield>
    chThdYield();
 8008c6a:	f7f8 fbf9 	bl	8001460 <chThdYield>
    chThdYield();
 8008c6e:	f7f8 fbf7 	bl	8001460 <chThdYield>
    chThdYield();
 8008c72:	f7f8 fbf5 	bl	8001460 <chThdYield>
    (*(uint32_t *)p) += 4;
 8008c76:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8008c78:	69aa      	ldr	r2, [r5, #24]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	6023      	str	r3, [r4, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8008c7e:	7f53      	ldrb	r3, [r2, #29]
 8008c80:	075b      	lsls	r3, r3, #29
 8008c82:	d5f0      	bpl.n	8008c66 <thread8+0x6>
}
 8008c84:	bd38      	pop	{r3, r4, r5, pc}
 8008c86:	bf00      	nop
 8008c88:	20000d18 	.word	0x20000d18
 8008c8c:	00000000 	.word	0x00000000

08008c90 <bmk9_execute>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	b082      	sub	sp, #8
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
 8008c94:	2400      	movs	r4, #0
 8008c96:	4623      	mov	r3, r4
 8008c98:	2210      	movs	r2, #16
 8008c9a:	4923      	ldr	r1, [pc, #140]	; (8008d28 <bmk9_execute+0x98>)
 8008c9c:	4823      	ldr	r0, [pc, #140]	; (8008d2c <bmk9_execute+0x9c>)
 8008c9e:	9400      	str	r4, [sp, #0]
 8008ca0:	f7f9 fb8e 	bl	80023c0 <chIQObjectInit>
  n = 0;
  test_wait_tick();
 8008ca4:	f7fc fd7c 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008cac:	f7fc fd88 	bl	80057c0 <test_start_timer>
 8008cb0:	4e1f      	ldr	r6, [pc, #124]	; (8008d30 <bmk9_execute+0xa0>)
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8008cb2:	4625      	mov	r5, r4
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	2100      	movs	r1, #0
 8008cbc:	481b      	ldr	r0, [pc, #108]	; (8008d2c <bmk9_execute+0x9c>)
 8008cbe:	f7f9 fb9f 	bl	8002400 <chIQPutI>
    chIQPutI(&iq, 1);
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4819      	ldr	r0, [pc, #100]	; (8008d2c <bmk9_execute+0x9c>)
 8008cc6:	f7f9 fb9b 	bl	8002400 <chIQPutI>
    chIQPutI(&iq, 2);
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4817      	ldr	r0, [pc, #92]	; (8008d2c <bmk9_execute+0x9c>)
 8008cce:	f7f9 fb97 	bl	8002400 <chIQPutI>
    chIQPutI(&iq, 3);
 8008cd2:	2103      	movs	r1, #3
 8008cd4:	4815      	ldr	r0, [pc, #84]	; (8008d2c <bmk9_execute+0x9c>)
 8008cd6:	f7f9 fb93 	bl	8002400 <chIQPutI>
 8008cda:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8008cde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ce2:	4812      	ldr	r0, [pc, #72]	; (8008d2c <bmk9_execute+0x9c>)
 8008ce4:	f7f9 fbac 	bl	8002440 <chIQGetTimeout>
 8008ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cec:	480f      	ldr	r0, [pc, #60]	; (8008d2c <bmk9_execute+0x9c>)
 8008cee:	f7f9 fba7 	bl	8002440 <chIQGetTimeout>
 8008cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cf6:	480d      	ldr	r0, [pc, #52]	; (8008d2c <bmk9_execute+0x9c>)
 8008cf8:	f7f9 fba2 	bl	8002440 <chIQGetTimeout>
 8008cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d00:	480a      	ldr	r0, [pc, #40]	; (8008d2c <bmk9_execute+0x9c>)
 8008d02:	f7f9 fb9d 	bl	8002440 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d06:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8008d08:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0d2      	beq.n	8008cb4 <bmk9_execute+0x24>
  test_print("--- Score : ");
 8008d0e:	4809      	ldr	r0, [pc, #36]	; (8008d34 <bmk9_execute+0xa4>)
 8008d10:	f7fc fc76 	bl	8005600 <test_print>
  test_printn(n * 4);
 8008d14:	00a0      	lsls	r0, r4, #2
 8008d16:	f7fc fc43 	bl	80055a0 <test_printn>
  test_println(" bytes/S");
 8008d1a:	4807      	ldr	r0, [pc, #28]	; (8008d38 <bmk9_execute+0xa8>)
}
 8008d1c:	b002      	add	sp, #8
 8008d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8008d22:	f7fc bc85 	b.w	8005630 <test_println>
 8008d26:	bf00      	nop
 8008d28:	20001938 	.word	0x20001938
 8008d2c:	2000197c 	.word	0x2000197c
 8008d30:	2000188d 	.word	0x2000188d
 8008d34:	0800adf8 	.word	0x0800adf8
 8008d38:	0800ae40 	.word	0x0800ae40
 8008d3c:	00000000 	.word	0x00000000

08008d40 <bmk10_execute>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8008d42:	f7fc fd2d 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d4a:	f7fc fd39 	bl	80057c0 <test_start_timer>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8008d4e:	2400      	movs	r4, #0
 8008d50:	4f14      	ldr	r7, [pc, #80]	; (8008da4 <bmk10_execute+0x64>)

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8008d52:	4626      	mov	r6, r4
 8008d54:	2520      	movs	r5, #32
 8008d56:	f385 8811 	msr	BASEPRI, r5
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4a12      	ldr	r2, [pc, #72]	; (8008da8 <bmk10_execute+0x68>)
 8008d5e:	4813      	ldr	r0, [pc, #76]	; (8008dac <bmk10_execute+0x6c>)
 8008d60:	2101      	movs	r1, #1
 8008d62:	f7f8 f8ed 	bl	8000f40 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008d66:	2300      	movs	r3, #0
 8008d68:	4a0f      	ldr	r2, [pc, #60]	; (8008da8 <bmk10_execute+0x68>)
 8008d6a:	4811      	ldr	r0, [pc, #68]	; (8008db0 <bmk10_execute+0x70>)
 8008d6c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008d70:	f7f8 f8e6 	bl	8000f40 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8008d74:	480d      	ldr	r0, [pc, #52]	; (8008dac <bmk10_execute+0x6c>)
 8008d76:	f7f8 f923 	bl	8000fc0 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8008d7a:	480d      	ldr	r0, [pc, #52]	; (8008db0 <bmk10_execute+0x70>)
 8008d7c:	f7f8 f920 	bl	8000fc0 <chVTDoResetI>
 8008d80:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d84:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8008d86:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0e4      	beq.n	8008d56 <bmk10_execute+0x16>
  test_print("--- Score : ");
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <bmk10_execute+0x74>)
 8008d8e:	f7fc fc37 	bl	8005600 <test_print>
  test_printn(n * 2);
 8008d92:	0060      	lsls	r0, r4, #1
 8008d94:	f7fc fc04 	bl	80055a0 <test_printn>
  test_println(" timers/S");
 8008d98:	4807      	ldr	r0, [pc, #28]	; (8008db8 <bmk10_execute+0x78>)
}
 8008d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8008d9e:	f7fc bc47 	b.w	8005630 <test_println>
 8008da2:	bf00      	nop
 8008da4:	2000188d 	.word	0x2000188d
 8008da8:	08008511 	.word	0x08008511
 8008dac:	20001948 	.word	0x20001948
 8008db0:	2000195c 	.word	0x2000195c
 8008db4:	0800adf8 	.word	0x0800adf8
 8008db8:	0800ae4c 	.word	0x0800ae4c
 8008dbc:	00000000 	.word	0x00000000

08008dc0 <bmk11_execute>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8008dc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008dc2:	f7fc fced 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008dc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008dca:	f7fc fcf9 	bl	80057c0 <test_start_timer>
 8008dce:	4d14      	ldr	r5, [pc, #80]	; (8008e20 <bmk11_execute+0x60>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8008dd0:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8008dd2:	4814      	ldr	r0, [pc, #80]	; (8008e24 <bmk11_execute+0x64>)
 8008dd4:	f7f8 fd2c 	bl	8001830 <chSemWait>
    chSemSignal(&sem1);
 8008dd8:	4812      	ldr	r0, [pc, #72]	; (8008e24 <bmk11_execute+0x64>)
 8008dda:	f7f8 fd99 	bl	8001910 <chSemSignal>
    chSemWait(&sem1);
 8008dde:	4811      	ldr	r0, [pc, #68]	; (8008e24 <bmk11_execute+0x64>)
 8008de0:	f7f8 fd26 	bl	8001830 <chSemWait>
    chSemSignal(&sem1);
 8008de4:	480f      	ldr	r0, [pc, #60]	; (8008e24 <bmk11_execute+0x64>)
 8008de6:	f7f8 fd93 	bl	8001910 <chSemSignal>
    chSemWait(&sem1);
 8008dea:	480e      	ldr	r0, [pc, #56]	; (8008e24 <bmk11_execute+0x64>)
 8008dec:	f7f8 fd20 	bl	8001830 <chSemWait>
    chSemSignal(&sem1);
 8008df0:	480c      	ldr	r0, [pc, #48]	; (8008e24 <bmk11_execute+0x64>)
 8008df2:	f7f8 fd8d 	bl	8001910 <chSemSignal>
    chSemWait(&sem1);
 8008df6:	480b      	ldr	r0, [pc, #44]	; (8008e24 <bmk11_execute+0x64>)
 8008df8:	f7f8 fd1a 	bl	8001830 <chSemWait>
    chSemSignal(&sem1);
 8008dfc:	4809      	ldr	r0, [pc, #36]	; (8008e24 <bmk11_execute+0x64>)
 8008dfe:	f7f8 fd87 	bl	8001910 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e02:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8008e04:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0e3      	beq.n	8008dd2 <bmk11_execute+0x12>
  test_print("--- Score : ");
 8008e0a:	4807      	ldr	r0, [pc, #28]	; (8008e28 <bmk11_execute+0x68>)
 8008e0c:	f7fc fbf8 	bl	8005600 <test_print>
  test_printn(n * 4);
 8008e10:	00a0      	lsls	r0, r4, #2
 8008e12:	f7fc fbc5 	bl	80055a0 <test_printn>
  test_println(" wait+signal/S");
 8008e16:	4805      	ldr	r0, [pc, #20]	; (8008e2c <bmk11_execute+0x6c>)
}
 8008e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8008e1c:	f7fc bc08 	b.w	8005630 <test_println>
 8008e20:	2000188d 	.word	0x2000188d
 8008e24:	20001970 	.word	0x20001970
 8008e28:	0800adf8 	.word	0x0800adf8
 8008e2c:	0800ae58 	.word	0x0800ae58

08008e30 <bmk12_execute>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8008e30:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008e32:	f7fc fcb5 	bl	80057a0 <test_wait_tick>
  test_start_timer(1000);
 8008e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e3a:	f7fc fcc1 	bl	80057c0 <test_start_timer>
 8008e3e:	4d14      	ldr	r5, [pc, #80]	; (8008e90 <bmk12_execute+0x60>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8008e40:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8008e42:	4814      	ldr	r0, [pc, #80]	; (8008e94 <bmk12_execute+0x64>)
 8008e44:	f7f8 fe54 	bl	8001af0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008e48:	4812      	ldr	r0, [pc, #72]	; (8008e94 <bmk12_execute+0x64>)
 8008e4a:	f7f8 fe79 	bl	8001b40 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008e4e:	4811      	ldr	r0, [pc, #68]	; (8008e94 <bmk12_execute+0x64>)
 8008e50:	f7f8 fe4e 	bl	8001af0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008e54:	480f      	ldr	r0, [pc, #60]	; (8008e94 <bmk12_execute+0x64>)
 8008e56:	f7f8 fe73 	bl	8001b40 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008e5a:	480e      	ldr	r0, [pc, #56]	; (8008e94 <bmk12_execute+0x64>)
 8008e5c:	f7f8 fe48 	bl	8001af0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008e60:	480c      	ldr	r0, [pc, #48]	; (8008e94 <bmk12_execute+0x64>)
 8008e62:	f7f8 fe6d 	bl	8001b40 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008e66:	480b      	ldr	r0, [pc, #44]	; (8008e94 <bmk12_execute+0x64>)
 8008e68:	f7f8 fe42 	bl	8001af0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008e6c:	4809      	ldr	r0, [pc, #36]	; (8008e94 <bmk12_execute+0x64>)
 8008e6e:	f7f8 fe67 	bl	8001b40 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e72:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8008e74:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0e3      	beq.n	8008e42 <bmk12_execute+0x12>
  test_print("--- Score : ");
 8008e7a:	4807      	ldr	r0, [pc, #28]	; (8008e98 <bmk12_execute+0x68>)
 8008e7c:	f7fc fbc0 	bl	8005600 <test_print>
  test_printn(n * 4);
 8008e80:	00a0      	lsls	r0, r4, #2
 8008e82:	f7fc fb8d 	bl	80055a0 <test_printn>
  test_println(" lock+unlock/S");
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <bmk12_execute+0x6c>)
}
 8008e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8008e8c:	f7fc bbd0 	b.w	8005630 <test_println>
 8008e90:	2000188d 	.word	0x2000188d
 8008e94:	20001928 	.word	0x20001928
 8008e98:	0800adf8 	.word	0x0800adf8
 8008e9c:	0800ae68 	.word	0x0800ae68

08008ea0 <bmk12_setup>:
 * a second of continuous operations.
 */

static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
 8008ea0:	4801      	ldr	r0, [pc, #4]	; (8008ea8 <bmk12_setup+0x8>)
 8008ea2:	f7f8 bdb5 	b.w	8001a10 <chMtxObjectInit>
 8008ea6:	bf00      	nop
 8008ea8:	20001928 	.word	0x20001928
 8008eac:	00000000 	.word	0x00000000

08008eb0 <lis302dlReadRegister>:
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
 8008eb2:	4c0b      	ldr	r4, [pc, #44]	; (8008ee0 <lis302dlReadRegister+0x30>)
  txbuf[1] = 0xff;
  spiExchange(spip, 2, txbuf, rxbuf);
 8008eb4:	4e0b      	ldr	r6, [pc, #44]	; (8008ee4 <lis302dlReadRegister+0x34>)
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	4607      	mov	r7, r0

  spiSelect(spip);
 8008eba:	f7fa f8e1 	bl	8003080 <spiSelect>
  txbuf[0] = 0x80 | reg;
 8008ebe:	f065 017f 	orn	r1, r5, #127	; 0x7f
  txbuf[1] = 0xff;
  spiExchange(spip, 2, txbuf, rxbuf);
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	4633      	mov	r3, r6
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
 8008ec8:	7021      	strb	r1, [r4, #0]
  txbuf[1] = 0xff;
 8008eca:	25ff      	movs	r5, #255	; 0xff
  spiExchange(spip, 2, txbuf, rxbuf);
 8008ecc:	2102      	movs	r1, #2
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
  txbuf[1] = 0xff;
 8008ece:	7065      	strb	r5, [r4, #1]
  spiExchange(spip, 2, txbuf, rxbuf);
 8008ed0:	f7fa f8f6 	bl	80030c0 <spiExchange>
  spiUnselect(spip);
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7fa f8e3 	bl	80030a0 <spiUnselect>
  return rxbuf[1];
}
 8008eda:	7870      	ldrb	r0, [r6, #1]
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200019a4 	.word	0x200019a4
 8008ee4:	200019a0 	.word	0x200019a0
	...

08008ef0 <lis302dlWriteRegister>:
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @param[in] value     the value to be written
 */
void lis302dlWriteRegister(SPIDriver *spip, uint8_t reg, uint8_t value) {
 8008ef0:	f1a1 0320 	sub.w	r3, r1, #32
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b1f      	cmp	r3, #31
 8008ef8:	d807      	bhi.n	8008f0a <lis302dlWriteRegister+0x1a>
 8008efa:	b570      	push	{r4, r5, r6, lr}
 8008efc:	2501      	movs	r5, #1
 8008efe:	4c0c      	ldr	r4, [pc, #48]	; (8008f30 <lis302dlWriteRegister+0x40>)
 8008f00:	fa05 f303 	lsl.w	r3, r5, r3
 8008f04:	401c      	ands	r4, r3
 8008f06:	b90c      	cbnz	r4, 8008f0c <lis302dlWriteRegister+0x1c>
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	4770      	bx	lr
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	4615      	mov	r5, r2
 8008f10:	460c      	mov	r4, r1
  case LIS302DL_CLICK_THSY_X:
  case LIS302DL_CLICK_THSZ:
  case LIS302DL_CLICK_TIMELIMIT:
  case LIS302DL_CLICK_LATENCY:
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
 8008f12:	f7fa f8b5 	bl	8003080 <spiSelect>
    txbuf[0] = reg;
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <lis302dlWriteRegister+0x44>)
    txbuf[1] = value;
    spiSend(spip, 2, txbuf);
 8008f18:	4630      	mov	r0, r6
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	461a      	mov	r2, r3
  case LIS302DL_CLICK_THSZ:
  case LIS302DL_CLICK_TIMELIMIT:
  case LIS302DL_CLICK_LATENCY:
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
    txbuf[0] = reg;
 8008f1e:	701c      	strb	r4, [r3, #0]
    txbuf[1] = value;
 8008f20:	705d      	strb	r5, [r3, #1]
    spiSend(spip, 2, txbuf);
 8008f22:	f7fa f8e5 	bl	80030f0 <spiSend>
    spiUnselect(spip);
 8008f26:	4630      	mov	r0, r6
  }
}
 8008f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
    txbuf[0] = reg;
    txbuf[1] = value;
    spiSend(spip, 2, txbuf);
    spiUnselect(spip);
 8008f2c:	f7fa b8b8 	b.w	80030a0 <spiUnselect>
 8008f30:	f9dd0007 	.word	0xf9dd0007
 8008f34:	200019a4 	.word	0x200019a4
	...

08008f40 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008f40:	b40e      	push	{r1, r2, r3}
 8008f42:	b500      	push	{lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	aa03      	add	r2, sp, #12
 8008f48:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8008f4c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8008f4e:	f000 fa07 	bl	8009360 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008f52:	b002      	add	sp, #8
 8008f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f58:	b003      	add	sp, #12
 8008f5a:	4770      	bx	lr
 8008f5c:	0000      	movs	r0, r0
	...

08008f60 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8008f60:	2900      	cmp	r1, #0
 8008f62:	dd03      	ble.n	8008f6c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008f64:	4a07      	ldr	r2, [pc, #28]	; (8008f84 <cmd_systime+0x24>)
 8008f66:	4908      	ldr	r1, [pc, #32]	; (8008f88 <cmd_systime+0x28>)
 8008f68:	f7ff bfea 	b.w	8008f40 <chprintf>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008f76:	2300      	movs	r3, #0
 8008f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f7a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8008f7e:	4903      	ldr	r1, [pc, #12]	; (8008f8c <cmd_systime+0x2c>)
 8008f80:	f7ff bfde 	b.w	8008f40 <chprintf>
 8008f84:	0800b080 	.word	0x0800b080
 8008f88:	0800b088 	.word	0x0800b088
 8008f8c:	0800b094 	.word	0x0800b094

08008f90 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8008f90:	2900      	cmp	r1, #0
 8008f92:	dd03      	ble.n	8008f9c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008f94:	4a19      	ldr	r2, [pc, #100]	; (8008ffc <cmd_info+0x6c>)
 8008f96:	491a      	ldr	r1, [pc, #104]	; (8009000 <cmd_info+0x70>)
 8008f98:	f7ff bfd2 	b.w	8008f40 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008f9c:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8008f9e:	4a19      	ldr	r2, [pc, #100]	; (8009004 <cmd_info+0x74>)
 8008fa0:	4919      	ldr	r1, [pc, #100]	; (8009008 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8008fa6:	f7ff ffcb 	bl	8008f40 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8008faa:	4a18      	ldr	r2, [pc, #96]	; (800900c <cmd_info+0x7c>)
 8008fac:	4918      	ldr	r1, [pc, #96]	; (8009010 <cmd_info+0x80>)
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f7ff ffc6 	bl	8008f40 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8008fb4:	4a17      	ldr	r2, [pc, #92]	; (8009014 <cmd_info+0x84>)
 8008fb6:	4918      	ldr	r1, [pc, #96]	; (8009018 <cmd_info+0x88>)
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7ff ffc1 	bl	8008f40 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8008fbe:	4a17      	ldr	r2, [pc, #92]	; (800901c <cmd_info+0x8c>)
 8008fc0:	4917      	ldr	r1, [pc, #92]	; (8009020 <cmd_info+0x90>)
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff ffbc 	bl	8008f40 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8008fc8:	4a16      	ldr	r2, [pc, #88]	; (8009024 <cmd_info+0x94>)
 8008fca:	4917      	ldr	r1, [pc, #92]	; (8009028 <cmd_info+0x98>)
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7ff ffb7 	bl	8008f40 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8008fd2:	4a16      	ldr	r2, [pc, #88]	; (800902c <cmd_info+0x9c>)
 8008fd4:	4916      	ldr	r1, [pc, #88]	; (8009030 <cmd_info+0xa0>)
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7ff ffb2 	bl	8008f40 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <cmd_info+0xa4>)
 8008fde:	4916      	ldr	r1, [pc, #88]	; (8009038 <cmd_info+0xa8>)
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f7ff ffad 	bl	8008f40 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8008fe6:	4b15      	ldr	r3, [pc, #84]	; (800903c <cmd_info+0xac>)
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4620      	mov	r0, r4
 8008fec:	4b14      	ldr	r3, [pc, #80]	; (8009040 <cmd_info+0xb0>)
 8008fee:	4a15      	ldr	r2, [pc, #84]	; (8009044 <cmd_info+0xb4>)
 8008ff0:	4915      	ldr	r1, [pc, #84]	; (8009048 <cmd_info+0xb8>)
 8008ff2:	f7ff ffa5 	bl	8008f40 <chprintf>
#endif
#endif
}
 8008ff6:	b002      	add	sp, #8
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0800b09c 	.word	0x0800b09c
 8009000:	0800b088 	.word	0x0800b088
 8009004:	0800a574 	.word	0x0800a574
 8009008:	0800b0a4 	.word	0x0800b0a4
 800900c:	0800a594 	.word	0x0800a594
 8009010:	0800b0b8 	.word	0x0800b0b8
 8009014:	0800a5dc 	.word	0x0800a5dc
 8009018:	0800b0cc 	.word	0x0800b0cc
 800901c:	0800a5e8 	.word	0x0800a5e8
 8009020:	0800b0e0 	.word	0x0800b0e0
 8009024:	0800a5f4 	.word	0x0800a5f4
 8009028:	0800b0f4 	.word	0x0800b0f4
 800902c:	0800a60c 	.word	0x0800a60c
 8009030:	0800b108 	.word	0x0800b108
 8009034:	0800a638 	.word	0x0800a638
 8009038:	0800b11c 	.word	0x0800b11c
 800903c:	0800b158 	.word	0x0800b158
 8009040:	0800b130 	.word	0x0800b130
 8009044:	0800b134 	.word	0x0800b134
 8009048:	0800b140 	.word	0x0800b140
 800904c:	00000000 	.word	0x00000000

08009050 <_strtok.constprop.2>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	460d      	mov	r5, r1
  char *token;
  if (str)
 8009054:	b198      	cbz	r0, 800907e <_strtok.constprop.2+0x2e>
 8009056:	4604      	mov	r4, r0
    *saveptr = str;
 8009058:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800905a:	490c      	ldr	r1, [pc, #48]	; (800908c <_strtok.constprop.2+0x3c>)
 800905c:	4620      	mov	r0, r4
 800905e:	f000 ff97 	bl	8009f90 <strspn>
 8009062:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8009064:	4620      	mov	r0, r4
 8009066:	4909      	ldr	r1, [pc, #36]	; (800908c <_strtok.constprop.2+0x3c>)
 8009068:	f000 ff6a 	bl	8009f40 <strpbrk>
  if (*saveptr)
 800906c:	b160      	cbz	r0, 8009088 <_strtok.constprop.2+0x38>
    *(*saveptr)++ = '\0';
 800906e:	1c42      	adds	r2, r0, #1
 8009070:	2300      	movs	r3, #0
 8009072:	602a      	str	r2, [r5, #0]
 8009074:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8009076:	7823      	ldrb	r3, [r4, #0]
 8009078:	b123      	cbz	r3, 8009084 <_strtok.constprop.2+0x34>
 800907a:	4620      	mov	r0, r4
}
 800907c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800907e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8009080:	2c00      	cmp	r4, #0
 8009082:	d1ea      	bne.n	800905a <_strtok.constprop.2+0xa>
    return NULL;
 8009084:	2000      	movs	r0, #0
 8009086:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8009088:	6028      	str	r0, [r5, #0]
 800908a:	e7f4      	b.n	8009076 <_strtok.constprop.2+0x26>
 800908c:	0800b164 	.word	0x0800b164

08009090 <shellInit>:
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8009090:	4b01      	ldr	r3, [pc, #4]	; (8009098 <shellInit+0x8>)
 8009092:	601b      	str	r3, [r3, #0]
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	200019a8 	.word	0x200019a8
 800909c:	00000000 	.word	0x00000000

080090a0 <shellCreate>:
 * @retval NULL         thread creation failed because memory allocation.
 *
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {
 80090a0:	b500      	push	{lr}
 80090a2:	b083      	sub	sp, #12

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 80090a4:	4b03      	ldr	r3, [pc, #12]	; (80090b4 <shellCreate+0x14>)
 80090a6:	9000      	str	r0, [sp, #0]
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7f8 fb21 	bl	80016f0 <chThdCreateFromHeap>
}
 80090ae:	b003      	add	sp, #12
 80090b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80090b4:	08009161 	.word	0x08009161
	...

080090c0 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80090c0:	b5f0      	push	{r4, r5, r6, r7, lr}
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80090c2:	3a01      	subs	r2, #1
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80090c4:	b083      	sub	sp, #12
 80090c6:	460e      	mov	r6, r1
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80090c8:	188f      	adds	r7, r1, r2
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
  char *p = line;

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	2201      	movs	r2, #1
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f10d 0107 	add.w	r1, sp, #7
 80090d8:	4620      	mov	r0, r4
 80090da:	4798      	blx	r3
 80090dc:	b348      	cbz	r0, 8009132 <shellGetLine+0x72>
      return true;
    if (c == 4) {
 80090de:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80090e2:	2904      	cmp	r1, #4
 80090e4:	d028      	beq.n	8009138 <shellGetLine+0x78>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 80090e6:	2908      	cmp	r1, #8
 80090e8:	d010      	beq.n	800910c <shellGetLine+0x4c>
 80090ea:	297f      	cmp	r1, #127	; 0x7f
 80090ec:	d00e      	beq.n	800910c <shellGetLine+0x4c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80090ee:	290d      	cmp	r1, #13
 80090f0:	d029      	beq.n	8009146 <shellGetLine+0x86>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 80090f2:	291f      	cmp	r1, #31
 80090f4:	d9eb      	bls.n	80090ce <shellGetLine+0xe>
      continue;
    if (p < line + size - 1) {
 80090f6:	42bd      	cmp	r5, r7
 80090f8:	d2e9      	bcs.n	80090ce <shellGetLine+0xe>
      chSequentialStreamPut(chp, c);
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	4620      	mov	r0, r4
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	4798      	blx	r3
      *p++ = (char)c;
 8009102:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009106:	702b      	strb	r3, [r5, #0]
 8009108:	3501      	adds	r5, #1
 800910a:	e7e0      	b.n	80090ce <shellGetLine+0xe>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800910c:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, c);
 800910e:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8009110:	d0dd      	beq.n	80090ce <shellGetLine+0xe>
        chSequentialStreamPut(chp, c);
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	2120      	movs	r1, #32
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	4620      	mov	r0, r4
 8009120:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	4620      	mov	r0, r4
        p--;
 800912c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800912e:	4798      	blx	r3
 8009130:	e7cd      	b.n	80090ce <shellGetLine+0xe>

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
 8009132:	2001      	movs	r0, #1
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8009134:	b003      	add	sp, #12
 8009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8009138:	4620      	mov	r0, r4
 800913a:	4907      	ldr	r1, [pc, #28]	; (8009158 <shellGetLine+0x98>)
 800913c:	f7ff ff00 	bl	8008f40 <chprintf>
      return true;
 8009140:	2001      	movs	r0, #1
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8009142:	b003      	add	sp, #12
 8009144:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8009146:	4620      	mov	r0, r4
 8009148:	4904      	ldr	r1, [pc, #16]	; (800915c <shellGetLine+0x9c>)
 800914a:	f7ff fef9 	bl	8008f40 <chprintf>
      *p = 0;
 800914e:	2000      	movs	r0, #0
 8009150:	7028      	strb	r0, [r5, #0]
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8009152:	b003      	add	sp, #12
 8009154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009156:	bf00      	nop
 8009158:	0800b168 	.word	0x0800b168
 800915c:	0800b12c 	.word	0x0800b12c

08009160 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8009160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009164:	4b5a      	ldr	r3, [pc, #360]	; (80092d0 <shell_thread+0x170>)
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8009166:	6806      	ldr	r6, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	4a5a      	ldr	r2, [pc, #360]	; (80092d4 <shell_thread+0x174>)
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800916c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8009170:	4959      	ldr	r1, [pc, #356]	; (80092d8 <shell_thread+0x178>)
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009172:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8009174:	b096      	sub	sp, #88	; 0x58
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff fee2 	bl	8008f40 <chprintf>
  while (true) {
    chprintf(chp, "ch> ");
 800917c:	4957      	ldr	r1, [pc, #348]	; (80092dc <shell_thread+0x17c>)
 800917e:	4630      	mov	r0, r6
 8009180:	f7ff fede 	bl	8008f40 <chprintf>
    if (shellGetLine(chp, line, sizeof(line))) {
 8009184:	2240      	movs	r2, #64	; 0x40
 8009186:	a906      	add	r1, sp, #24
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ff99 	bl	80090c0 <shellGetLine>
 800918e:	4604      	mov	r4, r0
 8009190:	bb78      	cbnz	r0, 80091f2 <shell_thread+0x92>
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009192:	4669      	mov	r1, sp
 8009194:	a806      	add	r0, sp, #24
 8009196:	f7ff ff5b 	bl	8009050 <_strtok.constprop.2>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800919a:	4669      	mov	r1, sp
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800919c:	4607      	mov	r7, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800919e:	2000      	movs	r0, #0
 80091a0:	ad01      	add	r5, sp, #4
 80091a2:	f7ff ff55 	bl	8009050 <_strtok.constprop.2>
 80091a6:	b150      	cbz	r0, 80091be <shell_thread+0x5e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80091a8:	2c04      	cmp	r4, #4
 80091aa:	d01b      	beq.n	80091e4 <shell_thread+0x84>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80091ac:	f845 0b04 	str.w	r0, [r5], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80091b0:	4669      	mov	r1, sp
 80091b2:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80091b4:	3401      	adds	r4, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80091b6:	f7ff ff4b 	bl	8009050 <_strtok.constprop.2>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d1f4      	bne.n	80091a8 <shell_thread+0x48>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80091be:	ab16      	add	r3, sp, #88	; 0x58
 80091c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80091c4:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80091c8:	2f00      	cmp	r7, #0
 80091ca:	d0d7      	beq.n	800917c <shell_thread+0x1c>
      if (strcasecmp(cmd, "exit") == 0) {
 80091cc:	4944      	ldr	r1, [pc, #272]	; (80092e0 <shell_thread+0x180>)
 80091ce:	4638      	mov	r0, r7
 80091d0:	f000 fe8e 	bl	8009ef0 <strcasecmp>
 80091d4:	b9f0      	cbnz	r0, 8009214 <shell_thread+0xb4>
        if (n > 0) {
 80091d6:	b184      	cbz	r4, 80091fa <shell_thread+0x9a>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80091d8:	4a41      	ldr	r2, [pc, #260]	; (80092e0 <shell_thread+0x180>)
 80091da:	4942      	ldr	r1, [pc, #264]	; (80092e4 <shell_thread+0x184>)
 80091dc:	4630      	mov	r0, r6
 80091de:	f7ff feaf 	bl	8008f40 <chprintf>
    args[n] = NULL;
    if (cmd != NULL) {
      if (strcasecmp(cmd, "exit") == 0) {
        if (n > 0) {
          usage(chp, "exit");
          continue;
 80091e2:	e7cb      	b.n	800917c <shell_thread+0x1c>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80091e4:	4940      	ldr	r1, [pc, #256]	; (80092e8 <shell_thread+0x188>)
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff feaa 	bl	8008f40 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	e7c4      	b.n	800917c <shell_thread+0x1c>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80091f2:	4630      	mov	r0, r6
 80091f4:	493d      	ldr	r1, [pc, #244]	; (80092ec <shell_thread+0x18c>)
 80091f6:	f7ff fea3 	bl	8008f40 <chprintf>
 80091fa:	2320      	movs	r3, #32
 80091fc:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8009200:	2100      	movs	r1, #0
 8009202:	483b      	ldr	r0, [pc, #236]	; (80092f0 <shell_thread+0x190>)
 8009204:	f7f8 fe4c 	bl	8001ea0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8009208:	2000      	movs	r0, #0
 800920a:	f7f8 f941 	bl	8001490 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 800920e:	b016      	add	sp, #88	; 0x58
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8009214:	4937      	ldr	r1, [pc, #220]	; (80092f4 <shell_thread+0x194>)
 8009216:	4638      	mov	r0, r7
 8009218:	f000 fe6a 	bl	8009ef0 <strcasecmp>
 800921c:	b930      	cbnz	r0, 800922c <shell_thread+0xcc>
        if (n > 0) {
 800921e:	b1bc      	cbz	r4, 8009250 <shell_thread+0xf0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009220:	4a34      	ldr	r2, [pc, #208]	; (80092f4 <shell_thread+0x194>)
 8009222:	4930      	ldr	r1, [pc, #192]	; (80092e4 <shell_thread+0x184>)
 8009224:	4630      	mov	r0, r6
 8009226:	f7ff fe8b 	bl	8008f40 <chprintf>
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
 800922a:	e7a7      	b.n	800917c <shell_thread+0x1c>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800922c:	4d32      	ldr	r5, [pc, #200]	; (80092f8 <shell_thread+0x198>)
 800922e:	6828      	ldr	r0, [r5, #0]
 8009230:	b918      	cbnz	r0, 800923a <shell_thread+0xda>
 8009232:	e031      	b.n	8009298 <shell_thread+0x138>
 8009234:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8009238:	b370      	cbz	r0, 8009298 <shell_thread+0x138>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800923a:	4639      	mov	r1, r7
 800923c:	f000 fe58 	bl	8009ef0 <strcasecmp>
 8009240:	2800      	cmp	r0, #0
 8009242:	d1f7      	bne.n	8009234 <shell_thread+0xd4>
      scp->sc_function(chp, argc, argv);
 8009244:	686b      	ldr	r3, [r5, #4]
 8009246:	aa01      	add	r2, sp, #4
 8009248:	4621      	mov	r1, r4
 800924a:	4630      	mov	r0, r6
 800924c:	4798      	blx	r3
 800924e:	e795      	b.n	800917c <shell_thread+0x1c>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009250:	4d29      	ldr	r5, [pc, #164]	; (80092f8 <shell_thread+0x198>)
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8009252:	492a      	ldr	r1, [pc, #168]	; (80092fc <shell_thread+0x19c>)
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff fe73 	bl	8008f40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 800925a:	682a      	ldr	r2, [r5, #0]
 800925c:	462c      	mov	r4, r5
 800925e:	b13a      	cbz	r2, 8009270 <shell_thread+0x110>
    chprintf(chp, "%s ", scp->sc_name);
 8009260:	4927      	ldr	r1, [pc, #156]	; (8009300 <shell_thread+0x1a0>)
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff fe6c 	bl	8008f40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009268:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800926c:	2a00      	cmp	r2, #0
 800926e:	d1f7      	bne.n	8009260 <shell_thread+0x100>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	d00b      	beq.n	800928e <shell_thread+0x12e>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009276:	f8d8 2000 	ldr.w	r2, [r8]
 800927a:	b142      	cbz	r2, 800928e <shell_thread+0x12e>
 800927c:	4644      	mov	r4, r8
    chprintf(chp, "%s ", scp->sc_name);
 800927e:	4920      	ldr	r1, [pc, #128]	; (8009300 <shell_thread+0x1a0>)
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff fe5d 	bl	8008f40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009286:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800928a:	2a00      	cmp	r2, #0
 800928c:	d1f7      	bne.n	800927e <shell_thread+0x11e>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800928e:	491d      	ldr	r1, [pc, #116]	; (8009304 <shell_thread+0x1a4>)
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff fe55 	bl	8008f40 <chprintf>
 8009296:	e771      	b.n	800917c <shell_thread+0x1c>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8009298:	f1b8 0f00 	cmp.w	r8, #0
 800929c:	d00d      	beq.n	80092ba <shell_thread+0x15a>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800929e:	f8d8 0000 	ldr.w	r0, [r8]
 80092a2:	b150      	cbz	r0, 80092ba <shell_thread+0x15a>
 80092a4:	4645      	mov	r5, r8
 80092a6:	e002      	b.n	80092ae <shell_thread+0x14e>
 80092a8:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80092ac:	b128      	cbz	r0, 80092ba <shell_thread+0x15a>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80092ae:	4639      	mov	r1, r7
 80092b0:	f000 fe1e 	bl	8009ef0 <strcasecmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d1f7      	bne.n	80092a8 <shell_thread+0x148>
 80092b8:	e7c4      	b.n	8009244 <shell_thread+0xe4>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 80092ba:	463a      	mov	r2, r7
 80092bc:	4912      	ldr	r1, [pc, #72]	; (8009308 <shell_thread+0x1a8>)
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff fe3e 	bl	8008f40 <chprintf>
        chprintf(chp, " ?\r\n");
 80092c4:	4911      	ldr	r1, [pc, #68]	; (800930c <shell_thread+0x1ac>)
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff fe3a 	bl	8008f40 <chprintf>
 80092cc:	e756      	b.n	800917c <shell_thread+0x1c>
 80092ce:	bf00      	nop
 80092d0:	20000d18 	.word	0x20000d18
 80092d4:	0800b16c 	.word	0x0800b16c
 80092d8:	0800b174 	.word	0x0800b174
 80092dc:	0800b18c 	.word	0x0800b18c
 80092e0:	0800b1b8 	.word	0x0800b1b8
 80092e4:	0800b088 	.word	0x0800b088
 80092e8:	0800b1a0 	.word	0x0800b1a0
 80092ec:	0800b194 	.word	0x0800b194
 80092f0:	200019a8 	.word	0x200019a8
 80092f4:	0800b1c0 	.word	0x0800b1c0
 80092f8:	200008c0 	.word	0x200008c0
 80092fc:	0800b1c8 	.word	0x0800b1c8
 8009300:	0800b1e0 	.word	0x0800b1e0
 8009304:	0800b12c 	.word	0x0800b12c
 8009308:	0800b1e4 	.word	0x0800b1e4
 800930c:	0800b1e8 	.word	0x0800b1e8

08009310 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8009310:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8009312:	f100 070b 	add.w	r7, r0, #11
 8009316:	463c      	mov	r4, r7
 8009318:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800931a:	fbb1 f6f2 	udiv	r6, r1, r2
 800931e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8009322:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8009326:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8009328:	bfc8      	it	gt
 800932a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8009334:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8009338:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800933a:	2d00      	cmp	r5, #0
 800933c:	d1ed      	bne.n	800931a <ch_ltoa+0xa>
 800933e:	1b3a      	subs	r2, r7, r4
 8009340:	4402      	add	r2, r0
 8009342:	e001      	b.n	8009348 <ch_ltoa+0x38>
 8009344:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8009348:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800934c:	4290      	cmp	r0, r2
 800934e:	d1f9      	bne.n	8009344 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 8009350:	bcf0      	pop	{r4, r5, r6, r7}
 8009352:	4770      	bx	lr
	...

08009360 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	b091      	sub	sp, #68	; 0x44
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8009366:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8009368:	4606      	mov	r6, r0
 800936a:	468b      	mov	fp, r1
 800936c:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800936e:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8009370:	f89b 1000 	ldrb.w	r1, [fp]
 8009374:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8009378:	b179      	cbz	r1, 800939a <chvprintf+0x3a>
      return n;
    if (c != '%') {
 800937a:	2925      	cmp	r1, #37	; 0x25
 800937c:	d011      	beq.n	80093a2 <chvprintf+0x42>
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 800937e:	9c00      	ldr	r4, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8009380:	6832      	ldr	r2, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8009382:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8009384:	6892      	ldr	r2, [r2, #8]
 8009386:	4630      	mov	r0, r6
      n++;
 8009388:	3401      	adds	r4, #1
 800938a:	9400      	str	r4, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800938c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800938e:	f89b 1000 	ldrb.w	r1, [fp]
 8009392:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8009396:	2900      	cmp	r1, #0
 8009398:	d1ef      	bne.n	800937a <chvprintf+0x1a>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800939a:	9800      	ldr	r0, [sp, #0]
 800939c:	b011      	add	sp, #68	; 0x44
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80093a2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80093a6:	2a2d      	cmp	r2, #45	; 0x2d
 80093a8:	bf03      	ittte	eq
 80093aa:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 80093ae:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 80093b2:	2101      	moveq	r1, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 80093b4:	2100      	movne	r1, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 80093b6:	2a30      	cmp	r2, #48	; 0x30
 80093b8:	bf08      	it	eq
 80093ba:	785a      	ldrbeq	r2, [r3, #1]
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 80093bc:	9101      	str	r1, [sp, #4]
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 80093be:	bf06      	itte	eq
 80093c0:	3301      	addeq	r3, #1
      filler = '0';
 80093c2:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80093c4:	2720      	movne	r7, #32
 80093c6:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 80093c8:	2400      	movs	r4, #0
 80093ca:	e008      	b.n	80093de <chvprintf+0x7e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 80093cc:	f89a 3000 	ldrb.w	r3, [sl]
 80093d0:	f10a 0a04 	add.w	sl, sl, #4
 80093d4:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 80093d8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 80093dc:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80093de:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 80093e6:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 80093e8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80093ec:	d9f2      	bls.n	80093d4 <chvprintf+0x74>
        c -= '0';
      else if (c == '*')
 80093ee:	2a2a      	cmp	r2, #42	; 0x2a
 80093f0:	d0ec      	beq.n	80093cc <chvprintf+0x6c>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80093f2:	2a2e      	cmp	r2, #46	; 0x2e
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	d045      	beq.n	8009486 <chvprintf+0x126>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80093fa:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80093fe:	2b4c      	cmp	r3, #76	; 0x4c
 8009400:	d050      	beq.n	80094a4 <chvprintf+0x144>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8009402:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8009406:	2b34      	cmp	r3, #52	; 0x34
 8009408:	f200 81c7 	bhi.w	800979a <chvprintf+0x43a>
 800940c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009410:	01c501b5 	.word	0x01c501b5
 8009414:	01c501c5 	.word	0x01c501c5
 8009418:	01b501c5 	.word	0x01b501c5
 800941c:	01c501c5 	.word	0x01c501c5
 8009420:	01c501c5 	.word	0x01c501c5
 8009424:	01b301c5 	.word	0x01b301c5
 8009428:	01c501c5 	.word	0x01c501c5
 800942c:	01c501c5 	.word	0x01c501c5
 8009430:	010601c5 	.word	0x010601c5
 8009434:	01c501c5 	.word	0x01c501c5
 8009438:	01c5008d 	.word	0x01c5008d
 800943c:	01c501c5 	.word	0x01c501c5
 8009440:	01c501c5 	.word	0x01c501c5
 8009444:	01c501c5 	.word	0x01c501c5
 8009448:	01c501c5 	.word	0x01c501c5
 800944c:	01a501c5 	.word	0x01a501c5
 8009450:	01c501b5 	.word	0x01c501b5
 8009454:	01c50108 	.word	0x01c50108
 8009458:	01b501c5 	.word	0x01b501c5
 800945c:	01c501c5 	.word	0x01c501c5
 8009460:	01c501c5 	.word	0x01c501c5
 8009464:	01b301c5 	.word	0x01b301c5
 8009468:	01c501c5 	.word	0x01c501c5
 800946c:	00db01c5 	.word	0x00db01c5
 8009470:	010601c5 	.word	0x010601c5
 8009474:	01c501c5 	.word	0x01c501c5
 8009478:	008d      	.short	0x008d
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800947a:	f89a 3000 	ldrb.w	r3, [sl]
 800947e:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 8009482:	eb03 0841 	add.w	r8, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8009486:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 800948a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8009492:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8009496:	d9f4      	bls.n	8009482 <chvprintf+0x122>
          c -= '0';
        else if (c == '*')
 8009498:	2a2a      	cmp	r2, #42	; 0x2a
 800949a:	d0ee      	beq.n	800947a <chvprintf+0x11a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800949c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80094a0:	2b4c      	cmp	r3, #76	; 0x4c
 80094a2:	d1ae      	bne.n	8009402 <chvprintf+0xa2>
      is_long = TRUE;
      if (*fmt)
 80094a4:	f89b 1000 	ldrb.w	r1, [fp]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	f000 8176 	beq.w	800979a <chvprintf+0x43a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80094ae:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 80094b2:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80094b6:	2b34      	cmp	r3, #52	; 0x34
 80094b8:	f200 816e 	bhi.w	8009798 <chvprintf+0x438>
 80094bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80094c0:	016c015d 	.word	0x016c015d
 80094c4:	016c016c 	.word	0x016c016c
 80094c8:	015d016c 	.word	0x015d016c
 80094cc:	016c016c 	.word	0x016c016c
 80094d0:	016c016c 	.word	0x016c016c
 80094d4:	015b016c 	.word	0x015b016c
 80094d8:	016c016c 	.word	0x016c016c
 80094dc:	016c016c 	.word	0x016c016c
 80094e0:	00ae016c 	.word	0x00ae016c
 80094e4:	016c016c 	.word	0x016c016c
 80094e8:	016c0035 	.word	0x016c0035
 80094ec:	016c016c 	.word	0x016c016c
 80094f0:	016c016c 	.word	0x016c016c
 80094f4:	016c016c 	.word	0x016c016c
 80094f8:	016c016c 	.word	0x016c016c
 80094fc:	014d016c 	.word	0x014d016c
 8009500:	016c015d 	.word	0x016c015d
 8009504:	016c00b0 	.word	0x016c00b0
 8009508:	015d016c 	.word	0x015d016c
 800950c:	016c016c 	.word	0x016c016c
 8009510:	016c016c 	.word	0x016c016c
 8009514:	015b016c 	.word	0x015b016c
 8009518:	016c016c 	.word	0x016c016c
 800951c:	0083016c 	.word	0x0083016c
 8009520:	00ae016c 	.word	0x00ae016c
 8009524:	016c016c 	.word	0x016c016c
 8009528:	0035      	.short	0x0035
 800952a:	2210      	movs	r2, #16
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 800952c:	ad0a      	add	r5, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800952e:	f8da 1000 	ldr.w	r1, [sl]
      p = ch_ltoa(p, l, c);
 8009532:	4628      	mov	r0, r5
 8009534:	f7ff feec 	bl	8009310 <ch_ltoa>
 8009538:	1b40      	subs	r0, r0, r5
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800953a:	f10a 0a04 	add.w	sl, sl, #4
 800953e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8009542:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8009544:	1a24      	subs	r4, r4, r0
 8009546:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 800954a:	2b00      	cmp	r3, #0
 800954c:	d162      	bne.n	8009614 <chvprintf+0x2b4>
      width = -width;
 800954e:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	f000 8129 	beq.w	80097ac <chvprintf+0x44c>
      if (*s == '-' && filler == '0') {
 800955a:	7829      	ldrb	r1, [r5, #0]
 800955c:	292d      	cmp	r1, #45	; 0x2d
 800955e:	f000 8138 	beq.w	80097d2 <chvprintf+0x472>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8009562:	6833      	ldr	r3, [r6, #0]
 8009564:	4639      	mov	r1, r7
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	4630      	mov	r0, r6
 800956a:	4798      	blx	r3
        n++;
      } while (++width != 0);
 800956c:	f119 0901 	adds.w	r9, r9, #1
 8009570:	d1f7      	bne.n	8009562 <chvprintf+0x202>
 8009572:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 8009574:	f1b8 0f00 	cmp.w	r8, #0
 8009578:	4423      	add	r3, r4
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	f6ff aef8 	blt.w	8009370 <chvprintf+0x10>
 8009580:	464c      	mov	r4, r9
 8009582:	46c1      	mov	r9, r8
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	f815 1b01 	ldrb.w	r1, [r5], #1
 800958a:	689b      	ldr	r3, [r3, #8]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800958c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8009590:	4630      	mov	r0, r6
 8009592:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8009594:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009598:	d1f4      	bne.n	8009584 <chvprintf+0x224>
 800959a:	9b00      	ldr	r3, [sp, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	f1b8 0f00 	cmp.w	r8, #0
 80095a2:	bfa8      	it	ge
 80095a4:	4443      	addge	r3, r8
 80095a6:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	f43f aee1 	beq.w	8009370 <chvprintf+0x10>
 80095ae:	4625      	mov	r5, r4
      chSequentialStreamPut(chp, (uint8_t)filler);
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	4639      	mov	r1, r7
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4630      	mov	r0, r6
 80095b8:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80095ba:	3d01      	subs	r5, #1
 80095bc:	d1f8      	bne.n	80095b0 <chvprintf+0x250>
 80095be:	9b00      	ldr	r3, [sp, #0]
 80095c0:	4423      	add	r3, r4
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	e6d4      	b.n	8009370 <chvprintf+0x10>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80095c6:	f8da 5000 	ldr.w	r5, [sl]
        s = "(null)";
 80095ca:	4b99      	ldr	r3, [pc, #612]	; (8009830 <chvprintf+0x4d0>)
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	bf08      	it	eq
 80095d0:	461d      	moveq	r5, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80095d2:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80095d6:	782b      	ldrb	r3, [r5, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	f000 80ec 	beq.w	80097b8 <chvprintf+0x458>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80ee 	beq.w	80097c2 <chvprintf+0x462>
 80095e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80095ea:	4628      	mov	r0, r5
 80095ec:	e002      	b.n	80095f4 <chvprintf+0x294>
 80095ee:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80095f2:	d005      	beq.n	8009600 <chvprintf+0x2a0>
 80095f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80095f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f6      	bne.n	80095ee <chvprintf+0x28e>
 8009600:	1b40      	subs	r0, r0, r5
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8009602:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8009604:	1a24      	subs	r4, r4, r0
 8009606:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800960a:	2720      	movs	r7, #32
 800960c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8009610:	2b00      	cmp	r3, #0
 8009612:	d09c      	beq.n	800954e <chvprintf+0x1ee>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8009614:	f1b8 0f00 	cmp.w	r8, #0
 8009618:	dab3      	bge.n	8009582 <chvprintf+0x222>
 800961a:	e7c5      	b.n	80095a8 <chvprintf+0x248>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 800961c:	220a      	movs	r2, #10
 800961e:	e785      	b.n	800952c <chvprintf+0x1cc>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8009620:	f10a 0a07 	add.w	sl, sl, #7
 8009624:	f02a 0a07 	bic.w	sl, sl, #7
 8009628:	e9da 0100 	ldrd	r0, r1, [sl]
 800962c:	f7f7 fa38 	bl	8000aa0 <__aeabi_d2f>
      if (f < 0) {
 8009630:	2100      	movs	r1, #0
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8009632:	f10a 0a08 	add.w	sl, sl, #8
 8009636:	4681      	mov	r9, r0
      if (f < 0) {
 8009638:	f7f7 fad0 	bl	8000bdc <__aeabi_fcmplt>
 800963c:	2800      	cmp	r0, #0
 800963e:	f040 80e8 	bne.w	8009812 <chvprintf+0x4b2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8009642:	ad0a      	add	r5, sp, #40	; 0x28
 8009644:	462a      	mov	r2, r5
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8009646:	4648      	mov	r0, r9
 8009648:	9204      	str	r2, [sp, #16]
 800964a:	f7f6 ff95 	bl	8000578 <__aeabi_f2d>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800964e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009652:	f1b8 0f08 	cmp.w	r8, #8
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8009656:	e9cd 0102 	strd	r0, r1, [sp, #8]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	f200 80c7 	bhi.w	80097ee <chvprintf+0x48e>
 8009660:	4b74      	ldr	r3, [pc, #464]	; (8009834 <chvprintf+0x4d4>)
 8009662:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8009666:	4640      	mov	r0, r8
 8009668:	f7f6 ff64 	bl	8000534 <__aeabi_ui2d>
 800966c:	4b72      	ldr	r3, [pc, #456]	; (8009838 <chvprintf+0x4d8>)
 800966e:	9a04      	ldr	r2, [sp, #16]
 8009670:	fba3 3808 	umull	r3, r8, r3, r8
 8009674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009678:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800967c:	9309      	str	r3, [sp, #36]	; 0x24
 800967e:	4698      	mov	r8, r3
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8009680:	4648      	mov	r0, r9
 8009682:	9205      	str	r2, [sp, #20]
 8009684:	f7f7 fad4 	bl	8000c30 <__aeabi_f2iz>
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8009688:	9a05      	ldr	r2, [sp, #20]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800968a:	9004      	str	r0, [sp, #16]
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800968c:	f102 030b 	add.w	r3, r2, #11

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8009690:	4686      	mov	lr, r0
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8009692:	4601      	mov	r1, r0
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	4618      	mov	r0, r3
 8009698:	9208      	str	r2, [sp, #32]
  do {
    i = (int)(l % radix);
 800969a:	4b67      	ldr	r3, [pc, #412]	; (8009838 <chvprintf+0x4d8>)
 800969c:	fba3 230e 	umull	r2, r3, r3, lr
 80096a0:	08db      	lsrs	r3, r3, #3
 80096a2:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 80096a6:	4a64      	ldr	r2, [pc, #400]	; (8009838 <chvprintf+0x4d8>)
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 80096a8:	469c      	mov	ip, r3
 80096aa:	ebae 0349 	sub.w	r3, lr, r9, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80096ae:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 80096b0:	fba2 2101 	umull	r2, r1, r2, r1
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80096b4:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 80096b6:	08c9      	lsrs	r1, r1, #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80096b8:	f800 3d01 	strb.w	r3, [r0, #-1]!
    l /= radix;
 80096bc:	46e6      	mov	lr, ip
  } while ((ll /= radix) != 0);
 80096be:	d1ec      	bne.n	800969a <chvprintf+0x33a>
 80096c0:	9905      	ldr	r1, [sp, #20]
 80096c2:	9a08      	ldr	r2, [sp, #32]
 80096c4:	ebc0 0901 	rsb	r9, r0, r1
 80096c8:	4491      	add	r9, r2
 80096ca:	e001      	b.n	80096d0 <chvprintf+0x370>
 80096cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 80096d0:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80096d4:	454a      	cmp	r2, r9
 80096d6:	d1f9      	bne.n	80096cc <chvprintf+0x36c>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 80096d8:	464a      	mov	r2, r9
 80096da:	232e      	movs	r3, #46	; 0x2e
 80096dc:	f802 3b0c 	strb.w	r3, [r2], #12
  l = (long)((num - l) * precision);
 80096e0:	9804      	ldr	r0, [sp, #16]
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 80096e2:	9204      	str	r2, [sp, #16]
  l = (long)((num - l) * precision);
 80096e4:	f7f6 ff36 	bl	8000554 <__aeabi_i2d>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f0:	f7f6 fde2 	bl	80002b8 <__aeabi_dsub>
 80096f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096f8:	f7f6 ff92 	bl	8000620 <__aeabi_dmul>
 80096fc:	f7f7 f9a8 	bl	8000a50 <__aeabi_d2iz>
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8009700:	9909      	ldr	r1, [sp, #36]	; 0x24
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8009702:	9a04      	ldr	r2, [sp, #16]
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8009704:	2900      	cmp	r1, #0
 8009706:	bf08      	it	eq
 8009708:	4680      	moveq	r8, r0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800970a:	f109 0e01 	add.w	lr, r9, #1
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800970e:	4b4a      	ldr	r3, [pc, #296]	; (8009838 <chvprintf+0x4d8>)
 8009710:	fba3 1300 	umull	r1, r3, r3, r0
 8009714:	08db      	lsrs	r3, r3, #3
 8009716:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800971a:	4619      	mov	r1, r3
 800971c:	eba0 034c 	sub.w	r3, r0, ip, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8009720:	4845      	ldr	r0, [pc, #276]	; (8009838 <chvprintf+0x4d8>)
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8009722:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 8009724:	fba0 0808 	umull	r0, r8, r0, r8
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8009728:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 800972a:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800972e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8009732:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 8009734:	d1eb      	bne.n	800970e <chvprintf+0x3ae>
 8009736:	9904      	ldr	r1, [sp, #16]
 8009738:	1a89      	subs	r1, r1, r2
 800973a:	1c48      	adds	r0, r1, #1
 800973c:	4481      	add	r9, r0

  i = (int)(p + MAX_FILLER - q);
 800973e:	4670      	mov	r0, lr
 8009740:	e001      	b.n	8009746 <chvprintf+0x3e6>
 8009742:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 8009746:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800974a:	4581      	cmp	r9, r0
 800974c:	d1f9      	bne.n	8009742 <chvprintf+0x3e2>
 800974e:	eb0e 0001 	add.w	r0, lr, r1
 8009752:	1b40      	subs	r0, r0, r5
 8009754:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8009758:	e6f3      	b.n	8009542 <chvprintf+0x1e2>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800975a:	ad10      	add	r5, sp, #64	; 0x40
 800975c:	f8da 3000 	ldr.w	r3, [sl]
 8009760:	f805 3d18 	strb.w	r3, [r5, #-24]!
 8009764:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8009768:	1b40      	subs	r0, r0, r5
 800976a:	f10a 0a04 	add.w	sl, sl, #4
 800976e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8009772:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
      break;
 8009774:	e6e5      	b.n	8009542 <chvprintf+0x1e2>
 8009776:	2208      	movs	r2, #8
 8009778:	e6d8      	b.n	800952c <chvprintf+0x1cc>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800977a:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 800977e:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8009780:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8009784:	db3d      	blt.n	8009802 <chvprintf+0x4a2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8009786:	ad0a      	add	r5, sp, #40	; 0x28
 8009788:	4628      	mov	r0, r5
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 800978a:	220a      	movs	r2, #10
 800978c:	f7ff fdc0 	bl	8009310 <ch_ltoa>
 8009790:	1b40      	subs	r0, r0, r5
 8009792:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 8009796:	e6d4      	b.n	8009542 <chvprintf+0x1e2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8009798:	460a      	mov	r2, r1
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800979a:	ad10      	add	r5, sp, #64	; 0x40
 800979c:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 80097a0:	f805 2d18 	strb.w	r2, [r5, #-24]!
 80097a4:	1b40      	subs	r0, r0, r5
 80097a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 80097aa:	e6ca      	b.n	8009542 <chvprintf+0x1e2>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80097ac:	f1b8 0f00 	cmp.w	r8, #0
 80097b0:	f6ff adde 	blt.w	8009370 <chvprintf+0x10>
 80097b4:	464c      	mov	r4, r9
 80097b6:	e6e4      	b.n	8009582 <chvprintf+0x222>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80097b8:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f af14 	bne.w	80095ea <chvprintf+0x28a>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80097c8:	bb63      	cbnz	r3, 8009824 <chvprintf+0x4c4>
 80097ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80097ce:	2720      	movs	r7, #32
 80097d0:	e6bd      	b.n	800954e <chvprintf+0x1ee>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80097d2:	2f30      	cmp	r7, #48	; 0x30
 80097d4:	f47f aec5 	bne.w	8009562 <chvprintf+0x202>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	4630      	mov	r0, r6
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	4798      	blx	r3
        n++;
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 80097e4:	3501      	adds	r5, #1
        n++;
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80097ec:	e6b9      	b.n	8009562 <chvprintf+0x202>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80097ee:	a10e      	add	r1, pc, #56	; (adr r1, 8009828 <chvprintf+0x4c8>)
 80097f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800983c <chvprintf+0x4dc>
 80097f8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80097fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009800:	e73e      	b.n	8009680 <chvprintf+0x320>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8009802:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8009804:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8009806:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800980a:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800980e:	ad0a      	add	r5, sp, #40	; 0x28
 8009810:	e7bb      	b.n	800978a <chvprintf+0x42a>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8009812:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 8009814:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8009818:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800981c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8009820:	ad0a      	add	r5, sp, #40	; 0x28
 8009822:	e710      	b.n	8009646 <chvprintf+0x2e6>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8009824:	2720      	movs	r7, #32
 8009826:	e6bf      	b.n	80095a8 <chvprintf+0x248>
 8009828:	00000000 	.word	0x00000000
 800982c:	41cdcd65 	.word	0x41cdcd65
 8009830:	0800b1f0 	.word	0x0800b1f0
 8009834:	0800b200 	.word	0x0800b200
 8009838:	cccccccd 	.word	0xcccccccd
 800983c:	05f5e100 	.word	0x05f5e100

08009840 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8009840:	2902      	cmp	r1, #2
 8009842:	d006      	beq.n	8009852 <get_descriptor+0x12>
 8009844:	2903      	cmp	r1, #3
 8009846:	d006      	beq.n	8009856 <get_descriptor+0x16>
 8009848:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800984a:	4806      	ldr	r0, [pc, #24]	; (8009864 <get_descriptor+0x24>)
 800984c:	bf18      	it	ne
 800984e:	2000      	movne	r0, #0
 8009850:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8009852:	4805      	ldr	r0, [pc, #20]	; (8009868 <get_descriptor+0x28>)
 8009854:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8009856:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8009858:	bf9a      	itte	ls
 800985a:	4b04      	ldrls	r3, [pc, #16]	; (800986c <get_descriptor+0x2c>)
 800985c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8009860:	2000      	movhi	r0, #0
}
 8009862:	4770      	bx	lr
 8009864:	0800b3e0 	.word	0x0800b3e0
 8009868:	0800b260 	.word	0x0800b260
 800986c:	0800b3b0 	.word	0x0800b3b0

08009870 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8009870:	2902      	cmp	r1, #2
 8009872:	d115      	bne.n	80098a0 <usb_event+0x30>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	460c      	mov	r4, r1
 800987a:	2320      	movs	r3, #32
 800987c:	f383 8811 	msr	BASEPRI, r3
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8009880:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <usb_event+0x34>)
 8009882:	2101      	movs	r1, #1
 8009884:	f7f9 fc7c 	bl	8003180 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8009888:	4621      	mov	r1, r4
 800988a:	4628      	mov	r0, r5
 800988c:	4a06      	ldr	r2, [pc, #24]	; (80098a8 <usb_event+0x38>)
 800988e:	f7f9 fc77 	bl	8003180 <usbInitEndpointI>

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);
 8009892:	4806      	ldr	r0, [pc, #24]	; (80098ac <usb_event+0x3c>)
 8009894:	f7f9 fb14 	bl	8002ec0 <sduConfigureHookI>
 8009898:	2300      	movs	r3, #0
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	0800b230 	.word	0x0800b230
 80098a8:	0800b270 	.word	0x0800b270
 80098ac:	20001c78 	.word	0x20001c78

080098b0 <adcerrorcallback>:
  count++;
  if (count > 4096) count = 0;

}

static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
	...

080098c0 <gpt3cb>:
};
								
static void gpt3cb(GPTDriver *gptp) {

  (void)gptp;
  palTogglePad(GPIOB,5);
 80098c0:	4a02      	ldr	r2, [pc, #8]	; (80098cc <gpt3cb+0xc>)
 80098c2:	6953      	ldr	r3, [r2, #20]
 80098c4:	f083 0320 	eor.w	r3, r3, #32
 80098c8:	6153      	str	r3, [r2, #20]
 80098ca:	4770      	bx	lr
 80098cc:	40020400 	.word	0x40020400

080098d0 <adccallback>:
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80098d0:	4808      	ldr	r0, [pc, #32]	; (80098f4 <adccallback+0x24>)
adcsample_t samples[8];


uint16_t count = 0;

static void adccallback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {
 80098d2:	b508      	push	{r3, lr}
 80098d4:	6883      	ldr	r3, [r0, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dd09      	ble.n	80098ee <adccallback+0x1e>

  //palTogglePad(GPIOB,5);

  chBSemSignalI(&adccomplete);

  count++;
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <adccallback+0x28>)
 80098dc:	8813      	ldrh	r3, [r2, #0]
 80098de:	3301      	adds	r3, #1
 80098e0:	b29b      	uxth	r3, r3
  if (count > 4096) count = 0;
 80098e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e6:	bf88      	it	hi
 80098e8:	2300      	movhi	r3, #0
 80098ea:	8013      	strh	r3, [r2, #0]
 80098ec:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->bs_sem);
 80098ee:	f7f8 f82f 	bl	8001950 <chSemSignalI>
 80098f2:	e7f2      	b.n	80098da <adccallback+0xa>
 80098f4:	200008d8 	.word	0x200008d8
 80098f8:	20002080 	.word	0x20002080
 80098fc:	00000000 	.word	0x00000000

08009900 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8009900:	b40e      	push	{r1, r2, r3}
 8009902:	b500      	push	{lr}
 8009904:	b082      	sub	sp, #8
 8009906:	aa03      	add	r2, sp, #12
 8009908:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800990c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800990e:	f7ff fd27 	bl	8009360 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8009912:	b002      	add	sp, #8
 8009914:	f85d eb04 	ldr.w	lr, [sp], #4
 8009918:	b003      	add	sp, #12
 800991a:	4770      	bx	lr
 800991c:	0000      	movs	r0, r0
	...

08009920 <Thread2>:
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {

  (void)arg;

  dat.frame.framestart[0] = 0xAA;
 8009920:	4c18      	ldr	r4, [pc, #96]	; (8009984 <Thread2+0x64>)
 8009922:	4d19      	ldr	r5, [pc, #100]	; (8009988 <Thread2+0x68>)
 8009924:	4e19      	ldr	r6, [pc, #100]	; (800998c <Thread2+0x6c>)
    } __attribute__((packed)) frame;
    unsigned char data[19];
} dat;

static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8009926:	b580      	push	{r7, lr}

  (void)arg;

  dat.frame.framestart[0] = 0xAA;
 8009928:	21aa      	movs	r1, #170	; 0xaa
  dat.frame.framestart[1] = 0xBB;
 800992a:	22bb      	movs	r2, #187	; 0xbb
  dat.frame.size=16-2*6;
 800992c:	2304      	movs	r3, #4
 800992e:	4f18      	ldr	r7, [pc, #96]	; (8009990 <Thread2+0x70>)
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {

  (void)arg;

  dat.frame.framestart[0] = 0xAA;
 8009930:	7021      	strb	r1, [r4, #0]
  dat.frame.framestart[1] = 0xBB;
 8009932:	7062      	strb	r2, [r4, #1]
  dat.frame.size=16-2*6;
 8009934:	70a3      	strb	r3, [r4, #2]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8009936:	4817      	ldr	r0, [pc, #92]	; (8009994 <Thread2+0x74>)
 8009938:	f7f7 ff7a 	bl	8001830 <chSemWait>
    dat.frame.adcdata1=samples[1];
    dat.frame.adcdata2=samples[2];
    dat.frame.adcdata3=samples[3];
    dat.frame.adcdata4=samples[4];
    dat.frame.adcdata5=samples[5];
    dat.frame.adcdata6=samples[6];
 800993c:	89a8      	ldrh	r0, [r5, #12]
    dat.frame.adcdata7=samples[7];
 800993e:	89e9      	ldrh	r1, [r5, #14]

    dat.frame.adcdata1 = count;
 8009940:	883a      	ldrh	r2, [r7, #0]
  {

    chBSemWait(&adccomplete); 
   // palSetPad(GPIOD, 7);

    dat.frame.adcdata0=samples[0];
 8009942:	f8b5 a000 	ldrh.w	sl, [r5]
    dat.frame.adcdata1=samples[1];
    dat.frame.adcdata2=samples[2];
 8009946:	f8b5 9004 	ldrh.w	r9, [r5, #4]
    dat.frame.adcdata3=samples[3];
 800994a:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    dat.frame.adcdata4=samples[4];
 800994e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
    dat.frame.adcdata5=samples[5];
 8009952:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
                                                     samples[2],samples[3],
                                                     samples[4],samples[5],
                                                     samples[6],samples[7]
                                                    );*/
    // don't send last 4 channels                                                 
    streamWrite((BaseSequentialStream*) &SDU1, dat.data, sizeof(dat.data)-2*6);
 8009956:	6833      	ldr	r3, [r6, #0]
    dat.frame.adcdata1=samples[1];
    dat.frame.adcdata2=samples[2];
    dat.frame.adcdata3=samples[3];
    dat.frame.adcdata4=samples[4];
    dat.frame.adcdata5=samples[5];
    dat.frame.adcdata6=samples[6];
 8009958:	f8a4 000f 	strh.w	r0, [r4, #15]
    dat.frame.adcdata7=samples[7];
 800995c:	f8a4 1011 	strh.w	r1, [r4, #17]

    dat.frame.adcdata1 = count;
 8009960:	f8a4 2005 	strh.w	r2, [r4, #5]
  {

    chBSemWait(&adccomplete); 
   // palSetPad(GPIOD, 7);

    dat.frame.adcdata0=samples[0];
 8009964:	f8a4 a003 	strh.w	sl, [r4, #3]
    dat.frame.adcdata1=samples[1];
    dat.frame.adcdata2=samples[2];
 8009968:	f8a4 9007 	strh.w	r9, [r4, #7]
    dat.frame.adcdata3=samples[3];
 800996c:	f8a4 8009 	strh.w	r8, [r4, #9]
    dat.frame.adcdata4=samples[4];
 8009970:	f8a4 c00b 	strh.w	ip, [r4, #11]
    dat.frame.adcdata5=samples[5];
 8009974:	f8a4 e00d 	strh.w	lr, [r4, #13]
                                                     samples[2],samples[3],
                                                     samples[4],samples[5],
                                                     samples[6],samples[7]
                                                    );*/
    // don't send last 4 channels                                                 
    streamWrite((BaseSequentialStream*) &SDU1, dat.data, sizeof(dat.data)-2*6);
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4902      	ldr	r1, [pc, #8]	; (8009984 <Thread2+0x64>)
 800997c:	4803      	ldr	r0, [pc, #12]	; (800998c <Thread2+0x6c>)
 800997e:	2207      	movs	r2, #7
 8009980:	4798      	blx	r3
 8009982:	e7d8      	b.n	8009936 <Thread2+0x16>
 8009984:	20002084 	.word	0x20002084
 8009988:	2000209c 	.word	0x2000209c
 800998c:	20001c78 	.word	0x20001c78
 8009990:	20002080 	.word	0x20002080
 8009994:	200008d8 	.word	0x200008d8
	...

080099a0 <Thread1>:
/*
 * This is a periodic thread that reads accelerometer and outputs
 * result to SPI2 and PWM.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static int8_t xbuf[4], ybuf[4];   /* Last accelerometer data.*/
  systime_t time;                   /* Next deadline.*/

  (void)arg;
  chRegSetThreadName("reader");
 80099a2:	4b4c      	ldr	r3, [pc, #304]	; (8009ad4 <Thread1+0x134>)
 80099a4:	4a4c      	ldr	r2, [pc, #304]	; (8009ad8 <Thread1+0x138>)
 80099a6:	699b      	ldr	r3, [r3, #24]

  /* LIS302DL initialization.*/
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG1, 0x43);
 80099a8:	484c      	ldr	r0, [pc, #304]	; (8009adc <Thread1+0x13c>)
static THD_FUNCTION(Thread1, arg) {
  static int8_t xbuf[4], ybuf[4];   /* Last accelerometer data.*/
  systime_t time;                   /* Next deadline.*/

  (void)arg;
  chRegSetThreadName("reader");
 80099aa:	619a      	str	r2, [r3, #24]

  /* LIS302DL initialization.*/
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG1, 0x43);
 80099ac:	2120      	movs	r1, #32
 80099ae:	2243      	movs	r2, #67	; 0x43
 80099b0:	f7ff fa9e 	bl	8008ef0 <lis302dlWriteRegister>
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG2, 0x00);
 80099b4:	2200      	movs	r2, #0
 80099b6:	2121      	movs	r1, #33	; 0x21
 80099b8:	4848      	ldr	r0, [pc, #288]	; (8009adc <Thread1+0x13c>)
 80099ba:	f7ff fa99 	bl	8008ef0 <lis302dlWriteRegister>
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG3, 0x00);
 80099be:	2200      	movs	r2, #0
 80099c0:	2122      	movs	r1, #34	; 0x22
 80099c2:	4846      	ldr	r0, [pc, #280]	; (8009adc <Thread1+0x13c>)
 80099c4:	f7ff fa94 	bl	8008ef0 <lis302dlWriteRegister>
 80099c8:	2320      	movs	r3, #32
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80099d2:	2300      	movs	r3, #0
 80099d4:	6a57      	ldr	r7, [r2, #36]	; 0x24
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	4e41      	ldr	r6, [pc, #260]	; (8009ae0 <Thread1+0x140>)
 80099dc:	4d41      	ldr	r5, [pc, #260]	; (8009ae4 <Thread1+0x144>)
 80099de:	4942      	ldr	r1, [pc, #264]	; (8009ae8 <Thread1+0x148>)
 80099e0:	4a42      	ldr	r2, [pc, #264]	; (8009aec <Thread1+0x14c>)
 80099e2:	1c4c      	adds	r4, r1, #1
 80099e4:	1c50      	adds	r0, r2, #1
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 80099e6:	2303      	movs	r3, #3
      xbuf[i] = xbuf[i - 1];
 80099e8:	f911 cd01 	ldrsb.w	ip, [r1, #-1]!
      ybuf[i] = ybuf[i - 1];
 80099ec:	f912 ed01 	ldrsb.w	lr, [r2, #-1]!
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
      xbuf[i] = xbuf[i - 1];
 80099f0:	f804 cd01 	strb.w	ip, [r4, #-1]!
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 80099f4:	3b01      	subs	r3, #1
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
 80099f6:	f800 ed01 	strb.w	lr, [r0, #-1]!
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 80099fa:	d1f5      	bne.n	80099e8 <Thread1+0x48>
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
    }

    /* Reading MEMS accelerometer X and Y registers.*/
    xbuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTX);
 80099fc:	2129      	movs	r1, #41	; 0x29
 80099fe:	4837      	ldr	r0, [pc, #220]	; (8009adc <Thread1+0x13c>)
 8009a00:	f7ff fa56 	bl	8008eb0 <lis302dlReadRegister>
    ybuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTY);
 8009a04:	212b      	movs	r1, #43	; 0x2b
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
    }

    /* Reading MEMS accelerometer X and Y registers.*/
    xbuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTX);
 8009a06:	7030      	strb	r0, [r6, #0]
    ybuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTY);
 8009a08:	4834      	ldr	r0, [pc, #208]	; (8009adc <Thread1+0x13c>)
 8009a0a:	f7ff fa51 	bl	8008eb0 <lis302dlReadRegister>
 8009a0e:	7028      	strb	r0, [r5, #0]

    /* Transmitting accelerometer the data over SPI2.*/
    spiSelect(&SPID2);
 8009a10:	4837      	ldr	r0, [pc, #220]	; (8009af0 <Thread1+0x150>)
 8009a12:	f7f9 fb35 	bl	8003080 <spiSelect>
    spiSend(&SPID2, 4, xbuf);
 8009a16:	4a32      	ldr	r2, [pc, #200]	; (8009ae0 <Thread1+0x140>)
 8009a18:	4835      	ldr	r0, [pc, #212]	; (8009af0 <Thread1+0x150>)
 8009a1a:	2104      	movs	r1, #4
 8009a1c:	f7f9 fb68 	bl	80030f0 <spiSend>
    spiSend(&SPID2, 4, ybuf);
 8009a20:	4a30      	ldr	r2, [pc, #192]	; (8009ae4 <Thread1+0x144>)
 8009a22:	4833      	ldr	r0, [pc, #204]	; (8009af0 <Thread1+0x150>)
 8009a24:	2104      	movs	r1, #4
 8009a26:	f7f9 fb63 	bl	80030f0 <spiSend>
    spiUnselect(&SPID2);
 8009a2a:	4831      	ldr	r0, [pc, #196]	; (8009af0 <Thread1+0x150>)
 8009a2c:	f7f9 fb38 	bl	80030a0 <spiUnselect>

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a30:	f996 3000 	ldrsb.w	r3, [r6]
 8009a34:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009a38:	f996 2002 	ldrsb.w	r2, [r6, #2]
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
 8009a3c:	f995 0001 	ldrsb.w	r0, [r5, #1]
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a40:	f996 4003 	ldrsb.w	r4, [r6, #3]
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
 8009a44:	f995 e003 	ldrsb.w	lr, [r5, #3]
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a48:	4419      	add	r1, r3
 8009a4a:	188b      	adds	r3, r1, r2
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
 8009a4c:	f995 2000 	ldrsb.w	r2, [r5]
 8009a50:	f995 1002 	ldrsb.w	r1, [r5, #2]
 8009a54:	4402      	add	r2, r0
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a56:	191b      	adds	r3, r3, r4
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
 8009a58:	440a      	add	r2, r1
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a5a:	bf48      	it	mi
 8009a5c:	3303      	addmi	r3, #3
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
 8009a5e:	eb12 020e 	adds.w	r2, r2, lr
 8009a62:	bf48      	it	mi
 8009a64:	3203      	addmi	r2, #3
         (int32_t)ybuf[2] + (int32_t)ybuf[3]) / 4;

    /* Reprogramming the four PWM channels using the accelerometer data.*/
    if (y < 0) {
 8009a66:	1092      	asrs	r2, r2, #2
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);

    /* Calculating average of the latest four accelerometer readings.*/
    x = ((int32_t)xbuf[0] + (int32_t)xbuf[1] +
 8009a68:	ea4f 04a3 	mov.w	r4, r3, asr #2
         (int32_t)xbuf[2] + (int32_t)xbuf[3]) / 4;
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
         (int32_t)ybuf[2] + (int32_t)ybuf[3]) / 4;

    /* Reprogramming the four PWM channels using the accelerometer data.*/
    if (y < 0) {
 8009a6c:	d41a      	bmi.n	8009aa4 <Thread1+0x104>
      pwmEnableChannel(&PWMD4, 0, (pwmcnt_t)-y);
      pwmEnableChannel(&PWMD4, 2, (pwmcnt_t)0);
    }
    else {
      pwmEnableChannel(&PWMD4, 2, (pwmcnt_t)y);
 8009a6e:	2102      	movs	r1, #2
 8009a70:	4820      	ldr	r0, [pc, #128]	; (8009af4 <Thread1+0x154>)
 8009a72:	f7f9 f885 	bl	8002b80 <pwmEnableChannel>
      pwmEnableChannel(&PWMD4, 0, (pwmcnt_t)0);
 8009a76:	2200      	movs	r2, #0
 8009a78:	4611      	mov	r1, r2
 8009a7a:	481e      	ldr	r0, [pc, #120]	; (8009af4 <Thread1+0x154>)
 8009a7c:	f7f9 f880 	bl	8002b80 <pwmEnableChannel>
    }
    if (x < 0) {
 8009a80:	2c00      	cmp	r4, #0
 8009a82:	db1b      	blt.n	8009abc <Thread1+0x11c>
      pwmEnableChannel(&PWMD4, 1, (pwmcnt_t)-x);
      pwmEnableChannel(&PWMD4, 3, (pwmcnt_t)0);
    }
    else {
      pwmEnableChannel(&PWMD4, 3, (pwmcnt_t)x);
 8009a84:	4622      	mov	r2, r4
 8009a86:	2103      	movs	r1, #3
 8009a88:	481a      	ldr	r0, [pc, #104]	; (8009af4 <Thread1+0x154>)
 8009a8a:	f7f9 f879 	bl	8002b80 <pwmEnableChannel>
      pwmEnableChannel(&PWMD4, 1, (pwmcnt_t)0);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2101      	movs	r1, #1
 8009a92:	4818      	ldr	r0, [pc, #96]	; (8009af4 <Thread1+0x154>)
 8009a94:	f7f9 f874 	bl	8002b80 <pwmEnableChannel>
    }

    /* Waiting until the next 250 milliseconds time interval.*/
    chThdSleepUntil(time += MS2ST(100));
 8009a98:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f7f7 fccf 	bl	8001440 <chThdSleepUntil>
  }
 8009aa2:	e79c      	b.n	80099de <Thread1+0x3e>
    y = ((int32_t)ybuf[0] + (int32_t)ybuf[1] +
         (int32_t)ybuf[2] + (int32_t)ybuf[3]) / 4;

    /* Reprogramming the four PWM channels using the accelerometer data.*/
    if (y < 0) {
      pwmEnableChannel(&PWMD4, 0, (pwmcnt_t)-y);
 8009aa4:	4252      	negs	r2, r2
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4812      	ldr	r0, [pc, #72]	; (8009af4 <Thread1+0x154>)
 8009aaa:	f7f9 f869 	bl	8002b80 <pwmEnableChannel>
      pwmEnableChannel(&PWMD4, 2, (pwmcnt_t)0);
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	4810      	ldr	r0, [pc, #64]	; (8009af4 <Thread1+0x154>)
 8009ab4:	f7f9 f864 	bl	8002b80 <pwmEnableChannel>
    }
    else {
      pwmEnableChannel(&PWMD4, 2, (pwmcnt_t)y);
      pwmEnableChannel(&PWMD4, 0, (pwmcnt_t)0);
    }
    if (x < 0) {
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	dae3      	bge.n	8009a84 <Thread1+0xe4>
      pwmEnableChannel(&PWMD4, 1, (pwmcnt_t)-x);
 8009abc:	4262      	negs	r2, r4
 8009abe:	2101      	movs	r1, #1
 8009ac0:	480c      	ldr	r0, [pc, #48]	; (8009af4 <Thread1+0x154>)
 8009ac2:	f7f9 f85d 	bl	8002b80 <pwmEnableChannel>
      pwmEnableChannel(&PWMD4, 3, (pwmcnt_t)0);
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2103      	movs	r1, #3
 8009aca:	480a      	ldr	r0, [pc, #40]	; (8009af4 <Thread1+0x154>)
 8009acc:	f7f9 f858 	bl	8002b80 <pwmEnableChannel>
 8009ad0:	e7e2      	b.n	8009a98 <Thread1+0xf8>
 8009ad2:	bf00      	nop
 8009ad4:	20000d18 	.word	0x20000d18
 8009ad8:	0800b4b0 	.word	0x0800b4b0
 8009adc:	20001118 	.word	0x20001118
 8009ae0:	20002098 	.word	0x20002098
 8009ae4:	20002018 	.word	0x20002018
 8009ae8:	2000209b 	.word	0x2000209b
 8009aec:	2000201b 	.word	0x2000201b
 8009af0:	20001148 	.word	0x20001148
 8009af4:	2000118c 	.word	0x2000118c
	...

08009b00 <cmd_test>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8009b00:	2900      	cmp	r1, #0
 8009b02:	dd02      	ble.n	8009b0a <cmd_test+0xa>
    chprintf(chp, "Usage: test\r\n");
 8009b04:	490e      	ldr	r1, [pc, #56]	; (8009b40 <cmd_test+0x40>)
 8009b06:	f7ff befb 	b.w	8009900 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009b0a:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8009b0c:	4a0d      	ldr	r2, [pc, #52]	; (8009b44 <cmd_test+0x44>)
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8009b0e:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <cmd_test+0x48>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8009b10:	6992      	ldr	r2, [r2, #24]
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009b12:	b082      	sub	sp, #8
 8009b14:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8009b16:	6892      	ldr	r2, [r2, #8]
 8009b18:	9000      	str	r0, [sp, #0]
 8009b1a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f7f7 fde6 	bl	80016f0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 8009b24:	b120      	cbz	r0, 8009b30 <cmd_test+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 8009b26:	b002      	add	sp, #8
 8009b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8009b2c:	f7f7 bcd8 	b.w	80014e0 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8009b30:	4906      	ldr	r1, [pc, #24]	; (8009b4c <cmd_test+0x4c>)
 8009b32:	4620      	mov	r0, r4
    return;
  }
  chThdWait(tp);
}
 8009b34:	b002      	add	sp, #8
 8009b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8009b3a:	f7ff bee1 	b.w	8009900 <chprintf>
 8009b3e:	bf00      	nop
 8009b40:	0800b4b8 	.word	0x0800b4b8
 8009b44:	20000d18 	.word	0x20000d18
 8009b48:	08005811 	.word	0x08005811
 8009b4c:	0800b4c8 	.word	0x0800b4c8

08009b50 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8009b50:	2900      	cmp	r1, #0
 8009b52:	dd02      	ble.n	8009b5a <cmd_threads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8009b54:	4911      	ldr	r1, [pc, #68]	; (8009b9c <cmd_threads+0x4c>)
 8009b56:	f7ff bed3 	b.w	8009900 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009b5a:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8009b5c:	4910      	ldr	r1, [pc, #64]	; (8009ba0 <cmd_threads+0x50>)
 8009b5e:	4e11      	ldr	r6, [pc, #68]	; (8009ba4 <cmd_threads+0x54>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009b60:	b084      	sub	sp, #16
 8009b62:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8009b64:	f7ff fecc 	bl	8009900 <chprintf>
  tp = chRegFirstThread();
 8009b68:	f7f7 fe0a 	bl	8001780 <chRegFirstThread>
 8009b6c:	4604      	mov	r4, r0
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8009b6e:	7f22      	ldrb	r2, [r4, #28]
 8009b70:	68e3      	ldr	r3, [r4, #12]
 8009b72:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009b76:	9202      	str	r2, [sp, #8]
 8009b78:	7fa2      	ldrb	r2, [r4, #30]
 8009b7a:	490b      	ldr	r1, [pc, #44]	; (8009ba8 <cmd_threads+0x58>)
 8009b7c:	3a01      	subs	r2, #1
 8009b7e:	9201      	str	r2, [sp, #4]
 8009b80:	68a2      	ldr	r2, [r4, #8]
 8009b82:	9200      	str	r2, [sp, #0]
 8009b84:	4628      	mov	r0, r5
 8009b86:	4622      	mov	r2, r4
 8009b88:	f7ff feba 	bl	8009900 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7f7 fe07 	bl	80017a0 <chRegNextThread>
  } while (tp != NULL);
 8009b92:	4604      	mov	r4, r0
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1ea      	bne.n	8009b6e <cmd_threads+0x1e>
}
 8009b98:	b004      	add	sp, #16
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	0800b4d8 	.word	0x0800b4d8
 8009ba0:	0800b4ec 	.word	0x0800b4ec
 8009ba4:	0800b470 	.word	0x0800b470
 8009ba8:	0800b514 	.word	0x0800b514
 8009bac:	00000000 	.word	0x00000000

08009bb0 <cmd_mem>:


};

///******************************************************************************///
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009bb0:	b530      	push	{r4, r5, lr}
  size_t n, size;
 (void)argv;
  if (argc > 0) {
 8009bb2:	2900      	cmp	r1, #0


};

///******************************************************************************///
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009bb4:	b083      	sub	sp, #12
  size_t n, size;
 (void)argv;
  if (argc > 0) {
 8009bb6:	dd04      	ble.n	8009bc2 <cmd_mem+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8009bb8:	490e      	ldr	r1, [pc, #56]	; (8009bf4 <cmd_mem+0x44>)
 8009bba:	f7ff fea1 	bl	8009900 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8009bbe:	b003      	add	sp, #12
 8009bc0:	bd30      	pop	{r4, r5, pc}
 8009bc2:	4604      	mov	r4, r0
 (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8009bc4:	a901      	add	r1, sp, #4
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f7f8 fe52 	bl	8002870 <chHeapStatus>
 8009bcc:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8009bce:	f7f8 fd87 	bl	80026e0 <chCoreGetStatusX>
 8009bd2:	4909      	ldr	r1, [pc, #36]	; (8009bf8 <cmd_mem+0x48>)
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff fe92 	bl	8009900 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4907      	ldr	r1, [pc, #28]	; (8009bfc <cmd_mem+0x4c>)
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fe8d 	bl	8009900 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 8009be6:	4620      	mov	r0, r4
 8009be8:	9a01      	ldr	r2, [sp, #4]
 8009bea:	4905      	ldr	r1, [pc, #20]	; (8009c00 <cmd_mem+0x50>)
 8009bec:	f7ff fe88 	bl	8009900 <chprintf>
}
 8009bf0:	b003      	add	sp, #12
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	0800b530 	.word	0x0800b530
 8009bf8:	0800b540 	.word	0x0800b540
 8009bfc:	0800b560 	.word	0x0800b560
 8009c00:	0800b578 	.word	0x0800b578
	...

08009c10 <GetLine>:
  (void)adcp;
  (void)err;
}


bool GetLine(BaseSequentialStream *chp, char *line , unsigned size) {
 8009c10:	b5f0      	push	{r4, r5, r6, r7, lr}
       *p = 0;
       return true;
     }
     if (c < 0x20)
       continue;
     if (p < line + size - 1) {
 8009c12:	3a01      	subs	r2, #1
  (void)adcp;
  (void)err;
}


bool GetLine(BaseSequentialStream *chp, char *line , unsigned size) {
 8009c14:	b083      	sub	sp, #12
 8009c16:	460e      	mov	r6, r1
       *p = 0;
       return true;
     }
     if (c < 0x20)
       continue;
     if (p < line + size - 1) {
 8009c18:	188f      	adds	r7, r1, r2
  (void)adcp;
  (void)err;
}


bool GetLine(BaseSequentialStream *chp, char *line , unsigned size) {
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	460d      	mov	r5, r1
   char *p = line;

   while (true) {
     char c;
 
     if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	2201      	movs	r2, #1
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f10d 0107 	add.w	r1, sp, #7
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4798      	blx	r3
 8009c2c:	b1a8      	cbz	r0, 8009c5a <GetLine+0x4a>
       return false;
     if (c == 4) {
 8009c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d010      	beq.n	8009c58 <GetLine+0x48>
       return false;
     }
     if ((c == 8) || (c == 127)) {
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d00a      	beq.n	8009c50 <GetLine+0x40>
 8009c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c3c:	d008      	beq.n	8009c50 <GetLine+0x40>
       if (p != line) {
         p--;
       }
       continue;
     }
     if (c == '\r') {
 8009c3e:	2b0d      	cmp	r3, #13
 8009c40:	d00d      	beq.n	8009c5e <GetLine+0x4e>
       *p = 0;
       return true;
     }
     if (c < 0x20)
 8009c42:	2b1f      	cmp	r3, #31
 8009c44:	d9eb      	bls.n	8009c1e <GetLine+0xe>
       continue;
     if (p < line + size - 1) {
 8009c46:	42bd      	cmp	r5, r7
 8009c48:	d2e9      	bcs.n	8009c1e <GetLine+0xe>
       *p++ = (char)c;
 8009c4a:	702b      	strb	r3, [r5, #0]
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	e7e6      	b.n	8009c1e <GetLine+0xe>
       return false;
     if (c == 4) {
       return false;
     }
     if ((c == 8) || (c == 127)) {
       if (p != line) {
 8009c50:	42b5      	cmp	r5, r6
 8009c52:	d0e4      	beq.n	8009c1e <GetLine+0xe>
         p--;
 8009c54:	3d01      	subs	r5, #1
 8009c56:	e7e2      	b.n	8009c1e <GetLine+0xe>

   while (true) {
     char c;
 
     if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
       return false;
 8009c58:	2000      	movs	r0, #0
       continue;
     if (p < line + size - 1) {
       *p++ = (char)c;
     }
   }
 }
 8009c5a:	b003      	add	sp, #12
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
         p--;
       }
       continue;
     }
     if (c == '\r') {
       *p = 0;
 8009c5e:	2300      	movs	r3, #0
       return true;
 8009c60:	2001      	movs	r0, #1
         p--;
       }
       continue;
     }
     if (c == '\r') {
       *p = 0;
 8009c62:	702b      	strb	r3, [r5, #0]
       continue;
     if (p < line + size - 1) {
       *p++ = (char)c;
     }
   }
 }
 8009c64:	b003      	add	sp, #12
 8009c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009c70 <GetlineTHread>:
 
char linebuffer[100];

static THD_WORKING_AREA(waGetlineTHread, 128);
static THD_FUNCTION(GetlineTHread, arg) {
 8009c70:	b510      	push	{r4, lr}
	  if (result == true)
	  {

	   unsigned bufferdata = strtol(linebuffer , NULL , 0);
	   bufferdata = (1000000)/bufferdata;
	   gptChangeInterval(&GPTD3 , bufferdata);
 8009c72:	4c09      	ldr	r4, [pc, #36]	; (8009c98 <GetlineTHread+0x28>)
static THD_FUNCTION(GetlineTHread, arg) {

  (void)arg;
   while(true){
	  
	  bool result = GetLine((BaseSequentialStream*)&SDU1 , linebuffer, sizeof(linebuffer));
 8009c74:	4909      	ldr	r1, [pc, #36]	; (8009c9c <GetlineTHread+0x2c>)
 8009c76:	480a      	ldr	r0, [pc, #40]	; (8009ca0 <GetlineTHread+0x30>)
 8009c78:	2264      	movs	r2, #100	; 0x64
 8009c7a:	f7ff ffc9 	bl	8009c10 <GetLine>

	  if (result == true)
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d0f8      	beq.n	8009c74 <GetlineTHread+0x4>
	  {

	   unsigned bufferdata = strtol(linebuffer , NULL , 0);
 8009c82:	2200      	movs	r2, #0
 8009c84:	4611      	mov	r1, r2
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <GetlineTHread+0x2c>)
 8009c88:	f000 fa3a 	bl	800a100 <strtol>
	   bufferdata = (1000000)/bufferdata;
	   gptChangeInterval(&GPTD3 , bufferdata);
 8009c8c:	fbb4 f1f0 	udiv	r1, r4, r0
 8009c90:	4804      	ldr	r0, [pc, #16]	; (8009ca4 <GetlineTHread+0x34>)
 8009c92:	f7f8 ff2d 	bl	8002af0 <gptChangeInterval>
 8009c96:	e7ed      	b.n	8009c74 <GetlineTHread+0x4>
 8009c98:	000f4240 	.word	0x000f4240
 8009c9c:	2000201c 	.word	0x2000201c
 8009ca0:	20001c78 	.word	0x20001c78
 8009ca4:	2000117c 	.word	0x2000117c
	...

08009cb0 <startADC>:
  }
};



void startADC(void){
 8009cb0:	b538      	push	{r3, r4, r5, lr}
  unsigned bufferdata = 1000;
  adcStart(&ADCD1 , NULL);   // Config file is emty so using  null
 8009cb2:	4d0c      	ldr	r5, [pc, #48]	; (8009ce4 <startADC+0x34>)
  adcSTM32EnableTSVREFE();
  adcStartConversion(&ADCD1 , &adcgrpcfg2 , samples, 1);
  gptStart(&GPTD3 , &gpt1cfg);
 8009cb4:	4c0c      	ldr	r4, [pc, #48]	; (8009ce8 <startADC+0x38>)



void startADC(void){
  unsigned bufferdata = 1000;
  adcStart(&ADCD1 , NULL);   // Config file is emty so using  null
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	2100      	movs	r1, #0
 8009cba:	f7f8 fed9 	bl	8002a70 <adcStart>
  adcSTM32EnableTSVREFE();
 8009cbe:	f7fa f9af 	bl	8004020 <adcSTM32EnableTSVREFE>
  adcStartConversion(&ADCD1 , &adcgrpcfg2 , samples, 1);
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4a09      	ldr	r2, [pc, #36]	; (8009cec <startADC+0x3c>)
 8009cc8:	4909      	ldr	r1, [pc, #36]	; (8009cf0 <startADC+0x40>)
 8009cca:	f7f8 fee1 	bl	8002a90 <adcStartConversion>
  gptStart(&GPTD3 , &gpt1cfg);
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4908      	ldr	r1, [pc, #32]	; (8009cf4 <startADC+0x44>)
 8009cd2:	f7f8 fefd 	bl	8002ad0 <gptStart>
  gptStartContinuous(&GPTD3 , bufferdata);  // ADC freq 1 khz
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8


};
 8009cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  unsigned bufferdata = 1000;
  adcStart(&ADCD1 , NULL);   // Config file is emty so using  null
  adcSTM32EnableTSVREFE();
  adcStartConversion(&ADCD1 , &adcgrpcfg2 , samples, 1);
  gptStart(&GPTD3 , &gpt1cfg);
  gptStartContinuous(&GPTD3 , bufferdata);  // ADC freq 1 khz
 8009ce0:	f7f8 bf16 	b.w	8002b10 <gptStartContinuous>
 8009ce4:	20000f14 	.word	0x20000f14
 8009ce8:	2000117c 	.word	0x2000117c
 8009cec:	2000209c 	.word	0x2000209c
 8009cf0:	0800b3f0 	.word	0x0800b3f0
 8009cf4:	0800b420 	.word	0x0800b420
	...

08009d00 <main>:
/*===========================================================================*/

/*
 * Application entry point.
 */
int main(void) {
 8009d00:	b570      	push	{r4, r5, r6, lr}
   */
  halInit();
  chSysInit();

  palSetPadMode(GPIOD,7,PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOB,5,PAL_MODE_OUTPUT_PUSHPULL);
 8009d02:	4c66      	ldr	r4, [pc, #408]	; (8009e9c <main+0x19c>)
 8009d04:	4d66      	ldr	r5, [pc, #408]	; (8009ea0 <main+0x1a0>)
  /*
   * Initializes a serial-over-USB CDC driver.
   */

  sduObjectInit(&SDU1);
  sduStart(&SDU1, &serusbcfg);
 8009d06:	4e67      	ldr	r6, [pc, #412]	; (8009ea4 <main+0x1a4>)
/*===========================================================================*/

/*
 * Application entry point.
 */
int main(void) {
 8009d08:	b082      	sub	sp, #8
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8009d0a:	f7f8 fe59 	bl	80029c0 <halInit>
  chSysInit();
 8009d0e:	f7f6 ffdf 	bl	8000cd0 <chSysInit>

  palSetPadMode(GPIOD,7,PAL_MODE_OUTPUT_PUSHPULL);
 8009d12:	2201      	movs	r2, #1
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	4864      	ldr	r0, [pc, #400]	; (8009ea8 <main+0x1a8>)
 8009d18:	f7fa fa62 	bl	80041e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB,5,PAL_MODE_OUTPUT_PUSHPULL);
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	2201      	movs	r2, #1
 8009d20:	2120      	movs	r1, #32
 8009d22:	f7fa fa5d 	bl	80041e0 <_pal_lld_setgroupmode>

  palSetPad(GPIOC, 8);
 8009d26:	4861      	ldr	r0, [pc, #388]	; (8009eac <main+0x1ac>)
 8009d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d2c:	8303      	strh	r3, [r0, #24]


  /*
   * Setting up analog inputs used by the demo.
   */
  palSetGroupMode(GPIOC, PAL_PORT_BIT(1) | PAL_PORT_BIT(2) | PAL_PORT_BIT(4) | PAL_PORT_BIT(5),
 8009d2e:	2203      	movs	r2, #3
 8009d30:	2136      	movs	r1, #54	; 0x36
 8009d32:	f7fa fa55 	bl	80041e0 <_pal_lld_setgroupmode>
                  0, PAL_MODE_INPUT_ANALOG);
  palSetGroupMode(GPIOA, PAL_PORT_BIT(1) | PAL_PORT_BIT(2) | PAL_PORT_BIT(3),
 8009d36:	2203      	movs	r2, #3
 8009d38:	210e      	movs	r1, #14
 8009d3a:	485d      	ldr	r0, [pc, #372]	; (8009eb0 <main+0x1b0>)
 8009d3c:	f7fa fa50 	bl	80041e0 <_pal_lld_setgroupmode>
                  0, PAL_MODE_INPUT_ANALOG);
  palSetGroupMode(GPIOB, PAL_PORT_BIT(0) , 
 8009d40:	2203      	movs	r2, #3
 8009d42:	4620      	mov	r0, r4
 8009d44:	2101      	movs	r1, #1
 8009d46:	f7fa fa4b 	bl	80041e0 <_pal_lld_setgroupmode>
                  0, PAL_MODE_INPUT_ANALOG);

  /*
   * Shell manager initialization.
   */
  shellInit();
 8009d4a:	f7ff f9a1 	bl	8009090 <shellInit>

  /*
   * Initializes a serial-over-USB CDC driver.
   */

  sduObjectInit(&SDU1);
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7f9 f86e 	bl	8002e30 <sduObjectInit>
  sduStart(&SDU1, &serusbcfg);
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	f7f9 f892 	bl	8002e80 <sduStart>
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8009d5c:	6833      	ldr	r3, [r6, #0]
 8009d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d60:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009d62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009d66:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1000);
 8009d68:	f242 7010 	movw	r0, #10000	; 0x2710
 8009d6c:	f7f7 fb58 	bl	8001420 <chThdSleep>
  usbStart(serusbcfg.usbp, &usbcfg);
 8009d70:	6830      	ldr	r0, [r6, #0]
 8009d72:	4950      	ldr	r1, [pc, #320]	; (8009eb4 <main+0x1b4>)
 8009d74:	f7f9 f9ec 	bl	8003150 <usbStart>
  usbConnectBus(serusbcfg.usbp);
 8009d78:	6833      	ldr	r3, [r6, #0]

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
 8009d7a:	484f      	ldr	r0, [pc, #316]	; (8009eb8 <main+0x1b8>)
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
  chThdSleepMilliseconds(1000);
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8009d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d7e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d84:	6393      	str	r3, [r2, #56]	; 0x38

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
 8009d86:	2100      	movs	r1, #0
 8009d88:	f7f8 ff72 	bl	8002c70 <sdStart>
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8009d8c:	f240 3282 	movw	r2, #898	; 0x382
 8009d90:	2104      	movs	r1, #4
 8009d92:	4847      	ldr	r0, [pc, #284]	; (8009eb0 <main+0x1b0>)
 8009d94:	f7fa fa24 	bl	80041e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8009d98:	f240 3282 	movw	r2, #898	; 0x382
 8009d9c:	2108      	movs	r1, #8
 8009d9e:	4844      	ldr	r0, [pc, #272]	; (8009eb0 <main+0x1b0>)
 8009da0:	f7fa fa1e 	bl	80041e0 <_pal_lld_setgroupmode>

  /*
   * Initializes the SPI driver 1 in order to access the MEMS. The signals
   * are already initialized in the board file.
   */
  spiStart(&SPID1, &spi1cfg);
 8009da4:	4945      	ldr	r1, [pc, #276]	; (8009ebc <main+0x1bc>)
 8009da6:	4846      	ldr	r0, [pc, #280]	; (8009ec0 <main+0x1c0>)
 8009da8:	f7f9 f95a 	bl	8003060 <spiStart>
   * PB13 - SCK.
   * PB14 - MISO.
   * PB15 - MOSI.
   */
  spiStart(&SPID2, &spi2cfg);
  palSetPad(GPIOB, 12);
 8009dac:	f44f 5680 	mov.w	r6, #4096	; 0x1000
   * PB12 - NSS.
   * PB13 - SCK.
   * PB14 - MISO.
   * PB15 - MOSI.
   */
  spiStart(&SPID2, &spi2cfg);
 8009db0:	4944      	ldr	r1, [pc, #272]	; (8009ec4 <main+0x1c4>)
 8009db2:	4845      	ldr	r0, [pc, #276]	; (8009ec8 <main+0x1c8>)
 8009db4:	f7f9 f954 	bl	8003060 <spiStart>
  palSetPad(GPIOB, 12);
  palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |
 8009db8:	4620      	mov	r0, r4
   * PB13 - SCK.
   * PB14 - MISO.
   * PB15 - MOSI.
   */
  spiStart(&SPID2, &spi2cfg);
  palSetPad(GPIOB, 12);
 8009dba:	8326      	strh	r6, [r4, #24]
  palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	2219      	movs	r2, #25
 8009dc0:	f7fa fa0e 	bl	80041e0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* NSS.     */
  palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(5) |
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f240 229a 	movw	r2, #666	; 0x29a
 8009dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009dce:	f7fa fa07 	bl	80041e0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* SCK.     */
  palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(5));              /* MISO.    */
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f240 2282 	movw	r2, #642	; 0x282
 8009dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ddc:	f7fa fa00 	bl	80041e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(5) |
 8009de0:	4620      	mov	r0, r4
 8009de2:	f240 229a 	movw	r2, #666	; 0x29a
 8009de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009dea:	f7fa f9f9 	bl	80041e0 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* MOSI.    */

  /*
   * Initializes the PWM driver 4, routes the TIM4 outputs to the board LEDs.
   */
  pwmStart(&PWMD4, &pwmcfg);
 8009dee:	4937      	ldr	r1, [pc, #220]	; (8009ecc <main+0x1cc>)
 8009df0:	4837      	ldr	r0, [pc, #220]	; (8009ed0 <main+0x1d0>)
 8009df2:	f7f8 fead 	bl	8002b50 <pwmStart>
  palSetPadMode(GPIOD, GPIOD_LED4, PAL_MODE_ALTERNATE(2));      /* Green.   */
 8009df6:	4631      	mov	r1, r6
 8009df8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009dfc:	482a      	ldr	r0, [pc, #168]	; (8009ea8 <main+0x1a8>)
 8009dfe:	f7fa f9ef 	bl	80041e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, GPIOD_LED3, PAL_MODE_ALTERNATE(2));      /* Orange.  */
 8009e02:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e0a:	4827      	ldr	r0, [pc, #156]	; (8009ea8 <main+0x1a8>)
 8009e0c:	f7fa f9e8 	bl	80041e0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, GPIOD_LED5, PAL_MODE_ALTERNATE(2));      /* Red.     */
 8009e10:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e18:	4823      	ldr	r0, [pc, #140]	; (8009ea8 <main+0x1a8>)
 8009e1a:	f7fa f9e1 	bl	80041e0 <_pal_lld_setgroupmode>
/*
  *  Threads 
   */
  

  chThdCreateStatic(waThread1, sizeof(waThread1),
 8009e1e:	2400      	movs	r4, #0
   */
  pwmStart(&PWMD4, &pwmcfg);
  palSetPadMode(GPIOD, GPIOD_LED4, PAL_MODE_ALTERNATE(2));      /* Green.   */
  palSetPadMode(GPIOD, GPIOD_LED3, PAL_MODE_ALTERNATE(2));      /* Orange.  */
  palSetPadMode(GPIOD, GPIOD_LED5, PAL_MODE_ALTERNATE(2));      /* Red.     */
  palSetPadMode(GPIOD, GPIOD_LED6, PAL_MODE_ALTERNATE(2));      /* Blue.    */
 8009e20:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e28:	481f      	ldr	r0, [pc, #124]	; (8009ea8 <main+0x1a8>)
 8009e2a:	f7fa f9d9 	bl	80041e0 <_pal_lld_setgroupmode>
/*
  *  Threads 
   */
  

  chThdCreateStatic(waThread1, sizeof(waThread1),
 8009e2e:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <main+0x1d4>)
 8009e30:	9400      	str	r4, [sp, #0]
 8009e32:	224a      	movs	r2, #74	; 0x4a
 8009e34:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009e38:	4827      	ldr	r0, [pc, #156]	; (8009ed8 <main+0x1d8>)
 8009e3a:	f7f7 fa81 	bl	8001340 <chThdCreateStatic>
                    NORMALPRIO + 10, Thread1, NULL);

  startADC();
 8009e3e:	f7ff ff37 	bl	8009cb0 <startADC>
  
  chThdCreateStatic(waThread2, sizeof(waThread2),
 8009e42:	4b26      	ldr	r3, [pc, #152]	; (8009edc <main+0x1dc>)
 8009e44:	9400      	str	r4, [sp, #0]
 8009e46:	224a      	movs	r2, #74	; 0x4a
 8009e48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009e4c:	4824      	ldr	r0, [pc, #144]	; (8009ee0 <main+0x1e0>)
 8009e4e:	f7f7 fa77 	bl	8001340 <chThdCreateStatic>
                      NORMALPRIO + 10, Thread2, NULL);

  chThdCreateStatic(waGetlineTHread, sizeof(waGetlineTHread),
 8009e52:	9400      	str	r4, [sp, #0]
 8009e54:	4b23      	ldr	r3, [pc, #140]	; (8009ee4 <main+0x1e4>)
 8009e56:	4824      	ldr	r0, [pc, #144]	; (8009ee8 <main+0x1e8>)
 8009e58:	224a      	movs	r2, #74	; 0x4a
 8009e5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009e5e:	f7f7 fa6f 	bl	8001340 <chThdCreateStatic>
  /*
   * Normal main() thread activity, in this demo it just performs
   * a shell respawn upon its termination.
   */
  while (true) {
    if (!shelltp) {
 8009e62:	b144      	cbz	r4, 8009e76 <main+0x176>
        shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
      }
    }
    else {
      /* If the previous shell exited.*/
      if (chThdTerminatedX(shelltp)) {
 8009e64:	7f23      	ldrb	r3, [r4, #28]
 8009e66:	2b0f      	cmp	r3, #15
 8009e68:	d013      	beq.n	8009e92 <main+0x192>
        /* Recovers memory of the previous shell.*/
        chThdRelease(shelltp);
        shelltp = NULL;
      }
    }
    chThdSleepMilliseconds(500);
 8009e6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e6e:	f7f7 fad7 	bl	8001420 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it just performs
   * a shell respawn upon its termination.
   */
  while (true) {
    if (!shelltp) {
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d1f6      	bne.n	8009e64 <main+0x164>
      if (SDU1.config->usbp->state == USB_ACTIVE) {
 8009e76:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d1f3      	bne.n	8009e6a <main+0x16a>
        /* Spawns a new shell.*/
        shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
 8009e82:	2240      	movs	r2, #64	; 0x40
 8009e84:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8009e88:	4818      	ldr	r0, [pc, #96]	; (8009eec <main+0x1ec>)
 8009e8a:	f7ff f909 	bl	80090a0 <shellCreate>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	e7eb      	b.n	8009e6a <main+0x16a>
    }
    else {
      /* If the previous shell exited.*/
      if (chThdTerminatedX(shelltp)) {
        /* Recovers memory of the previous shell.*/
        chThdRelease(shelltp);
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7f7 fc04 	bl	80016a0 <chThdRelease>
        shelltp = NULL;
 8009e98:	2400      	movs	r4, #0
 8009e9a:	e7e6      	b.n	8009e6a <main+0x16a>
 8009e9c:	40020400 	.word	0x40020400
 8009ea0:	20001c78 	.word	0x20001c78
 8009ea4:	0800b3d0 	.word	0x0800b3d0
 8009ea8:	40020c00 	.word	0x40020c00
 8009eac:	40020800 	.word	0x40020800
 8009eb0:	40020000 	.word	0x40020000
 8009eb4:	0800b2a0 	.word	0x0800b2a0
 8009eb8:	200011a8 	.word	0x200011a8
 8009ebc:	0800b430 	.word	0x0800b430
 8009ec0:	20001118 	.word	0x20001118
 8009ec4:	0800b440 	.word	0x0800b440
 8009ec8:	20001148 	.word	0x20001148
 8009ecc:	0800b630 	.word	0x0800b630
 8009ed0:	2000118c 	.word	0x2000118c
 8009ed4:	080099a1 	.word	0x080099a1
 8009ed8:	200019e8 	.word	0x200019e8
 8009edc:	08009921 	.word	0x08009921
 8009ee0:	20001b30 	.word	0x20001b30
 8009ee4:	08009c71 	.word	0x08009c71
 8009ee8:	20001ed0 	.word	0x20001ed0
 8009eec:	0800b670 	.word	0x0800b670

08009ef0 <strcasecmp>:
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <strcasecmp+0x48>)
 8009ef2:	b430      	push	{r4, r5}
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	f810 4b01 	ldrb.w	r4, [r0], #1
 8009efa:	192b      	adds	r3, r5, r4
 8009efc:	4622      	mov	r2, r4
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f0a:	bf08      	it	eq
 8009f0c:	f104 0220 	addeq.w	r2, r4, #32
 8009f10:	18ec      	adds	r4, r5, r3
 8009f12:	7864      	ldrb	r4, [r4, #1]
 8009f14:	f004 0403 	and.w	r4, r4, #3
 8009f18:	2c01      	cmp	r4, #1
 8009f1a:	d006      	beq.n	8009f2a <strcasecmp+0x3a>
 8009f1c:	1ad2      	subs	r2, r2, r3
 8009f1e:	d101      	bne.n	8009f24 <strcasecmp+0x34>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e8      	bne.n	8009ef6 <strcasecmp+0x6>
 8009f24:	4610      	mov	r0, r2
 8009f26:	bc30      	pop	{r4, r5}
 8009f28:	4770      	bx	lr
 8009f2a:	3320      	adds	r3, #32
 8009f2c:	1ad2      	subs	r2, r2, r3
 8009f2e:	d0e2      	beq.n	8009ef6 <strcasecmp+0x6>
 8009f30:	4610      	mov	r0, r2
 8009f32:	bc30      	pop	{r4, r5}
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	200008e4 	.word	0x200008e4
 8009f3c:	00000000 	.word	0x00000000

08009f40 <strpbrk>:
 8009f40:	b430      	push	{r4, r5}
 8009f42:	7804      	ldrb	r4, [r0, #0]
 8009f44:	b1dc      	cbz	r4, 8009f7e <strpbrk+0x3e>
 8009f46:	780d      	ldrb	r5, [r1, #0]
 8009f48:	b19d      	cbz	r5, 8009f72 <strpbrk+0x32>
 8009f4a:	42a5      	cmp	r5, r4
 8009f4c:	d00f      	beq.n	8009f6e <strpbrk+0x2e>
 8009f4e:	460a      	mov	r2, r1
 8009f50:	e001      	b.n	8009f56 <strpbrk+0x16>
 8009f52:	42a3      	cmp	r3, r4
 8009f54:	d00b      	beq.n	8009f6e <strpbrk+0x2e>
 8009f56:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1f9      	bne.n	8009f52 <strpbrk+0x12>
 8009f5e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009f62:	2c00      	cmp	r4, #0
 8009f64:	d1f0      	bne.n	8009f48 <strpbrk+0x8>
 8009f66:	7813      	ldrb	r3, [r2, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bf08      	it	eq
 8009f6c:	2000      	moveq	r0, #0
 8009f6e:	bc30      	pop	{r4, r5}
 8009f70:	4770      	bx	lr
 8009f72:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009f76:	460a      	mov	r2, r1
 8009f78:	2c00      	cmp	r4, #0
 8009f7a:	d1e5      	bne.n	8009f48 <strpbrk+0x8>
 8009f7c:	e7f3      	b.n	8009f66 <strpbrk+0x26>
 8009f7e:	4620      	mov	r0, r4
 8009f80:	bc30      	pop	{r4, r5}
 8009f82:	4770      	bx	lr
	...

08009f90 <strspn>:
 8009f90:	b470      	push	{r4, r5, r6}
 8009f92:	7804      	ldrb	r4, [r0, #0]
 8009f94:	b1a4      	cbz	r4, 8009fc0 <strspn+0x30>
 8009f96:	780e      	ldrb	r6, [r1, #0]
 8009f98:	4605      	mov	r5, r0
 8009f9a:	b14e      	cbz	r6, 8009fb0 <strspn+0x20>
 8009f9c:	42b4      	cmp	r4, r6
 8009f9e:	d00a      	beq.n	8009fb6 <strspn+0x26>
 8009fa0:	460a      	mov	r2, r1
 8009fa2:	e001      	b.n	8009fa8 <strspn+0x18>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d006      	beq.n	8009fb6 <strspn+0x26>
 8009fa8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1f9      	bne.n	8009fa4 <strspn+0x14>
 8009fb0:	1a28      	subs	r0, r5, r0
 8009fb2:	bc70      	pop	{r4, r5, r6}
 8009fb4:	4770      	bx	lr
 8009fb6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8009fba:	2c00      	cmp	r4, #0
 8009fbc:	d1ed      	bne.n	8009f9a <strspn+0xa>
 8009fbe:	e7f7      	b.n	8009fb0 <strspn+0x20>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	e7f6      	b.n	8009fb2 <strspn+0x22>
	...

08009fd0 <_strtol_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	4c47      	ldr	r4, [pc, #284]	; (800a0f4 <_strtol_r+0x124>)
 8009fd6:	4683      	mov	fp, r0
 8009fd8:	460e      	mov	r6, r1
 8009fda:	f8d4 e000 	ldr.w	lr, [r4]
 8009fde:	e000      	b.n	8009fe2 <_strtol_r+0x12>
 8009fe0:	4626      	mov	r6, r4
 8009fe2:	4634      	mov	r4, r6
 8009fe4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009fe8:	eb0e 0005 	add.w	r0, lr, r5
 8009fec:	7840      	ldrb	r0, [r0, #1]
 8009fee:	f000 0008 	and.w	r0, r0, #8
 8009ff2:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d1f2      	bne.n	8009fe0 <_strtol_r+0x10>
 8009ffa:	2d2d      	cmp	r5, #45	; 0x2d
 8009ffc:	d05c      	beq.n	800a0b8 <_strtol_r+0xe8>
 8009ffe:	2d2b      	cmp	r5, #43	; 0x2b
 800a000:	bf04      	itt	eq
 800a002:	7875      	ldrbeq	r5, [r6, #1]
 800a004:	1cb4      	addeq	r4, r6, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d03e      	beq.n	800a088 <_strtol_r+0xb8>
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d060      	beq.n	800a0d0 <_strtol_r+0x100>
 800a00e:	469a      	mov	sl, r3
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	bf0c      	ite	eq
 800a016:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a01a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800a01e:	2700      	movs	r7, #0
 800a020:	fbb0 f9fa 	udiv	r9, r0, sl
 800a024:	46bc      	mov	ip, r7
 800a026:	fb0a 0019 	mls	r0, sl, r9, r0
 800a02a:	e00c      	b.n	800a046 <_strtol_r+0x76>
 800a02c:	3d30      	subs	r5, #48	; 0x30
 800a02e:	42ab      	cmp	r3, r5
 800a030:	dd19      	ble.n	800a066 <_strtol_r+0x96>
 800a032:	1c7e      	adds	r6, r7, #1
 800a034:	d005      	beq.n	800a042 <_strtol_r+0x72>
 800a036:	45cc      	cmp	ip, r9
 800a038:	d823      	bhi.n	800a082 <_strtol_r+0xb2>
 800a03a:	d020      	beq.n	800a07e <_strtol_r+0xae>
 800a03c:	fb0a 5c0c 	mla	ip, sl, ip, r5
 800a040:	2701      	movs	r7, #1
 800a042:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a046:	eb0e 0605 	add.w	r6, lr, r5
 800a04a:	7876      	ldrb	r6, [r6, #1]
 800a04c:	f016 0f04 	tst.w	r6, #4
 800a050:	d1ec      	bne.n	800a02c <_strtol_r+0x5c>
 800a052:	f016 0603 	ands.w	r6, r6, #3
 800a056:	d006      	beq.n	800a066 <_strtol_r+0x96>
 800a058:	2e01      	cmp	r6, #1
 800a05a:	bf14      	ite	ne
 800a05c:	2657      	movne	r6, #87	; 0x57
 800a05e:	2637      	moveq	r6, #55	; 0x37
 800a060:	1bad      	subs	r5, r5, r6
 800a062:	42ab      	cmp	r3, r5
 800a064:	dce5      	bgt.n	800a032 <_strtol_r+0x62>
 800a066:	1c7b      	adds	r3, r7, #1
 800a068:	d016      	beq.n	800a098 <_strtol_r+0xc8>
 800a06a:	f1b8 0f00 	cmp.w	r8, #0
 800a06e:	d110      	bne.n	800a092 <_strtol_r+0xc2>
 800a070:	4660      	mov	r0, ip
 800a072:	2a00      	cmp	r2, #0
 800a074:	d039      	beq.n	800a0ea <_strtol_r+0x11a>
 800a076:	b9df      	cbnz	r7, 800a0b0 <_strtol_r+0xe0>
 800a078:	6011      	str	r1, [r2, #0]
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	4285      	cmp	r5, r0
 800a080:	dddc      	ble.n	800a03c <_strtol_r+0x6c>
 800a082:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a086:	e7dc      	b.n	800a042 <_strtol_r+0x72>
 800a088:	2d30      	cmp	r5, #48	; 0x30
 800a08a:	d01a      	beq.n	800a0c2 <_strtol_r+0xf2>
 800a08c:	230a      	movs	r3, #10
 800a08e:	469a      	mov	sl, r3
 800a090:	e7be      	b.n	800a010 <_strtol_r+0x40>
 800a092:	f1cc 0c00 	rsb	ip, ip, #0
 800a096:	e7eb      	b.n	800a070 <_strtol_r+0xa0>
 800a098:	f1b8 0f00 	cmp.w	r8, #0
 800a09c:	f04f 0322 	mov.w	r3, #34	; 0x22
 800a0a0:	bf0c      	ite	eq
 800a0a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a0a6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800a0aa:	f8cb 3000 	str.w	r3, [fp]
 800a0ae:	b1f2      	cbz	r2, 800a0ee <_strtol_r+0x11e>
 800a0b0:	1e61      	subs	r1, r4, #1
 800a0b2:	6011      	str	r1, [r2, #0]
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	1cb4      	adds	r4, r6, #2
 800a0ba:	7875      	ldrb	r5, [r6, #1]
 800a0bc:	f04f 0801 	mov.w	r8, #1
 800a0c0:	e7a1      	b.n	800a006 <_strtol_r+0x36>
 800a0c2:	7823      	ldrb	r3, [r4, #0]
 800a0c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0c8:	2b58      	cmp	r3, #88	; 0x58
 800a0ca:	d008      	beq.n	800a0de <_strtol_r+0x10e>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	e79e      	b.n	800a00e <_strtol_r+0x3e>
 800a0d0:	2d30      	cmp	r5, #48	; 0x30
 800a0d2:	d19c      	bne.n	800a00e <_strtol_r+0x3e>
 800a0d4:	7820      	ldrb	r0, [r4, #0]
 800a0d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0da:	2858      	cmp	r0, #88	; 0x58
 800a0dc:	d197      	bne.n	800a00e <_strtol_r+0x3e>
 800a0de:	f04f 0a10 	mov.w	sl, #16
 800a0e2:	7865      	ldrb	r5, [r4, #1]
 800a0e4:	4653      	mov	r3, sl
 800a0e6:	3402      	adds	r4, #2
 800a0e8:	e792      	b.n	800a010 <_strtol_r+0x40>
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200008e4 	.word	0x200008e4
	...

0800a100 <strtol>:
 800a100:	b410      	push	{r4}
 800a102:	4c04      	ldr	r4, [pc, #16]	; (800a114 <strtol+0x14>)
 800a104:	4613      	mov	r3, r2
 800a106:	460a      	mov	r2, r1
 800a108:	4601      	mov	r1, r0
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	bc10      	pop	{r4}
 800a10e:	f7ff bf5f 	b.w	8009fd0 <_strtol_r>
 800a112:	bf00      	nop
 800a114:	20000d10 	.word	0x20000d10
	...
 800a120:	656c6469 	.word	0x656c6469
	...

0800a130 <ch_debug>:
 800a130:	6e69616d 18001600 08440404 1814100c     main......D.....
 800a140:	1e1d1c00 00000000 00000000 00000000     ................

0800a150 <vmt>:
 800a150:	08002bd1 08002bb1 08002c11 08002bf1     .+...+...,...+..
 800a160:	08002c01 08002be1 08002bc1 08002ba1     .,...+...+...+..

0800a170 <vmt>:
 800a170:	08002dd1 08002db1 08002e11 08002df1     .-...-.......-..
 800a180:	08002e01 08002de1 08002dc1 08002da1     .....-...-...-..

0800a190 <zero_status>:
	...

0800a1a0 <active_status>:
	...

0800a1b0 <halted_status>:
 800a1b0:	00000001 00000000 00000000 00000000     ................

0800a1c0 <_stm32_dma_streams>:
 800a1c0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 800a1d0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 800a1e0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 800a1f0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 800a200:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 800a210:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 800a220:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 800a230:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 800a240:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 800a250:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 800a260:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 800a270:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

0800a280 <fsparams>:
 800a280:	00000080 00000140 00000003 00000000     ....@...........
 800a290:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

0800a2a0 <ep0config>:
 800a2a0:	00000000 08003261 080035a1 08003691     ....a2...5...6..
 800a2b0:	00400040 200010f8 200010f8 00000001     @.@.... ... ....
 800a2c0:	2000110c 00000000 00000000 00000000     ... ............
 800a2d0:	20414d44 6c696166 00657275 00000000     DMA failure.....

0800a2e0 <default_config>:
 800a2e0:	00009600 40000000 00000000 00000000     .......@........

0800a2f0 <pal_default_config>:
 800a2f0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 800a300:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 800a310:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 800a320:	04000000 00000040 02208001 00000000     ....@..... .....
 800a330:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 800a340:	00060600 55000100 00000000 ffffffff     .......U........
 800a350:	00555055 00000fff 00000000 00000000     UPU.............
 800a360:	00000040 00000000 ffffffff 00000000     @...............
 800a370:	0000ffff 00000000 00000000 00000000     ................
 800a380:	00000000 ffffffff 00000000 0000ffff     ................
	...
 800a3a0:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800a3bc:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800a3d8:	ffffffff 00000000 0000ffff 00000000     ................
	...

0800a3f0 <wa>:
 800a3f0:	20001220 20001368 200014b0 200015f8      .. h.. ... ... 
 800a400:	20001740 00000000 00000000 00000000     @.. ............

0800a410 <patterns>:
 800a410:	0800ac90 0800a6a0 0800a780 0800a8f0     ................
 800a420:	0800a950 0800a960 0800a9a0 0800aa50     P...`.......P...
 800a430:	0800aac0 0800aba0 0800abb0 0800acb0     ................
	...
 800a450:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 800a460:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 800a470:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 800a480:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 800a490:	68637241 63657469 65727574 0000203a     Architecture: ..
 800a4a0:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 800a4b0:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 800a4c0:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 800a4d0:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 800a4e0:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 800a4f0:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 800a500:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 800a510:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 800a520:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 800a530:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 800a540:	20747365 74697573 00000065 002a2a2a     est suite...***.
 800a550:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 800a560:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 800a570:	00455255 2e302e33 00367030 20677541     URE.3.0.0p6.Aug 
 800a580:	32203420 20363130 3931202d 3a34303a      4 2016 - 19:04:
 800a590:	00003733 20434347 2e332e35 30322031     37..GCC 5.3.1 20
 800a5a0:	33303631 28203730 656c6572 29657361     160307 (release)
 800a5b0:	52415b20 6d652f4d 64646562 352d6465      [ARM/embedded-5
 800a5c0:	6172622d 2068636e 69766572 6e6f6973     -branch revision
 800a5d0:	34333220 5d393835 00000000 764d5241      234589]....ARMv
 800a5e0:	454d2d37 00000000 74726f43 4d2d7865     7-ME....Cortex-M
 800a5f0:	00000034 61766441 6465636e 72656b20     4...Advanced ker
 800a600:	206c656e 65646f6d 00000000 334d5453     nel mode....STM3
 800a610:	30344632 69482037 50206867 6f667265     2F407 High Perfo
 800a620:	6e616d72 77206563 20687469 20505344     rmance with DSP 
 800a630:	20646e61 00555046 694d5453 656f7263     and FPU.STMicroe
 800a640:	7463656c 696e6f72 53207363 32334d54     lectronics STM32
 800a650:	442d3446 6f637369 79726576 00000000     F4-Discovery....

0800a660 <testthd1>:
 800a660:	0800a71c 00000000 00000000 08005b31     ............1[..

0800a670 <testthd2>:
 800a670:	0800a700 00000000 00000000 08005c11     .............\..

0800a680 <testthd3>:
 800a680:	0800a6e4 00000000 00000000 08005cf1     .............\..

0800a690 <testthd4>:
 800a690:	0800a6d4 00000000 00000000 08005e21     ............!^..

0800a6a0 <patternthd>:
 800a6a0:	0800a660 0800a670 0800a680 0800a690     `...p...........
	...
 800a6c0:	00000043 00000042 00000041 44434241     C...B...A...ABCD
 800a6d0:	00000045 65726854 2c736461 6c656420     E...Threads, del
 800a6e0:	00737961 65726854 2c736461 69727020     ays.Threads, pri
 800a6f0:	7469726f 68632079 65676e61 00000000     ority change....
 800a700:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 800a710:	7420676e 20747365 00003223 65726854     ng test #2..Thre
 800a720:	2c736461 716e6520 69756575 7420676e     ads, enqueuing t
 800a730:	20747365 00003123 00000000 00000000     est #1..........

0800a740 <testsem1>:
 800a740:	0800a7f8 08006081 00000000 08005ec1     .....`.......^..

0800a750 <testsem2>:
 800a750:	0800a7e4 08006071 00000000 080060c1     ....q`.......`..

0800a760 <testsem3>:
 800a760:	0800a7c4 08006061 00000000 08006221     ....a`......!b..

0800a770 <testsem4>:
 800a770:	0800a7a0 00000000 00000000 080062f1     .............b..

0800a780 <patternsem>:
 800a780:	0800a740 0800a750 0800a760 0800a770     @...P...`...p...
	...
 800a7a0:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 800a7b0:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 800a7c0:	00000000 616d6553 726f6870 202c7365     ....Semaphores, 
 800a7d0:	6d6f7461 73206369 616e6769 61772d6c     atomic signal-wa
 800a7e0:	00007469 616d6553 726f6870 202c7365     it..Semaphores, 
 800a7f0:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 800a800:	202c7365 75716e65 6e697565 00000067     es, enqueuing...

0800a810 <testmtx5>:
 800a810:	0800a898 08006581 00000000 08006851     .....e......Qh..

0800a820 <testmtx6>:
 800a820:	0800a880 08006a51 00000000 08006911     ....Qj.......i..

0800a830 <testmtx7>:
 800a830:	0800a868 08006a31 00000000 08006a91     h...1j.......j..

0800a840 <testmtx8>:
 800a840:	0800a854 08006a61 00000000 08006b51     T...aj......Qk..
 800a850:	00434241 646e6f43 2c726156 6f6f6220     ABC.CondVar, boo
 800a860:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 800a870:	6f726220 61636461 74207473 00747365      broadcast test.
 800a880:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 800a890:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 800a8a0:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 800a8b0:	69727020 7469726f 65722079 6e727574      priority return
 800a8c0:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 800a8d0:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 800a8e0:	74736574 00000000 00000000 00000000     test............

0800a8f0 <patternmtx>:
 800a8f0:	0800a910 0800a920 0800a810 0800a820     .... ....... ...
 800a900:	0800a830 0800a840 00000000 00000000     0...@...........

0800a910 <testmtx1>:
 800a910:	0800a8c4 08006591 00000000 08006441     .....e......Ad..

0800a920 <testmtx4>:
 800a920:	0800a8a8 08006561 00000000 080065e1     ....ae.......e..

0800a930 <testmsg1>:
 800a930:	0800a940 00000000 00000000 08006c31     @...........1l..
 800a940:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..

0800a950 <patternmsg>:
 800a950:	0800a930 00000000 00000000 00000000     0...............

0800a960 <patternmbox>:
 800a960:	0800a990 00000000 00000000 00000000     ................
 800a970:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 800a980:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.

0800a990 <testmbox1>:
 800a990:	0800a970 080072b1 00000000 08006cd1     p....r.......l..

0800a9a0 <patternevt>:
 800a9a0:	0800aa20 0800a9b0 0800aa40 00000000      .......@.......

0800a9b0 <testevt2>:
 800a9b0:	0800a9d4 080073a1 00000000 080073c1     .....s.......s..
 800a9c0:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800a9d0:	00000000 6e657645 202c7374 74696177     ....Events, wait
 800a9e0:	646e6120 6f726220 61636461 00007473      and broadcast..
 800a9f0:	6e657645 202c7374 69676572 61727473     Events, registra
 800aa00:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800aa10:	00000068 00000000 00000000 00000000     h...............

0800aa20 <testevt1>:
 800aa20:	0800a9f0 080073b1 00000000 08007301     .....s.......s..

0800aa30 <evhndl>:
 800aa30:	080072f1 080072e1 080072d1 00000000     .r...r...r......

0800aa40 <testevt3>:
 800aa40:	0800a9c0 08007391 00000000 080076a1     .....s.......v..

0800aa50 <patternheap>:
 800aa50:	0800aa90 00000000 00000000 00000000     ................
 800aa60:	70616548 6c61202c 61636f6c 6e6f6974     Heap, allocation
 800aa70:	646e6120 61726620 6e656d67 69746174      and fragmentati
 800aa80:	74206e6f 00747365 00000000 00000000     on test.........

0800aa90 <testheap1>:
 800aa90:	0800aa60 08007991 00000000 08007741     `....y......Aw..
 800aaa0:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 800aab0:	2f657565 75716564 00657565 00000000     eue/dequeue.....

0800aac0 <patternpools>:
 800aac0:	0800aad0 00000000 00000000 00000000     ................

0800aad0 <testpools1>:
 800aad0:	0800aaa0 080079c1 00000000 080079d1     .....y.......y..

0800aae0 <testdyn1>:
 800aae0:	0800ab74 08007bc1 00000000 08007a91     t....{.......z..

0800aaf0 <testdyn2>:
 800aaf0:	0800ab44 08007cd1 00000000 08007bd1     D....|.......{..

0800ab00 <testdyn3>:
 800ab00:	0800ab1c 08007ba1 00000000 08007d11     .....{.......}..
 800ab10:	00004241 44434241 00000000 616e7944     AB..ABCD....Dyna
 800ab20:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 800ab30:	61207972 7220646e 72656665 65636e65     ry and reference
 800ab40:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 800ab50:	6874202c 64616572 72632073 69746165     , threads creati
 800ab60:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 800ab70:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 800ab80:	6874202c 64616572 72632073 69746165     , threads creati
 800ab90:	66206e6f 206d6f72 70616568 00000000     on from heap....

0800aba0 <patterndyn>:
 800aba0:	0800aae0 0800aaf0 0800ab00 00000000     ................

0800abb0 <patternqueues>:
 800abb0:	0800ac00 0800abc0 00000000 00000000     ................

0800abc0 <testqueues2>:
 800abc0:	0800abd0 08007eb1 00000000 08008151     .....~......Q...
 800abd0:	75657551 202c7365 7074756f 71207475     Queues, output q
 800abe0:	65756575 00000073 75657551 202c7365     ueues...Queues, 
 800abf0:	75706e69 75712074 73657565 00000000     input queues....

0800ac00 <testqueues1>:
 800ac00:	0800abe8 08007e71 00000000 08007ee1     ....q~.......~..

0800ac10 <testsys1>:
 800ac10:	0800ac70 00000000 00000000 08008461     p...........a...

0800ac20 <testsys2>:
 800ac20:	0800ac54 00000000 00000000 08008391     T...............

0800ac30 <testsys3>:
 800ac30:	0800ac40 00000000 00000000 080083d1     @...............
 800ac40:	74737953 202c6d65 65746e69 74697267     System, integrit
 800ac50:	00000079 74737953 202c6d65 65746e69     y...System, inte
 800ac60:	70757272 68207374 6c646e61 00676e69     rrupts handling.
 800ac70:	74737953 202c6d65 74697263 6c616369     System, critical
 800ac80:	6e6f7a20 00007365 00000000 00000000      zones..........

0800ac90 <patternsys>:
 800ac90:	0800ac10 0800ac20 0800ac30 00000000     .... ...0.......

0800aca0 <testbmk8>:
 800aca0:	0800af20 00000000 00000000 08008b81      ...............

0800acb0 <patternbmk>:
 800acb0:	0800acf0 0800ad00 0800ad20 0800ad40     ........ ...@...
 800acc0:	0800ad30 0800b060 0800b070 0800aca0     0...`...p.......
 800acd0:	0800ad10 0800b020 0800b030 0800b040     .... ...0...@...
 800ace0:	0800b050 00000000 00000000 00000000     P...............

0800acf0 <testbmk1>:
 800acf0:	0800b000 00000000 00000000 080086e1     ................

0800ad00 <testbmk2>:
 800ad00:	0800afe8 00000000 00000000 08008751     ............Q...

0800ad10 <testbmk9>:
 800ad10:	0800aefc 00000000 00000000 08008c91     ................

0800ad20 <testbmk3>:
 800ad20:	0800afd0 00000000 00000000 080087c1     ................

0800ad30 <testbmk5>:
 800ad30:	0800af94 00000000 00000000 080089a1     ................

0800ad40 <testbmk4>:
 800ad40:	0800afb4 00000000 00000000 080088b1     ................
 800ad50:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 800ad60:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 800ad70:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 800ad80:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 800ad90:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 800ada0:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 800adb0:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 800adc0:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 800add0:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 800ade0:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 800adf0:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 800ae00:	203a2065 00000000 72687420 73646165     e : .... threads
 800ae10:	0000532f 67736d20 2c532f73 00000020     /S.. msgs/S, ...
 800ae20:	78746320 2f637773 00000053 73657220      ctxswc/S... res
 800ae30:	64656863 73656c75 202c532f 00000000     chedules/S, ....
 800ae40:	74796220 532f7365 00000000 6d697420      bytes/S.... tim
 800ae50:	2f737265 00000053 69617720 69732b74     ers/S... wait+si
 800ae60:	6c616e67 0000532f 636f6c20 6e752b6b     gnal/S.. lock+un
 800ae70:	6b636f6c 0000532f 636e6542 72616d68     lock/S..Benchmar
 800ae80:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 800ae90:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 800aea0:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 800aeb0:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 800aec0:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 800aed0:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 800aee0:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800aef0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800af00:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 800af10:	68742073 67756f72 74757068 00000000     s throughput....
 800af20:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 800af30:	626f7220 63206e69 65746e6f 73207478      robin context s
 800af40:	63746977 676e6968 00000000 636e6542     witching....Benc
 800af50:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 800af60:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 800af70:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 800af80:	61657268 202c7364 61657263 6f206574     hreads, create o
 800af90:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 800afa0:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 800afb0:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 800afc0:	65746e6f 73207478 63746977 00000068     ontext switch...
 800afd0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800afe0:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 800aff0:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 800b000:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800b010:	20736567 00003123 00000000 00000000     ges #1..........

0800b020 <testbmk10>:
 800b020:	0800aed8 00000000 00000000 08008d41     ............A...

0800b030 <testbmk11>:
 800b030:	0800aeb4 08008b71 00000000 08008dc1     ....q...........

0800b040 <testbmk12>:
 800b040:	0800ae94 08008ea1 00000000 08008e31     ............1...

0800b050 <testbmk13>:
 800b050:	0800ae78 00000000 00000000 08008521     x...........!...

0800b060 <testbmk6>:
 800b060:	0800af74 00000000 00000000 08008631     t...........1...

0800b070 <testbmk7>:
 800b070:	0800af4c 08008b61 00000000 08008a21     L...a.......!...
 800b080:	74737973 00656d69 67617355 25203a65     systime.Usage: %
 800b090:	000a0d73 0d756c25 0000000a 6f666e69     s...%lu.....info
 800b0a0:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800b0b0:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800b0c0:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800b0d0:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800b0e0:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800b0f0:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800b100:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800b110:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800b120:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800b130:	00202d20 20677541 32203420 00363130      - .Aug  4 2016.
 800b140:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800b150:	73257325 00000a0d 303a3931 39333a34     %s%s....19:04:39
 800b160:	00000000 00000920 0000445e 6c656873     .... ...^D..shel
 800b170:	0000006c 68430a0d 4f696269 54522f53     l.....ChibiOS/RT
 800b180:	65685320 0a0d6c6c 00000000 203e6863      Shell......ch> 
 800b190:	00000000 6f6c0a0d 74756f67 00000000     ......logout....
 800b1a0:	206f6f74 796e616d 67726120 6e656d75     too many argumen
 800b1b0:	0a0d7374 00000000 74697865 00000000     ts......exit....
 800b1c0:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 800b1d0:	6568203a 6520706c 20746978 00000000     : help exit ....
 800b1e0:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 800b1f0:	6c756e28 0000296c 00000000 00000000     (null)..........

0800b200 <pow10>:
 800b200:	0000000a 00000064 000003e8 00002710     ....d........'..
 800b210:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800b220:	3b9aca00 00000000 00000000 00000000     ...;............

0800b230 <ep1config>:
 800b230:	00000002 00000000 08002f51 08002fc1     ........Q/.../..
 800b240:	00400040 200019c0 200019d4 00000002     @.@.... ... ....
	...

0800b260 <vcom_configuration_descriptor>:
 800b260:	00000043 0800b2b0 00000000 00000000     C...............

0800b270 <ep2config>:
 800b270:	00000003 00000000 08003031 00000000     ........10......
 800b280:	00000010 200019ac 00000000 00000001     ....... ........
	...

0800b2a0 <usbcfg>:
 800b2a0:	08009871 08009841 08002f11 00000000     q...A..../......

0800b2b0 <vcom_configuration_descriptor_data>:
 800b2b0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800b2c0:	24050001 05011000 01000124 02022404     ...$....$....$..
 800b2d0:	00062405 82050701 ff000803 00010409     .$..............
 800b2e0:	00000a02 01050700 00004002 02810507     .........@......
 800b2f0:	00000040 00000000 00000000 00000000     @...............

0800b300 <vcom_device_descriptor_data>:
 800b300:	01100112 40000002 57400483 02010200     .......@..@W....
 800b310:	00000103 00000000 00000000 00000000     ................

0800b320 <vcom_string0>:
 800b320:	04090304 00000000 00000000 00000000     ................

0800b330 <vcom_string1>:
 800b330:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800b340:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800b350:	00630069 00000073 00000000 00000000     i.c.s...........

0800b360 <vcom_string2>:
 800b360:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800b370:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800b380:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800b390:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800b3a0 <vcom_string3>:
 800b3a0:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800b3b0 <vcom_strings>:
 800b3b0:	00000004 0800b320 00000026 0800b330     .... ...&...0...
 800b3c0:	00000038 0800b360 00000008 0800b3a0     8...`...........

0800b3d0 <serusbcfg>:
 800b3d0:	20000f48 00020101 00000000 00000000     H.. ............

0800b3e0 <vcom_device_descriptor>:
 800b3e0:	00000012 0800b300 00000000 00000000     ................

0800b3f0 <adcgrpcfg2>:
 800b3f0:	00080001 080098d1 080098b1 00000000     ................
 800b400:	18000000 00000000 00000000 00700000     ..............p.
 800b410:	0000010f 1c31058b 00000000 00000000     ......1.........

0800b420 <gpt1cfg>:
 800b420:	000f4240 080098c1 00000020 00000000     @B...... .......

0800b430 <spi1cfg>:
 800b430:	00000000 40021000 001b0003 00000000     .......@........

0800b440 <spi2cfg>:
 800b440:	00000000 40020400 0000000c 00000000     .......@........

0800b450 <commands>:
 800b450:	0800b624 08009bb1 0800b628 08009b51     $.......(...Q...
 800b460:	0800a8e0 08009b01 00000000 00000000     ................

0800b470 <states.8513>:
 800b470:	0800b598 0800b5a0 0800b5a8 0800b5b0     ................
 800b480:	0800b5bc 0800b5c4 0800b5cc 0800b5d4     ................
 800b490:	0800b5dc 0800b5e8 0800b5f0 0800b5f8     ................
 800b4a0:	0800b604 0800b60c 0800b614 0800b61c     ................
 800b4b0:	64616572 00007265 67617355 74203a65     reader..Usage: t
 800b4c0:	0d747365 0000000a 2074756f 6d20666f     est.....out of m
 800b4d0:	726f6d65 000a0d79 67617355 74203a65     emory...Usage: t
 800b4e0:	61657268 0a0d7364 00000000 20202020     hreads......    
 800b4f0:	72646461 20202020 63617473 7270206b     addr    stack pr
 800b500:	72206f69 20736665 20202020 74617473     io refs     stat
 800b510:	000a0d65 6c383025 30252078 20786c38     e...%08lx %08lx 
 800b520:	756c3425 6c342520 39252075 000a0d73     %4lu %4lu %9s...
 800b530:	67617355 6d203a65 0a0d6d65 00000000     Usage: mem......
 800b540:	65726f63 65726620 656d2065 79726f6d     core free memory
 800b550:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 800b560:	70616568 61726620 6e656d67 20207374     heap fragments  
 800b570:	25203a20 000a0d75 70616568 65726620      : %u...heap fre
 800b580:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 800b590:	0d736574 0000000a 44414552 00000059     tes.....READY...
 800b5a0:	52525543 00544e45 54535457 00545241     CURRENT.WTSTART.
 800b5b0:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 800b5c0:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 800b5d0:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 800b5e0:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 800b5f0:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 800b600:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 800b610:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 800b620:	0000004c 006d656d 65726874 00736461     L...mem.threads.

0800b630 <pwmcfg>:
 800b630:	000186a0 00000080 00000000 00000001     ................
 800b640:	00000000 00000001 00000000 00000001     ................
 800b650:	00000000 00000001 00000000 00000000     ................
	...

0800b670 <shell_cfg1>:
 800b670:	20001c78 0800b450 00000000 00000000     x.. P...........

0800b680 <_ctype_>:
 800b680:	20202000 20202020 28282020 20282828     .         ((((( 
 800b690:	20202020 20202020 20202020 20202020                     
 800b6a0:	10108820 10101010 10101010 10101010      ...............
 800b6b0:	04040410 04040404 10040404 10101010     ................
 800b6c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800b6d0:	01010101 01010101 01010101 10101010     ................
 800b6e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800b6f0:	02020202 02020202 02020202 10101010     ................
 800b700:	00000020 00000000 00000000 00000000      ...............
	...
