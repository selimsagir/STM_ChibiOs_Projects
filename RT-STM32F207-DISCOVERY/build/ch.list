
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f001 fb4f 	bl	8001880 <__core_init>
 80001e2:	f000 fa6d 	bl	80006c0 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f001 fae1 	bl	80017f0 <__init_ram_areas>
 800022e:	f001 fb1f 	bl	8001870 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f004 fa0d 	bl	8004660 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f001 bb03 	b.w	8001860 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000800 	.word	0x20000800
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000400 	.word	0x20000400
 800026c:	20000400 	.word	0x20000400
 8000270:	0800747c 	.word	0x0800747c
 8000274:	20000800 	.word	0x20000800
 8000278:	2000087c 	.word	0x2000087c
 800027c:	20000880 	.word	0x20000880
 8000280:	2000132c 	.word	0x2000132c
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0
	...

080002a0 <_port_switch>:
 80002a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002a8:	68c3      	ldr	r3, [r0, #12]
 80002aa:	469d      	mov	sp, r3
 80002ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002b0 <_port_thread_start>:
 80002b0:	2300      	movs	r3, #0
 80002b2:	f383 8811 	msr	BASEPRI, r3
 80002b6:	4628      	mov	r0, r5
 80002b8:	47a0      	blx	r4
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 ffc0 	bl	8001240 <chThdExit>

080002c0 <_port_switch_from_isr>:
 80002c0:	f000 fb5e 	bl	8000980 <chSchDoReschedule>

080002c4 <_port_exit_from_isr>:
 80002c4:	df00      	svc	0
 80002c6:	e7fe      	b.n	80002c6 <_port_exit_from_isr+0x2>
	...

080002d0 <notify2.lto_priv.73>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <notify2.lto_priv.73+0xc>)
 80002d2:	68d3      	ldr	r3, [r2, #12]
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	60d3      	str	r3, [r2, #12]
 80002da:	4770      	bx	lr
 80002dc:	40004400 	.word	0x40004400

080002e0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80002e0:	2320      	movs	r3, #32
 80002e2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <_port_irq_epilogue+0x44>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80002ee:	d102      	bne.n	80002f6 <_port_irq_epilogue+0x16>
 80002f0:	f383 8811 	msr	BASEPRI, r3
 80002f4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80002f6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80002fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002fe:	f843 2c04 	str.w	r2, [r3, #-4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000302:	f1a3 0220 	sub.w	r2, r3, #32
 8000306:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <_port_irq_epilogue+0x48>)
 800030c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800030e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000310:	6889      	ldr	r1, [r1, #8]
 8000312:	6892      	ldr	r2, [r2, #8]
 8000314:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000316:	bf8c      	ite	hi
 8000318:	4a04      	ldrhi	r2, [pc, #16]	; (800032c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800031a:	4a05      	ldrls	r2, [pc, #20]	; (8000330 <_port_irq_epilogue+0x50>)
 800031c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	20001240 	.word	0x20001240
 800032c:	080002c1 	.word	0x080002c1
 8000330:	080002c4 	.word	0x080002c4
	...

08000340 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000344:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000348:	6923      	ldr	r3, [r4, #16]
 800034a:	079b      	lsls	r3, r3, #30
 800034c:	d403      	bmi.n	8000356 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800034e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000352:	f7ff bfc5 	b.w	80002e0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000356:	2700      	movs	r7, #0
 8000358:	6127      	str	r7, [r4, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800035a:	2520      	movs	r5, #32
 800035c:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000360:	4e1c      	ldr	r6, [pc, #112]	; (80003d4 <VectorB0+0x94>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000362:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8000366:	69f3      	ldr	r3, [r6, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000368:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800036a:	6898      	ldr	r0, [r3, #8]
 800036c:	ebc2 010e 	rsb	r1, r2, lr
 8000370:	4281      	cmp	r1, r0
 8000372:	f106 081c 	add.w	r8, r6, #28
 8000376:	d319      	bcc.n	80003ac <VectorB0+0x6c>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000378:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 800037a:	4402      	add	r2, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800037c:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 800037e:	62b2      	str	r2, [r6, #40]	; 0x28

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000380:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000382:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
 8000386:	61f1      	str	r1, [r6, #28]
    fn = vtp->func;
    vtp->func = NULL;
 8000388:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800038a:	bf08      	it	eq
 800038c:	60e7      	streq	r7, [r4, #12]
 800038e:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000392:	6918      	ldr	r0, [r3, #16]
 8000394:	4790      	blx	r2
 8000396:	f385 8811 	msr	BASEPRI, r5
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 800039a:	69f3      	ldr	r3, [r6, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800039c:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80003a0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80003a2:	6898      	ldr	r0, [r3, #8]
 80003a4:	ebc2 010e 	rsb	r1, r2, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	d9e5      	bls.n	8000378 <VectorB0+0x38>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80003ac:	4543      	cmp	r3, r8
 80003ae:	d009      	beq.n	80003c4 <VectorB0+0x84>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80003b0:	4402      	add	r2, r0
 80003b2:	ebce 0202 	rsb	r2, lr, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	bf98      	it	ls
 80003ba:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 80003c0:	4472      	add	r2, lr
 80003c2:	635a      	str	r2, [r3, #52]	; 0x34
 80003c4:	2300      	movs	r3, #0
 80003c6:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80003ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80003ce:	f7ff bf87 	b.w	80002e0 <_port_irq_epilogue>
 80003d2:	bf00      	nop
 80003d4:	20001240 	.word	0x20001240
	...

080003e0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80003e0:	f3ef 8309 	mrs	r3, PSP
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80003e4:	3320      	adds	r3, #32
 80003e6:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003ea:	2300      	movs	r3, #0
 80003ec:	f383 8811 	msr	BASEPRI, r3
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
	...

08000400 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 8000400:	b430      	push	{r4, r5}
 8000402:	2320      	movs	r3, #32
 8000404:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <chCoreAllocAligned+0x38>)

  if (((size_t)endmem - (size_t)p) < size) {
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <chCoreAllocAligned+0x3c>)

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 800040c:	682b      	ldr	r3, [r5, #0]
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 800040e:	1e4c      	subs	r4, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000410:	3b01      	subs	r3, #1
 8000412:	440b      	add	r3, r1

  if (((size_t)endmem - (size_t)p) < size) {
 8000414:	6812      	ldr	r2, [r2, #0]
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8000416:	4249      	negs	r1, r1
 8000418:	4404      	add	r4, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 800041a:	ea03 0001 	and.w	r0, r3, r1

  if (((size_t)endmem - (size_t)p) < size) {
 800041e:	1a13      	subs	r3, r2, r0
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8000420:	4021      	ands	r1, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
 8000422:	4299      	cmp	r1, r3
    return NULL;
  }
  nextmem = p + size;
 8000424:	bf9a      	itte	ls
 8000426:	1809      	addls	r1, r1, r0
 8000428:	6029      	strls	r1, [r5, #0]

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
    return NULL;
 800042a:	2000      	movhi	r0, #0
 800042c:	2300      	movs	r3, #0
 800042e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8000432:	bc30      	pop	{r4, r5}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000970 	.word	0x20000970
 800043c:	20001164 	.word	0x20001164

08000440 <wakeup.lto_priv.180>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000440:	b410      	push	{r4}
 8000442:	2320      	movs	r3, #32
 8000444:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000448:	f890 3020 	ldrb.w	r3, [r0, #32]
 800044c:	2b07      	cmp	r3, #7
 800044e:	d80e      	bhi.n	800046e <wakeup.lto_priv.180+0x2e>
 8000450:	e8df f003 	tbb	[pc, r3]
 8000454:	230d0d27 	.word	0x230d0d27
 8000458:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800045c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800045e:	6893      	ldr	r3, [r2, #8]
 8000460:	3301      	adds	r3, #1
 8000462:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000464:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000468:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800046a:	6802      	ldr	r2, [r0, #0]
 800046c:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 800046e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000472:	2200      	movs	r2, #0
 8000474:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <wakeup.lto_priv.180+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000478:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800047a:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 800047e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000480:	689a      	ldr	r2, [r3, #8]
 8000482:	428a      	cmp	r2, r1
 8000484:	d2fb      	bcs.n	800047e <wakeup.lto_priv.180+0x3e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000486:	685a      	ldr	r2, [r3, #4]
 8000488:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800048a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800048c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800048e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000490:	6058      	str	r0, [r3, #4]
 8000492:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000496:	bc10      	pop	{r4}
 8000498:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 800049a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	e7e5      	b.n	800046e <wakeup.lto_priv.180+0x2e>
 80004a2:	2300      	movs	r3, #0
 80004a4:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80004a8:	bc10      	pop	{r4}
 80004aa:	4770      	bx	lr
 80004ac:	20001240 	.word	0x20001240

080004b0 <_idle_thread.lto_priv.79>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80004b0:	e7fe      	b.n	80004b0 <_idle_thread.lto_priv.79>
 80004b2:	bf00      	nop
	...

080004c0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80004c0:	e7fe      	b.n	80004c0 <BusFault_Handler>
 80004c2:	bf00      	nop
	...

080004d0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <test_terminate_threads+0x30>)
 80004d2:	b430      	push	{r4, r5}
 80004d4:	f103 0014 	add.w	r0, r3, #20
 80004d8:	2520      	movs	r5, #32
 80004da:	2400      	movs	r4, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80004dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80004e0:	b14a      	cbz	r2, 80004f6 <test_terminate_threads+0x26>
 80004e2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 80004e6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80004ea:	f041 0104 	orr.w	r1, r1, #4
 80004ee:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80004f2:	f384 8811 	msr	BASEPRI, r4
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 80004f6:	4283      	cmp	r3, r0
 80004f8:	d1f0      	bne.n	80004dc <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 80004fa:	bc30      	pop	{r4, r5}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	200011f4 	.word	0x200011f4
	...

08000510 <test_emit_token>:
 8000510:	2320      	movs	r3, #32
 8000512:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <test_emit_token+0x20>)
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <test_emit_token+0x24>)
 800051a:	6813      	ldr	r3, [r2, #0]
 800051c:	428b      	cmp	r3, r1
 800051e:	d202      	bcs.n	8000526 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000520:	1c59      	adds	r1, r3, #1
 8000522:	6011      	str	r1, [r2, #0]
 8000524:	7018      	strb	r0, [r3, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	f383 8811 	msr	BASEPRI, r3
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20001208 	.word	0x20001208
 8000534:	20000894 	.word	0x20000894
	...

08000540 <test_println>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8000540:	b570      	push	{r4, r5, r6, lr}
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000542:	7801      	ldrb	r1, [r0, #0]
 8000544:	b189      	cbz	r1, 800056a <test_println+0x2a>
 8000546:	4604      	mov	r4, r0
 8000548:	4d09      	ldr	r5, [pc, #36]	; (8000570 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
 800054a:	6828      	ldr	r0, [r5, #0]
 800054c:	6803      	ldr	r3, [r0, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000552:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000556:	2900      	cmp	r1, #0
 8000558:	d1f7      	bne.n	800054a <test_println+0xa>
 * @api
 */
void test_println(const char *msgp) {

  test_print(msgp);
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800055a:	6828      	ldr	r0, [r5, #0]
 800055c:	2202      	movs	r2, #2
 800055e:	6803      	ldr	r3, [r0, #0]
 8000560:	4904      	ldr	r1, [pc, #16]	; (8000574 <test_println+0x34>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @api
 */
void test_println(const char *msgp) {

  test_print(msgp);
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000568:	4718      	bx	r3
 800056a:	4d01      	ldr	r5, [pc, #4]	; (8000570 <test_println+0x30>)
 800056c:	e7f5      	b.n	800055a <test_println+0x1a>
 800056e:	bf00      	nop
 8000570:	20000998 	.word	0x20000998
 8000574:	08006108 	.word	0x08006108
	...

08000580 <test_print>:
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000580:	7801      	ldrb	r1, [r0, #0]
 8000582:	b159      	cbz	r1, 800059c <test_print+0x1c>
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_print(const char *msgp) {
 8000584:	b538      	push	{r3, r4, r5, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	4d05      	ldr	r5, [pc, #20]	; (80005a0 <test_print+0x20>)

  while (*msgp)
    streamPut(test_chp, *msgp++);
 800058a:	6828      	ldr	r0, [r5, #0]
 800058c:	6803      	ldr	r3, [r0, #0]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000592:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000596:	2900      	cmp	r1, #0
 8000598:	d1f7      	bne.n	800058a <test_print+0xa>
 800059a:	bd38      	pop	{r3, r4, r5, pc}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000998 	.word	0x20000998
	...

080005b0 <test_printn>:
 * @api
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 80005b0:	b310      	cbz	r0, 80005f8 <test_printn+0x48>
 *
 * @param[in] n         the number to be printed
 *
 * @api
 */
void test_printn(uint32_t n) {
 80005b2:	b570      	push	{r4, r5, r6, lr}
 80005b4:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 80005b6:	466d      	mov	r5, sp
 80005b8:	466c      	mov	r4, sp
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <test_printn+0x54>)
 80005bc:	fba2 1300 	umull	r1, r3, r2, r0
 80005c0:	08db      	lsrs	r3, r3, #3
 80005c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80005c6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80005ca:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80005ce:	b2c9      	uxtb	r1, r1
 80005d0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 80005d4:	4618      	mov	r0, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f0      	bne.n	80005bc <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80005da:	42ac      	cmp	r4, r5
 80005dc:	d90a      	bls.n	80005f4 <test_printn+0x44>
 80005de:	4e0a      	ldr	r6, [pc, #40]	; (8000608 <test_printn+0x58>)
 80005e0:	3c01      	subs	r4, #1
 80005e2:	e001      	b.n	80005e8 <test_printn+0x38>
 80005e4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 80005e8:	6830      	ldr	r0, [r6, #0]
 80005ea:	6803      	ldr	r3, [r0, #0]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	4798      	blx	r3
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80005f0:	42ac      	cmp	r4, r5
 80005f2:	d1f7      	bne.n	80005e4 <test_printn+0x34>
      streamPut(test_chp, *--p);
  }
}
 80005f4:	b004      	add	sp, #16
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    streamPut(test_chp, '0');
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <test_printn+0x58>)
 80005fa:	2130      	movs	r1, #48	; 0x30
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	6803      	ldr	r3, [r0, #0]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4718      	bx	r3
 8000604:	cccccccd 	.word	0xcccccccd
 8000608:	20000998 	.word	0x20000998
 800060c:	00000000 	.word	0x00000000

08000610 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(msg);
  return false;
}

bool _test_assert_sequence(char *expected, const char *msg) {
 8000610:	b4f0      	push	{r4, r5, r6, r7}
 8000612:	4e0d      	ldr	r6, [pc, #52]	; (8000648 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000614:	4f0d      	ldr	r7, [pc, #52]	; (800064c <_test_assert_sequence+0x3c>)
 8000616:	6835      	ldr	r5, [r6, #0]
 8000618:	463b      	mov	r3, r7
 800061a:	e005      	b.n	8000628 <_test_assert_sequence+0x18>

  while (cp < test_tokp) {
    if (*cp++ != *expected++)
 800061c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000624:	4294      	cmp	r4, r2
 8000626:	d106      	bne.n	8000636 <_test_assert_sequence+0x26>
}

bool _test_assert_sequence(char *expected, const char *msg) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp) {
 8000628:	42ab      	cmp	r3, r5
 800062a:	d3f7      	bcc.n	800061c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(msg);
  }

  if (*expected)
 800062c:	7800      	ldrb	r0, [r0, #0]
 800062e:	b910      	cbnz	r0, 8000636 <_test_assert_sequence+0x26>
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 8000630:	6037      	str	r7, [r6, #0]
    return _test_fail(msg);

  clear_tokens();

  return false;
}
 8000632:	bcf0      	pop	{r4, r5, r6, r7}
 8000634:	4770      	bx	lr
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000636:	4c06      	ldr	r4, [pc, #24]	; (8000650 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <_test_assert_sequence+0x48>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 800063c:	2001      	movs	r0, #1
 800063e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000640:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000642:	6019      	str	r1, [r3, #0]
    return _test_fail(msg);

  clear_tokens();

  return false;
}
 8000644:	bcf0      	pop	{r4, r5, r6, r7}
 8000646:	4770      	bx	lr
 8000648:	20001208 	.word	0x20001208
 800064c:	20000884 	.word	0x20000884
 8000650:	200012ec 	.word	0x200012ec
 8000654:	200012ed 	.word	0x200012ed
 8000658:	200012e8 	.word	0x200012e8
 800065c:	00000000 	.word	0x00000000

08000660 <_test_assert>:
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 8000660:	b948      	cbnz	r0, 8000676 <_test_assert+0x16>
  test_global_fail     = true;
  test_failure_message = msg;
  return true;
}

bool _test_assert(bool condition, const char *msg) {
 8000662:	b410      	push	{r4}
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
  test_global_fail     = true;
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <_test_assert+0x1c>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000666:	4c06      	ldr	r4, [pc, #24]	; (8000680 <_test_assert+0x20>)
  test_global_fail     = true;
  test_failure_message = msg;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <_test_assert+0x24>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 800066a:	2001      	movs	r0, #1
 800066c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800066e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000670:	6019      	str	r1, [r3, #0]
bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
}
 8000672:	bc10      	pop	{r4}
 8000674:	4770      	bx	lr

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
 8000676:	2000      	movs	r0, #0
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200012ed 	.word	0x200012ed
 8000680:	200012ec 	.word	0x200012ec
 8000684:	200012e8 	.word	0x200012e8
	...

08000690 <print_line.lto_priv.164>:
  tcp->execute();
  if (tcp->teardown != NULL)
    tcp->teardown();
}

static void print_line(void) {
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	4e09      	ldr	r6, [pc, #36]	; (80006b8 <print_line.lto_priv.164+0x28>)
 8000694:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    streamPut(test_chp, '-');
 8000696:	6830      	ldr	r0, [r6, #0]
 8000698:	212d      	movs	r1, #45	; 0x2d
 800069a:	6803      	ldr	r3, [r0, #0]
 800069c:	4d06      	ldr	r5, [pc, #24]	; (80006b8 <print_line.lto_priv.164+0x28>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 80006a2:	3c01      	subs	r4, #1
 80006a4:	d1f7      	bne.n	8000696 <print_line.lto_priv.164+0x6>
    streamPut(test_chp, '-');
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80006a6:	6828      	ldr	r0, [r5, #0]
 80006a8:	2202      	movs	r2, #2
 80006aa:	6803      	ldr	r3, [r0, #0]
 80006ac:	4903      	ldr	r1, [pc, #12]	; (80006bc <print_line.lto_priv.164+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    streamPut(test_chp, '-');
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80006b4:	4718      	bx	r3
 80006b6:	bf00      	nop
 80006b8:	20000998 	.word	0x20000998
 80006bc:	08006108 	.word	0x08006108

080006c0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <__early_init+0xd4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <__early_init+0xd8>)
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80006c4:	4619      	mov	r1, r3
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
 80006c6:	b410      	push	{r4}

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 80006c8:	2000      	movs	r0, #0
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80006ca:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 80006ce:	641c      	str	r4, [r3, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 80006d0:	6010      	str	r0, [r2, #0]
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f042 0201 	orr.w	r2, r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80006da:	680b      	ldr	r3, [r1, #0]
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <__early_init+0xd4>)
 80006de:	079b      	lsls	r3, r3, #30
 80006e0:	d5fb      	bpl.n	80006da <__early_init+0x1a>
  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80006e2:	4611      	mov	r1, r2
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80006e4:	6893      	ldr	r3, [r2, #8]
 80006e6:	f023 0303 	bic.w	r3, r3, #3
 80006ea:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80006ec:	6893      	ldr	r3, [r2, #8]
 80006ee:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80006f0:	688b      	ldr	r3, [r1, #8]
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <__early_init+0xd4>)
 80006f4:	f013 030c 	ands.w	r3, r3, #12
 80006f8:	d1fa      	bne.n	80006f0 <__early_init+0x30>
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80006fa:	4611      	mov	r1, r2
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80006fc:	6810      	ldr	r0, [r2, #0]
 80006fe:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8000702:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000704:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8000706:	6813      	ldr	r3, [r2, #0]
 8000708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070c:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800070e:	680b      	ldr	r3, [r1, #0]
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <__early_init+0xd4>)
 8000712:	039c      	lsls	r4, r3, #14
 8000714:	d5fb      	bpl.n	800070e <__early_init+0x4e>
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000716:	4611      	mov	r1, r2
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000718:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000720:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <__early_init+0xd4>)
 8000724:	0798      	lsls	r0, r3, #30
 8000726:	d5fb      	bpl.n	8000720 <__early_init+0x60>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000728:	4611      	mov	r1, r2
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <__early_init+0xdc>)
 800072c:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800072e:	6813      	ldr	r3, [r2, #0]
 8000730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000734:	6013      	str	r3, [r2, #0]
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000736:	680b      	ldr	r3, [r1, #0]
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <__early_init+0xd4>)
 800073a:	019b      	lsls	r3, r3, #6
 800073c:	d5fb      	bpl.n	8000736 <__early_init+0x76>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800073e:	4918      	ldr	r1, [pc, #96]	; (80007a0 <__early_init+0xe0>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <__early_init+0xe4>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000742:	6091      	str	r1, [r2, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <__early_init+0xe8>)
 8000748:	429a      	cmp	r2, r3
 800074a:	d019      	beq.n	8000780 <__early_init+0xc0>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800074c:	f240 7203 	movw	r2, #1795	; 0x703
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <__early_init+0xec>)
 8000752:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <__early_init+0xd4>)
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000756:	4619      	mov	r1, r3
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	f042 0202 	orr.w	r2, r2, #2
 800075e:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000760:	688b      	ldr	r3, [r1, #8]
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <__early_init+0xd4>)
 8000764:	f003 030c 	and.w	r3, r3, #12
 8000768:	2b08      	cmp	r3, #8
 800076a:	d1f9      	bne.n	8000760 <__early_init+0xa0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800076c:	6c53      	ldr	r3, [r2, #68]	; 0x44

  stm32_clock_init();
}
 800076e:	bc10      	pop	{r4}
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6653      	str	r3, [r2, #100]	; 0x64
 800077e:	4770      	bx	lr

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <__early_init+0xf0>)
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__early_init+0xf4>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d1e0      	bne.n	800074c <__early_init+0x8c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800078a:	f240 1203 	movw	r2, #259	; 0x103
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <__early_init+0xec>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e7df      	b.n	8000754 <__early_init+0x94>
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000
 800079c:	05403c08 	.word	0x05403c08
 80007a0:	38889400 	.word	0x38889400
 80007a4:	e0042000 	.word	0xe0042000
 80007a8:	20006411 	.word	0x20006411
 80007ac:	40023c00 	.word	0x40023c00
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	410fc241 	.word	0x410fc241
	...

080007c0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80007c0:	b508      	push	{r3, lr}
 80007c2:	2220      	movs	r2, #32
 80007c4:	4603      	mov	r3, r0
 80007c6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 80007ca:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80007cc:	b128      	cbz	r0, 80007da <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 80007ce:	6802      	ldr	r2, [r0, #0]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80007d8:	bd08      	pop	{r3, pc}
  objp = mp->next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->next = mp->next->next;
  }
  else if (mp->provider != NULL) {
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d0f8      	beq.n	80007d2 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 80007e0:	6858      	ldr	r0, [r3, #4]
 80007e2:	2104      	movs	r1, #4
 80007e4:	4790      	blx	r2
 80007e6:	2300      	movs	r3, #0
 80007e8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80007ec:	bd08      	pop	{r3, pc}
 80007ee:	bf00      	nop

080007f0 <chEvtAddEvents>:
 80007f0:	2320      	movs	r3, #32
 80007f2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->epending |= events;
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <chEvtAddEvents+0x18>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	699a      	ldr	r2, [r3, #24]
 80007fc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80007fe:	4318      	orrs	r0, r3
 8000800:	6350      	str	r0, [r2, #52]	; 0x34
 8000802:	f381 8811 	msr	BASEPRI, r1
  events = currp->epending;
  chSysUnlock();

  return events;
}
 8000806:	4770      	bx	lr
 8000808:	20001240 	.word	0x20001240
 800080c:	00000000 	.word	0x00000000

08000810 <chEvtUnregister>:
 8000810:	2320      	movs	r3, #32
 8000812:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8000816:	4602      	mov	r2, r0
 8000818:	e002      	b.n	8000820 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 800081a:	428b      	cmp	r3, r1
 800081c:	d007      	beq.n	800082e <chEvtUnregister+0x1e>
 800081e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	4298      	cmp	r0, r3
 8000824:	d1f9      	bne.n	800081a <chEvtUnregister+0xa>
 8000826:	2300      	movs	r3, #0
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	4770      	bx	lr
  /*lint -restore*/
    if (p->next == elp) {
      p->next = elp->next;
 800082e:	680b      	ldr	r3, [r1, #0]
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	0000      	movs	r0, r0
	...

08000840 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000842:	490f      	ldr	r1, [pc, #60]	; (8000880 <chTMStopMeasurementX+0x40>)
 8000844:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000846:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000848:	6f49      	ldr	r1, [r1, #116]	; 0x74
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800084a:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800084c:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800084e:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000850:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000854:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000856:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000858:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800085a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800085c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800085e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000860:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000864:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000866:	bf88      	it	hi
 8000868:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800086a:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800086c:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000870:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000872:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000874:	bf38      	it	cc
 8000876:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e0001000 	.word	0xe0001000
 8000880:	20001240 	.word	0x20001240
	...

08000890 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	2320      	movs	r3, #32
 8000894:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <chThdYield+0x54>)
 800089a:	6810      	ldr	r0, [r2, #0]
 800089c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800089e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 80008a0:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d203      	bcs.n	80008ae <chThdYield+0x1e>
 80008a6:	2300      	movs	r3, #0
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80008ae:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80008b0:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80008b2:	2500      	movs	r5, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80008b4:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80008b6:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80008b8:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80008bc:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80008be:	f884 5020 	strb.w	r5, [r4, #32]
 80008c2:	e000      	b.n	80008c6 <chThdYield+0x36>
 80008c4:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	4291      	cmp	r1, r2
 80008ca:	d9fb      	bls.n	80008c4 <chThdYield+0x34>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80008cc:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80008ce:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80008d0:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80008d2:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80008d4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80008d6:	605c      	str	r4, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80008d8:	f7ff fce2 	bl	80002a0 <_port_switch>
 80008dc:	2300      	movs	r3, #0
 80008de:	f383 8811 	msr	BASEPRI, r3
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	20001240 	.word	0x20001240
	...

080008f0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80008f0:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80008f2:	6841      	ldr	r1, [r0, #4]
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80008f6:	6906      	ldr	r6, [r0, #16]
 80008f8:	6947      	ldr	r7, [r0, #20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80008fa:	f843 1c2c 	str.w	r1, [r3, #-44]

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80008fe:	6801      	ldr	r1, [r0, #0]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000900:	2400      	movs	r4, #0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <chThdCreateSuspendedI+0x80>)
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000904:	f04f 0c02 	mov.w	ip, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8000908:	f04f 0e01 	mov.w	lr, #1

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 800090c:	f843 1c30 	str.w	r1, [r3, #-48]
 8000910:	68c1      	ldr	r1, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000912:	f803 cc28 	strb.w	ip, [r3, #-40]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8000916:	f803 ec26 	strb.w	lr, [r3, #-38]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 800091a:	f803 4c27 	strb.w	r4, [r3, #-39]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800091e:	f843 6c6c 	str.w	r6, [r3, #-108]
 8000922:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000926:	6956      	ldr	r6, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <chThdCreateSuspendedI+0x84>)
 800092a:	f843 7c68 	str.w	r7, [r3, #-104]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800092e:	f843 1c40 	str.w	r1, [r3, #-64]
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000932:	f843 1c0c 	str.w	r1, [r3, #-12]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000936:	f843 5c3c 	str.w	r5, [r3, #-60]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800093a:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 800093e:	f1a3 051c 	sub.w	r5, r3, #28
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8000942:	f1a3 0720 	sub.w	r7, r3, #32
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000946:	f843 0c4c 	str.w	r0, [r3, #-76]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 800094a:	f843 4c10 	str.w	r4, [r3, #-16]
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800094e:	f843 4c14 	str.w	r4, [r3, #-20]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000952:	f843 2c38 	str.w	r2, [r3, #-56]
 8000956:	f843 6c34 	str.w	r6, [r3, #-52]
  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
}
 800095a:	4608      	mov	r0, r1
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800095c:	6131      	str	r1, [r6, #16]
 800095e:	6151      	str	r1, [r2, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000960:	f843 7c20 	str.w	r7, [r3, #-32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000964:	f843 5c1c 	str.w	r5, [r3, #-28]
  tqp->prev = (thread_t *)tqp;
 8000968:	f843 5c18 	str.w	r5, [r3, #-24]
  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
}
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	bf00      	nop
 8000970:	20001240 	.word	0x20001240
 8000974:	080002b1 	.word	0x080002b1
	...

08000980 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <chSchDoReschedule+0x3c>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000982:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000984:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 8000986:	6994      	ldr	r4, [r2, #24]

  tqp->next             = tp->queue.next;
 8000988:	6803      	ldr	r3, [r0, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800098a:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800098c:	605a      	str	r2, [r3, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800098e:	2500      	movs	r5, #0
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000990:	f880 1020 	strb.w	r1, [r0, #32]
 8000994:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000996:	6013      	str	r3, [r2, #0]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000998:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800099a:	f884 5020 	strb.w	r5, [r4, #32]
 800099e:	e000      	b.n	80009a2 <chSchDoReschedule+0x22>
 80009a0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	428a      	cmp	r2, r1
 80009a6:	d8fb      	bhi.n	80009a0 <chSchDoReschedule+0x20>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80009a8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80009aa:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80009ac:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80009ae:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80009b0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80009b2:	605c      	str	r4, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80009b4:	bc30      	pop	{r4, r5}

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80009b6:	f7ff bc73 	b.w	80002a0 <_port_switch>
 80009ba:	bf00      	nop
 80009bc:	20001240 	.word	0x20001240

080009c0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <chSchRescheduleS+0x14>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80009c6:	6892      	ldr	r2, [r2, #8]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d800      	bhi.n	80009d0 <chSchRescheduleS+0x10>
 80009ce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80009d0:	f7ff bfd6 	b.w	8000980 <chSchDoReschedule>
 80009d4:	20001240 	.word	0x20001240
	...

080009e0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80009e0:	b510      	push	{r4, lr}
 80009e2:	2320      	movs	r3, #32
 80009e4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->realprio;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <chThdSetPriority+0x2c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80009ee:	6899      	ldr	r1, [r3, #8]
 80009f0:	428c      	cmp	r4, r1
 80009f2:	d001      	beq.n	80009f8 <chThdSetPriority+0x18>
 80009f4:	4281      	cmp	r1, r0
 80009f6:	d200      	bcs.n	80009fa <chThdSetPriority+0x1a>
    currp->prio = newprio;
 80009f8:	6098      	str	r0, [r3, #8]
  }
  currp->realprio = newprio;
 80009fa:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->prio;
  currp->prio = newprio;
#endif
  chSchRescheduleS();
 80009fc:	f7ff ffe0 	bl	80009c0 <chSchRescheduleS>
 8000a00:	2300      	movs	r3, #0
 8000a02:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000a06:	4620      	mov	r0, r4
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20001240 	.word	0x20001240

08000a10 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <chSchWakeupS+0x5c>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a12:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8000a14:	699d      	ldr	r5, [r3, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8000a16:	6241      	str	r1, [r0, #36]	; 0x24
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a18:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8000a1a:	6881      	ldr	r1, [r0, #8]
 8000a1c:	68a8      	ldr	r0, [r5, #8]
 8000a1e:	4281      	cmp	r1, r0
 8000a20:	d80d      	bhi.n	8000a3e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000a22:	2200      	movs	r2, #0
 8000a24:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000a28:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	4291      	cmp	r1, r2
 8000a2e:	d9fb      	bls.n	8000a28 <chSchWakeupS+0x18>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000a30:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000a32:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8000a34:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8000a36:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a38:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8000a3a:	bc70      	pop	{r4, r5, r6}
 8000a3c:	4770      	bx	lr
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 8000a3e:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000a40:	2100      	movs	r1, #0
 8000a42:	f885 1020 	strb.w	r1, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000a46:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000a48:	6891      	ldr	r1, [r2, #8]
 8000a4a:	4288      	cmp	r0, r1
 8000a4c:	d9fb      	bls.n	8000a46 <chSchWakeupS+0x36>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000a4e:	6850      	ldr	r0, [r2, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8000a50:	2601      	movs	r6, #1
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000a52:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000a54:	602a      	str	r2, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8000a56:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8000a58:	6055      	str	r5, [r2, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8000a5a:	f884 6020 	strb.w	r6, [r4, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4620      	mov	r0, r4
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8000a62:	619c      	str	r4, [r3, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8000a64:	bc70      	pop	{r4, r5, r6}
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8000a66:	f7ff bc1b 	b.w	80002a0 <_port_switch>
 8000a6a:	bf00      	nop
 8000a6c:	20001240 	.word	0x20001240

08000a70 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000a70:	b508      	push	{r3, lr}
 8000a72:	2320      	movs	r3, #32
 8000a74:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->cnt <= (cnt_t)0) {
 8000a78:	6883      	ldr	r3, [r0, #8]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	6083      	str	r3, [r0, #8]
 8000a80:	dd03      	ble.n	8000a8a <chSemSignal+0x1a>
 8000a82:	2300      	movs	r3, #0
 8000a84:	f383 8811 	msr	BASEPRI, r3
 8000a88:	bd08      	pop	{r3, pc}
 8000a8a:	4603      	mov	r3, r0
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000a8c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8000a8e:	2100      	movs	r1, #0

  tqp->next             = tp->queue.next;
 8000a90:	6802      	ldr	r2, [r0, #0]
 8000a92:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000a94:	6053      	str	r3, [r2, #4]
 8000a96:	f7ff ffbb 	bl	8000a10 <chSchWakeupS>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	bd08      	pop	{r3, pc}
 8000aa2:	bf00      	nop
	...

08000ab0 <chSchGoSleepS>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000ab2:	b430      	push	{r4, r5}
  thread_t *otp = currp;
 8000ab4:	6999      	ldr	r1, [r3, #24]
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000ab6:	681a      	ldr	r2, [r3, #0]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8000ab8:	f881 0020 	strb.w	r0, [r1, #32]

  tqp->next             = tp->queue.next;
 8000abc:	6814      	ldr	r4, [r2, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000abe:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ac0:	6063      	str	r3, [r4, #4]
 8000ac2:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000ac6:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000ac8:	4610      	mov	r0, r2
}
 8000aca:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000acc:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000ace:	f7ff bbe7 	b.w	80002a0 <_port_switch>
 8000ad2:	bf00      	nop
 8000ad4:	20001240 	.word	0x20001240
	...

08000ae0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8000ae8:	4c0c      	ldr	r4, [pc, #48]	; (8000b1c <chMsgWait+0x3c>)
 8000aea:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8000aec:	4613      	mov	r3, r2
 8000aee:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d009      	beq.n	8000b0a <chMsgWait+0x2a>
 8000af6:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8000af8:	240d      	movs	r4, #13
 8000afa:	62d1      	str	r1, [r2, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 8000afc:	604b      	str	r3, [r1, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f880 4020 	strb.w	r4, [r0, #32]
 8000b04:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 8000b08:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8000b0a:	200e      	movs	r0, #14
 8000b0c:	f7ff ffd0 	bl	8000ab0 <chSchGoSleepS>
 8000b10:	69a2      	ldr	r2, [r4, #24]
 8000b12:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000b14:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8000b18:	e7ed      	b.n	8000af6 <chMsgWait+0x16>
 8000b1a:	bf00      	nop
 8000b1c:	20001240 	.word	0x20001240

08000b20 <chSemWait>:
 8000b20:	2320      	movs	r3, #32
 8000b22:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8000b26:	6883      	ldr	r3, [r0, #8]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	6083      	str	r3, [r0, #8]
 8000b2e:	db04      	blt.n	8000b3a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
  }

  return MSG_OK;
 8000b30:	2000      	movs	r0, #0
 8000b32:	2300      	movs	r3, #0
 8000b34:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000b38:	4770      	bx	lr
 8000b3a:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8000b3c:	b510      	push	{r4, lr}
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    currp->u.wtsemp = sp;
 8000b3e:	4c08      	ldr	r4, [pc, #32]	; (8000b60 <chSemWait+0x40>)
    sem_insert(currp, &sp->queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000b40:	2005      	movs	r0, #5
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    currp->u.wtsemp = sp;
 8000b42:	69a2      	ldr	r2, [r4, #24]
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000b46:	6859      	ldr	r1, [r3, #4]
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 8000b48:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = tqp->prev;
 8000b4a:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 8000b4c:	600a      	str	r2, [r1, #0]
  tqp->prev                  = tp;
 8000b4e:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000b50:	f7ff ffae 	bl	8000ab0 <chSchGoSleepS>

    return currp->u.rdymsg;
 8000b54:	69a3      	ldr	r3, [r4, #24]
 8000b56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	20001240 	.word	0x20001240
	...

08000b70 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000b70:	b410      	push	{r4}
 8000b72:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000b74:	2200      	movs	r2, #0
 8000b76:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000b7a:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000b7e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	428a      	cmp	r2, r1
 8000b84:	d2fb      	bcs.n	8000b7e <chSchReadyI+0xe>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000b86:	685a      	ldr	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 8000b88:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000b8a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8000b8c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8000b8e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000b90:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000b92:	bc10      	pop	{r4}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20001240 	.word	0x20001240
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8000ba2:	b510      	push	{r4, lr}
 8000ba4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8000ba6:	699c      	ldr	r4, [r3, #24]
 8000ba8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->u.sentmsg = msg;
 8000bac:	6261      	str	r1, [r4, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000bae:	6b02      	ldr	r2, [r0, #48]	; 0x30
  msg_insert(ctp, &tp->msgqueue);
 8000bb0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8000bb4:	e884 0006 	stmia.w	r4, {r1, r2}
  tp->queue.prev->queue.next = tp;
 8000bb8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8000bba:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8000bbe:	6304      	str	r4, [r0, #48]	; 0x30
 8000bc0:	2a0e      	cmp	r2, #14
 8000bc2:	d007      	beq.n	8000bd4 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8000bc4:	200c      	movs	r0, #12
 8000bc6:	f7ff ff73 	bl	8000ab0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8000bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8000bd2:	bd10      	pop	{r4, pc}

  chSysLock();
  ctp->u.sentmsg = msg;
  msg_insert(ctp, &tp->msgqueue);
  if (tp->state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8000bd4:	f7ff ffcc 	bl	8000b70 <chSchReadyI>
 8000bd8:	e7f4      	b.n	8000bc4 <chMsgSend+0x24>
 8000bda:	bf00      	nop
 8000bdc:	20001240 	.word	0x20001240

08000be0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000be0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000be2:	f890 2020 	ldrb.w	r2, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000be6:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000be8:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000bea:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bec:	d009      	beq.n	8000c02 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000bee:	2a0b      	cmp	r2, #11
 8000bf0:	d000      	beq.n	8000bf4 <chEvtSignalI+0x14>
 8000bf2:	4770      	bx	lr
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000bf4:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000bf6:	438b      	bics	r3, r1
 8000bf8:	d1fb      	bne.n	8000bf2 <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000bfe:	f7ff bfb7 	b.w	8000b70 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000c02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c04:	4219      	tst	r1, r3
 8000c06:	d1f8      	bne.n	8000bfa <chEvtSignalI+0x1a>
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000c10:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000c12:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000c14:	42a0      	cmp	r0, r4
 8000c16:	d00f      	beq.n	8000c38 <chEvtBroadcastFlagsI+0x28>
 8000c18:	4606      	mov	r6, r0
 8000c1a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->flags |= flags;
 8000c1c:	68e3      	ldr	r3, [r4, #12]
 8000c1e:	432b      	orrs	r3, r5
 8000c20:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000c22:	b115      	cbz	r5, 8000c2a <chEvtBroadcastFlagsI+0x1a>
 8000c24:	6922      	ldr	r2, [r4, #16]
 8000c26:	4213      	tst	r3, r2
 8000c28:	d003      	beq.n	8000c32 <chEvtBroadcastFlagsI+0x22>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8000c2a:	68a1      	ldr	r1, [r4, #8]
 8000c2c:	6860      	ldr	r0, [r4, #4]
 8000c2e:	f7ff ffd7 	bl	8000be0 <chEvtSignalI>
    }
    elp = elp->next;
 8000c32:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000c34:	42a6      	cmp	r6, r4
 8000c36:	d1f1      	bne.n	8000c1c <chEvtBroadcastFlagsI+0xc>
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000c44:	4d6f      	ldr	r5, [pc, #444]	; (8000e04 <VectorD8+0x1c4>)
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c46:	b083      	sub	sp, #12
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000c48:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000c4a:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8000c4e:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000c50:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8000c52:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000c54:	f100 8086 	bmi.w	8000d64 <VectorD8+0x124>
 8000c58:	2320      	movs	r3, #32
 8000c5a:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c5e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c62:	d04b      	beq.n	8000cfc <VectorD8+0xbc>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000c64:	4f67      	ldr	r7, [pc, #412]	; (8000e04 <VectorD8+0x1c4>)
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000c66:	f107 080c 	add.w	r8, r7, #12
 8000c6a:	e007      	b.n	8000c7c <VectorD8+0x3c>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8000c6c:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000c6e:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000c70:	d41d      	bmi.n	8000cae <VectorD8+0x6e>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000c72:	6834      	ldr	r4, [r6, #0]
 8000c74:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c76:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c7a:	d03f      	beq.n	8000cfc <VectorD8+0xbc>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000c7c:	0723      	lsls	r3, r4, #28
 8000c7e:	d0f5      	beq.n	8000c6c <VectorD8+0x2c>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8000c80:	f014 0f08 	tst.w	r4, #8
 8000c84:	bf0c      	ite	eq
 8000c86:	2100      	moveq	r1, #0
 8000c88:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000c8a:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8000c8c:	bf48      	it	mi
 8000c8e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000c92:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000c94:	bf48      	it	mi
 8000c96:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000c9a:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000c9c:	bf48      	it	mi
 8000c9e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000ca2:	4859      	ldr	r0, [pc, #356]	; (8000e08 <VectorD8+0x1c8>)
 8000ca4:	f7ff ffb4 	bl	8000c10 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8000ca8:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000caa:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000cac:	d5e1      	bpl.n	8000c72 <VectorD8+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000cae:	696a      	ldr	r2, [r5, #20]
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000cb0:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d043      	beq.n	8000d40 <VectorD8+0x100>
 8000cb8:	6a2a      	ldr	r2, [r5, #32]
 8000cba:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	d049      	beq.n	8000d54 <VectorD8+0x114>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000cc0:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000cc2:	4023      	ands	r3, r4
 8000cc4:	1c50      	adds	r0, r2, #1

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000cc6:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000cc8:	6228      	str	r0, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000cca:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000ccc:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000cce:	6a2a      	ldr	r2, [r5, #32]
 8000cd0:	69eb      	ldr	r3, [r5, #28]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d301      	bcc.n	8000cda <VectorD8+0x9a>
    iqp->q_wrptr = iqp->q_buffer;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	623b      	str	r3, [r7, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000cda:	68eb      	ldr	r3, [r5, #12]
 8000cdc:	4543      	cmp	r3, r8
 8000cde:	d0c8      	beq.n	8000c72 <VectorD8+0x32>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000ce0:	681a      	ldr	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	60fa      	str	r2, [r7, #12]
  (void) chSchReadyI(tp);
 8000ce6:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ce8:	f8c2 8004 	str.w	r8, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000cec:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000cee:	f7ff ff3f 	bl	8000b70 <chSchReadyI>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000cf2:	6834      	ldr	r4, [r6, #0]
 8000cf4:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000cf6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000cfa:	d1bf      	bne.n	8000c7c <VectorD8+0x3c>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000d02:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000d06:	d001      	beq.n	8000d0c <VectorD8+0xcc>
 8000d08:	0622      	lsls	r2, r4, #24
 8000d0a:	d43a      	bmi.n	8000d82 <VectorD8+0x142>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8000d0c:	0663      	lsls	r3, r4, #25
 8000d0e:	d512      	bpl.n	8000d36 <VectorD8+0xf6>
 8000d10:	2320      	movs	r3, #32
 8000d12:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8000d16:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000d18:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d1a:	483a      	ldr	r0, [pc, #232]	; (8000e04 <VectorD8+0x1c4>)
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d059      	beq.n	8000dd4 <VectorD8+0x194>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000d20:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8000d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000d28:	ea09 0303 	and.w	r3, r9, r3
 8000d2c:	60f3      	str	r3, [r6, #12]
 8000d2e:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000d30:	6032      	str	r2, [r6, #0]
 8000d32:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8000d36:	b003      	add	sp, #12
 8000d38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8000d3c:	f7ff bad0 	b.w	80002e0 <_port_irq_epilogue>
 8000d40:	2104      	movs	r1, #4
 8000d42:	4831      	ldr	r0, [pc, #196]	; (8000e08 <VectorD8+0x1c8>)
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	f7ff ff63 	bl	8000c10 <chEvtBroadcastFlagsI>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000d4a:	6a2a      	ldr	r2, [r5, #32]
 8000d4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d4e:	9b01      	ldr	r3, [sp, #4]
 8000d50:	428a      	cmp	r2, r1
 8000d52:	d1b5      	bne.n	8000cc0 <VectorD8+0x80>
 8000d54:	6979      	ldr	r1, [r7, #20]
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d0b2      	beq.n	8000cc0 <VectorD8+0x80>
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	482a      	ldr	r0, [pc, #168]	; (8000e08 <VectorD8+0x1c8>)
 8000d5e:	f7ff ff57 	bl	8000c10 <chEvtBroadcastFlagsI>
 8000d62:	e786      	b.n	8000c72 <VectorD8+0x32>
 8000d64:	2320      	movs	r3, #32
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	1d28      	adds	r0, r5, #4
 8000d70:	f7ff ff4e 	bl	8000c10 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8000d74:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000d78:	6033      	str	r3, [r6, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	e76a      	b.n	8000c58 <VectorD8+0x18>
 8000d82:	2320      	movs	r3, #32
 8000d84:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000d88:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d8a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000d8c:	481d      	ldr	r0, [pc, #116]	; (8000e04 <VectorD8+0x1c4>)
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d028      	beq.n	8000de4 <VectorD8+0x1a4>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000d92:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000d94:	6c28      	ldr	r0, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000d96:	1c59      	adds	r1, r3, #1

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000d98:	3201      	adds	r2, #1
 8000d9a:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000d9c:	64a9      	str	r1, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000d9e:	4281      	cmp	r1, r0
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000da0:	781f      	ldrb	r7, [r3, #0]

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <VectorD8+0x1c4>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000da4:	d301      	bcc.n	8000daa <VectorD8+0x16a>
    oqp->q_rdptr = oqp->q_buffer;
 8000da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da8:	649a      	str	r2, [r3, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000daa:	4916      	ldr	r1, [pc, #88]	; (8000e04 <VectorD8+0x1c4>)
 8000dac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000dae:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d009      	beq.n	8000dca <VectorD8+0x18a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000db6:	6818      	ldr	r0, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000db8:	f04f 0e00 	mov.w	lr, #0
 8000dbc:	6308      	str	r0, [r1, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dbe:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8000dc0:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000dc2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000dc6:	f7ff fed3 	bl	8000b70 <chSchReadyI>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8000dca:	6077      	str	r7, [r6, #4]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	e79b      	b.n	8000d0c <VectorD8+0xcc>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8000dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0a2      	beq.n	8000d20 <VectorD8+0xe0>
 8000dda:	3004      	adds	r0, #4
 8000ddc:	2110      	movs	r1, #16
 8000dde:	f7ff ff17 	bl	8000c10 <chEvtBroadcastFlagsI>
 8000de2:	e79d      	b.n	8000d20 <VectorD8+0xe0>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000de4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d0d3      	beq.n	8000d92 <VectorD8+0x152>
 8000dea:	3004      	adds	r0, #4
 8000dec:	2108      	movs	r1, #8
 8000dee:	f7ff ff0f 	bl	8000c10 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000df2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000df6:	ea09 0303 	and.w	r3, r9, r3
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	60f3      	str	r3, [r6, #12]
 8000e00:	e7e4      	b.n	8000dcc <VectorD8+0x18c>
 8000e02:	bf00      	nop
 8000e04:	20001168 	.word	0x20001168
 8000e08:	2000116c 	.word	0x2000116c
 8000e0c:	00000000 	.word	0x00000000

08000e10 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8000e10:	b430      	push	{r4, r5}
 8000e12:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <chMtxUnlockS+0x4c>)
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000e16:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000e18:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000e1a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000e1c:	42a5      	cmp	r5, r4
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000e1e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000e20:	d017      	beq.n	8000e52 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000e22:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000e24:	b14b      	cbz	r3, 8000e3a <chMtxUnlockS+0x2a>
 8000e26:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d003      	beq.n	8000e34 <chMtxUnlockS+0x24>
            (lmp->queue.next->prio > newprio)) {
 8000e2c:	6892      	ldr	r2, [r2, #8]
 8000e2e:	4291      	cmp	r1, r2
 8000e30:	bf38      	it	cc
 8000e32:	4611      	movcc	r1, r2
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000e34:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f5      	bne.n	8000e26 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000e3a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000e3c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8000e3e:	6081      	str	r1, [r0, #8]
 8000e40:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8000e42:	4628      	mov	r0, r5
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e44:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8000e46:	60a5      	str	r5, [r4, #8]
      mp->next = tp->mtxlist;
 8000e48:	60e2      	str	r2, [r4, #12]
      tp->mtxlist = mp;
 8000e4a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000e4c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8000e4e:	f7ff be8f 	b.w	8000b70 <chSchReadyI>
    }
    else {
      mp->owner = NULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60ab      	str	r3, [r5, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000e56:	bc30      	pop	{r4, r5}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20001240 	.word	0x20001240

08000e60 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000e62:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000e64:	699d      	ldr	r5, [r3, #24]
 8000e66:	2320      	movs	r3, #32
 8000e68:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000e6c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000e6e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000e70:	4284      	cmp	r4, r0
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000e72:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000e74:	d01d      	beq.n	8000eb2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000e76:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000e78:	b14b      	cbz	r3, 8000e8e <chMtxUnlock+0x2e>
 8000e7a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d003      	beq.n	8000e88 <chMtxUnlock+0x28>
            (lmp->queue.next->prio > newprio)) {
 8000e80:	6892      	ldr	r2, [r2, #8]
 8000e82:	4291      	cmp	r1, r2
 8000e84:	bf38      	it	cc
 8000e86:	4611      	movcc	r1, r2
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000e88:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f5      	bne.n	8000e7a <chMtxUnlock+0x1a>
 8000e8e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000e90:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000e92:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000e94:	4620      	mov	r0, r4
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8000e96:	60a9      	str	r1, [r5, #8]
 8000e98:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e9a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8000e9c:	609c      	str	r4, [r3, #8]
      mp->next = tp->mtxlist;
 8000e9e:	60de      	str	r6, [r3, #12]
      tp->mtxlist = mp;
 8000ea0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000ea2:	f7ff fe65 	bl	8000b70 <chSchReadyI>
      chSchRescheduleS();
 8000ea6:	f7ff fd8b 	bl	80009c0 <chSchRescheduleS>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->owner = NULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60a3      	str	r3, [r4, #8]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001240 	.word	0x20001240
	...

08000ed0 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8000ed2:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8000ed4:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000ed6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d056      	beq.n	8000f8a <chMtxLockS+0xba>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8000edc:	68a1      	ldr	r1, [r4, #8]
 8000ede:	6893      	ldr	r3, [r2, #8]
 8000ee0:	4605      	mov	r5, r0
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d907      	bls.n	8000ef6 <chMtxLockS+0x26>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8000ee6:	f892 3020 	ldrb.w	r3, [r2, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 8000eea:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d033      	beq.n	8000f58 <chMtxLockS+0x88>
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d01d      	beq.n	8000f30 <chMtxLockS+0x60>
 8000ef4:	b19b      	cbz	r3, 8000f1e <chMtxLockS+0x4e>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000ef6:	462b      	mov	r3, r5
 8000ef8:	e003      	b.n	8000f02 <chMtxLockS+0x32>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	68a2      	ldr	r2, [r4, #8]
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d302      	bcc.n	8000f08 <chMtxLockS+0x38>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8000f02:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f04:	429d      	cmp	r5, r3
 8000f06:	d1f8      	bne.n	8000efa <chMtxLockS+0x2a>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000f08:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8000f0a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8000f0c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8000f0e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000f10:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 8000f12:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f14:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8000f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f1a:	f7ff bdc9 	b.w	8000ab0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000f1e:	e892 000a 	ldmia.w	r2, {r1, r3}
 8000f22:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8000f24:	4610      	mov	r0, r2
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	6053      	str	r3, [r2, #4]
 8000f2a:	f7ff fe21 	bl	8000b70 <chSchReadyI>
 8000f2e:	e7e2      	b.n	8000ef6 <chMtxLockS+0x26>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000f30:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000f34:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f36:	6810      	ldr	r0, [r2, #0]
 8000f38:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000f3a:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000f3c:	4633      	mov	r3, r6
 8000f3e:	e002      	b.n	8000f46 <chMtxLockS+0x76>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f40:	6898      	ldr	r0, [r3, #8]
 8000f42:	4281      	cmp	r1, r0
 8000f44:	d802      	bhi.n	8000f4c <chMtxLockS+0x7c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8000f46:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f48:	429e      	cmp	r6, r3
 8000f4a:	d1f9      	bne.n	8000f40 <chMtxLockS+0x70>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000f4c:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8000f4e:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
 8000f50:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 8000f52:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	e7ce      	b.n	8000ef6 <chMtxLockS+0x26>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000f58:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000f5c:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f5e:	6810      	ldr	r0, [r2, #0]
 8000f60:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000f62:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000f64:	4633      	mov	r3, r6
 8000f66:	e002      	b.n	8000f6e <chMtxLockS+0x9e>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f68:	6898      	ldr	r0, [r3, #8]
 8000f6a:	4281      	cmp	r1, r0
 8000f6c:	d802      	bhi.n	8000f74 <chMtxLockS+0xa4>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8000f6e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f70:	429e      	cmp	r6, r3
 8000f72:	d1f9      	bne.n	8000f68 <chMtxLockS+0x98>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000f74:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8000f76:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
 8000f78:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 8000f7a:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000f7c:	605a      	str	r2, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8000f7e:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8000f80:	68a1      	ldr	r1, [r4, #8]
 8000f82:	6893      	ldr	r3, [r2, #8]
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d3ae      	bcc.n	8000ee6 <chMtxLockS+0x16>
 8000f88:	e7b5      	b.n	8000ef6 <chMtxLockS+0x26>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 8000f8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 8000f8c:	6084      	str	r4, [r0, #8]
    mp->next = ctp->mtxlist;
 8000f8e:	60c3      	str	r3, [r0, #12]
    ctp->mtxlist = mp;
 8000f90:	63a0      	str	r0, [r4, #56]	; 0x38
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
 8000f94:	20001240 	.word	0x20001240
	...

08000fa0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8000fa0:	b508      	push	{r3, lr}
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8000fa8:	f7ff ff92 	bl	8000ed0 <chMtxLockS>
 8000fac:	2300      	movs	r3, #0
 8000fae:	f383 8811 	msr	BASEPRI, r3
 8000fb2:	bd08      	pop	{r3, pc}
	...

08000fc0 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000fc4:	4c17      	ldr	r4, [pc, #92]	; (8001024 <chHeapStatus+0x64>)
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8000fc6:	4688      	mov	r8, r1
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	bf18      	it	ne
 8000fcc:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8000fce:	f104 0710 	add.w	r7, r4, #16
 8000fd2:	4638      	mov	r0, r7
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8000fd4:	4691      	mov	r9, r2

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8000fd6:	f7ff ffe3 	bl	8000fa0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8000fda:	68a3      	ldr	r3, [r4, #8]
 8000fdc:	b1f3      	cbz	r3, 800101c <chHeapStatus+0x5c>
 8000fde:	2400      	movs	r4, #0
 8000fe0:	4625      	mov	r5, r4
 8000fe2:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8000fe4:	6858      	ldr	r0, [r3, #4]
  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4284      	cmp	r4, r0
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8000fea:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8000fee:	4405      	add	r5, r0
 8000ff0:	bf38      	it	cc
 8000ff2:	4604      	movcc	r4, r0
  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f5      	bne.n	8000fe4 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8000ff8:	f1b8 0f00 	cmp.w	r8, #0
 8000ffc:	d002      	beq.n	8001004 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8000ffe:	00ed      	lsls	r5, r5, #3
 8001000:	f8c8 5000 	str.w	r5, [r8]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8001004:	f1b9 0f00 	cmp.w	r9, #0
 8001008:	d002      	beq.n	8001010 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800100a:	00e4      	lsls	r4, r4, #3
 800100c:	f8c9 4000 	str.w	r4, [r9]
  }
  H_UNLOCK(heapp);
 8001010:	4638      	mov	r0, r7
 8001012:	f7ff ff25 	bl	8000e60 <chMtxUnlock>

  return n;
}
 8001016:	4630      	mov	r0, r6
 8001018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
 800101c:	461c      	mov	r4, r3
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  tpages = 0U;
 800101e:	461d      	mov	r5, r3
  lpages = 0U;
  n = 0U;
 8001020:	461e      	mov	r6, r3
 8001022:	e7e9      	b.n	8000ff8 <chHeapStatus+0x38>
 8001024:	20001300 	.word	0x20001300
	...

08001030 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001032:	f850 3c04 	ldr.w	r3, [r0, #-4]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8001036:	f850 4c08 	ldr.w	r4, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800103a:	3307      	adds	r3, #7
 800103c:	08db      	lsrs	r3, r3, #3
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800103e:	f104 0610 	add.w	r6, r4, #16
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001042:	f840 3c04 	str.w	r3, [r0, #-4]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001046:	4605      	mov	r5, r0

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8001048:	3408      	adds	r4, #8
  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800104a:	4630      	mov	r0, r6
 800104c:	f7ff ffa8 	bl	8000fa0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8001050:	4623      	mov	r3, r4
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 8001052:	f1a5 0108 	sub.w	r1, r5, #8
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8001056:	42a3      	cmp	r3, r4
 8001058:	d004      	beq.n	8001064 <chHeapFree+0x34>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <chHeapFree+0x34>
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	42a3      	cmp	r3, r4
 8001062:	d1fa      	bne.n	800105a <chHeapFree+0x2a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001064:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8001066:	b11a      	cbz	r2, 8001070 <chHeapFree+0x40>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001068:	4291      	cmp	r1, r2
 800106a:	d301      	bcc.n	8001070 <chHeapFree+0x40>
 800106c:	4613      	mov	r3, r2
 800106e:	e7f2      	b.n	8001056 <chHeapFree+0x26>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 8001070:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 8001074:	6019      	str	r1, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8001076:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800107a:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800107e:	1c42      	adds	r2, r0, #1
 8001080:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8001084:	42bc      	cmp	r4, r7
 8001086:	d00a      	beq.n	800109e <chHeapFree+0x6e>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	1c42      	adds	r2, r0, #1
 800108c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001090:	4291      	cmp	r1, r2
 8001092:	d013      	beq.n	80010bc <chHeapFree+0x8c>
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8001094:	4630      	mov	r0, r6

  return;
}
 8001096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800109a:	f7ff bee1 	b.w	8000e60 <chMtxUnlock>
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800109e:	6864      	ldr	r4, [r4, #4]
 80010a0:	4420      	add	r0, r4
 80010a2:	3001      	adds	r0, #1
 80010a4:	f845 0c04 	str.w	r0, [r5, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80010a8:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80010ac:	f845 2c08 	str.w	r2, [r5, #-8]
      }
      if ((H_LIMIT(qp) == hp)) {
 80010b0:	6858      	ldr	r0, [r3, #4]
 80010b2:	1c42      	adds	r2, r0, #1
 80010b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80010b8:	4291      	cmp	r1, r2
 80010ba:	d1eb      	bne.n	8001094 <chHeapFree+0x64>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80010bc:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80010c0:	4402      	add	r2, r0
 80010c2:	3201      	adds	r2, #1
 80010c4:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80010c6:	f855 2c08 	ldr.w	r2, [r5, #-8]
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80010ca:	4630      	mov	r0, r6
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
 80010cc:	601a      	str	r2, [r3, #0]

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);

  return;
}
 80010ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80010d2:	f7ff bec5 	b.w	8000e60 <chMtxUnlock>
 80010d6:	bf00      	nop
	...

080010e0 <chThdRelease>:
 80010e0:	2220      	movs	r2, #32
 80010e2:	f382 8811 	msr	BASEPRI, r2
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
  tp->refs--;
 80010e6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80010f0:	6a03      	ldr	r3, [r0, #32]
 80010f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d003      	beq.n	8001102 <chThdRelease+0x22>
 80010fa:	2300      	movs	r3, #0
 80010fc:	f383 8811 	msr	BASEPRI, r3
 8001100:	4770      	bx	lr
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8001102:	b410      	push	{r4}

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
 8001104:	6943      	ldr	r3, [r0, #20]
 8001106:	6904      	ldr	r4, [r0, #16]
 8001108:	2100      	movs	r1, #0
 800110a:	611c      	str	r4, [r3, #16]
 800110c:	6904      	ldr	r4, [r0, #16]
 800110e:	6163      	str	r3, [r4, #20]
 8001110:	f381 8811 	msr	BASEPRI, r1
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8001114:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d00c      	beq.n	800113a <chThdRelease+0x5a>
 8001120:	2b02      	cmp	r3, #2
 8001122:	d108      	bne.n	8001136 <chThdRelease+0x56>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8001124:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001126:	69c0      	ldr	r0, [r0, #28]
 8001128:	f382 8811 	msr	BASEPRI, r2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8001130:	6018      	str	r0, [r3, #0]
 8001132:	f381 8811 	msr	BASEPRI, r1
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
}
 8001136:	bc10      	pop	{r4}
 8001138:	4770      	bx	lr

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
      chHeapFree(chThdGetWorkingAreaX(tp));
 800113a:	69c0      	ldr	r0, [r0, #28]
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
}
 800113c:	bc10      	pop	{r4}

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
      chHeapFree(chThdGetWorkingAreaX(tp));
 800113e:	f7ff bf77 	b.w	8001030 <chHeapFree>
 8001142:	bf00      	nop
	...

08001150 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	2320      	movs	r3, #32
 8001156:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
#endif

  if (tp->state != CH_STATE_FINAL) {
 800115a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d007      	beq.n	8001172 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->queue.next = tlp->next;
 8001164:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001166:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001168:	2009      	movs	r0, #9
 800116a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800116c:	62a3      	str	r3, [r4, #40]	; 0x28
 800116e:	f7ff fc9f 	bl	8000ab0 <chSchGoSleepS>
  }
  msg = tp->u.exitcode;
 8001172:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001174:	2300      	movs	r3, #0
 8001176:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_REGISTRY == TRUE
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ffb0 	bl	80010e0 <chThdRelease>
#endif

  return msg;
}
 8001180:	4628      	mov	r0, r5
 8001182:	bd38      	pop	{r3, r4, r5, pc}
 8001184:	20001240 	.word	0x20001240
	...

08001190 <test_wait_threads>:

/*
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	4c07      	ldr	r4, [pc, #28]	; (80011b0 <test_wait_threads+0x20>)
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8001194:	2600      	movs	r6, #0
 8001196:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800119a:	f854 0b04 	ldr.w	r0, [r4], #4
 800119e:	b118      	cbz	r0, 80011a8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80011a0:	f7ff ffd6 	bl	8001150 <chThdWait>
      threads[i] = NULL;
 80011a4:	f844 6c04 	str.w	r6, [r4, #-4]
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 80011a8:	42ac      	cmp	r4, r5
 80011aa:	d1f6      	bne.n	800119a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
 80011ae:	bf00      	nop
 80011b0:	200011f4 	.word	0x200011f4
	...

080011c0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80011c0:	6883      	ldr	r3, [r0, #8]
 80011c2:	3301      	adds	r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	6083      	str	r3, [r0, #8]
 80011c8:	dd00      	ble.n	80011cc <chSemSignalI+0xc>
 80011ca:	4770      	bx	lr
 80011cc:	4602      	mov	r2, r0
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80011ce:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 80011d0:	b410      	push	{r4}

  tqp->next             = tp->queue.next;
 80011d2:	6819      	ldr	r1, [r3, #0]

  if (++sp->cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 80011d4:	2400      	movs	r4, #0
 80011d6:	6011      	str	r1, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80011d8:	604a      	str	r2, [r1, #4]
 80011da:	625c      	str	r4, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80011dc:	4618      	mov	r0, r3
  }
}
 80011de:	bc10      	pop	{r4}
  if (++sp->cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 80011e0:	f7ff bcc6 	b.w	8000b70 <chSchReadyI>
	...

080011f0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80011f0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
 80011f2:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 80011f4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80011f6:	3501      	adds	r5, #1
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	dc0c      	bgt.n	8001216 <chSemResetI+0x26>
 80011fc:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80011fe:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 8001202:	6860      	ldr	r0, [r4, #4]
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001204:	3501      	adds	r5, #1

  tqp->prev             = tp->queue.prev;
 8001206:	6843      	ldr	r3, [r0, #4]
 8001208:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800120a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800120c:	f7ff fcb0 	bl	8000b70 <chSchReadyI>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001210:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8001212:	6246      	str	r6, [r0, #36]	; 0x24
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001214:	d1f5      	bne.n	8001202 <chSemResetI+0x12>
 8001216:	bd70      	pop	{r4, r5, r6, pc}
	...

08001220 <chSemReset>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {
 8001220:	b508      	push	{r3, lr}
 8001222:	2320      	movs	r3, #32
 8001224:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSemResetI(sp, n);
 8001228:	f7ff ffe2 	bl	80011f0 <chSemResetI>
  chSchRescheduleS();
 800122c:	f7ff fbc8 	bl	80009c0 <chSchRescheduleS>
 8001230:	2300      	movs	r3, #0
 8001232:	f383 8811 	msr	BASEPRI, r3
 8001236:	bd08      	pop	{r3, pc}
	...

08001240 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	2220      	movs	r2, #32
 8001244:	4603      	mov	r3, r0
 8001246:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <chThdExit+0x4c>)
 800124c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 800124e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001250:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001254:	4285      	cmp	r5, r0
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8001256:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001258:	d006      	beq.n	8001268 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 800125a:	6803      	ldr	r3, [r0, #0]
 800125c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800125e:	f7ff fc87 	bl	8000b70 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001262:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001264:	42a8      	cmp	r0, r5
 8001266:	d1f8      	bne.n	800125a <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001268:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800126c:	b943      	cbnz	r3, 8001280 <chThdExit+0x40>
 800126e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001272:	079b      	lsls	r3, r3, #30
 8001274:	d104      	bne.n	8001280 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8001276:	6922      	ldr	r2, [r4, #16]
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	6922      	ldr	r2, [r4, #16]
 800127e:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001280:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8001282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001286:	f7ff bc13 	b.w	8000ab0 <chSchGoSleepS>
 800128a:	bf00      	nop
 800128c:	20001240 	.word	0x20001240

08001290 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <chVTDoResetI+0x68>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001292:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	4282      	cmp	r2, r0
 8001298:	d00f      	beq.n	80012ba <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800129a:	6802      	ldr	r2, [r0, #0]
 800129c:	6841      	ldr	r1, [r0, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800129e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80012a0:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80012a2:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;
 80012a4:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80012a6:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 80012a8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80012aa:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80012ac:	d003      	beq.n	80012b6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80012ae:	6883      	ldr	r3, [r0, #8]
 80012b0:	6891      	ldr	r1, [r2, #8]
 80012b2:	440b      	add	r3, r1
 80012b4:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80012b6:	bc10      	pop	{r4}
 80012b8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80012ba:	4618      	mov	r0, r3
 80012bc:	6811      	ldr	r1, [r2, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80012be:	2400      	movs	r4, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80012c0:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012c4:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80012c6:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80012c8:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012ca:	d011      	beq.n	80012f0 <chVTDoResetI+0x60>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80012cc:	688c      	ldr	r4, [r1, #8]
 80012ce:	6892      	ldr	r2, [r2, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80012d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012d4:	4422      	add	r2, r4
 80012d6:	608a      	str	r2, [r1, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80012dc:	1acb      	subs	r3, r1, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80012de:	429a      	cmp	r2, r3
 80012e0:	d9e9      	bls.n	80012b6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80012e2:	1ad2      	subs	r2, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80012e4:	2a01      	cmp	r2, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80012e6:	bf98      	it	ls
 80012e8:	2202      	movls	r2, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 80012ea:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012ec:	6342      	str	r2, [r0, #52]	; 0x34
 80012ee:	e7e2      	b.n	80012b6 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80012f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f4:	60dc      	str	r4, [r3, #12]
 80012f6:	e7de      	b.n	80012b6 <chVTDoResetI+0x26>
 80012f8:	20001240 	.word	0x20001240
 80012fc:	00000000 	.word	0x00000000

08001300 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001302:	4d1c      	ldr	r5, [pc, #112]	; (8001374 <chVTDoSetI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001304:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001308:	462e      	mov	r6, r5
 800130a:	f856 4f1c 	ldr.w	r4, [r6, #28]!
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800130e:	2901      	cmp	r1, #1
 8001310:	bf98      	it	ls
 8001312:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001314:	42b4      	cmp	r4, r6

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8001316:	60c2      	str	r2, [r0, #12]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001318:	6103      	str	r3, [r0, #16]
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800131c:	d01a      	beq.n	8001354 <chVTDoSetI+0x54>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.lasttime;
 800131e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001320:	4411      	add	r1, r2
    if (delta < ch.vtlist.next->delta) {
 8001322:	68a2      	ldr	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.lasttime;
 8001324:	1acb      	subs	r3, r1, r3
    if (delta < ch.vtlist.next->delta) {
 8001326:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001328:	bf38      	it	cc
 800132a:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 800132c:	4293      	cmp	r3, r2
 800132e:	d904      	bls.n	800133a <chVTDoSetI+0x3a>
    delta -= p->delta;
    p = p->next;
 8001330:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
    delta -= p->delta;
 8001332:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 8001334:	68a2      	ldr	r2, [r4, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	d3fa      	bcc.n	8001330 <chVTDoSetI+0x30>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800133a:	6862      	ldr	r2, [r4, #4]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 800133c:	6004      	str	r4, [r0, #0]
  vtp->prev = vtp->next->prev;
 800133e:	6042      	str	r2, [r0, #4]
  vtp->prev->next = vtp;
 8001340:	6010      	str	r0, [r2, #0]
  p->prev = vtp;
 8001342:	6060      	str	r0, [r4, #4]
  vtp->delta = delta
 8001344:	6083      	str	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8001346:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	60a3      	str	r3, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001350:	6269      	str	r1, [r5, #36]	; 0x24
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8001354:	eb01 0e02 	add.w	lr, r1, r2
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8001358:	2600      	movs	r6, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800135a:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800135c:	62aa      	str	r2, [r5, #40]	; 0x28
      ch.vtlist.next = vtp;
 800135e:	61e8      	str	r0, [r5, #28]
      ch.vtlist.prev = vtp;
 8001360:	6228      	str	r0, [r5, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8001362:	6004      	str	r4, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001364:	6044      	str	r4, [r0, #4]
      vtp->delta = delay;
 8001366:	6081      	str	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001368:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800136c:	613e      	str	r6, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	bf00      	nop
 8001374:	20001240 	.word	0x20001240
	...

08001380 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001380:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001382:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001384:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001386:	d012      	beq.n	80013ae <chSchGoSleepTimeoutS+0x2e>
 8001388:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800138a:	4c0c      	ldr	r4, [pc, #48]	; (80013bc <chSchGoSleepTimeoutS+0x3c>)
 800138c:	a801      	add	r0, sp, #4
 800138e:	69a3      	ldr	r3, [r4, #24]
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <chSchGoSleepTimeoutS+0x40>)
 8001392:	f7ff ffb5 	bl	8001300 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001396:	4628      	mov	r0, r5
 8001398:	f7ff fb8a 	bl	8000ab0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800139c:	9b04      	ldr	r3, [sp, #16]
 800139e:	b113      	cbz	r3, 80013a6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80013a0:	a801      	add	r0, sp, #4
 80013a2:	f7ff ff75 	bl	8001290 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 80013a6:	69a3      	ldr	r3, [r4, #24]
}
 80013a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013aa:	b007      	add	sp, #28
 80013ac:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80013ae:	f7ff fb7f 	bl	8000ab0 <chSchGoSleepS>
 80013b2:	4c02      	ldr	r4, [pc, #8]	; (80013bc <chSchGoSleepTimeoutS+0x3c>)
  }

  return currp->u.rdymsg;
 80013b4:	69a3      	ldr	r3, [r4, #24]
}
 80013b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013b8:	b007      	add	sp, #28
 80013ba:	bd30      	pop	{r4, r5, pc}
 80013bc:	20001240 	.word	0x20001240
 80013c0:	08000441 	.word	0x08000441
	...

080013d0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80013d0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80013d2:	6880      	ldr	r0, [r0, #8]
 80013d4:	1e42      	subs	r2, r0, #1
 80013d6:	2a00      	cmp	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	db01      	blt.n	80013e0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 80013e0:	b410      	push	{r4}
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 80013e2:	b159      	cbz	r1, 80013fc <chSemWaitTimeoutS+0x2c>
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <chSemWaitTimeoutS+0x38>)
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80013e6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 80013e8:	6992      	ldr	r2, [r2, #24]
 80013ea:	6253      	str	r3, [r2, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 80013ec:	685c      	ldr	r4, [r3, #4]
 80013ee:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->queue.prev->queue.next = tp;
 80013f2:	6022      	str	r2, [r4, #0]
  tqp->prev                  = tp;
 80013f4:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80013f6:	bc10      	pop	{r4}
      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80013f8:	f7ff bfc2 	b.w	8001380 <chSchGoSleepTimeoutS>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;
 80013fc:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 80013fe:	bc10      	pop	{r4}

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;

      return MSG_TIMEOUT;
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20001240 	.word	0x20001240
 800140c:	00000000 	.word	0x00000000

08001410 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001410:	b161      	cbz	r1, 800142c <chThdEnqueueTimeoutS+0x1c>
 8001412:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001416:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001418:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 800141a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800141c:	2004      	movs	r0, #4
 800141e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8001422:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001424:	6053      	str	r3, [r2, #4]
}
 8001426:	bc10      	pop	{r4}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001428:	f7ff bfaa 	b.w	8001380 <chSchGoSleepTimeoutS>
}
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20001240 	.word	0x20001240
	...

08001440 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	4699      	mov	r9, r3
 8001446:	b083      	sub	sp, #12
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	4616      	mov	r6, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 800144e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001452:	2320      	movs	r3, #32
 8001454:	f383 8811 	msr	BASEPRI, r3
  size_t w = 0;
 8001458:	2700      	movs	r7, #0
 800145a:	46ba      	mov	sl, r7
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001462:	9300      	str	r3, [sp, #0]
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001464:	eb09 0302 	add.w	r3, r9, r2
 8001468:	9301      	str	r3, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800146a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 800146e:	68a3      	ldr	r3, [r4, #8]
 8001470:	b1fb      	cbz	r3, 80014b2 <oqWriteTimeout+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001472:	6962      	ldr	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8001474:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001476:	1c51      	adds	r1, r2, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8001478:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800147a:	6161      	str	r1, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 800147c:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800147e:	782b      	ldrb	r3, [r5, #0]
 8001480:	3501      	adds	r5, #1
 8001482:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001484:	6923      	ldr	r3, [r4, #16]
 8001486:	6962      	ldr	r2, [r4, #20]
 8001488:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800148a:	bf24      	itt	cs
 800148c:	68e3      	ldrcs	r3, [r4, #12]
 800148e:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001490:	f1b8 0f00 	cmp.w	r8, #0
 8001494:	d001      	beq.n	800149a <oqWriteTimeout+0x5a>
      nfy(oqp);
 8001496:	4620      	mov	r0, r4
 8001498:	47c0      	blx	r8
 800149a:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 800149e:	3e01      	subs	r6, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 80014a0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80014a4:	d017      	beq.n	80014d6 <oqWriteTimeout+0x96>
 80014a6:	9b00      	ldr	r3, [sp, #0]
 80014a8:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 80014ac:	68a3      	ldr	r3, [r4, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1df      	bne.n	8001472 <oqWriteTimeout+0x32>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80014b2:	f11b 0f03 	cmn.w	fp, #3
 80014b6:	d812      	bhi.n	80014de <oqWriteTimeout+0x9e>
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80014be:	9a01      	ldr	r2, [sp, #4]
 80014c0:	1a51      	subs	r1, r2, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80014c2:	4589      	cmp	r9, r1
 80014c4:	d305      	bcc.n	80014d2 <oqWriteTimeout+0x92>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff ffa2 	bl	8001410 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d0ce      	beq.n	800146e <oqWriteTimeout+0x2e>
 80014d0:	2300      	movs	r3, #0
 80014d2:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 80014d6:	4638      	mov	r0, r7
 80014d8:	b003      	add	sp, #12
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	4649      	mov	r1, r9
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ff95 	bl	8001410 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d0c1      	beq.n	800146e <oqWriteTimeout+0x2e>
 80014ea:	e7f1      	b.n	80014d0 <oqWriteTimeout+0x90>
 80014ec:	0000      	movs	r0, r0
	...

080014f0 <writet.lto_priv.86>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80014f0:	3030      	adds	r0, #48	; 0x30
 80014f2:	f7ff bfa5 	b.w	8001440 <oqWriteTimeout>
 80014f6:	bf00      	nop
	...

08001500 <write.lto_priv.80>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001500:	3030      	adds	r0, #48	; 0x30
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001506:	f7ff bf9b 	b.w	8001440 <oqWriteTimeout>
 800150a:	bf00      	nop
 800150c:	0000      	movs	r0, r0
	...

08001510 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	4604      	mov	r4, r0
 8001514:	460f      	mov	r7, r1
 8001516:	4616      	mov	r6, r2
 8001518:	2320      	movs	r3, #32
 800151a:	f383 8811 	msr	BASEPRI, r3
 800151e:	e005      	b.n	800152c <oqPutTimeout+0x1c>
 8001520:	4631      	mov	r1, r6
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff ff74 	bl	8001410 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001528:	2800      	cmp	r0, #0
 800152a:	db17      	blt.n	800155c <oqPutTimeout+0x4c>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 800152c:	68a5      	ldr	r5, [r4, #8]
 800152e:	2d00      	cmp	r5, #0
 8001530:	d0f6      	beq.n	8001520 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001532:	6962      	ldr	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001534:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001536:	1c51      	adds	r1, r2, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001538:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800153a:	6161      	str	r1, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800153c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800153e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001540:	6923      	ldr	r3, [r4, #16]
 8001542:	6962      	ldr	r2, [r4, #20]
 8001544:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001546:	bf24      	itt	cs
 8001548:	68e3      	ldrcs	r3, [r4, #12]
 800154a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800154c:	69e3      	ldr	r3, [r4, #28]
 800154e:	b10b      	cbz	r3, 8001554 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001550:	4620      	mov	r0, r4
 8001552:	4798      	blx	r3
 8001554:	2000      	movs	r0, #0
 8001556:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800155c:	f385 8811 	msr	BASEPRI, r5
 8001560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001562:	bf00      	nop
	...

08001570 <putt.lto_priv.84>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001570:	3030      	adds	r0, #48	; 0x30
 8001572:	f7ff bfcd 	b.w	8001510 <oqPutTimeout>
 8001576:	bf00      	nop
	...

08001580 <put.lto_priv.82>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001580:	3030      	adds	r0, #48	; 0x30
 8001582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001586:	f7ff bfc3 	b.w	8001510 <oqPutTimeout>
 800158a:	bf00      	nop
 800158c:	0000      	movs	r0, r0
	...

08001590 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 8001590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001594:	4699      	mov	r9, r3
 8001596:	b083      	sub	sp, #12
 8001598:	4604      	mov	r4, r0
 800159a:	460e      	mov	r6, r1
 800159c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 800159e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80015a2:	2320      	movs	r3, #32
 80015a4:	f383 8811 	msr	BASEPRI, r3
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ae:	9300      	str	r3, [sp, #0]
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80015b0:	eb09 0302 	add.w	r3, r9, r2
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 80015b4:	2700      	movs	r7, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80015b6:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80015b8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80015bc:	68a3      	ldr	r3, [r4, #8]
 80015be:	b313      	cbz	r3, 8001606 <iqReadTimeout+0x76>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80015c0:	69a2      	ldr	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80015c2:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80015c4:	1c51      	adds	r1, r2, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80015c6:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80015c8:	61a1      	str	r1, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80015ca:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80015cc:	7813      	ldrb	r3, [r2, #0]
 80015ce:	f106 0a01 	add.w	sl, r6, #1
 80015d2:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	69a2      	ldr	r2, [r4, #24]
 80015d8:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80015da:	bf24      	itt	cs
 80015dc:	68e3      	ldrcs	r3, [r4, #12]
 80015de:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 80015e0:	f1b8 0f00 	cmp.w	r8, #0
 80015e4:	d001      	beq.n	80015ea <iqReadTimeout+0x5a>
      nfy(iqp);
 80015e6:	4620      	mov	r0, r4
 80015e8:	47c0      	blx	r8
 80015ea:	2300      	movs	r3, #0
 80015ec:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 80015f0:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 80015f2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80015f6:	d018      	beq.n	800162a <iqReadTimeout+0x9a>
 80015f8:	9b00      	ldr	r3, [sp, #0]
 80015fa:	f383 8811 	msr	BASEPRI, r3
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80015fe:	68a3      	ldr	r3, [r4, #8]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001600:	4656      	mov	r6, sl
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1dc      	bne.n	80015c0 <iqReadTimeout+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001606:	f11b 0f03 	cmn.w	fp, #3
 800160a:	d812      	bhi.n	8001632 <iqReadTimeout+0xa2>
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001612:	9a01      	ldr	r2, [sp, #4]
 8001614:	1a51      	subs	r1, r2, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001616:	4589      	cmp	r9, r1
 8001618:	d305      	bcc.n	8001626 <iqReadTimeout+0x96>
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fef8 	bl	8001410 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001620:	2800      	cmp	r0, #0
 8001622:	d0cb      	beq.n	80015bc <iqReadTimeout+0x2c>
 8001624:	2300      	movs	r3, #0
 8001626:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 800162a:	4638      	mov	r0, r7
 800162c:	b003      	add	sp, #12
 800162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001632:	4649      	mov	r1, r9
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff feeb 	bl	8001410 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800163a:	2800      	cmp	r0, #0
 800163c:	d0be      	beq.n	80015bc <iqReadTimeout+0x2c>
 800163e:	e7f1      	b.n	8001624 <iqReadTimeout+0x94>

08001640 <readt.lto_priv.87>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001640:	300c      	adds	r0, #12
 8001642:	f7ff bfa5 	b.w	8001590 <iqReadTimeout>
 8001646:	bf00      	nop
	...

08001650 <read.lto_priv.81>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001650:	300c      	adds	r0, #12
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001656:	f7ff bf9b 	b.w	8001590 <iqReadTimeout>
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	2320      	movs	r3, #32
 8001664:	4604      	mov	r4, r0
 8001666:	460e      	mov	r6, r1
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	e005      	b.n	800167a <iqGetTimeout+0x1a>
 800166e:	4631      	mov	r1, r6
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fecd 	bl	8001410 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001676:	2800      	cmp	r0, #0
 8001678:	db18      	blt.n	80016ac <iqGetTimeout+0x4c>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 800167a:	68a5      	ldr	r5, [r4, #8]
 800167c:	2d00      	cmp	r5, #0
 800167e:	d0f6      	beq.n	800166e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001680:	69a1      	ldr	r1, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001682:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001684:	6920      	ldr	r0, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001686:	1c4a      	adds	r2, r1, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001688:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800168a:	4282      	cmp	r2, r0
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800168c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800168e:	bf28      	it	cs
 8001690:	68e3      	ldrcs	r3, [r4, #12]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001692:	61a2      	str	r2, [r4, #24]
 8001694:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001696:	bf28      	it	cs
 8001698:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800169a:	69e3      	ldr	r3, [r4, #28]
 800169c:	b10b      	cbz	r3, 80016a2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800169e:	4620      	mov	r0, r4
 80016a0:	4798      	blx	r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 80016a8:	4628      	mov	r0, r5
}
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	f385 8811 	msr	BASEPRI, r5
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	bf00      	nop
	...

080016c0 <gett.lto_priv.85>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80016c0:	300c      	adds	r0, #12
 80016c2:	f7ff bfcd 	b.w	8001660 <iqGetTimeout>
 80016c6:	bf00      	nop
	...

080016d0 <get.lto_priv.83>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80016d0:	300c      	adds	r0, #12
 80016d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d6:	f7ff bfc3 	b.w	8001660 <iqGetTimeout>
 80016da:	bf00      	nop
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80016e0:	b508      	push	{r3, lr}
 80016e2:	4601      	mov	r1, r0
 80016e4:	2320      	movs	r3, #32
 80016e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80016ea:	2008      	movs	r0, #8
 80016ec:	f7ff fe48 	bl	8001380 <chSchGoSleepTimeoutS>
 80016f0:	2300      	movs	r3, #0
 80016f2:	f383 8811 	msr	BASEPRI, r3
 80016f6:	bd08      	pop	{r3, pc}
	...

08001700 <chSysRestoreStatusX.part.2.lto_priv.185>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001700:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001702:	f3ef 8405 	mrs	r4, IPSR

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001706:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800170a:	b11c      	cbz	r4, 8001714 <chSysRestoreStatusX.part.2.lto_priv.185+0x14>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800170c:	2300      	movs	r3, #0
 800170e:	f383 8811 	msr	BASEPRI, r3
 8001712:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001714:	f7ff f954 	bl	80009c0 <chSchRescheduleS>
 8001718:	f384 8811 	msr	BASEPRI, r4
 800171c:	bd10      	pop	{r4, pc}
 800171e:	bf00      	nop

08001720 <chSysGetStatusAndLockX.part.1.lto_priv.186>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001720:	f3ef 8305 	mrs	r3, IPSR
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001728:	b91b      	cbnz	r3, 8001732 <chSysGetStatusAndLockX.part.1.lto_priv.186+0x12>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800172a:	2320      	movs	r3, #32
 800172c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001730:	4770      	bx	lr
 8001732:	2320      	movs	r3, #32
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	0000      	movs	r0, r0
	...

08001740 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001740:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001742:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001744:	d510      	bpl.n	8001768 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 8001746:	4a29      	ldr	r2, [pc, #164]	; (80017ec <chSysIntegrityCheckI+0xac>)
 8001748:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800174a:	4291      	cmp	r1, r2
 800174c:	d03c      	beq.n	80017c8 <chSysIntegrityCheckI+0x88>
 800174e:	2300      	movs	r3, #0
      n++;
      tp = tp->queue.next;
 8001750:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
    while (tp != (thread_t *)&ch.rlist.queue) {
      n++;
 8001752:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001754:	4291      	cmp	r1, r2
 8001756:	d1fb      	bne.n	8001750 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 8001758:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800175a:	428c      	cmp	r4, r1
 800175c:	d031      	beq.n	80017c2 <chSysIntegrityCheckI+0x82>
      n--;
      tp = tp->queue.prev;
 800175e:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
      n--;
 8001760:	3b01      	subs	r3, #1
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001762:	4294      	cmp	r4, r2
 8001764:	d1fb      	bne.n	800175e <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->queue.prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001766:	bb63      	cbnz	r3, 80017c2 <chSysIntegrityCheckI+0x82>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001768:	0783      	lsls	r3, r0, #30
 800176a:	d512      	bpl.n	8001792 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <chSysIntegrityCheckI+0xac>)
 800176e:	4614      	mov	r4, r2
 8001770:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001774:	42a1      	cmp	r1, r4
 8001776:	d02d      	beq.n	80017d4 <chSysIntegrityCheckI+0x94>
 8001778:	2300      	movs	r3, #0
      n++;
      vtp = vtp->next;
 800177a:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 800177c:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800177e:	42a1      	cmp	r1, r4
 8001780:	d1fb      	bne.n	800177a <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 8001782:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001784:	428a      	cmp	r2, r1
 8001786:	d01c      	beq.n	80017c2 <chSysIntegrityCheckI+0x82>
      n--;
      vtp = vtp->prev;
 8001788:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 800178a:	3b01      	subs	r3, #1
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800178c:	42a2      	cmp	r2, r4
 800178e:	d1fb      	bne.n	8001788 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001790:	b9bb      	cbnz	r3, 80017c2 <chSysIntegrityCheckI+0x82>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001792:	f010 0004 	ands.w	r0, r0, #4
 8001796:	d012      	beq.n	80017be <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <chSysIntegrityCheckI+0xac>)
 800179a:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800179c:	4293      	cmp	r3, r2
 800179e:	d01f      	beq.n	80017e0 <chSysIntegrityCheckI+0xa0>
 80017a0:	2000      	movs	r0, #0
      n++;
      tp = tp->newer;
 80017a2:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 80017a4:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
    while (tp != (thread_t *)&ch.rlist) {
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d1fb      	bne.n	80017a2 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 80017aa:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80017ac:	4299      	cmp	r1, r3
 80017ae:	d008      	beq.n	80017c2 <chSysIntegrityCheckI+0x82>
      n--;
      tp = tp->older;
 80017b0:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 80017b2:	3801      	subs	r0, #1
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
 80017b4:	4291      	cmp	r1, r2
 80017b6:	d1fb      	bne.n	80017b0 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80017b8:	3000      	adds	r0, #0
 80017ba:	bf18      	it	ne
 80017bc:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80017be:	bc10      	pop	{r4}
 80017c0:	4770      	bx	lr
      tp = tp->queue.prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 80017c2:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80017c4:	bc10      	pop	{r4}
 80017c6:	4770      	bx	lr
      n++;
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 80017c8:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017ca:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80017cc:	bf18      	it	ne
 80017ce:	2300      	movne	r3, #0
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017d0:	d1c5      	bne.n	800175e <chSysIntegrityCheckI+0x1e>
 80017d2:	e7c9      	b.n	8001768 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 80017d4:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017d6:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 80017d8:	bf18      	it	ne
 80017da:	2300      	movne	r3, #0
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017dc:	d1d4      	bne.n	8001788 <chSysIntegrityCheckI+0x48>
 80017de:	e7d8      	b.n	8001792 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 80017e0:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80017e2:	2000      	movs	r0, #0
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
 80017e4:	4299      	cmp	r1, r3
 80017e6:	d1e3      	bne.n	80017b0 <chSysIntegrityCheckI+0x70>
 80017e8:	e7e9      	b.n	80017be <chSysIntegrityCheckI+0x7e>
 80017ea:	bf00      	nop
 80017ec:	20001240 	.word	0x20001240

080017f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	4f13      	ldr	r7, [pc, #76]	; (8001840 <__init_ram_areas+0x50>)
 80017f4:	4d13      	ldr	r5, [pc, #76]	; (8001844 <__init_ram_areas+0x54>)
 80017f6:	4c14      	ldr	r4, [pc, #80]	; (8001848 <__init_ram_areas+0x58>)
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <__init_ram_areas+0x5c>)
 80017fa:	4915      	ldr	r1, [pc, #84]	; (8001850 <__init_ram_areas+0x60>)
 80017fc:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001800:	2600      	movs	r6, #0
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001802:	429c      	cmp	r4, r3
 8001804:	d911      	bls.n	800182a <__init_ram_areas+0x3a>
 8001806:	461a      	mov	r2, r3
 8001808:	3904      	subs	r1, #4
      *p = *tp;
 800180a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800180e:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001812:	4294      	cmp	r4, r2
 8001814:	d8f9      	bhi.n	800180a <__init_ram_areas+0x1a>
 8001816:	43da      	mvns	r2, r3
 8001818:	4414      	add	r4, r2
 800181a:	f024 0403 	bic.w	r4, r4, #3
 800181e:	3404      	adds	r4, #4
 8001820:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001822:	429d      	cmp	r5, r3
 8001824:	d903      	bls.n	800182e <__init_ram_areas+0x3e>
      *p = 0;
 8001826:	f843 6b04 	str.w	r6, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800182a:	429d      	cmp	r5, r3
 800182c:	d8fb      	bhi.n	8001826 <__init_ram_areas+0x36>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800182e:	4577      	cmp	r7, lr
 8001830:	d005      	beq.n	800183e <__init_ram_areas+0x4e>
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	69bc      	ldr	r4, [r7, #24]
 8001838:	69fd      	ldr	r5, [r7, #28]
 800183a:	3710      	adds	r7, #16
 800183c:	e7e1      	b.n	8001802 <__init_ram_areas+0x12>
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	0800610c 	.word	0x0800610c
 8001844:	2000132c 	.word	0x2000132c
 8001848:	2000132c 	.word	0x2000132c
 800184c:	2000132c 	.word	0x2000132c
 8001850:	080074f8 	.word	0x080074f8
	...

08001860 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001860:	e7fe      	b.n	8001860 <__default_exit>
 8001862:	bf00      	nop
	...

08001870 <__late_init>:
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
	...

08001880 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
	...

08001890 <test_005_009_setup.lto_priv.123>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <test_005_009_setup.lto_priv.123+0x1c>)
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <test_005_009_setup.lto_priv.123+0x20>)
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <test_005_009_setup.lto_priv.123+0x24>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001896:	2000      	movs	r0, #0
 8001898:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 800189a:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800189c:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 800189e:	6052      	str	r2, [r2, #4]
 80018a0:	6090      	str	r0, [r2, #8]
 80018a2:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80018a4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80018a6:	605b      	str	r3, [r3, #4]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	2000086c 	.word	0x2000086c
 80018b0:	20000800 	.word	0x20000800
 80018b4:	2000084c 	.word	0x2000084c
	...

080018c0 <test_005_008_setup.lto_priv.121>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <test_005_008_setup.lto_priv.121+0x14>)
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <test_005_008_setup.lto_priv.121+0x18>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 80018c8:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80018ca:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80018cc:	605b      	str	r3, [r3, #4]
 80018ce:	6099      	str	r1, [r3, #8]
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000086c 	.word	0x2000086c
 80018d8:	2000084c 	.word	0x2000084c
 80018dc:	00000000 	.word	0x00000000

080018e0 <test_005_007_setup.lto_priv.119>:
 80018e0:	f7ff bfee 	b.w	80018c0 <test_005_008_setup.lto_priv.121>
	...

080018f0 <test_005_005_setup.lto_priv.117>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <test_005_005_setup.lto_priv.117+0xc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80018f6:	605b      	str	r3, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	4770      	bx	lr
 80018fc:	2000086c 	.word	0x2000086c

08001900 <test_005_004_setup.lto_priv.114>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <test_005_004_setup.lto_priv.114+0x14>)
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <test_005_004_setup.lto_priv.114+0x18>)
 8001904:	2100      	movs	r1, #0
 8001906:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8001908:	6052      	str	r2, [r2, #4]
 800190a:	6091      	str	r1, [r2, #8]
 800190c:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800190e:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8001910:	605b      	str	r3, [r3, #4]
 8001912:	4770      	bx	lr
 8001914:	2000086c 	.word	0x2000086c
 8001918:	20000800 	.word	0x20000800
 800191c:	00000000 	.word	0x00000000

08001920 <test_005_001_setup.lto_priv.112>:
 8001920:	f7ff bfe6 	b.w	80018f0 <test_005_005_setup.lto_priv.117>
	...

08001930 <test_007_004_setup.lto_priv.131>:
 8001930:	f002 b906 	b.w	8003b40 <test_007_006_setup.lto_priv.135>
	...

08001940 <test_007_003_setup.lto_priv.129>:
 8001940:	f002 b8fe 	b.w	8003b40 <test_007_006_setup.lto_priv.135>
	...

08001950 <test_007_002_setup.lto_priv.127>:
 8001950:	f002 b8f6 	b.w	8003b40 <test_007_006_setup.lto_priv.135>
	...

08001960 <test_007_003_execute.lto_priv.130>:

static void test_007_003_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_003_execute(void) {
 8001960:	b538      	push	{r3, r4, r5, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.3.1] Setting three event flags.*/
  test_set_step(1);
 8001962:	4c35      	ldr	r4, [pc, #212]	; (8001a38 <test_007_003_execute.lto_priv.130+0xd8>)
 8001964:	2301      	movs	r3, #1
  {
    chEvtAddEvents(7);
 8001966:	2007      	movs	r0, #7
static void test_007_003_execute(void) {
  eventmask_t m;
  systime_t target_time;

  /* [7.3.1] Setting three event flags.*/
  test_set_step(1);
 8001968:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(7);
 800196a:	f7fe ff41 	bl	80007f0 <chEvtAddEvents>
  }

  /* [7.3.2] Calling chEvtWaitOne() three times, each time a single
     flag must be returned in order of priority.*/
  test_set_step(2);
 800196e:	2302      	movs	r3, #2
 8001970:	6023      	str	r3, [r4, #0]
  {
    m = chEvtWaitOne(ALL_EVENTS);
 8001972:	f004 f93d 	bl	8005bf0 <chEvtWaitOne.constprop.43>
    test_assert(m == 1, "single event error");
 8001976:	f1a0 0001 	sub.w	r0, r0, #1
 800197a:	fab0 f080 	clz	r0, r0
 800197e:	492f      	ldr	r1, [pc, #188]	; (8001a3c <test_007_003_execute.lto_priv.130+0xdc>)
 8001980:	0940      	lsrs	r0, r0, #5
 8001982:	f7fe fe6d 	bl	8000660 <_test_assert>
 8001986:	b100      	cbz	r0, 800198a <test_007_003_execute.lto_priv.130+0x2a>
 8001988:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 800198a:	f004 f931 	bl	8005bf0 <chEvtWaitOne.constprop.43>
    test_assert(m == 2, "single event error");
 800198e:	f1a0 0002 	sub.w	r0, r0, #2
 8001992:	fab0 f080 	clz	r0, r0
 8001996:	4929      	ldr	r1, [pc, #164]	; (8001a3c <test_007_003_execute.lto_priv.130+0xdc>)
 8001998:	0940      	lsrs	r0, r0, #5
 800199a:	f7fe fe61 	bl	8000660 <_test_assert>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1f2      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
 80019a2:	f004 f925 	bl	8005bf0 <chEvtWaitOne.constprop.43>
    test_assert(m == 4, "single event error");
 80019a6:	f1a0 0004 	sub.w	r0, r0, #4
 80019aa:	fab0 f080 	clz	r0, r0
 80019ae:	4923      	ldr	r1, [pc, #140]	; (8001a3c <test_007_003_execute.lto_priv.130+0xdc>)
 80019b0:	0940      	lsrs	r0, r0, #5
 80019b2:	f7fe fe55 	bl	8000660 <_test_assert>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d1e6      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80019ba:	f004 f909 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 80019be:	fab0 f080 	clz	r0, r0
 80019c2:	491f      	ldr	r1, [pc, #124]	; (8001a40 <test_007_003_execute.lto_priv.130+0xe0>)
 80019c4:	0940      	lsrs	r0, r0, #5
 80019c6:	f7fe fe4b 	bl	8000660 <_test_assert>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d1dc      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
  }

  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 80019ce:	2303      	movs	r3, #3
 80019d0:	6023      	str	r3, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 80019d2:	f001 fbdd 	bl	8003190 <test_wait_tick>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <test_007_003_execute.lto_priv.130+0xe4>)
 80019d8:	4605      	mov	r5, r0
 80019da:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80019dc:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <test_007_003_execute.lto_priv.130+0xe8>)
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	481a      	ldr	r0, [pc, #104]	; (8001a4c <test_007_003_execute.lto_priv.130+0xec>)
 80019e2:	3901      	subs	r1, #1
 80019e4:	f003 fff4 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <test_007_003_execute.lto_priv.130+0xf0>)
  }

  /* [7.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 80019ea:	2304      	movs	r3, #4
 80019ec:	6023      	str	r3, [r4, #0]
  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80019ee:	6010      	str	r0, [r2, #0]
  /* [7.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
 80019f0:	f004 f8fe 	bl	8005bf0 <chEvtWaitOne.constprop.43>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80019f4:	f505 7102 	add.w	r1, r5, #520	; 0x208
  /* [7.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
 80019f8:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80019fa:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80019fe:	f004 fb67 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d1c0      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
                            "out of time window");
    test_assert(m == 1, "event flag error");
 8001a06:	f1a4 0001 	sub.w	r0, r4, #1
 8001a0a:	fab0 f080 	clz	r0, r0
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <test_007_003_execute.lto_priv.130+0xf4>)
 8001a10:	0940      	lsrs	r0, r0, #5
 8001a12:	f7fe fe25 	bl	8000660 <_test_assert>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d1b6      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001a1a:	f004 f8d9 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8001a1e:	fab0 f080 	clz	r0, r0
 8001a22:	4907      	ldr	r1, [pc, #28]	; (8001a40 <test_007_003_execute.lto_priv.130+0xe0>)
 8001a24:	0940      	lsrs	r0, r0, #5
 8001a26:	f7fe fe1b 	bl	8000660 <_test_assert>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d1ac      	bne.n	8001988 <test_007_003_execute.lto_priv.130+0x28>
    test_wait_threads();
  }
}
 8001a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
    test_assert(m == 1, "event flag error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
 8001a32:	f7ff bbad 	b.w	8001190 <test_wait_threads>
 8001a36:	bf00      	nop
 8001a38:	200011e4 	.word	0x200011e4
 8001a3c:	0800618c 	.word	0x0800618c
 8001a40:	080061a0 	.word	0x080061a0
 8001a44:	20001240 	.word	0x20001240
 8001a48:	08001c21 	.word	0x08001c21
 8001a4c:	20000ae8 	.word	0x20000ae8
 8001a50:	200011f4 	.word	0x200011f4
 8001a54:	080061ac 	.word	0x080061ac
	...

08001a60 <test_004_006_teardown.lto_priv.110>:
 *   must not change from "not taken".
 * .
 */

static void test_004_006_teardown(void) {
  test_wait_threads();
 8001a60:	f7ff bb96 	b.w	8001190 <test_wait_threads>
	...

08001a70 <test_005_004_teardown.lto_priv.115>:
 8001a70:	f7ff bb8e 	b.w	8001190 <test_wait_threads>
	...

08001a80 <test_007_002_execute.lto_priv.128>:

static void test_007_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_002_execute(void) {
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [7.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8001a82:	2301      	movs	r3, #1

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001a84:	461f      	mov	r7, r3
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <test_007_002_execute.lto_priv.128+0x44>)
 8001a88:	4e0f      	ldr	r6, [pc, #60]	; (8001ac8 <test_007_002_execute.lto_priv.128+0x48>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8001a8e:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001a90:	fa25 f304 	lsr.w	r3, r5, r4
 8001a94:	07db      	lsls	r3, r3, #31
 8001a96:	d404      	bmi.n	8001aa2 <test_007_002_execute.lto_priv.128+0x22>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001a98:	3401      	adds	r4, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001a9a:	fa25 f304 	lsr.w	r3, r5, r4
 8001a9e:	07db      	lsls	r3, r3, #31
 8001aa0:	d5fa      	bpl.n	8001a98 <test_007_002_execute.lto_priv.128+0x18>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001aa2:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8001aa6:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001aa8:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001aac:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8001ab0:	4798      	blx	r3
    }
    eid++;
 8001ab2:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	d1eb      	bne.n	8001a90 <test_007_002_execute.lto_priv.128+0x10>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 8001ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* [7.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <test_007_002_execute.lto_priv.128+0x4c>)
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <test_007_002_execute.lto_priv.128+0x50>)
 8001ac0:	f7fe bda6 	b.w	8000610 <_test_assert_sequence>
 8001ac4:	200011e4 	.word	0x200011e4
 8001ac8:	080062a4 	.word	0x080062a4
 8001acc:	080061c0 	.word	0x080061c0
 8001ad0:	080061d4 	.word	0x080061d4
	...

08001ae0 <test_007_001_execute.lto_priv.126>:
 * - [7.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void test_007_001_execute(void) {
 8001ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001ae4:	4c36      	ldr	r4, [pc, #216]	; (8001bc0 <test_007_001_execute.lto_priv.126+0xe0>)
    chEvtObjectInit(&es1);
  }

  /* [7.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8001ae6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001bd0 <test_007_001_execute.lto_priv.126+0xf0>
 8001aea:	2002      	movs	r0, #2
 * - [7.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void test_007_001_execute(void) {
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	6024      	str	r4, [r4, #0]
    chEvtObjectInit(&es1);
  }

  /* [7.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8001af0:	f8c9 0000 	str.w	r0, [r9]
 8001af4:	2620      	movs	r6, #32
 8001af6:	f386 8811 	msr	BASEPRI, r6
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <test_007_001_execute.lto_priv.126+0xe4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8001afc:	6821      	ldr	r1, [r4, #0]
 8001afe:	af0a      	add	r7, sp, #40	; 0x28
 8001b00:	f847 1d14 	str.w	r1, [r7, #-20]!
  esp->next     = elp;
  elp->listener = currp;
 8001b04:	6999      	ldr	r1, [r3, #24]
  elp->events   = events;
 8001b06:	2201      	movs	r2, #1
  elp->flags    = (eventflags_t)0;
 8001b08:	2500      	movs	r5, #0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8001b0a:	9106      	str	r1, [sp, #24]
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
 8001b10:	9207      	str	r2, [sp, #28]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
 8001b12:	6027      	str	r7, [r4, #0]
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8001b14:	9508      	str	r5, [sp, #32]
  elp->wflags   = wflags;
 8001b16:	9109      	str	r1, [sp, #36]	; 0x24
 8001b18:	f385 8811 	msr	BASEPRI, r5
 8001b1c:	f386 8811 	msr	BASEPRI, r6
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8001b20:	699a      	ldr	r2, [r3, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8001b28:	f848 3d28 	str.w	r3, [r8, #-40]!
  esp->next     = elp;
  elp->listener = currp;
 8001b2c:	9201      	str	r2, [sp, #4]
  elp->events   = events;
 8001b2e:	9002      	str	r0, [sp, #8]
  elp->flags    = (eventflags_t)0;
 8001b30:	9503      	str	r5, [sp, #12]
  elp->wflags   = wflags;
 8001b32:	9104      	str	r1, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
 8001b34:	f8c4 8000 	str.w	r8, [r4]
 8001b38:	f385 8811 	msr	BASEPRI, r5
 8001b3c:	f386 8811 	msr	BASEPRI, r6
  {
    chEvtRegisterMask(&es1, &el1, 1);
    chEvtRegisterMask(&es1, &el2, 2);
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <test_007_001_execute.lto_priv.126+0xe8>)
 8001b44:	1b00      	subs	r0, r0, r4
 8001b46:	bf18      	it	ne
 8001b48:	2001      	movne	r0, #1
 8001b4a:	f7fe fd89 	bl	8000660 <_test_assert>
 8001b4e:	b120      	cbz	r0, 8001b5a <test_007_001_execute.lto_priv.126+0x7a>
 8001b50:	f385 8811 	msr	BASEPRI, r5
  test_set_step(4);
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
}
 8001b54:	b00a      	add	sp, #40	; 0x28
 8001b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b5a:	4682      	mov	sl, r0
 8001b5c:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [7.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8001b60:	2303      	movs	r3, #3
  {
    chEvtUnregister(&es1, &el1);
 8001b62:	4639      	mov	r1, r7
 8001b64:	4620      	mov	r0, r4
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [7.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8001b66:	f8c9 3000 	str.w	r3, [r9]
  {
    chEvtUnregister(&es1, &el1);
 8001b6a:	f7fe fe51 	bl	8000810 <chEvtUnregister>
 8001b6e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <test_007_001_execute.lto_priv.126+0xe8>)
 8001b76:	1b00      	subs	r0, r0, r4
 8001b78:	bf18      	it	ne
 8001b7a:	2001      	movne	r0, #1
 8001b7c:	f7fe fd70 	bl	8000660 <_test_assert>
 8001b80:	4605      	mov	r5, r0
 8001b82:	b120      	cbz	r0, 8001b8e <test_007_001_execute.lto_priv.126+0xae>
 8001b84:	f38a 8811 	msr	BASEPRI, sl
  test_set_step(4);
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
}
 8001b88:	b00a      	add	sp, #40	; 0x28
 8001b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8e:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [7.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8001b92:	2304      	movs	r3, #4
  {
    chEvtUnregister(&es1, &el2);
 8001b94:	4641      	mov	r1, r8
 8001b96:	4620      	mov	r0, r4
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [7.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8001b98:	f8c9 3000 	str.w	r3, [r9]
  {
    chEvtUnregister(&es1, &el2);
 8001b9c:	f7fe fe38 	bl	8000810 <chEvtUnregister>
 8001ba0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	4909      	ldr	r1, [pc, #36]	; (8001bcc <test_007_001_execute.lto_priv.126+0xec>)
 8001ba8:	1b00      	subs	r0, r0, r4
 8001baa:	fab0 f080 	clz	r0, r0
 8001bae:	0940      	lsrs	r0, r0, #5
 8001bb0:	f7fe fd56 	bl	8000660 <_test_assert>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1cb      	bne.n	8001b50 <test_007_001_execute.lto_priv.126+0x70>
 8001bb8:	f380 8811 	msr	BASEPRI, r0
 8001bbc:	e7ca      	b.n	8001b54 <test_007_001_execute.lto_priv.126+0x74>
 8001bbe:	bf00      	nop
 8001bc0:	20000810 	.word	0x20000810
 8001bc4:	20001240 	.word	0x20001240
 8001bc8:	080061d8 	.word	0x080061d8
 8001bcc:	080061e4 	.word	0x080061e4
 8001bd0:	200011e4 	.word	0x200011e4
	...

08001be0 <evt_thread7.lto_priv.174>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(evt_thread7, p) {
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	2520      	movs	r5, #32
 8001be4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8001be8:	2100      	movs	r1, #0
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <evt_thread7.lto_priv.174+0x38>)
 8001bec:	f7ff f810 	bl	8000c10 <chEvtBroadcastFlagsI>
 8001bf0:	2400      	movs	r4, #0
  chSchRescheduleS();
 8001bf2:	f7fe fee5 	bl	80009c0 <chSchRescheduleS>
 8001bf6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8001bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bfe:	f7ff fd6f 	bl	80016e0 <chThdSleep>
 8001c02:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <evt_thread7.lto_priv.174+0x3c>)
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7ff f801 	bl	8000c10 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8001c0e:	f7fe fed7 	bl	80009c0 <chSchRescheduleS>
 8001c12:	f384 8811 	msr	BASEPRI, r4
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20000810 	.word	0x20000810
 8001c1c:	20000814 	.word	0x20000814

08001c20 <evt_thread3.lto_priv.175>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static THD_FUNCTION(evt_thread3, p) {
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8001c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c28:	f7ff fd5a 	bl	80016e0 <chThdSleep>
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8001c32:	2101      	movs	r1, #1
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7fe ffd3 	bl	8000be0 <chEvtSignalI>
  chSchRescheduleS();
 8001c3a:	f7fe fec1 	bl	80009c0 <chSchRescheduleS>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	bd10      	pop	{r4, pc}
 8001c46:	bf00      	nop
	...

08001c50 <h3>:
static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8001c50:	2043      	movs	r0, #67	; 0x43
 8001c52:	f7fe bc5d 	b.w	8000510 <test_emit_token>
 8001c56:	bf00      	nop
	...

08001c60 <h2>:

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8001c60:	2042      	movs	r0, #66	; 0x42
 8001c62:	f7fe bc55 	b.w	8000510 <test_emit_token>
 8001c66:	bf00      	nop
	...

08001c70 <h1>:
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8001c70:	2041      	movs	r0, #65	; 0x41
 8001c72:	f7fe bc4d 	b.w	8000510 <test_emit_token>
 8001c76:	bf00      	nop
	...

08001c80 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8001c80:	b510      	push	{r4, lr}
 8001c82:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8001c84:	2141      	movs	r1, #65	; 0x41
 8001c86:	f7fe ff8b 	bl	8000ba0 <chMsgSend>
  chMsgSend(p, 'B');
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	2142      	movs	r1, #66	; 0x42
 8001c8e:	f7fe ff87 	bl	8000ba0 <chMsgSend>
  chMsgSend(p, 'C');
 8001c92:	4620      	mov	r0, r4
 8001c94:	2143      	movs	r1, #67	; 0x43
 8001c96:	f7fe ff83 	bl	8000ba0 <chMsgSend>
  chMsgSend(p, 'D');
 8001c9a:	4620      	mov	r0, r4
}
 8001c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(msg_thread1, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
  chMsgSend(p, 'D');
 8001ca0:	2144      	movs	r1, #68	; 0x44
 8001ca2:	f7fe bf7d 	b.w	8000ba0 <chMsgSend>
 8001ca6:	bf00      	nop
	...

08001cb0 <test_006_001_execute.lto_priv.125>:
 * - [6.1.1] Starting the messenger thread.
 * - [6.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void test_006_001_execute(void) {
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <test_006_001_execute.lto_priv.125+0x54>)
  thread_t *tp;
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8001cb4:	4c14      	ldr	r4, [pc, #80]	; (8001d08 <test_006_001_execute.lto_priv.125+0x58>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2501      	movs	r5, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <test_006_001_execute.lto_priv.125+0x5c>)
 8001cbe:	4429      	add	r1, r5
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <test_006_001_execute.lto_priv.125+0x60>)
static void test_006_001_execute(void) {
  thread_t *tp;
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8001cc2:	6025      	str	r5, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8001cc4:	f003 fe84 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <test_006_001_execute.lto_priv.125+0x64>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [6.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8001cca:	2302      	movs	r3, #2
 8001ccc:	6023      	str	r3, [r4, #0]
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8001cce:	6010      	str	r0, [r2, #0]
                                   msg_thread1, chThdGetSelfX());
  }

  /* [6.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8001cd0:	2404      	movs	r4, #4
 8001cd2:	2720      	movs	r7, #32
 8001cd4:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8001cd6:	f7fe ff03 	bl	8000ae0 <chMsgWait>
 8001cda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001cdc:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fe95 	bl	8000a10 <chSchWakeupS>
 8001ce6:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8001cea:	b2e8      	uxtb	r0, r5
 8001cec:	f7fe fc10 	bl	8000510 <test_emit_token>
     order.*/
  test_set_step(2);
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
 8001cf0:	3c01      	subs	r4, #1
 8001cf2:	d1f0      	bne.n	8001cd6 <test_006_001_execute.lto_priv.125+0x26>
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
    }
    test_wait_threads();
 8001cf4:	f7ff fa4c 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
}
 8001cf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 8001cfc:	4906      	ldr	r1, [pc, #24]	; (8001d18 <test_006_001_execute.lto_priv.125+0x68>)
 8001cfe:	4807      	ldr	r0, [pc, #28]	; (8001d1c <test_006_001_execute.lto_priv.125+0x6c>)
 8001d00:	f7fe bc86 	b.w	8000610 <_test_assert_sequence>
 8001d04:	20001240 	.word	0x20001240
 8001d08:	200011e4 	.word	0x200011e4
 8001d0c:	08001c81 	.word	0x08001c81
 8001d10:	20000ae8 	.word	0x20000ae8
 8001d14:	200011f4 	.word	0x200011f4
 8001d18:	080061c0 	.word	0x080061c0
 8001d1c:	080061f4 	.word	0x080061f4

08001d20 <test_005_009_execute.lto_priv.124>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void test_005_009_execute(void) {
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <test_005_009_execute.lto_priv.124+0x70>)

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001d24:	4e1b      	ldr	r6, [pc, #108]	; (8001d94 <test_005_009_execute.lto_priv.124+0x74>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001d26:	699b      	ldr	r3, [r3, #24]
    prio = chThdGetPriorityX();
  }

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8001d28:	4c1b      	ldr	r4, [pc, #108]	; (8001d98 <test_005_009_execute.lto_priv.124+0x78>)
 8001d2a:	689f      	ldr	r7, [r3, #8]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	1c79      	adds	r1, r7, #1
    prio = chThdGetPriorityX();
  }

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8001d30:	2502      	movs	r5, #2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <test_005_009_execute.lto_priv.124+0x7c>)
 8001d34:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <test_005_009_execute.lto_priv.124+0x80>)
    prio = chThdGetPriorityX();
  }

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8001d36:	6025      	str	r5, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001d38:	f003 fe4a 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8001d3c:	4d19      	ldr	r5, [pc, #100]	; (8001da4 <test_005_009_execute.lto_priv.124+0x84>)
  }

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8001d3e:	f04f 0e03 	mov.w	lr, #3

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001d42:	6028      	str	r0, [r5, #0]

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001d44:	1cb9      	adds	r1, r7, #2
 8001d46:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <test_005_009_execute.lto_priv.124+0x88>)
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <test_005_009_execute.lto_priv.124+0x8c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  }

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8001d4e:	f8c4 e000 	str.w	lr, [r4]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001d52:	f003 fe3d 	bl	80059d0 <chThdCreateStatic.constprop.65>

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001d56:	1cf9      	adds	r1, r7, #3
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <test_005_009_execute.lto_priv.124+0x90>)

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001d5a:	6068      	str	r0, [r5, #4]
  }

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8001d5c:	2704      	movs	r7, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001d5e:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <test_005_009_execute.lto_priv.124+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
  }

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8001d64:	6027      	str	r7, [r4, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001d66:	f003 fe33 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [5.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8001d6a:	2305      	movs	r3, #5

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001d6c:	60a8      	str	r0, [r5, #8]
  }

  /* [5.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8001d6e:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8001d70:	f003 fefe 	bl	8005b70 <chCondSignal.constprop.55>
  }

  /* [5.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8001d74:	2306      	movs	r3, #6
 8001d76:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8001d78:	f003 fefa 	bl	8005b70 <chCondSignal.constprop.55>
  }

  /* [5.9.7] Checking the order of operations.*/
  test_set_step(7);
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8001d80:	f7ff fa06 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 8001d84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  /* [5.9.7] Checking the order of operations.*/
  test_set_step(7);
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
 8001d88:	490b      	ldr	r1, [pc, #44]	; (8001db8 <test_005_009_execute.lto_priv.124+0x98>)
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <test_005_009_execute.lto_priv.124+0x9c>)
 8001d8c:	f7fe bc40 	b.w	8000610 <_test_assert_sequence>
 8001d90:	20001240 	.word	0x20001240
 8001d94:	20000ae8 	.word	0x20000ae8
 8001d98:	200011e4 	.word	0x200011e4
 8001d9c:	080061fc 	.word	0x080061fc
 8001da0:	08002391 	.word	0x08002391
 8001da4:	200011f4 	.word	0x200011f4
 8001da8:	08006200 	.word	0x08006200
 8001dac:	08002421 	.word	0x08002421
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08006204 	.word	0x08006204
 8001db8:	080061c0 	.word	0x080061c0
 8001dbc:	080061d4 	.word	0x080061d4

08001dc0 <thread9>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread9, p) {
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8001dc4:	4c05      	ldr	r4, [pc, #20]	; (8001ddc <thread9+0x1c>)
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff f8ea 	bl	8000fa0 <chMtxLock>
  test_emit_token(*(char *)p);
 8001dcc:	7828      	ldrb	r0, [r5, #0]
 8001dce:	f7fe fb9f 	bl	8000510 <test_emit_token>
  chMtxUnlock(&m2);
 8001dd2:	4620      	mov	r0, r4
}
 8001dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread9, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8001dd8:	f7ff b842 	b.w	8000e60 <chMtxUnlock>
 8001ddc:	20000800 	.word	0x20000800

08001de0 <test_005_004_execute.lto_priv.116>:

static void test_005_004_teardown(void) {
  test_wait_threads();
}

static void test_005_004_execute(void) {
 8001de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001de4:	4d3f      	ldr	r5, [pc, #252]	; (8001ee4 <test_005_004_execute.lto_priv.116+0x104>)
    pa = p + 1;
    pb = p + 2;
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
 8001de6:	4e40      	ldr	r6, [pc, #256]	; (8001ee8 <test_005_004_execute.lto_priv.116+0x108>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001de8:	69ab      	ldr	r3, [r5, #24]
 8001dea:	2702      	movs	r7, #2
 8001dec:	689c      	ldr	r4, [r3, #8]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8001dee:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <test_005_004_execute.lto_priv.116+0x10c>)
  /* [5.4.1] Getting current thread priority P(0) and assigning to the
     threads A and B priorities +1 and +2.*/
  test_set_step(1);
  {
    p = chThdGetPriorityX();
    pa = p + 1;
 8001df0:	f104 0801 	add.w	r8, r4, #1
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8001df4:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <test_005_004_execute.lto_priv.116+0x110>)
 8001df6:	4641      	mov	r1, r8
 8001df8:	483e      	ldr	r0, [pc, #248]	; (8001ef4 <test_005_004_execute.lto_priv.116+0x114>)
    pa = p + 1;
    pb = p + 2;
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
 8001dfa:	6037      	str	r7, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8001dfc:	f003 fde8 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8001e00:	4f3d      	ldr	r7, [pc, #244]	; (8001ef8 <test_005_004_execute.lto_priv.116+0x118>)
     threads A and B priorities +1 and +2.*/
  test_set_step(1);
  {
    p = chThdGetPriorityX();
    pa = p + 1;
    pb = p + 2;
 8001e02:	f104 0902 	add.w	r9, r4, #2

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8001e06:	4649      	mov	r1, r9
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8001e08:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <test_005_004_execute.lto_priv.116+0x11c>)
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <test_005_004_execute.lto_priv.116+0x120>)
 8001e0e:	483d      	ldr	r0, [pc, #244]	; (8001f04 <test_005_004_execute.lto_priv.116+0x124>)
 8001e10:	f003 fdde 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
 8001e14:	2303      	movs	r3, #3

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8001e16:	6078      	str	r0, [r7, #4]
  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
  {
    chMtxLock(&m1);
 8001e18:	483b      	ldr	r0, [pc, #236]	; (8001f08 <test_005_004_execute.lto_priv.116+0x128>)
  }

  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
 8001e1a:	6033      	str	r3, [r6, #0]
  {
    chMtxLock(&m1);
 8001e1c:	f7ff f8c0 	bl	8000fa0 <chMtxLock>
 8001e20:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8001e22:	493a      	ldr	r1, [pc, #232]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001e24:	6898      	ldr	r0, [r3, #8]
 8001e26:	1b00      	subs	r0, r0, r4
 8001e28:	fab0 f080 	clz	r0, r0
 8001e2c:	0940      	lsrs	r0, r0, #5
 8001e2e:	f7fe fc17 	bl	8000660 <_test_assert>
 8001e32:	b108      	cbz	r0, 8001e38 <test_005_004_execute.lto_priv.116+0x58>
 8001e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  /* [5.4.4] Waiting 100mS, this makes thread A reach chMtxLock(M1) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread A.*/
  test_set_step(4);
 8001e38:	2304      	movs	r3, #4
  {
    chThdSleepMilliseconds(100);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  }

  /* [5.4.4] Waiting 100mS, this makes thread A reach chMtxLock(M1) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread A.*/
  test_set_step(4);
 8001e3e:	6033      	str	r3, [r6, #0]
  {
    chThdSleepMilliseconds(100);
 8001e40:	f7ff fc4e 	bl	80016e0 <chThdSleep>
 8001e44:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8001e46:	4931      	ldr	r1, [pc, #196]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001e48:	6898      	ldr	r0, [r3, #8]
 8001e4a:	ebc8 0000 	rsb	r0, r8, r0
 8001e4e:	fab0 f080 	clz	r0, r0
 8001e52:	0940      	lsrs	r0, r0, #5
 8001e54:	f7fe fc04 	bl	8000660 <_test_assert>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d1eb      	bne.n	8001e34 <test_005_004_execute.lto_priv.116+0x54>
  }

  /* [5.4.5] Locking the mutex M2 before thread B has a chance to lock
     it. The priority must not change because B has not yet reached
     chMtxLock(M2). the mutex is not locked.*/
  test_set_step(5);
 8001e5c:	2305      	movs	r3, #5
  {
    chMtxLock(&m2);
 8001e5e:	482c      	ldr	r0, [pc, #176]	; (8001f10 <test_005_004_execute.lto_priv.116+0x130>)
  }

  /* [5.4.5] Locking the mutex M2 before thread B has a chance to lock
     it. The priority must not change because B has not yet reached
     chMtxLock(M2). the mutex is not locked.*/
  test_set_step(5);
 8001e60:	6033      	str	r3, [r6, #0]
  {
    chMtxLock(&m2);
 8001e62:	f7ff f89d 	bl	8000fa0 <chMtxLock>
 8001e66:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8001e68:	4928      	ldr	r1, [pc, #160]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001e6a:	6898      	ldr	r0, [r3, #8]
 8001e6c:	ebc8 0000 	rsb	r0, r8, r0
 8001e70:	fab0 f080 	clz	r0, r0
 8001e74:	0940      	lsrs	r0, r0, #5
 8001e76:	f7fe fbf3 	bl	8000660 <_test_assert>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d1da      	bne.n	8001e34 <test_005_004_execute.lto_priv.116+0x54>
  }

  /* [5.4.6] Waiting 100mS, this makes thread B reach chMtxLock(M2) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread B.*/
  test_set_step(6);
 8001e7e:	2306      	movs	r3, #6
  {
    chThdSleepMilliseconds(100);
 8001e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  }

  /* [5.4.6] Waiting 100mS, this makes thread B reach chMtxLock(M2) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread B.*/
  test_set_step(6);
 8001e84:	6033      	str	r3, [r6, #0]
  {
    chThdSleepMilliseconds(100);
 8001e86:	f7ff fc2b 	bl	80016e0 <chThdSleep>
 8001e8a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8001e8c:	491f      	ldr	r1, [pc, #124]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001e8e:	6898      	ldr	r0, [r3, #8]
 8001e90:	ebc9 0000 	rsb	r0, r9, r0
 8001e94:	fab0 f080 	clz	r0, r0
 8001e98:	0940      	lsrs	r0, r0, #5
 8001e9a:	f7fe fbe1 	bl	8000660 <_test_assert>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d1c8      	bne.n	8001e34 <test_005_004_execute.lto_priv.116+0x54>
  }

  /* [5.4.7] Unlocking M2, the priority should fall back to P(A).*/
  test_set_step(7);
 8001ea2:	2307      	movs	r3, #7
  {
    chMtxUnlock(&m2);
 8001ea4:	481a      	ldr	r0, [pc, #104]	; (8001f10 <test_005_004_execute.lto_priv.116+0x130>)
    chThdSleepMilliseconds(100);
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
  }

  /* [5.4.7] Unlocking M2, the priority should fall back to P(A).*/
  test_set_step(7);
 8001ea6:	6033      	str	r3, [r6, #0]
  {
    chMtxUnlock(&m2);
 8001ea8:	f7fe ffda 	bl	8000e60 <chMtxUnlock>
 8001eac:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8001eae:	4917      	ldr	r1, [pc, #92]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001eb0:	6898      	ldr	r0, [r3, #8]
 8001eb2:	ebc8 0000 	rsb	r0, r8, r0
 8001eb6:	fab0 f080 	clz	r0, r0
 8001eba:	0940      	lsrs	r0, r0, #5
 8001ebc:	f7fe fbd0 	bl	8000660 <_test_assert>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1b7      	bne.n	8001e34 <test_005_004_execute.lto_priv.116+0x54>
  }

  /* [5.4.8] Unlocking M1, the priority should fall back to P(0).*/
  test_set_step(8);
 8001ec4:	2308      	movs	r3, #8
  {
    chMtxUnlock(&m1);
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <test_005_004_execute.lto_priv.116+0x128>)
    chMtxUnlock(&m2);
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
  }

  /* [5.4.8] Unlocking M1, the priority should fall back to P(0).*/
  test_set_step(8);
 8001ec8:	6033      	str	r3, [r6, #0]
  {
    chMtxUnlock(&m1);
 8001eca:	f7fe ffc9 	bl	8000e60 <chMtxUnlock>
 8001ece:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <test_005_004_execute.lto_priv.116+0x12c>)
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	1b00      	subs	r0, r0, r4
 8001ed6:	fab0 f080 	clz	r0, r0
  }
}
 8001eda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* [5.4.8] Unlocking M1, the priority should fall back to P(0).*/
  test_set_step(8);
  {
    chMtxUnlock(&m1);
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8001ede:	0940      	lsrs	r0, r0, #5
 8001ee0:	f7fe bbbe 	b.w	8000660 <_test_assert>
 8001ee4:	20001240 	.word	0x20001240
 8001ee8:	200011e4 	.word	0x200011e4
 8001eec:	08001f21 	.word	0x08001f21
 8001ef0:	080061fc 	.word	0x080061fc
 8001ef4:	20000ae8 	.word	0x20000ae8
 8001ef8:	200011f4 	.word	0x200011f4
 8001efc:	08006204 	.word	0x08006204
 8001f00:	08002361 	.word	0x08002361
 8001f04:	20000c30 	.word	0x20000c30
 8001f08:	2000086c 	.word	0x2000086c
 8001f0c:	08006208 	.word	0x08006208
 8001f10:	20000800 	.word	0x20000800
	...

08001f20 <thread4A>:
  chMtxUnlock(&m2);
  test_emit_token('A');
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread4A, p) {
 8001f20:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m1);
 8001f22:	4c06      	ldr	r4, [pc, #24]	; (8001f3c <thread4A+0x1c>)
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread4A, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8001f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f28:	f7ff fbda 	bl	80016e0 <chThdSleep>
  chMtxLock(&m1);
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff f837 	bl	8000fa0 <chMtxLock>
  chMtxUnlock(&m1);
 8001f32:	4620      	mov	r0, r4
}
 8001f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4A, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8001f38:	f7fe bf92 	b.w	8000e60 <chMtxUnlock>
 8001f3c:	2000086c 	.word	0x2000086c

08001f40 <test_005_001_execute.lto_priv.113>:

static void test_005_001_setup(void) {
  chMtxObjectInit(&m1);
}

static void test_005_001_execute(void) {
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001f42:	4f23      	ldr	r7, [pc, #140]	; (8001fd0 <test_005_001_execute.lto_priv.113+0x90>)
  {
    prio = chThdGetPriorityX();
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
 8001f44:	4e23      	ldr	r6, [pc, #140]	; (8001fd4 <test_005_001_execute.lto_priv.113+0x94>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	6894      	ldr	r4, [r2, #8]
  {
    chMtxLock(&m1);
 8001f4c:	4822      	ldr	r0, [pc, #136]	; (8001fd8 <test_005_001_execute.lto_priv.113+0x98>)
  {
    prio = chThdGetPriorityX();
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
 8001f4e:	6033      	str	r3, [r6, #0]
  }

  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
 8001f50:	2503      	movs	r5, #3
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
  {
    chMtxLock(&m1);
 8001f52:	f7ff f825 	bl	8000fa0 <chMtxLock>
  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8001f56:	1c61      	adds	r1, r4, #1
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <test_005_001_execute.lto_priv.113+0x9c>)
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <test_005_001_execute.lto_priv.113+0xa0>)
 8001f5c:	4821      	ldr	r0, [pc, #132]	; (8001fe4 <test_005_001_execute.lto_priv.113+0xa4>)
  }

  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
 8001f5e:	6035      	str	r5, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8001f60:	f003 fd36 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8001f64:	4d20      	ldr	r5, [pc, #128]	; (8001fe8 <test_005_001_execute.lto_priv.113+0xa8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8001f66:	1ca1      	adds	r1, r4, #2
  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8001f68:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <test_005_001_execute.lto_priv.113+0xac>)
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <test_005_001_execute.lto_priv.113+0xa0>)
 8001f6e:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <test_005_001_execute.lto_priv.113+0xb0>)
 8001f70:	f003 fd2e 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8001f74:	1ce1      	adds	r1, r4, #3
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8001f76:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <test_005_001_execute.lto_priv.113+0xb4>)
 8001f7a:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <test_005_001_execute.lto_priv.113+0xa0>)
 8001f7c:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <test_005_001_execute.lto_priv.113+0xb8>)
 8001f7e:	f003 fd27 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001f82:	1d21      	adds	r1, r4, #4
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8001f84:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <test_005_001_execute.lto_priv.113+0xbc>)
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <test_005_001_execute.lto_priv.113+0xa0>)
 8001f8a:	481d      	ldr	r0, [pc, #116]	; (8002000 <test_005_001_execute.lto_priv.113+0xc0>)
 8001f8c:	f003 fd20 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8001f90:	1d61      	adds	r1, r4, #5
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <test_005_001_execute.lto_priv.113+0xa0>)
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001f94:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <test_005_001_execute.lto_priv.113+0xc4>)
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <test_005_001_execute.lto_priv.113+0xc8>)
 8001f9a:	f003 fd19 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [5.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
 8001f9e:	2304      	movs	r3, #4
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8001fa0:	6128      	str	r0, [r5, #16]

  /* [5.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
  {
    chMtxUnlock(&m1);
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <test_005_001_execute.lto_priv.113+0x98>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  }

  /* [5.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
 8001fa4:	6033      	str	r3, [r6, #0]
  {
    chMtxUnlock(&m1);
 8001fa6:	f7fe ff5b 	bl	8000e60 <chMtxUnlock>
    test_wait_threads();
 8001faa:	f7ff f8f1 	bl	8001190 <test_wait_threads>
 8001fae:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <test_005_001_execute.lto_priv.113+0xcc>)
 8001fb2:	6898      	ldr	r0, [r3, #8]
 8001fb4:	1b00      	subs	r0, r0, r4
 8001fb6:	fab0 f080 	clz	r0, r0
 8001fba:	0940      	lsrs	r0, r0, #5
 8001fbc:	f7fe fb50 	bl	8000660 <_test_assert>
 8001fc0:	b100      	cbz	r0, 8001fc4 <test_005_001_execute.lto_priv.113+0x84>
 8001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8001fc4:	4912      	ldr	r1, [pc, #72]	; (8002010 <test_005_001_execute.lto_priv.113+0xd0>)
 8001fc6:	4813      	ldr	r0, [pc, #76]	; (8002014 <test_005_001_execute.lto_priv.113+0xd4>)
  }
}
 8001fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_set_step(4);
  {
    chMtxUnlock(&m1);
    test_wait_threads();
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
    test_assert_sequence("ABCDE", "invalid sequence");
 8001fcc:	f7fe bb20 	b.w	8000610 <_test_assert_sequence>
 8001fd0:	20001240 	.word	0x20001240
 8001fd4:	200011e4 	.word	0x200011e4
 8001fd8:	2000086c 	.word	0x2000086c
 8001fdc:	08006228 	.word	0x08006228
 8001fe0:	08002021 	.word	0x08002021
 8001fe4:	20000ae8 	.word	0x20000ae8
 8001fe8:	200011f4 	.word	0x200011f4
 8001fec:	08006220 	.word	0x08006220
 8001ff0:	20000c30 	.word	0x20000c30
 8001ff4:	08006200 	.word	0x08006200
 8001ff8:	20000d78 	.word	0x20000d78
 8001ffc:	08006204 	.word	0x08006204
 8002000:	20000ec0 	.word	0x20000ec0
 8002004:	080061fc 	.word	0x080061fc
 8002008:	20001008 	.word	0x20001008
 800200c:	08006208 	.word	0x08006208
 8002010:	080061c0 	.word	0x080061c0
 8002014:	08006224 	.word	0x08006224
	...

08002020 <thread1>:
  }
  while (chVTIsTimeWithinX(now, start, end));
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread1, p) {
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8002024:	4c05      	ldr	r4, [pc, #20]	; (800203c <thread1+0x1c>)
 8002026:	4620      	mov	r0, r4
 8002028:	f7fe ffba 	bl	8000fa0 <chMtxLock>
  test_emit_token(*(char *)p);
 800202c:	7828      	ldrb	r0, [r5, #0]
 800202e:	f7fe fa6f 	bl	8000510 <test_emit_token>
  chMtxUnlock(&m1);
 8002032:	4620      	mov	r0, r4
}
 8002034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8002038:	f7fe bf12 	b.w	8000e60 <chMtxUnlock>
 800203c:	2000086c 	.word	0x2000086c

08002040 <test_005_008_execute.lto_priv.122>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <test_005_008_execute.lto_priv.122+0x9c>)
static void test_005_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void test_005_008_execute(void) {
 8002042:	b570      	push	{r4, r5, r6, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002044:	699b      	ldr	r3, [r3, #24]

  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 8002046:	4e26      	ldr	r6, [pc, #152]	; (80020e0 <test_005_008_execute.lto_priv.122+0xa0>)
 8002048:	689d      	ldr	r5, [r3, #8]
 800204a:	2401      	movs	r4, #1
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800204c:	1929      	adds	r1, r5, r4
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <test_005_008_execute.lto_priv.122+0xa4>)
 8002050:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <test_005_008_execute.lto_priv.122+0xa8>)
 8002052:	4826      	ldr	r0, [pc, #152]	; (80020ec <test_005_008_execute.lto_priv.122+0xac>)

static void test_005_008_execute(void) {

  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 8002054:	6034      	str	r4, [r6, #0]
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002056:	f003 fcbb 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800205a:	4c25      	ldr	r4, [pc, #148]	; (80020f0 <test_005_008_execute.lto_priv.122+0xb0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800205c:	1ca9      	adds	r1, r5, #2
  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800205e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <test_005_008_execute.lto_priv.122+0xb4>)
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <test_005_008_execute.lto_priv.122+0xa8>)
 8002064:	4824      	ldr	r0, [pc, #144]	; (80020f8 <test_005_008_execute.lto_priv.122+0xb8>)
 8002066:	f003 fcb3 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800206a:	1ce9      	adds	r1, r5, #3
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800206c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <test_005_008_execute.lto_priv.122+0xbc>)
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <test_005_008_execute.lto_priv.122+0xa8>)
 8002072:	4823      	ldr	r0, [pc, #140]	; (8002100 <test_005_008_execute.lto_priv.122+0xc0>)
 8002074:	f003 fcac 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002078:	1d29      	adds	r1, r5, #4
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800207a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <test_005_008_execute.lto_priv.122+0xc4>)
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <test_005_008_execute.lto_priv.122+0xa8>)
 8002080:	4821      	ldr	r0, [pc, #132]	; (8002108 <test_005_008_execute.lto_priv.122+0xc8>)
 8002082:	f003 fca5 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002086:	1d69      	adds	r1, r5, #5
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002088:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <test_005_008_execute.lto_priv.122+0xcc>)
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <test_005_008_execute.lto_priv.122+0xa8>)
 800208e:	4820      	ldr	r0, [pc, #128]	; (8002110 <test_005_008_execute.lto_priv.122+0xd0>)
 8002090:	f003 fc9e 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [5.8.2] Broarcasting on the condition variable then waiting for
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
 8002094:	2302      	movs	r3, #2
 8002096:	6033      	str	r3, [r6, #0]
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002098:	6120      	str	r0, [r4, #16]
 800209a:	2320      	movs	r3, #32
 800209c:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80020a0:	4c1c      	ldr	r4, [pc, #112]	; (8002114 <test_005_008_execute.lto_priv.122+0xd4>)
 80020a2:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 80020a4:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80020a6:	bf18      	it	ne
 80020a8:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 80020ac:	d009      	beq.n	80020c2 <test_005_008_execute.lto_priv.122+0x82>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80020ae:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80020b0:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80020b2:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80020b4:	6022      	str	r2, [r4, #0]
 80020b6:	f7fe fd5b 	bl	8000b70 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	6245      	str	r5, [r0, #36]	; 0x24
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 80020be:	42a3      	cmp	r3, r4
 80020c0:	d1f5      	bne.n	80020ae <test_005_008_execute.lto_priv.122+0x6e>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 80020c2:	f7fe fc7d 	bl	80009c0 <chSchRescheduleS>
 80020c6:	2300      	movs	r3, #0
 80020c8:	f383 8811 	msr	BASEPRI, r3
  /* [5.8.2] Broarcasting on the condition variable then waiting for
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
  {
    chCondBroadcast(&c1);
    test_wait_threads();
 80020cc:	f7ff f860 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 80020d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
  {
    chCondBroadcast(&c1);
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
 80020d4:	4910      	ldr	r1, [pc, #64]	; (8002118 <test_005_008_execute.lto_priv.122+0xd8>)
 80020d6:	4811      	ldr	r0, [pc, #68]	; (800211c <test_005_008_execute.lto_priv.122+0xdc>)
 80020d8:	f7fe ba9a 	b.w	8000610 <_test_assert_sequence>
 80020dc:	20001240 	.word	0x20001240
 80020e0:	200011e4 	.word	0x200011e4
 80020e4:	08006228 	.word	0x08006228
 80020e8:	08002421 	.word	0x08002421
 80020ec:	20000ae8 	.word	0x20000ae8
 80020f0:	200011f4 	.word	0x200011f4
 80020f4:	08006220 	.word	0x08006220
 80020f8:	20000c30 	.word	0x20000c30
 80020fc:	08006200 	.word	0x08006200
 8002100:	20000d78 	.word	0x20000d78
 8002104:	08006204 	.word	0x08006204
 8002108:	20000ec0 	.word	0x20000ec0
 800210c:	080061fc 	.word	0x080061fc
 8002110:	20001008 	.word	0x20001008
 8002114:	2000084c 	.word	0x2000084c
 8002118:	080061c0 	.word	0x080061c0
 800211c:	08006224 	.word	0x08006224

08002120 <test_005_007_execute.lto_priv.120>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <test_005_007_execute.lto_priv.120+0xa4>)
static void test_005_007_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void test_005_007_execute(void) {
 8002122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002126:	699b      	ldr	r3, [r3, #24]
  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002128:	4e27      	ldr	r6, [pc, #156]	; (80021c8 <test_005_007_execute.lto_priv.120+0xa8>)
 800212a:	689f      	ldr	r7, [r3, #8]
 800212c:	4d27      	ldr	r5, [pc, #156]	; (80021cc <test_005_007_execute.lto_priv.120+0xac>)

static void test_005_007_execute(void) {

  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 800212e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80021f0 <test_005_007_execute.lto_priv.120+0xd0>
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002132:	1c79      	adds	r1, r7, #1
 8002134:	4632      	mov	r2, r6
 8002136:	4628      	mov	r0, r5

static void test_005_007_execute(void) {

  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 8002138:	2401      	movs	r4, #1
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <test_005_007_execute.lto_priv.120+0xb0>)

static void test_005_007_execute(void) {

  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 800213c:	f8c8 4000 	str.w	r4, [r8]
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002140:	f003 fc46 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002144:	4c23      	ldr	r4, [pc, #140]	; (80021d4 <test_005_007_execute.lto_priv.120+0xb4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002146:	1cb9      	adds	r1, r7, #2
  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002148:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800214a:	4632      	mov	r2, r6
 800214c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <test_005_007_execute.lto_priv.120+0xb8>)
 8002152:	f003 fc3d 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002156:	1cf9      	adds	r1, r7, #3
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002158:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800215a:	4632      	mov	r2, r6
 800215c:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <test_005_007_execute.lto_priv.120+0xbc>)
 8002162:	f003 fc35 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002166:	1d39      	adds	r1, r7, #4
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002168:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800216a:	4632      	mov	r2, r6
 800216c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <test_005_007_execute.lto_priv.120+0xc0>)
 8002172:	f003 fc2d 	bl	80059d0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002176:	1d79      	adds	r1, r7, #5
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002178:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800217a:	4632      	mov	r2, r6
 800217c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <test_005_007_execute.lto_priv.120+0xc4>)
 8002182:	f003 fc25 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [5.7.2] Atomically signaling the condition variable five times
     then waiting for the threads to terminate in priority order, the
     order is tested.*/
  test_set_step(2);
 8002186:	2302      	movs	r3, #2
 8002188:	f8c8 3000 	str.w	r3, [r8]
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800218c:	6120      	str	r0, [r4, #16]
 800218e:	2320      	movs	r3, #32
 8002190:	f383 8811 	msr	BASEPRI, r3
     then waiting for the threads to terminate in priority order, the
     order is tested.*/
  test_set_step(2);
  {
    chSysLock();
    chCondSignalI(&c1);
 8002194:	f003 fd04 	bl	8005ba0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 8002198:	f003 fd02 	bl	8005ba0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 800219c:	f003 fd00 	bl	8005ba0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 80021a0:	f003 fcfe 	bl	8005ba0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 80021a4:	f003 fcfc 	bl	8005ba0 <chCondSignalI.constprop.54>
    chSchRescheduleS();
 80021a8:	f7fe fc0a 	bl	80009c0 <chSchRescheduleS>
 80021ac:	2300      	movs	r3, #0
 80021ae:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_wait_threads();
 80021b2:	f7fe ffed 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 80021b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chCondSignalI(&c1);
    chCondSignalI(&c1);
    chSchRescheduleS();
    chSysUnlock();
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
 80021ba:	490b      	ldr	r1, [pc, #44]	; (80021e8 <test_005_007_execute.lto_priv.120+0xc8>)
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <test_005_007_execute.lto_priv.120+0xcc>)
 80021be:	f7fe ba27 	b.w	8000610 <_test_assert_sequence>
 80021c2:	bf00      	nop
 80021c4:	20001240 	.word	0x20001240
 80021c8:	08002421 	.word	0x08002421
 80021cc:	20000ae8 	.word	0x20000ae8
 80021d0:	08006228 	.word	0x08006228
 80021d4:	200011f4 	.word	0x200011f4
 80021d8:	08006220 	.word	0x08006220
 80021dc:	08006200 	.word	0x08006200
 80021e0:	08006204 	.word	0x08006204
 80021e4:	080061fc 	.word	0x080061fc
 80021e8:	080061c0 	.word	0x080061c0
 80021ec:	08006224 	.word	0x08006224
 80021f0:	200011e4 	.word	0x200011e4
	...

08002200 <test_005_005_execute.lto_priv.118>:

static void test_005_005_setup(void) {
  chMtxObjectInit(&m1);
}

static void test_005_005_execute(void) {
 8002200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002204:	4d4d      	ldr	r5, [pc, #308]	; (800233c <test_005_005_execute.lto_priv.118+0x13c>)
    prio = chThdGetPriorityX();
  }

  /* [5.5.2] Locking the mutex first time, it must be possible because
     it is not owned.*/
  test_set_step(2);
 8002206:	4c4e      	ldr	r4, [pc, #312]	; (8002340 <test_005_005_execute.lto_priv.118+0x140>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002208:	69aa      	ldr	r2, [r5, #24]
 800220a:	2302      	movs	r3, #2
 800220c:	6896      	ldr	r6, [r2, #8]
 800220e:	6023      	str	r3, [r4, #0]
  {
    b = chMtxTryLock(&m1);
 8002210:	f003 fc8e 	bl	8005b30 <chMtxTryLock.constprop.57>
    test_assert(b, "already locked");
 8002214:	494b      	ldr	r1, [pc, #300]	; (8002344 <test_005_005_execute.lto_priv.118+0x144>)
 8002216:	f7fe fa23 	bl	8000660 <_test_assert>
 800221a:	b108      	cbz	r0, 8002220 <test_005_005_execute.lto_priv.118+0x20>
 800221c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  /* [5.5.3] Locking the mutex second time, it must fail because it is
     already owned.*/
  test_set_step(3);
 8002220:	2303      	movs	r3, #3
 8002222:	6023      	str	r3, [r4, #0]
  {
    b = chMtxTryLock(&m1);
 8002224:	f003 fc84 	bl	8005b30 <chMtxTryLock.constprop.57>
    test_assert(!b, "not locked");
 8002228:	f080 0001 	eor.w	r0, r0, #1
 800222c:	b2c0      	uxtb	r0, r0
 800222e:	4946      	ldr	r1, [pc, #280]	; (8002348 <test_005_005_execute.lto_priv.118+0x148>)
 8002230:	f7fe fa16 	bl	8000660 <_test_assert>
 8002234:	2800      	cmp	r0, #0
 8002236:	d1f1      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>

  /* [5.5.4] Unlocking the mutex then it must not be owned anymore and
     the queue must be empty.*/
  test_set_step(4);
  {
    chMtxUnlock(&m1);
 8002238:	4f44      	ldr	r7, [pc, #272]	; (800234c <test_005_005_execute.lto_priv.118+0x14c>)
    test_assert(!b, "not locked");
  }

  /* [5.5.4] Unlocking the mutex then it must not be owned anymore and
     the queue must be empty.*/
  test_set_step(4);
 800223a:	2304      	movs	r3, #4
  {
    chMtxUnlock(&m1);
 800223c:	4638      	mov	r0, r7
    test_assert(!b, "not locked");
  }

  /* [5.5.4] Unlocking the mutex then it must not be owned anymore and
     the queue must be empty.*/
  test_set_step(4);
 800223e:	6023      	str	r3, [r4, #0]
  {
    chMtxUnlock(&m1);
 8002240:	f7fe fe0e 	bl	8000e60 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8002244:	68b8      	ldr	r0, [r7, #8]
 8002246:	4942      	ldr	r1, [pc, #264]	; (8002350 <test_005_005_execute.lto_priv.118+0x150>)
 8002248:	fab0 f080 	clz	r0, r0
 800224c:	0940      	lsrs	r0, r0, #5
 800224e:	f7fe fa07 	bl	8000660 <_test_assert>
 8002252:	2800      	cmp	r0, #0
 8002254:	d1e2      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	493e      	ldr	r1, [pc, #248]	; (8002354 <test_005_005_execute.lto_priv.118+0x154>)
 800225a:	1bc0      	subs	r0, r0, r7
 800225c:	fab0 f080 	clz	r0, r0
 8002260:	0940      	lsrs	r0, r0, #5
 8002262:	f7fe f9fd 	bl	8000660 <_test_assert>
 8002266:	2800      	cmp	r0, #0
 8002268:	d1d8      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
 800226a:	69aa      	ldr	r2, [r5, #24]
  }

  /* [5.5.5] Testing that priority has not changed after operations.*/
  test_set_step(5);
 800226c:	2305      	movs	r3, #5
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800226e:	6890      	ldr	r0, [r2, #8]
 8002270:	4939      	ldr	r1, [pc, #228]	; (8002358 <test_005_005_execute.lto_priv.118+0x158>)
 8002272:	1b80      	subs	r0, r0, r6
 8002274:	fab0 f080 	clz	r0, r0
 8002278:	0940      	lsrs	r0, r0, #5
    test_assert(m1.owner == NULL, "still owned");
    test_assert(queue_isempty(&m1.queue), "queue not empty");
  }

  /* [5.5.5] Testing that priority has not changed after operations.*/
  test_set_step(5);
 800227a:	6023      	str	r3, [r4, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800227c:	f7fe f9f0 	bl	8000660 <_test_assert>
 8002280:	2800      	cmp	r0, #0
 8002282:	d1cb      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
  }

  /* [5.5.6] Testing chMtxUnlockAll() behavior.*/
  test_set_step(6);
 8002284:	2306      	movs	r3, #6
 8002286:	6023      	str	r3, [r4, #0]
  {
    b = chMtxTryLock(&m1);
 8002288:	f003 fc52 	bl	8005b30 <chMtxTryLock.constprop.57>
    test_assert(b, "already locked");
 800228c:	492d      	ldr	r1, [pc, #180]	; (8002344 <test_005_005_execute.lto_priv.118+0x144>)
 800228e:	f7fe f9e7 	bl	8000660 <_test_assert>
 8002292:	2800      	cmp	r0, #0
 8002294:	d1c2      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
    b = chMtxTryLock(&m1);
 8002296:	f003 fc4b 	bl	8005b30 <chMtxTryLock.constprop.57>
    test_assert(!b, "not locked");
 800229a:	f080 0001 	eor.w	r0, r0, #1
 800229e:	b2c0      	uxtb	r0, r0
 80022a0:	4929      	ldr	r1, [pc, #164]	; (8002348 <test_005_005_execute.lto_priv.118+0x148>)
 80022a2:	f7fe f9dd 	bl	8000660 <_test_assert>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d1b8      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80022aa:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80022ae:	2320      	movs	r3, #32
 80022b0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 80022b4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80022b8:	b1eb      	cbz	r3, 80022f6 <test_005_005_execute.lto_priv.118+0xf6>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 80022ba:	4681      	mov	r9, r0
 80022bc:	e00c      	b.n	80022d8 <test_005_005_execute.lto_priv.118+0xd8>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
        mp->next = tp->mtxlist;
 80022be:	6b90      	ldr	r0, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	60d8      	str	r0, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
 80022c8:	609a      	str	r2, [r3, #8]
        mp->next = tp->mtxlist;
        tp->mtxlist = mp;
        (void) chSchReadyI(tp);
 80022ca:	4610      	mov	r0, r2
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
        mp->next = tp->mtxlist;
        tp->mtxlist = mp;
 80022cc:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 80022ce:	f7fe fc4f 	bl	8000b70 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
 80022d2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80022d6:	b143      	cbz	r3, 80022ea <test_005_005_execute.lto_priv.118+0xea>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80022d8:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->mtxlist;
      ctp->mtxlist = mp->next;
 80022da:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 80022dc:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->mtxlist;
      ctp->mtxlist = mp->next;
 80022de:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 80022e2:	d1ec      	bne.n	80022be <test_005_005_execute.lto_priv.118+0xbe>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 80022e4:	f8c3 9008 	str.w	r9, [r3, #8]
 80022e8:	e7f3      	b.n	80022d2 <test_005_005_execute.lto_priv.118+0xd2>
      }
    } while (ctp->mtxlist != NULL);
    ctp->prio = ctp->realprio;
 80022ea:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80022ee:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 80022f2:	f7fe fb65 	bl	80009c0 <chSchRescheduleS>
 80022f6:	2300      	movs	r3, #0
 80022f8:	f383 8811 	msr	BASEPRI, r3

    chMtxUnlockAll();
    test_assert(m1.owner == NULL, "still owned");
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	4914      	ldr	r1, [pc, #80]	; (8002350 <test_005_005_execute.lto_priv.118+0x150>)
 8002300:	fab0 f080 	clz	r0, r0
 8002304:	0940      	lsrs	r0, r0, #5
 8002306:	4f11      	ldr	r7, [pc, #68]	; (800234c <test_005_005_execute.lto_priv.118+0x14c>)
 8002308:	f7fe f9aa 	bl	8000660 <_test_assert>
 800230c:	2800      	cmp	r0, #0
 800230e:	d185      	bne.n	800221c <test_005_005_execute.lto_priv.118+0x1c>
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	4910      	ldr	r1, [pc, #64]	; (8002354 <test_005_005_execute.lto_priv.118+0x154>)
 8002314:	1bc7      	subs	r7, r0, r7
 8002316:	4278      	negs	r0, r7
 8002318:	4178      	adcs	r0, r7
 800231a:	f7fe f9a1 	bl	8000660 <_test_assert>
 800231e:	2800      	cmp	r0, #0
 8002320:	f47f af7c 	bne.w	800221c <test_005_005_execute.lto_priv.118+0x1c>
 8002324:	69aa      	ldr	r2, [r5, #24]
  }

  /* [5.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
 8002326:	2307      	movs	r3, #7
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002328:	6890      	ldr	r0, [r2, #8]
    test_assert(m1.owner == NULL, "still owned");
    test_assert(queue_isempty(&m1.queue), "queue not empty");
  }

  /* [5.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
 800232a:	6023      	str	r3, [r4, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800232c:	1b82      	subs	r2, r0, r6
 800232e:	4250      	negs	r0, r2
 8002330:	4909      	ldr	r1, [pc, #36]	; (8002358 <test_005_005_execute.lto_priv.118+0x158>)
 8002332:	4150      	adcs	r0, r2
  }
}
 8002334:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  }

  /* [5.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002338:	f7fe b992 	b.w	8000660 <_test_assert>
 800233c:	20001240 	.word	0x20001240
 8002340:	200011e4 	.word	0x200011e4
 8002344:	0800622c 	.word	0x0800622c
 8002348:	0800623c 	.word	0x0800623c
 800234c:	2000086c 	.word	0x2000086c
 8002350:	08006248 	.word	0x08006248
 8002354:	08006254 	.word	0x08006254
 8002358:	08006208 	.word	0x08006208
 800235c:	00000000 	.word	0x00000000

08002360 <thread4B>:
  chThdSleepMilliseconds(50);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static THD_FUNCTION(thread4B, p) {
 8002360:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
 8002362:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002366:	f7ff f9bb 	bl	80016e0 <chThdSleep>
 800236a:	2320      	movs	r3, #32
 800236c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8002370:	4c06      	ldr	r4, [pc, #24]	; (800238c <thread4B+0x2c>)
 8002372:	4620      	mov	r0, r4
 8002374:	f7fe fdac 	bl	8000ed0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8002378:	4620      	mov	r0, r4
 800237a:	f7fe fd49 	bl	8000e10 <chMtxUnlockS>
  chSchRescheduleS();
 800237e:	f7fe fb1f 	bl	80009c0 <chSchRescheduleS>
 8002382:	2300      	movs	r3, #0
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	20000800 	.word	0x20000800

08002390 <thread8>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static THD_FUNCTION(thread8, p) {
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8002394:	481c      	ldr	r0, [pc, #112]	; (8002408 <thread8+0x78>)
 8002396:	f7fe fe03 	bl	8000fa0 <chMtxLock>
  chMtxLock(&m1);
 800239a:	481c      	ldr	r0, [pc, #112]	; (800240c <thread8+0x7c>)
 800239c:	f7fe fe00 	bl	8000fa0 <chMtxLock>
 80023a0:	2320      	movs	r3, #32
 80023a2:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80023a6:	4d1a      	ldr	r5, [pc, #104]	; (8002410 <thread8+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 80023a8:	69ab      	ldr	r3, [r5, #24]
 80023aa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80023ac:	4630      	mov	r0, r6
 80023ae:	f7fe fd2f 	bl	8000e10 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <thread8+0x84>)
 80023b4:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80023b6:	4610      	mov	r0, r2
 80023b8:	4613      	mov	r3, r2
 80023ba:	6262      	str	r2, [r4, #36]	; 0x24
 80023bc:	e003      	b.n	80023c6 <thread8+0x36>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	68a2      	ldr	r2, [r4, #8]
 80023c2:	4291      	cmp	r1, r2
 80023c4:	d302      	bcc.n	80023cc <thread8+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 80023c6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80023c8:	4283      	cmp	r3, r0
 80023ca:	d1f8      	bne.n	80023be <thread8+0x2e>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80023cc:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80023ce:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 80023d0:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80023d2:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80023d4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80023d6:	605c      	str	r4, [r3, #4]
 80023d8:	f7fe fb6a 	bl	8000ab0 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 80023dc:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	3301      	adds	r3, #1
 80023e2:	d002      	beq.n	80023ea <thread8+0x5a>
    chMtxLockS(mp);
 80023e4:	4630      	mov	r0, r6
 80023e6:	f7fe fd73 	bl	8000ed0 <chMtxLockS>
 80023ea:	2300      	movs	r3, #0
 80023ec:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80023f0:	7838      	ldrb	r0, [r7, #0]
 80023f2:	f7fe f88d 	bl	8000510 <test_emit_token>
  chMtxUnlock(&m1);
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <thread8+0x7c>)
 80023f8:	f7fe fd32 	bl	8000e60 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 80023fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8002400:	4801      	ldr	r0, [pc, #4]	; (8002408 <thread8+0x78>)
 8002402:	f7fe bd2d 	b.w	8000e60 <chMtxUnlock>
 8002406:	bf00      	nop
 8002408:	20000800 	.word	0x20000800
 800240c:	2000086c 	.word	0x2000086c
 8002410:	20001240 	.word	0x20001240
 8002414:	2000084c 	.word	0x2000084c
	...

08002420 <thread6>:
  chSchRescheduleS();
  chSysUnlock();
}

#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
static THD_FUNCTION(thread6, p) {
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8002424:	4816      	ldr	r0, [pc, #88]	; (8002480 <thread6+0x60>)
 8002426:	f7fe fdbb 	bl	8000fa0 <chMtxLock>
 800242a:	2320      	movs	r3, #32
 800242c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <thread6+0x64>)
 8002432:	699c      	ldr	r4, [r3, #24]
 8002434:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8002436:	4628      	mov	r0, r5
 8002438:	f7fe fcea 	bl	8000e10 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <thread6+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800243e:	4610      	mov	r0, r2
 8002440:	4613      	mov	r3, r2
 8002442:	6262      	str	r2, [r4, #36]	; 0x24
 8002444:	e003      	b.n	800244e <thread6+0x2e>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	68a2      	ldr	r2, [r4, #8]
 800244a:	4291      	cmp	r1, r2
 800244c:	d302      	bcc.n	8002454 <thread6+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 800244e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002450:	4283      	cmp	r3, r0
 8002452:	d1f8      	bne.n	8002446 <thread6+0x26>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8002454:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8002456:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8002458:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800245a:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 800245c:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800245e:	605c      	str	r4, [r3, #4]
 8002460:	f7fe fb26 	bl	8000ab0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
  chMtxLockS(mp);
 8002464:	4628      	mov	r0, r5
 8002466:	f7fe fd33 	bl	8000ed0 <chMtxLockS>
 800246a:	2300      	movs	r3, #0
 800246c:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8002470:	7830      	ldrb	r0, [r6, #0]
 8002472:	f7fe f84d 	bl	8000510 <test_emit_token>
  chMtxUnlock(&m1);
}
 8002476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread6, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 800247a:	4801      	ldr	r0, [pc, #4]	; (8002480 <thread6+0x60>)
 800247c:	f7fe bcf0 	b.w	8000e60 <chMtxUnlock>
 8002480:	2000086c 	.word	0x2000086c
 8002484:	20001240 	.word	0x20001240
 8002488:	2000084c 	.word	0x2000084c
 800248c:	00000000 	.word	0x00000000

08002490 <test_004_006_execute.lto_priv.111>:
}

static void test_004_006_execute(void) {
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [4.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8002494:	4f60      	ldr	r7, [pc, #384]	; (8002618 <test_004_006_execute.lto_priv.111+0x188>)

static void test_004_006_teardown(void) {
  test_wait_threads();
}

static void test_004_006_execute(void) {
 8002496:	b084      	sub	sp, #16
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002498:	ac01      	add	r4, sp, #4
  binary_semaphore_t bsem;
  msg_t msg;

  /* [4.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 800249a:	2301      	movs	r3, #1
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800249c:	2600      	movs	r6, #0
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	9401      	str	r4, [sp, #4]
  tqp->prev = (thread_t *)tqp;
 80024a2:	9402      	str	r4, [sp, #8]
 80024a4:	9603      	str	r6, [sp, #12]
 80024a6:	f04f 0820 	mov.w	r8, #32
 80024aa:	f388 8811 	msr	BASEPRI, r8
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80024ae:	9803      	ldr	r0, [sp, #12]
 80024b0:	495a      	ldr	r1, [pc, #360]	; (800261c <test_004_006_execute.lto_priv.111+0x18c>)
 80024b2:	42b0      	cmp	r0, r6
 80024b4:	bfcc      	ite	gt
 80024b6:	2000      	movgt	r0, #0
 80024b8:	2001      	movle	r0, #1
 80024ba:	f7fe f8d1 	bl	8000660 <_test_assert>
 80024be:	b120      	cbz	r0, 80024ca <test_004_006_execute.lto_priv.111+0x3a>
 80024c0:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 80024c4:	b004      	add	sp, #16
 80024c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024ca:	4605      	mov	r5, r0
 80024cc:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }

  /* [4.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 80024d0:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {

  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 80024d2:	4601      	mov	r1, r0
 80024d4:	4620      	mov	r0, r4
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	f7fe fea2 	bl	8001220 <chSemReset>
 80024dc:	f388 8811 	msr	BASEPRI, r8
  {
    chBSemReset(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80024e0:	9803      	ldr	r0, [sp, #12]
 80024e2:	494e      	ldr	r1, [pc, #312]	; (800261c <test_004_006_execute.lto_priv.111+0x18c>)
 80024e4:	2800      	cmp	r0, #0
 80024e6:	bfcc      	ite	gt
 80024e8:	2000      	movgt	r0, #0
 80024ea:	2001      	movle	r0, #1
 80024ec:	f7fe f8b8 	bl	8000660 <_test_assert>
 80024f0:	4606      	mov	r6, r0
 80024f2:	b120      	cbz	r0, 80024fe <test_004_006_execute.lto_priv.111+0x6e>
 80024f4:	f385 8811 	msr	BASEPRI, r5
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 80024f8:	b004      	add	sp, #16
 80024fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024fe:	f380 8811 	msr	BASEPRI, r0
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <test_004_006_execute.lto_priv.111+0x190>)
    chBSemReset(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }

  /* [4.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 8002504:	2503      	movs	r5, #3
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002506:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8002508:	4846      	ldr	r0, [pc, #280]	; (8002624 <test_004_006_execute.lto_priv.111+0x194>)
 800250a:	6891      	ldr	r1, [r2, #8]
 800250c:	4623      	mov	r3, r4
 800250e:	3901      	subs	r1, #1
 8002510:	4a45      	ldr	r2, [pc, #276]	; (8002628 <test_004_006_execute.lto_priv.111+0x198>)
    chBSemReset(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }

  /* [4.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 8002512:	603d      	str	r5, [r7, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8002514:	f003 fa5c 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002518:	4a44      	ldr	r2, [pc, #272]	; (800262c <test_004_006_execute.lto_priv.111+0x19c>)
                                   chThdGetPriorityX()-1, thread4, &bsem);
  }

  /* [4.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 800251a:	2304      	movs	r3, #4
  }

  /* [4.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800251c:	6010      	str	r0, [r2, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->sem);
 800251e:	4620      	mov	r0, r4
                                   chThdGetPriorityX()-1, thread4, &bsem);
  }

  /* [4.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	f7fe fafd 	bl	8000b20 <chSemWait>
 8002526:	4605      	mov	r5, r0
 8002528:	f388 8811 	msr	BASEPRI, r8
  {
    msg = chBSemWait(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800252c:	9803      	ldr	r0, [sp, #12]
 800252e:	493b      	ldr	r1, [pc, #236]	; (800261c <test_004_006_execute.lto_priv.111+0x18c>)
 8002530:	2800      	cmp	r0, #0
 8002532:	bfcc      	ite	gt
 8002534:	2000      	movgt	r0, #0
 8002536:	2001      	movle	r0, #1
 8002538:	f7fe f892 	bl	8000660 <_test_assert>
 800253c:	2800      	cmp	r0, #0
 800253e:	d1bf      	bne.n	80024c0 <test_004_006_execute.lto_priv.111+0x30>
 8002540:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8002544:	fab5 f085 	clz	r0, r5
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <test_004_006_execute.lto_priv.111+0x1a0>)
 800254a:	0940      	lsrs	r0, r0, #5
 800254c:	f7fe f888 	bl	8000660 <_test_assert>
 8002550:	2800      	cmp	r0, #0
 8002552:	d1b7      	bne.n	80024c4 <test_004_006_execute.lto_priv.111+0x34>
  }

  /* [4.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8002554:	2305      	movs	r3, #5
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	f388 8811 	msr	BASEPRI, r8
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 800255c:	9b03      	ldr	r3, [sp, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	dd23      	ble.n	80025aa <test_004_006_execute.lto_priv.111+0x11a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002562:	f7fe fa2d 	bl	80009c0 <chSchRescheduleS>
 8002566:	2500      	movs	r5, #0
 8002568:	f385 8811 	msr	BASEPRI, r5
 800256c:	2620      	movs	r6, #32
 800256e:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8002572:	9803      	ldr	r0, [sp, #12]
 8002574:	492f      	ldr	r1, [pc, #188]	; (8002634 <test_004_006_execute.lto_priv.111+0x1a4>)
 8002576:	42a8      	cmp	r0, r5
 8002578:	bfd4      	ite	le
 800257a:	2000      	movle	r0, #0
 800257c:	2001      	movgt	r0, #1
 800257e:	f7fe f86f 	bl	8000660 <_test_assert>
 8002582:	4680      	mov	r8, r0
 8002584:	2800      	cmp	r0, #0
 8002586:	d1b5      	bne.n	80024f4 <test_004_006_execute.lto_priv.111+0x64>
 8002588:	f380 8811 	msr	BASEPRI, r0
 800258c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8002590:	9803      	ldr	r0, [sp, #12]
 8002592:	4929      	ldr	r1, [pc, #164]	; (8002638 <test_004_006_execute.lto_priv.111+0x1a8>)
 8002594:	f1a0 0001 	sub.w	r0, r0, #1
 8002598:	fab0 f080 	clz	r0, r0
 800259c:	0940      	lsrs	r0, r0, #5
 800259e:	f7fe f85f 	bl	8000660 <_test_assert>
 80025a2:	b130      	cbz	r0, 80025b2 <test_004_006_execute.lto_priv.111+0x122>
 80025a4:	f388 8811 	msr	BASEPRI, r8
 80025a8:	e78c      	b.n	80024c4 <test_004_006_execute.lto_priv.111+0x34>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
    chSemSignalI(&bsp->sem);
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7fe fe08 	bl	80011c0 <chSemSignalI>
 80025b0:	e7d7      	b.n	8002562 <test_004_006_execute.lto_priv.111+0xd2>
 80025b2:	f380 8811 	msr	BASEPRI, r0
  }

  /* [4.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 80025b6:	2306      	movs	r3, #6
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	dd22      	ble.n	800260a <test_004_006_execute.lto_priv.111+0x17a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80025c4:	f7fe f9fc 	bl	80009c0 <chSchRescheduleS>
 80025c8:	2600      	movs	r6, #0
 80025ca:	f386 8811 	msr	BASEPRI, r6
 80025ce:	2520      	movs	r5, #32
 80025d0:	f385 8811 	msr	BASEPRI, r5
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80025d4:	9803      	ldr	r0, [sp, #12]
 80025d6:	4919      	ldr	r1, [pc, #100]	; (800263c <test_004_006_execute.lto_priv.111+0x1ac>)
 80025d8:	42b0      	cmp	r0, r6
 80025da:	bfd4      	ite	le
 80025dc:	2000      	movle	r0, #0
 80025de:	2001      	movgt	r0, #1
 80025e0:	f7fe f83e 	bl	8000660 <_test_assert>
 80025e4:	4604      	mov	r4, r0
 80025e6:	2800      	cmp	r0, #0
 80025e8:	f47f af6a 	bne.w	80024c0 <test_004_006_execute.lto_priv.111+0x30>
 80025ec:	f380 8811 	msr	BASEPRI, r0
 80025f0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80025f4:	9803      	ldr	r0, [sp, #12]
 80025f6:	4910      	ldr	r1, [pc, #64]	; (8002638 <test_004_006_execute.lto_priv.111+0x1a8>)
 80025f8:	1e43      	subs	r3, r0, #1
 80025fa:	4258      	negs	r0, r3
 80025fc:	4158      	adcs	r0, r3
 80025fe:	f7fe f82f 	bl	8000660 <_test_assert>
 8002602:	b130      	cbz	r0, 8002612 <test_004_006_execute.lto_priv.111+0x182>
 8002604:	f384 8811 	msr	BASEPRI, r4
 8002608:	e75c      	b.n	80024c4 <test_004_006_execute.lto_priv.111+0x34>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
    chSemSignalI(&bsp->sem);
 800260a:	4620      	mov	r0, r4
 800260c:	f7fe fdd8 	bl	80011c0 <chSemSignalI>
 8002610:	e7d8      	b.n	80025c4 <test_004_006_execute.lto_priv.111+0x134>
 8002612:	f380 8811 	msr	BASEPRI, r0
 8002616:	e755      	b.n	80024c4 <test_004_006_execute.lto_priv.111+0x34>
 8002618:	200011e4 	.word	0x200011e4
 800261c:	08006264 	.word	0x08006264
 8002620:	20001240 	.word	0x20001240
 8002624:	20000ae8 	.word	0x20000ae8
 8002628:	08002b71 	.word	0x08002b71
 800262c:	200011f4 	.word	0x200011f4
 8002630:	08006270 	.word	0x08006270
 8002634:	08006284 	.word	0x08006284
 8002638:	08006290 	.word	0x08006290
 800263c:	08006268 	.word	0x08006268

08002640 <test_004_005_setup.lto_priv.107>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002640:	4b02      	ldr	r3, [pc, #8]	; (800264c <test_004_005_setup.lto_priv.107+0xc>)
 8002642:	2200      	movs	r2, #0
 8002644:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002646:	605b      	str	r3, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	4770      	bx	lr
 800264c:	200012f0 	.word	0x200012f0

08002650 <test_004_004_setup.lto_priv.105>:
 8002650:	f7ff bff6 	b.w	8002640 <test_004_005_setup.lto_priv.107>
	...

08002660 <test_004_003_setup.lto_priv.103>:
 8002660:	f7ff bfee 	b.w	8002640 <test_004_005_setup.lto_priv.107>
	...

08002670 <test_004_002_setup.lto_priv.101>:
 8002670:	f7ff bfe6 	b.w	8002640 <test_004_005_setup.lto_priv.107>
	...

08002680 <test_004_001_setup.lto_priv.98>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <test_004_001_setup.lto_priv.98+0xc>)
 8002682:	2201      	movs	r2, #1
 8002684:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002686:	605b      	str	r3, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	4770      	bx	lr
 800268c:	200012f0 	.word	0x200012f0

08002690 <test_003_001_setup.lto_priv.96>:
 *   the state of the reference are tested.
 * .
 */

static void test_003_001_setup(void) {
  tr1 = NULL;
 8002690:	4b01      	ldr	r3, [pc, #4]	; (8002698 <test_003_001_setup.lto_priv.96+0x8>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	4770      	bx	lr
 8002698:	20000880 	.word	0x20000880
 800269c:	00000000 	.word	0x00000000

080026a0 <test_001_004_execute.lto_priv.91>:
 80026a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a4:	4619      	mov	r1, r3

static void test_001_004_execute(void) {

  /* [1.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <test_001_004_execute.lto_priv.91+0x18>)
 80026a8:	2001      	movs	r0, #1
 80026aa:	6010      	str	r0, [r2, #0]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d0fc      	beq.n	80026ae <test_001_004_execute.lto_priv.91+0xe>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	200011e4 	.word	0x200011e4
 80026bc:	00000000 	.word	0x00000000

080026c0 <test_001_003_execute.lto_priv.90>:

static void test_001_003_execute(void) {

  /* [1.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <test_001_003_execute.lto_priv.90+0x20>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	2320      	movs	r3, #32
 80026c8:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026cc:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ce:	b672      	cpsid	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80026d0:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026d4:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80026d6:	2300      	movs	r3, #0
 80026d8:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026dc:	b662      	cpsie	i
 80026de:	4770      	bx	lr
 80026e0:	200011e4 	.word	0x200011e4
	...

080026f0 <test_004_005_execute.lto_priv.109>:

static void test_004_005_teardown(void) {
  test_wait_threads();
}

static void test_004_005_execute(void) {
 80026f0:	b538      	push	{r3, r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <test_004_005_execute.lto_priv.109+0x7c>)

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 80026f4:	2401      	movs	r4, #1
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4d1d      	ldr	r5, [pc, #116]	; (8002770 <test_004_005_execute.lto_priv.109+0x80>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <test_004_005_execute.lto_priv.109+0x84>)
 80026fe:	4421      	add	r1, r4
 8002700:	2300      	movs	r3, #0
 8002702:	481d      	ldr	r0, [pc, #116]	; (8002778 <test_004_005_execute.lto_priv.109+0x88>)

static void test_004_005_execute(void) {

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8002704:	602c      	str	r4, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8002706:	f003 f963 	bl	80059d0 <chThdCreateStatic.constprop.65>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next == (const thread_t *)tqp);
 800270a:	4c1c      	ldr	r4, [pc, #112]	; (800277c <test_004_005_execute.lto_priv.109+0x8c>)
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <test_004_005_execute.lto_priv.109+0x90>)
  }

  /* [4.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800270e:	2302      	movs	r3, #2

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8002710:	6010      	str	r0, [r2, #0]
  }

  /* [4.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8002712:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8002714:	f003 f9d4 	bl	8005ac0 <chSemSignalWait.constprop.59>
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	491a      	ldr	r1, [pc, #104]	; (8002784 <test_004_005_execute.lto_priv.109+0x94>)
 800271c:	1b00      	subs	r0, r0, r4
 800271e:	fab0 f080 	clz	r0, r0
 8002722:	0940      	lsrs	r0, r0, #5
 8002724:	f7fd ff9c 	bl	8000660 <_test_assert>
 8002728:	b100      	cbz	r0, 800272c <test_004_005_execute.lto_priv.109+0x3c>
 800272a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800272c:	68a0      	ldr	r0, [r4, #8]
 800272e:	4916      	ldr	r1, [pc, #88]	; (8002788 <test_004_005_execute.lto_priv.109+0x98>)
 8002730:	fab0 f080 	clz	r0, r0
 8002734:	0940      	lsrs	r0, r0, #5
 8002736:	f7fd ff93 	bl	8000660 <_test_assert>
 800273a:	2800      	cmp	r0, #0
 800273c:	d1f5      	bne.n	800272a <test_004_005_execute.lto_priv.109+0x3a>
  }

  /* [4.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 800273e:	2303      	movs	r3, #3
 8002740:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8002742:	f003 f9bd 	bl	8005ac0 <chSemSignalWait.constprop.59>
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <test_004_005_execute.lto_priv.109+0x94>)
 800274a:	1b00      	subs	r0, r0, r4
 800274c:	fab0 f080 	clz	r0, r0
 8002750:	0940      	lsrs	r0, r0, #5
 8002752:	f7fd ff85 	bl	8000660 <_test_assert>
 8002756:	2800      	cmp	r0, #0
 8002758:	d1e7      	bne.n	800272a <test_004_005_execute.lto_priv.109+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800275a:	68a0      	ldr	r0, [r4, #8]
 800275c:	490a      	ldr	r1, [pc, #40]	; (8002788 <test_004_005_execute.lto_priv.109+0x98>)
 800275e:	fab0 f080 	clz	r0, r0
  }
}
 8002762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     counter value must be one on exit.*/
  test_set_step(3);
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
 8002766:	0940      	lsrs	r0, r0, #5
 8002768:	f7fd bf7a 	b.w	8000660 <_test_assert>
 800276c:	20001240 	.word	0x20001240
 8002770:	200011e4 	.word	0x200011e4
 8002774:	08002791 	.word	0x08002791
 8002778:	20000ae8 	.word	0x20000ae8
 800277c:	200012f0 	.word	0x200012f0
 8002780:	200011f4 	.word	0x200011f4
 8002784:	08006254 	.word	0x08006254
 8002788:	080062b0 	.word	0x080062b0
 800278c:	00000000 	.word	0x00000000

08002790 <thread3>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static THD_FUNCTION(thread3, p) {
 8002790:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8002792:	4c04      	ldr	r4, [pc, #16]	; (80027a4 <thread3+0x14>)
 8002794:	4620      	mov	r0, r4
 8002796:	f7fe f9c3 	bl	8000b20 <chSemWait>
  chSemSignal(&sem1);
 800279a:	4620      	mov	r0, r4
}
 800279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 80027a0:	f7fe b966 	b.w	8000a70 <chSemSignal>
 80027a4:	200012f0 	.word	0x200012f0
	...

080027b0 <test_004_005_teardown.lto_priv.108>:
 80027b0:	f7fe bcee 	b.w	8001190 <test_wait_threads>
	...

080027c0 <thread1.lto_priv.184>:

#include "ch.h"

static semaphore_t sem1;

static THD_FUNCTION(thread1, p) {
 80027c0:	b510      	push	{r4, lr}
 80027c2:	4604      	mov	r4, r0

  chSemWait(&sem1);
 80027c4:	4803      	ldr	r0, [pc, #12]	; (80027d4 <thread1.lto_priv.184+0x14>)
 80027c6:	f7fe f9ab 	bl	8000b20 <chSemWait>
  test_emit_token(*(char *)p);
 80027ca:	7820      	ldrb	r0, [r4, #0]
}
 80027cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static semaphore_t sem1;

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 80027d0:	f7fd be9e 	b.w	8000510 <test_emit_token>
 80027d4:	200012f0 	.word	0x200012f0
	...

080027e0 <thread.lto_priv.171>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80027e0:	7800      	ldrb	r0, [r0, #0]
 80027e2:	f7fd be95 	b.w	8000510 <test_emit_token>
 80027e6:	bf00      	nop
	...

080027f0 <test_004_002_execute.lto_priv.102>:

static void test_004_002_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_002_execute(void) {
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80027f4:	4f2a      	ldr	r7, [pc, #168]	; (80028a0 <test_004_002_execute.lto_priv.102+0xb0>)
  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80027f6:	4e2b      	ldr	r6, [pc, #172]	; (80028a4 <test_004_002_execute.lto_priv.102+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4c2b      	ldr	r4, [pc, #172]	; (80028a8 <test_004_002_execute.lto_priv.102+0xb8>)
 80027fc:	6899      	ldr	r1, [r3, #8]
static void test_004_002_execute(void) {

  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 80027fe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028d0 <test_004_002_execute.lto_priv.102+0xe0>
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8002802:	4632      	mov	r2, r6
 8002804:	3105      	adds	r1, #5
 8002806:	4620      	mov	r0, r4
static void test_004_002_execute(void) {

  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 8002808:	2501      	movs	r5, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <test_004_002_execute.lto_priv.102+0xbc>)
static void test_004_002_execute(void) {

  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 800280c:	f8c8 5000 	str.w	r5, [r8]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8002810:	f003 f8de 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4d26      	ldr	r5, [pc, #152]	; (80028b0 <test_004_002_execute.lto_priv.102+0xc0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	4632      	mov	r2, r6
  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800281c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800281e:	3101      	adds	r1, #1
 8002820:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <test_004_002_execute.lto_priv.102+0xc4>)
 8002826:	f003 f8d3 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	4632      	mov	r2, r6
 8002832:	3103      	adds	r1, #3
 8002834:	f504 7024 	add.w	r0, r4, #656	; 0x290
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <test_004_002_execute.lto_priv.102+0xc8>)
 800283a:	f003 f8c9 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	4632      	mov	r2, r6
 8002846:	3104      	adds	r1, #4
 8002848:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <test_004_002_execute.lto_priv.102+0xcc>)
 800284e:	f003 f8bf 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002852:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8002854:	4632      	mov	r2, r6
 8002856:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8002858:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800285a:	3102      	adds	r1, #2
 800285c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <test_004_002_execute.lto_priv.102+0xd0>)
 8002862:	f003 f8b5 	bl	80059d0 <chThdCreateStatic.constprop.65>

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
  {
    chSemSignal(&sem1);
 8002866:	4c17      	ldr	r4, [pc, #92]	; (80028c4 <test_004_002_execute.lto_priv.102+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  }

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
 8002868:	2302      	movs	r3, #2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800286a:	6128      	str	r0, [r5, #16]

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
  {
    chSemSignal(&sem1);
 800286c:	4620      	mov	r0, r4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  }

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
 800286e:	f8c8 3000 	str.w	r3, [r8]
  {
    chSemSignal(&sem1);
 8002872:	f7fe f8fd 	bl	8000a70 <chSemSignal>
    chSemSignal(&sem1);
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe f8fa 	bl	8000a70 <chSemSignal>
    chSemSignal(&sem1);
 800287c:	4620      	mov	r0, r4
 800287e:	f7fe f8f7 	bl	8000a70 <chSemSignal>
    chSemSignal(&sem1);
 8002882:	4620      	mov	r0, r4
 8002884:	f7fe f8f4 	bl	8000a70 <chSemSignal>
    chSemSignal(&sem1);
 8002888:	4620      	mov	r0, r4
 800288a:	f7fe f8f1 	bl	8000a70 <chSemSignal>
    test_wait_threads();
 800288e:	f7fe fc7f 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ADCEB", "invalid sequence");
#else
    test_assert_sequence("ABCDE", "invalid sequence");
#endif
  }
}
 8002892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chSemSignal(&sem1);
    test_wait_threads();
#if CH_CFG_USE_SEMAPHORES_PRIORITY
    test_assert_sequence("ADCEB", "invalid sequence");
#else
    test_assert_sequence("ABCDE", "invalid sequence");
 8002896:	490c      	ldr	r1, [pc, #48]	; (80028c8 <test_004_002_execute.lto_priv.102+0xd8>)
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <test_004_002_execute.lto_priv.102+0xdc>)
 800289a:	f7fd beb9 	b.w	8000610 <_test_assert_sequence>
 800289e:	bf00      	nop
 80028a0:	20001240 	.word	0x20001240
 80028a4:	080027c1 	.word	0x080027c1
 80028a8:	20000ae8 	.word	0x20000ae8
 80028ac:	080061fc 	.word	0x080061fc
 80028b0:	200011f4 	.word	0x200011f4
 80028b4:	08006204 	.word	0x08006204
 80028b8:	08006200 	.word	0x08006200
 80028bc:	08006220 	.word	0x08006220
 80028c0:	08006228 	.word	0x08006228
 80028c4:	200012f0 	.word	0x200012f0
 80028c8:	080061c0 	.word	0x080061c0
 80028cc:	08006224 	.word	0x08006224
 80028d0:	200011e4 	.word	0x200011e4
	...

080028e0 <test_002_002_execute.lto_priv.93>:
 * - [2.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void test_002_002_execute(void) {
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80028e2:	4d54      	ldr	r5, [pc, #336]	; (8002a34 <test_002_002_execute.lto_priv.93+0x154>)

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 80028e4:	4e54      	ldr	r6, [pc, #336]	; (8002a38 <test_002_002_execute.lto_priv.93+0x158>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80028e6:	69ab      	ldr	r3, [r5, #24]
 80028e8:	2401      	movs	r4, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <test_002_002_execute.lto_priv.93+0x160>)
 80028f0:	3905      	subs	r1, #5
 80028f2:	4854      	ldr	r0, [pc, #336]	; (8002a44 <test_002_002_execute.lto_priv.93+0x164>)

static void test_002_002_execute(void) {

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 80028f4:	6034      	str	r4, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80028f6:	f003 f86b 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80028fa:	69ab      	ldr	r3, [r5, #24]
 80028fc:	4c52      	ldr	r4, [pc, #328]	; (8002a48 <test_002_002_execute.lto_priv.93+0x168>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002902:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002904:	3904      	subs	r1, #4
 8002906:	4b51      	ldr	r3, [pc, #324]	; (8002a4c <test_002_002_execute.lto_priv.93+0x16c>)
 8002908:	4851      	ldr	r0, [pc, #324]	; (8002a50 <test_002_002_execute.lto_priv.93+0x170>)
 800290a:	f003 f861 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800290e:	69ab      	ldr	r3, [r5, #24]
 8002910:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	4a49      	ldr	r2, [pc, #292]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002916:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <test_002_002_execute.lto_priv.93+0x174>)
 8002918:	3903      	subs	r1, #3
 800291a:	484f      	ldr	r0, [pc, #316]	; (8002a58 <test_002_002_execute.lto_priv.93+0x178>)
 800291c:	f003 f858 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002920:	69ab      	ldr	r3, [r5, #24]
 8002922:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <test_002_002_execute.lto_priv.93+0x17c>)
 800292a:	3902      	subs	r1, #2
 800292c:	484c      	ldr	r0, [pc, #304]	; (8002a60 <test_002_002_execute.lto_priv.93+0x180>)
 800292e:	f003 f84f 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002932:	69ab      	ldr	r3, [r5, #24]
 8002934:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 800293a:	3901      	subs	r1, #1
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <test_002_002_execute.lto_priv.93+0x184>)
 800293e:	484a      	ldr	r0, [pc, #296]	; (8002a68 <test_002_002_execute.lto_priv.93+0x188>)
 8002940:	f003 f846 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002944:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8002946:	f7fe fc23 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800294a:	4948      	ldr	r1, [pc, #288]	; (8002a6c <test_002_002_execute.lto_priv.93+0x18c>)
 800294c:	4848      	ldr	r0, [pc, #288]	; (8002a70 <test_002_002_execute.lto_priv.93+0x190>)
 800294e:	f7fd fe5f 	bl	8000610 <_test_assert_sequence>
 8002952:	b100      	cbz	r0, 8002956 <test_002_002_execute.lto_priv.93+0x76>
 8002954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002956:	69ab      	ldr	r3, [r5, #24]

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002958:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 800295a:	6899      	ldr	r1, [r3, #8]
    test_assert_sequence("ABCDE", "invalid sequence");
  }

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
 800295c:	2702      	movs	r7, #2
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <test_002_002_execute.lto_priv.93+0x184>)
 8002960:	3901      	subs	r1, #1
 8002962:	4841      	ldr	r0, [pc, #260]	; (8002a68 <test_002_002_execute.lto_priv.93+0x188>)
    test_assert_sequence("ABCDE", "invalid sequence");
  }

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
 8002964:	6037      	str	r7, [r6, #0]
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002966:	f003 f833 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800296a:	69ab      	ldr	r3, [r5, #24]
 800296c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <test_002_002_execute.lto_priv.93+0x17c>)
 8002974:	3902      	subs	r1, #2
 8002976:	483a      	ldr	r0, [pc, #232]	; (8002a60 <test_002_002_execute.lto_priv.93+0x180>)
 8002978:	f003 f82a 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800297c:	69ab      	ldr	r3, [r5, #24]
 800297e:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002984:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <test_002_002_execute.lto_priv.93+0x174>)
 8002986:	3903      	subs	r1, #3
 8002988:	4833      	ldr	r0, [pc, #204]	; (8002a58 <test_002_002_execute.lto_priv.93+0x178>)
 800298a:	f003 f821 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800298e:	69ab      	ldr	r3, [r5, #24]
 8002990:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <test_002_002_execute.lto_priv.93+0x16c>)
 8002998:	3904      	subs	r1, #4
 800299a:	482d      	ldr	r0, [pc, #180]	; (8002a50 <test_002_002_execute.lto_priv.93+0x170>)
 800299c:	f003 f818 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80029a0:	69ab      	ldr	r3, [r5, #24]
 80029a2:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 80029a8:	3905      	subs	r1, #5
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <test_002_002_execute.lto_priv.93+0x160>)
 80029ac:	4825      	ldr	r0, [pc, #148]	; (8002a44 <test_002_002_execute.lto_priv.93+0x164>)
 80029ae:	f003 f80f 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80029b2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 80029b4:	f7fe fbec 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80029b8:	492c      	ldr	r1, [pc, #176]	; (8002a6c <test_002_002_execute.lto_priv.93+0x18c>)
 80029ba:	482d      	ldr	r0, [pc, #180]	; (8002a70 <test_002_002_execute.lto_priv.93+0x190>)
 80029bc:	f7fd fe28 	bl	8000610 <_test_assert_sequence>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d1c7      	bne.n	8002954 <test_002_002_execute.lto_priv.93+0x74>
 80029c4:	69ab      	ldr	r3, [r5, #24]
  }

  /* [2.2.3] Creating 5 threads with pseudo-random priority, execution
     sequence is tested.*/
  test_set_step(3);
 80029c6:	2703      	movs	r7, #3
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80029c8:	6899      	ldr	r1, [r3, #8]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <test_002_002_execute.lto_priv.93+0x16c>)
 80029ce:	3904      	subs	r1, #4
 80029d0:	481f      	ldr	r0, [pc, #124]	; (8002a50 <test_002_002_execute.lto_priv.93+0x170>)
    test_assert_sequence("ABCDE", "invalid sequence");
  }

  /* [2.2.3] Creating 5 threads with pseudo-random priority, execution
     sequence is tested.*/
  test_set_step(3);
 80029d2:	6037      	str	r7, [r6, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80029d4:	f002 fffc 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80029d8:	69ab      	ldr	r3, [r5, #24]
 80029da:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <test_002_002_execute.lto_priv.93+0x160>)
 80029e2:	3905      	subs	r1, #5
 80029e4:	4817      	ldr	r0, [pc, #92]	; (8002a44 <test_002_002_execute.lto_priv.93+0x164>)
 80029e6:	f002 fff3 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80029ea:	69ab      	ldr	r3, [r5, #24]
 80029ec:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <test_002_002_execute.lto_priv.93+0x184>)
 80029f4:	3901      	subs	r1, #1
 80029f6:	481c      	ldr	r0, [pc, #112]	; (8002a68 <test_002_002_execute.lto_priv.93+0x188>)
 80029f8:	f002 ffea 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80029fc:	69ab      	ldr	r3, [r5, #24]
 80029fe:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <test_002_002_execute.lto_priv.93+0x17c>)
 8002a06:	3902      	subs	r1, #2
 8002a08:	4815      	ldr	r0, [pc, #84]	; (8002a60 <test_002_002_execute.lto_priv.93+0x180>)
 8002a0a:	f002 ffe1 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002a0e:	69ab      	ldr	r3, [r5, #24]
 8002a10:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <test_002_002_execute.lto_priv.93+0x15c>)
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <test_002_002_execute.lto_priv.93+0x174>)
 8002a18:	3903      	subs	r1, #3
 8002a1a:	480f      	ldr	r0, [pc, #60]	; (8002a58 <test_002_002_execute.lto_priv.93+0x178>)
 8002a1c:	f002 ffd8 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002a20:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8002a22:	f7fe fbb5 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 8002a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
 8002a2a:	4910      	ldr	r1, [pc, #64]	; (8002a6c <test_002_002_execute.lto_priv.93+0x18c>)
 8002a2c:	4810      	ldr	r0, [pc, #64]	; (8002a70 <test_002_002_execute.lto_priv.93+0x190>)
 8002a2e:	f7fd bdef 	b.w	8000610 <_test_assert_sequence>
 8002a32:	bf00      	nop
 8002a34:	20001240 	.word	0x20001240
 8002a38:	200011e4 	.word	0x200011e4
 8002a3c:	080027e1 	.word	0x080027e1
 8002a40:	08006228 	.word	0x08006228
 8002a44:	20000ae8 	.word	0x20000ae8
 8002a48:	200011f4 	.word	0x200011f4
 8002a4c:	08006220 	.word	0x08006220
 8002a50:	20000c30 	.word	0x20000c30
 8002a54:	08006200 	.word	0x08006200
 8002a58:	20000d78 	.word	0x20000d78
 8002a5c:	08006204 	.word	0x08006204
 8002a60:	20000ec0 	.word	0x20000ec0
 8002a64:	080061fc 	.word	0x080061fc
 8002a68:	20001008 	.word	0x20001008
 8002a6c:	080061c0 	.word	0x080061c0
 8002a70:	08006224 	.word	0x08006224
	...

08002a80 <test_004_004_execute.lto_priv.106>:

static void test_004_004_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_004_execute(void) {
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <test_004_004_execute.lto_priv.106+0x8c>)

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
 8002a84:	4d22      	ldr	r5, [pc, #136]	; (8002b10 <test_004_004_execute.lto_priv.106+0x90>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2401      	movs	r4, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <test_004_004_execute.lto_priv.106+0x94>)
 8002a8e:	4421      	add	r1, r4
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <test_004_004_execute.lto_priv.106+0x98>)
 8002a92:	4822      	ldr	r0, [pc, #136]	; (8002b1c <test_004_004_execute.lto_priv.106+0x9c>)
}

static void test_004_004_execute(void) {

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
 8002a94:	602c      	str	r4, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8002a96:	f002 ff9b 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <test_004_004_execute.lto_priv.106+0xa0>)
  }

  /* [4.4.2] The semaphore counter is increased by two, it is then
     tested to be one, the thread must have completed.*/
  test_set_step(2);
 8002a9c:	2402      	movs	r4, #2
static void test_004_004_execute(void) {

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8002a9e:	6018      	str	r0, [r3, #0]
  }

  /* [4.4.2] The semaphore counter is increased by two, it is then
     tested to be one, the thread must have completed.*/
  test_set_step(2);
 8002aa0:	602c      	str	r4, [r5, #0]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	4d1e      	ldr	r5, [pc, #120]	; (8002b24 <test_004_004_execute.lto_priv.106+0xa4>)
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8002aaa:	2700      	movs	r7, #0
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
 8002aac:	462e      	mov	r6, r5
 8002aae:	e001      	b.n	8002ab4 <test_004_004_execute.lto_priv.106+0x34>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002ab0:	3c01      	subs	r4, #1
 8002ab2:	d00d      	beq.n	8002ad0 <test_004_004_execute.lto_priv.106+0x50>
    if (++sp->cnt <= (cnt_t)0) {
 8002ab4:	68ab      	ldr	r3, [r5, #8]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	60ab      	str	r3, [r5, #8]
 8002abc:	dcf8      	bgt.n	8002ab0 <test_004_004_execute.lto_priv.106+0x30>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8002abe:	6830      	ldr	r0, [r6, #0]

  tqp->next             = tp->queue.next;
 8002ac0:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002ac2:	605e      	str	r6, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002ac4:	6033      	str	r3, [r6, #0]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8002ac6:	f7fe f853 	bl	8000b70 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002aca:	3c01      	subs	r4, #1
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8002acc:	6247      	str	r7, [r0, #36]	; 0x24
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8002ace:	d1f1      	bne.n	8002ab4 <test_004_004_execute.lto_priv.106+0x34>
  {
    chSysLock();
    chSemAddCounterI(&sem1, 2);
    chSchRescheduleS();
 8002ad0:	f7fd ff76 	bl	80009c0 <chSchRescheduleS>
 8002ad4:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_wait_threads();
 8002ad8:	f7fe fb5a 	bl	8001190 <test_wait_threads>
 8002adc:	2320      	movs	r3, #32
 8002ade:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8002ae2:	68a8      	ldr	r0, [r5, #8]
 8002ae4:	4910      	ldr	r1, [pc, #64]	; (8002b28 <test_004_004_execute.lto_priv.106+0xa8>)
 8002ae6:	f1a0 0001 	sub.w	r0, r0, #1
 8002aea:	fab0 f080 	clz	r0, r0
 8002aee:	0940      	lsrs	r0, r0, #5
 8002af0:	f7fd fdb6 	bl	8000660 <_test_assert>
 8002af4:	b110      	cbz	r0, 8002afc <test_004_004_execute.lto_priv.106+0x7c>
 8002af6:	f384 8811 	msr	BASEPRI, r4
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afc:	f384 8811 	msr	BASEPRI, r4
    test_assert_sequence("A", "invalid sequence");
 8002b00:	490a      	ldr	r1, [pc, #40]	; (8002b2c <test_004_004_execute.lto_priv.106+0xac>)
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <test_004_004_execute.lto_priv.106+0x98>)
  }
}
 8002b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chSemAddCounterI(&sem1, 2);
    chSchRescheduleS();
    chSysUnlock();
    test_wait_threads();
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
    test_assert_sequence("A", "invalid sequence");
 8002b08:	f7fd bd82 	b.w	8000610 <_test_assert_sequence>
 8002b0c:	20001240 	.word	0x20001240
 8002b10:	200011e4 	.word	0x200011e4
 8002b14:	080027c1 	.word	0x080027c1
 8002b18:	080061fc 	.word	0x080061fc
 8002b1c:	20000ae8 	.word	0x20000ae8
 8002b20:	200011f4 	.word	0x200011f4
 8002b24:	200012f0 	.word	0x200012f0
 8002b28:	080062c4 	.word	0x080062c4
 8002b2c:	080061c0 	.word	0x080061c0

08002b30 <thread1.lto_priv.183>:
 * Shared code.
 ****************************************************************************/

static thread_reference_t tr1;

static THD_FUNCTION(thread1, p) {
 8002b30:	b510      	push	{r4, lr}
 8002b32:	2320      	movs	r3, #32
 8002b34:	4604      	mov	r4, r0
 8002b36:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <thread1.lto_priv.183+0x30>)
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	b120      	cbz	r0, 8002b4a <thread1.lto_priv.183+0x1a>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002b40:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8002b42:	6242      	str	r2, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002b44:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8002b46:	f7fe f813 	bl	8000b70 <chSchReadyI>

  chSysLock();
  chThdResumeI(&tr1, MSG_OK);
  chSchRescheduleS();
 8002b4a:	f7fd ff39 	bl	80009c0 <chSchRescheduleS>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_emit_token(*(char *)p);
 8002b54:	7820      	ldrb	r0, [r4, #0]
}
 8002b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  chSysLock();
  chThdResumeI(&tr1, MSG_OK);
  chSchRescheduleS();
  chSysUnlock();
  test_emit_token(*(char *)p);
 8002b5a:	f7fd bcd9 	b.w	8000510 <test_emit_token>
 8002b5e:	bf00      	nop
 8002b60:	20000880 	.word	0x20000880
	...

08002b70 <thread4.lto_priv.181>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static THD_FUNCTION(thread4, p) {
 8002b70:	b508      	push	{r3, lr}
 8002b72:	2220      	movs	r2, #32
 8002b74:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8002b78:	6883      	ldr	r3, [r0, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	dd05      	ble.n	8002b8a <thread4.lto_priv.181+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002b7e:	f7fd ff1f 	bl	80009c0 <chSchRescheduleS>
 8002b82:	2300      	movs	r3, #0
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
    chSemSignalI(&bsp->sem);
 8002b8a:	f7fe fb19 	bl	80011c0 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002b8e:	f7fd ff17 	bl	80009c0 <chSchRescheduleS>
 8002b92:	2300      	movs	r3, #0
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	bd08      	pop	{r3, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0000      	movs	r0, r0
	...

08002ba0 <thread2>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static THD_FUNCTION(thread2, p) {
 8002ba0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8002ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba6:	f7fe fd9b 	bl	80016e0 <chThdSleep>
 8002baa:	2320      	movs	r3, #32
 8002bac:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <thread2+0x24>)
 8002bb2:	f7fe fb05 	bl	80011c0 <chSemSignalI>
  chSchRescheduleS();
 8002bb6:	f7fd ff03 	bl	80009c0 <chSchRescheduleS>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	bd08      	pop	{r3, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200012f0 	.word	0x200012f0
	...

08002bd0 <test_002_001_execute.lto_priv.92>:
 * - [2.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void test_002_001_execute(void) {
 8002bd0:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [2.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8002bd2:	4e2b      	ldr	r6, [pc, #172]	; (8002c80 <test_002_001_execute.lto_priv.92+0xb0>)
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6033      	str	r3, [r6, #0]
 8002bd8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002bdc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 8002bde:	2064      	movs	r0, #100	; 0x64
 8002be0:	f7fe fd7e 	bl	80016e0 <chThdSleep>
    test_assert_time_window(time + 100,
 8002be4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8002be8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002bec:	f003 fa70 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8002bf0:	b100      	cbz	r0, 8002bf4 <test_002_001_execute.lto_priv.92+0x24>
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* [2.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6033      	str	r3, [r6, #0]
 8002bf8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleepMicroseconds(100000);
 8002bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bfe:	f7fe fd6f 	bl	80016e0 <chThdSleep>
    test_assert_time_window(time + US2ST(100000),
 8002c02:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002c06:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002c0a:	f003 fa61 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d1ef      	bne.n	8002bf2 <test_002_001_execute.lto_priv.92+0x22>
  }

  /* [2.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 8002c12:	2303      	movs	r3, #3
 8002c14:	6033      	str	r3, [r6, #0]
 8002c16:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleepMilliseconds(100);
 8002c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c1c:	f7fe fd60 	bl	80016e0 <chThdSleep>
    test_assert_time_window(time + MS2ST(100),
 8002c20:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002c24:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002c28:	f003 fa52 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1e0      	bne.n	8002bf2 <test_002_001_execute.lto_priv.92+0x22>
                            "out of time window");
  }

  /* [2.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 8002c30:	2304      	movs	r3, #4
 8002c32:	6033      	str	r3, [r6, #0]
 8002c34:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleepSeconds(1);
 8002c36:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c3a:	f7fe fd51 	bl	80016e0 <chThdSleep>
    test_assert_time_window(time + S2ST(1),
 8002c3e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8002c42:	4608      	mov	r0, r1
 8002c44:	3113      	adds	r1, #19
 8002c46:	3010      	adds	r0, #16
 8002c48:	f003 fa42 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1d0      	bne.n	8002bf2 <test_002_001_execute.lto_priv.92+0x22>
                            "out of time window");
  }

  /* [2.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 8002c50:	2305      	movs	r3, #5
 8002c52:	6033      	str	r3, [r6, #0]
 8002c54:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002c56:	2320      	movs	r3, #32
  {
    time = chVTGetSystemTimeX();
    chThdSleepUntil(time + 100);
 8002c58:	f106 0464 	add.w	r4, r6, #100	; 0x64
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 8002c62:	1a61      	subs	r1, r4, r1
 8002c64:	d002      	beq.n	8002c6c <test_002_001_execute.lto_priv.92+0x9c>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8002c66:	2008      	movs	r0, #8
 8002c68:	f7fe fb8a 	bl	8001380 <chSchGoSleepTimeoutS>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(time + 100,
 8002c72:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8002c76:	4620      	mov	r0, r4
                            time + 100 + CH_CFG_ST_TIMEDELTA + 1,
                            "out of time window");
  }
}
 8002c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     "now" + 100 ticks.*/
  test_set_step(5);
  {
    time = chVTGetSystemTimeX();
    chThdSleepUntil(time + 100);
    test_assert_time_window(time + 100,
 8002c7c:	f003 ba28 	b.w	80060d0 <_test_assert_time_window.constprop.2>
 8002c80:	200011e4 	.word	0x200011e4
	...

08002c90 <test_004_001_execute.lto_priv.100>:

static void test_004_001_teardown(void) {
  chSemReset(&sem1, 0);
}

static void test_004_001_execute(void) {
 8002c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     counter and the returned message are tested.*/
  test_set_step(1);
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 8002c94:	4c2b      	ldr	r4, [pc, #172]	; (8002d44 <test_004_001_execute.lto_priv.100+0xb4>)

static void test_004_001_execute(void) {

  /* [4.1.1] The function chSemWait() is invoked, after return the
     counter and the returned message are tested.*/
  test_set_step(1);
 8002c96:	4e2c      	ldr	r6, [pc, #176]	; (8002d48 <test_004_001_execute.lto_priv.100+0xb8>)
 8002c98:	2301      	movs	r3, #1
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 8002c9a:	4620      	mov	r0, r4

static void test_004_001_execute(void) {

  /* [4.1.1] The function chSemWait() is invoked, after return the
     counter and the returned message are tested.*/
  test_set_step(1);
 8002c9c:	6033      	str	r3, [r6, #0]
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 8002c9e:	f7fd ff3f 	bl	8000b20 <chSemWait>
 8002ca2:	2520      	movs	r5, #32
 8002ca4:	4607      	mov	r7, r0
 8002ca6:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8002caa:	68a0      	ldr	r0, [r4, #8]
 8002cac:	4927      	ldr	r1, [pc, #156]	; (8002d4c <test_004_001_execute.lto_priv.100+0xbc>)
 8002cae:	fab0 f080 	clz	r0, r0
 8002cb2:	0940      	lsrs	r0, r0, #5
 8002cb4:	f7fd fcd4 	bl	8000660 <_test_assert>
 8002cb8:	b120      	cbz	r0, 8002cc4 <test_004_001_execute.lto_priv.100+0x34>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cc4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8002cc8:	fab7 f087 	clz	r0, r7
 8002ccc:	4920      	ldr	r1, [pc, #128]	; (8002d50 <test_004_001_execute.lto_priv.100+0xc0>)
 8002cce:	0940      	lsrs	r0, r0, #5
 8002cd0:	f7fd fcc6 	bl	8000660 <_test_assert>
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	b108      	cbz	r0, 8002cdc <test_004_001_execute.lto_priv.100+0x4c>
 8002cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  /* [4.1.2] The function chSemSignal() is invoked, after return the
     counter is tested.*/
  test_set_step(2);
 8002cdc:	f04f 0902 	mov.w	r9, #2
  {
    chSemSignal(&sem1);
 8002ce0:	4620      	mov	r0, r4
    test_assert(MSG_OK == msg, "wrong returned message");
  }

  /* [4.1.2] The function chSemSignal() is invoked, after return the
     counter is tested.*/
  test_set_step(2);
 8002ce2:	f8c6 9000 	str.w	r9, [r6]
  {
    chSemSignal(&sem1);
 8002ce6:	f7fd fec3 	bl	8000a70 <chSemSignal>
 8002cea:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8002cee:	68a0      	ldr	r0, [r4, #8]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <test_004_001_execute.lto_priv.100+0xbc>)
 8002cf2:	f1a0 0001 	sub.w	r0, r0, #1
 8002cf6:	fab0 f080 	clz	r0, r0
 8002cfa:	0940      	lsrs	r0, r0, #5
 8002cfc:	f7fd fcb0 	bl	8000660 <_test_assert>
 8002d00:	4680      	mov	r8, r0
 8002d02:	b118      	cbz	r0, 8002d0c <test_004_001_execute.lto_priv.100+0x7c>
 8002d04:	f387 8811 	msr	BASEPRI, r7
 8002d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d0c:	f380 8811 	msr	BASEPRI, r0
  }

  /* [4.1.3] The function chSemReset() is invoked, after return the
     counter is tested.*/
  test_set_step(3);
 8002d10:	2303      	movs	r3, #3
  {
    chSemReset(&sem1, 2);
 8002d12:	4649      	mov	r1, r9
 8002d14:	4620      	mov	r0, r4
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
  }

  /* [4.1.3] The function chSemReset() is invoked, after return the
     counter is tested.*/
  test_set_step(3);
 8002d16:	6033      	str	r3, [r6, #0]
  {
    chSemReset(&sem1, 2);
 8002d18:	f7fe fa82 	bl	8001220 <chSemReset>
 8002d1c:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8002d20:	68a0      	ldr	r0, [r4, #8]
 8002d22:	490a      	ldr	r1, [pc, #40]	; (8002d4c <test_004_001_execute.lto_priv.100+0xbc>)
 8002d24:	f1a0 0002 	sub.w	r0, r0, #2
 8002d28:	fab0 f080 	clz	r0, r0
 8002d2c:	0940      	lsrs	r0, r0, #5
 8002d2e:	f7fd fc97 	bl	8000660 <_test_assert>
 8002d32:	b910      	cbnz	r0, 8002d3a <test_004_001_execute.lto_priv.100+0xaa>
 8002d34:	f380 8811 	msr	BASEPRI, r0
 8002d38:	e7ce      	b.n	8002cd8 <test_004_001_execute.lto_priv.100+0x48>
 8002d3a:	f388 8811 	msr	BASEPRI, r8
 8002d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d42:	bf00      	nop
 8002d44:	200012f0 	.word	0x200012f0
 8002d48:	200011e4 	.word	0x200011e4
 8002d4c:	080062d4 	.word	0x080062d4
 8002d50:	080062e8 	.word	0x080062e8
	...

08002d60 <test_004_001_teardown.lto_priv.99>:
static void test_004_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_004_001_teardown(void) {
  chSemReset(&sem1, 0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	4801      	ldr	r0, [pc, #4]	; (8002d68 <test_004_001_teardown.lto_priv.99+0x8>)
 8002d64:	f7fe ba5c 	b.w	8001220 <chSemReset>
 8002d68:	200012f0 	.word	0x200012f0
 8002d6c:	00000000 	.word	0x00000000

08002d70 <test_003_001_execute.lto_priv.97>:

static void test_003_001_setup(void) {
  tr1 = NULL;
}

static void test_003_001_execute(void) {
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002d74:	4d30      	ldr	r5, [pc, #192]	; (8002e38 <test_003_001_execute.lto_priv.97+0xc8>)
  msg_t msg;

  /* [3.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8002d76:	4f31      	ldr	r7, [pc, #196]	; (8002e3c <test_003_001_execute.lto_priv.97+0xcc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002d78:	69ab      	ldr	r3, [r5, #24]
 8002d7a:	2401      	movs	r4, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	4a30      	ldr	r2, [pc, #192]	; (8002e40 <test_003_001_execute.lto_priv.97+0xd0>)
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <test_003_001_execute.lto_priv.97+0xd4>)
 8002d82:	3901      	subs	r1, #1
 8002d84:	4830      	ldr	r0, [pc, #192]	; (8002e48 <test_003_001_execute.lto_priv.97+0xd8>)
  msg_t msg;

  /* [3.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8002d86:	603c      	str	r4, [r7, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8002d88:	f002 fe22 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <test_003_001_execute.lto_priv.97+0xdc>)
 8002d8e:	2620      	movs	r6, #32
 8002d90:	6018      	str	r0, [r3, #0]
 8002d92:	f386 8811 	msr	BASEPRI, r6

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8002d96:	4c2e      	ldr	r4, [pc, #184]	; (8002e50 <test_003_001_execute.lto_priv.97+0xe0>)
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002d98:	69ab      	ldr	r3, [r5, #24]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002d9a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 8002d9c:	625c      	str	r4, [r3, #36]	; 0x24

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8002d9e:	6023      	str	r3, [r4, #0]
 8002da0:	f7fd fe86 	bl	8000ab0 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8002da4:	69aa      	ldr	r2, [r5, #24]
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8002dac:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	4928      	ldr	r1, [pc, #160]	; (8002e54 <test_003_001_execute.lto_priv.97+0xe4>)
 8002db4:	fab0 f080 	clz	r0, r0
 8002db8:	0940      	lsrs	r0, r0, #5
 8002dba:	f7fd fc51 	bl	8000660 <_test_assert>
 8002dbe:	b108      	cbz	r0, 8002dc4 <test_003_001_execute.lto_priv.97+0x54>
 8002dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 8002dc4:	fab8 f088 	clz	r0, r8
 8002dc8:	4923      	ldr	r1, [pc, #140]	; (8002e58 <test_003_001_execute.lto_priv.97+0xe8>)
 8002dca:	0940      	lsrs	r0, r0, #5
 8002dcc:	f7fd fc48 	bl	8000660 <_test_assert>
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d1f4      	bne.n	8002dc0 <test_003_001_execute.lto_priv.97+0x50>
    test_wait_threads();
 8002dd6:	f7fe f9db 	bl	8001190 <test_wait_threads>
  }

  /* [3.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8002dda:	2302      	movs	r3, #2
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	f386 8811 	msr	BASEPRI, r6
 8002de2:	69ab      	ldr	r3, [r5, #24]
 8002de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002dea:	f242 7110 	movw	r1, #10000	; 0x2710
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->u.wttrp = trp;
 8002dee:	625c      	str	r4, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002df0:	2003      	movs	r0, #3

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8002df2:	6023      	str	r3, [r4, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002df4:	f7fe fac4 	bl	8001380 <chSchGoSleepTimeoutS>
 8002df8:	4606      	mov	r6, r0
 8002dfa:	f388 8811 	msr	BASEPRI, r8
  {
    chSysLock();
    time = chVTGetSystemTimeX();
    msg = chThdSuspendTimeoutS(&tr1, MS2ST(1000));
    chSysUnlock();
    test_assert_time_window(time + MS2ST(1000),
 8002dfe:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 8002e02:	4608      	mov	r0, r1
 8002e04:	3112      	adds	r1, #18
 8002e06:	3010      	adds	r0, #16
 8002e08:	f003 f962 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d1d7      	bne.n	8002dc0 <test_003_001_execute.lto_priv.97+0x50>
                            time + MS2ST(1000) + CH_CFG_ST_TIMEDELTA,
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	4910      	ldr	r1, [pc, #64]	; (8002e54 <test_003_001_execute.lto_priv.97+0xe4>)
 8002e14:	fab0 f080 	clz	r0, r0
 8002e18:	0940      	lsrs	r0, r0, #5
 8002e1a:	f7fd fc21 	bl	8000660 <_test_assert>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d1ce      	bne.n	8002dc0 <test_003_001_execute.lto_priv.97+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8002e22:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 8002e26:	fab0 f080 	clz	r0, r0
  }
}
 8002e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chSysUnlock();
    test_assert_time_window(time + MS2ST(1000),
                            time + MS2ST(1000) + CH_CFG_ST_TIMEDELTA,
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8002e2e:	0940      	lsrs	r0, r0, #5
 8002e30:	4909      	ldr	r1, [pc, #36]	; (8002e58 <test_003_001_execute.lto_priv.97+0xe8>)
 8002e32:	f7fd bc15 	b.w	8000660 <_test_assert>
 8002e36:	bf00      	nop
 8002e38:	20001240 	.word	0x20001240
 8002e3c:	200011e4 	.word	0x200011e4
 8002e40:	08002b31 	.word	0x08002b31
 8002e44:	080061fc 	.word	0x080061fc
 8002e48:	20000ae8 	.word	0x20000ae8
 8002e4c:	200011f4 	.word	0x200011f4
 8002e50:	20000880 	.word	0x20000880
 8002e54:	08006300 	.word	0x08006300
 8002e58:	080062e8 	.word	0x080062e8
 8002e5c:	00000000 	.word	0x00000000

08002e60 <test_002_004_execute.lto_priv.95>:
 * - [2.4.3] Raising thread priority above the boosted level.
 * - [2.4.4] Restoring original conditions.
 * .
 */

static void test_002_004_execute(void) {
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e64:	4d2f      	ldr	r5, [pc, #188]	; (8002f24 <test_002_004_execute.lto_priv.95+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8002e66:	2202      	movs	r2, #2
 8002e68:	69ab      	ldr	r3, [r5, #24]
 8002e6a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002f38 <test_002_004_execute.lto_priv.95+0xd8>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002e6e:	689c      	ldr	r4, [r3, #8]
 8002e70:	f8c8 2000 	str.w	r2, [r8]

  /* [2.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    chThdGetSelfX()->prio += 2;
 8002e74:	18a6      	adds	r6, r4, r2

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(prio + 1);
 8002e76:	1c67      	adds	r7, r4, #1

  /* [2.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    chThdGetSelfX()->prio += 2;
 8002e78:	609e      	str	r6, [r3, #8]

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(prio + 1);
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f7fd fdb0 	bl	80009e0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8002e80:	1b00      	subs	r0, r0, r4
 8002e82:	fab0 f080 	clz	r0, r0
 8002e86:	4928      	ldr	r1, [pc, #160]	; (8002f28 <test_002_004_execute.lto_priv.95+0xc8>)
 8002e88:	0940      	lsrs	r0, r0, #5
 8002e8a:	f7fd fbe9 	bl	8000660 <_test_assert>
 8002e8e:	b108      	cbz	r0, 8002e94 <test_002_004_execute.lto_priv.95+0x34>
 8002e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8002e94:	69ab      	ldr	r3, [r5, #24]
 8002e96:	4925      	ldr	r1, [pc, #148]	; (8002f2c <test_002_004_execute.lto_priv.95+0xcc>)
 8002e98:	6898      	ldr	r0, [r3, #8]
 8002e9a:	1b80      	subs	r0, r0, r6
 8002e9c:	fab0 f080 	clz	r0, r0
 8002ea0:	0940      	lsrs	r0, r0, #5
 8002ea2:	f7fd fbdd 	bl	8000660 <_test_assert>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d1f2      	bne.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8002eaa:	69ab      	ldr	r3, [r5, #24]
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <test_002_004_execute.lto_priv.95+0xd0>)
 8002eae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002eb0:	1bc0      	subs	r0, r0, r7
 8002eb2:	fab0 f080 	clz	r0, r0
 8002eb6:	0940      	lsrs	r0, r0, #5
 8002eb8:	f7fd fbd2 	bl	8000660 <_test_assert>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d1e7      	bne.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
  {
    p1 = chThdSetPriority(prio + 3);
 8002ec0:	1ce6      	adds	r6, r4, #3
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8002ec2:	2303      	movs	r3, #3
  {
    p1 = chThdSetPriority(prio + 3);
 8002ec4:	4630      	mov	r0, r6
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8002ec6:	f8c8 3000 	str.w	r3, [r8]
  {
    p1 = chThdSetPriority(prio + 3);
 8002eca:	f7fd fd89 	bl	80009e0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8002ece:	1a38      	subs	r0, r7, r0
 8002ed0:	fab0 f080 	clz	r0, r0
 8002ed4:	4914      	ldr	r1, [pc, #80]	; (8002f28 <test_002_004_execute.lto_priv.95+0xc8>)
 8002ed6:	0940      	lsrs	r0, r0, #5
 8002ed8:	f7fd fbc2 	bl	8000660 <_test_assert>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1d7      	bne.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8002ee0:	69ab      	ldr	r3, [r5, #24]
 8002ee2:	4912      	ldr	r1, [pc, #72]	; (8002f2c <test_002_004_execute.lto_priv.95+0xcc>)
 8002ee4:	6898      	ldr	r0, [r3, #8]
 8002ee6:	1b80      	subs	r0, r0, r6
 8002ee8:	fab0 f080 	clz	r0, r0
 8002eec:	0940      	lsrs	r0, r0, #5
 8002eee:	f7fd fbb7 	bl	8000660 <_test_assert>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1cc      	bne.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8002ef6:	69ab      	ldr	r3, [r5, #24]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <test_002_004_execute.lto_priv.95+0xd4>)
 8002efa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002efc:	1b80      	subs	r0, r0, r6
 8002efe:	fab0 f080 	clz	r0, r0
 8002f02:	0940      	lsrs	r0, r0, #5
 8002f04:	f7fd fbac 	bl	8000660 <_test_assert>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d1c1      	bne.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
  }

  /* [2.4.4] Restoring original conditions.*/
  test_set_step(4);
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	f8c8 3000 	str.w	r3, [r8]
 8002f12:	2320      	movs	r3, #32
 8002f14:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002f18:	69ab      	ldr	r3, [r5, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
 8002f1a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8002f1c:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002f1e:	f380 8811 	msr	BASEPRI, r0
 8002f22:	e7b5      	b.n	8002e90 <test_002_004_execute.lto_priv.95+0x30>
 8002f24:	20001240 	.word	0x20001240
 8002f28:	0800630c 	.word	0x0800630c
 8002f2c:	08006330 	.word	0x08006330
 8002f30:	0800634c 	.word	0x0800634c
 8002f34:	08006374 	.word	0x08006374
 8002f38:	200011e4 	.word	0x200011e4
 8002f3c:	00000000 	.word	0x00000000

08002f40 <test_002_003_execute.lto_priv.94>:
 * - [2.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void test_002_003_execute(void) {
 8002f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f44:	4e1c      	ldr	r6, [pc, #112]	; (8002fb8 <test_002_003_execute.lto_priv.94+0x78>)
  tprio_t prio, p1;

  /* [2.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8002f46:	2301      	movs	r3, #1
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002f48:	69b2      	ldr	r2, [r6, #24]
 8002f4a:	4f1c      	ldr	r7, [pc, #112]	; (8002fbc <test_002_003_execute.lto_priv.94+0x7c>)
 8002f4c:	6894      	ldr	r4, [r2, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8002f50:	18e5      	adds	r5, r4, r3
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7fd fd44 	bl	80009e0 <chThdSetPriority>
 8002f58:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8002f5a:	1b00      	subs	r0, r0, r4
 8002f5c:	fab0 f080 	clz	r0, r0
 8002f60:	4917      	ldr	r1, [pc, #92]	; (8002fc0 <test_002_003_execute.lto_priv.94+0x80>)
 8002f62:	0940      	lsrs	r0, r0, #5
 8002f64:	f7fd fb7c 	bl	8000660 <_test_assert>
 8002f68:	b108      	cbz	r0, 8002f6e <test_002_003_execute.lto_priv.94+0x2e>
 8002f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8002f70:	4914      	ldr	r1, [pc, #80]	; (8002fc4 <test_002_003_execute.lto_priv.94+0x84>)
 8002f72:	6898      	ldr	r0, [r3, #8]
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	fab0 f080 	clz	r0, r0
 8002f7a:	0940      	lsrs	r0, r0, #5
 8002f7c:	f7fd fb70 	bl	8000660 <_test_assert>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d1f2      	bne.n	8002f6a <test_002_003_execute.lto_priv.94+0x2a>
  }

  /* [2.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8002f84:	2302      	movs	r3, #2
  {
    p1 = chThdSetPriority(p1);
 8002f86:	4640      	mov	r0, r8
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
  }

  /* [2.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8002f88:	603b      	str	r3, [r7, #0]
  {
    p1 = chThdSetPriority(p1);
 8002f8a:	f7fd fd29 	bl	80009e0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8002f8e:	1a28      	subs	r0, r5, r0
 8002f90:	fab0 f080 	clz	r0, r0
 8002f94:	490a      	ldr	r1, [pc, #40]	; (8002fc0 <test_002_003_execute.lto_priv.94+0x80>)
 8002f96:	0940      	lsrs	r0, r0, #5
 8002f98:	f7fd fb62 	bl	8000660 <_test_assert>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1e4      	bne.n	8002f6a <test_002_003_execute.lto_priv.94+0x2a>
 8002fa0:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <test_002_003_execute.lto_priv.94+0x84>)
 8002fa4:	6898      	ldr	r0, [r3, #8]
 8002fa6:	1b00      	subs	r0, r0, r4
 8002fa8:	fab0 f080 	clz	r0, r0
  }
}
 8002fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     check is performed.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8002fb0:	0940      	lsrs	r0, r0, #5
 8002fb2:	f7fd bb55 	b.w	8000660 <_test_assert>
 8002fb6:	bf00      	nop
 8002fb8:	20001240 	.word	0x20001240
 8002fbc:	200011e4 	.word	0x200011e4
 8002fc0:	0800630c 	.word	0x0800630c
 8002fc4:	08006330 	.word	0x08006330
	...

08002fd0 <test_001_002_execute.lto_priv.89>:
 * - [1.2.4] Testing chSysUnconditionalUnlock().
 * - [1.2.5] Testing from ISR context using a virtual timer.
 * .
 */

static void test_001_002_execute(void) {
 8002fd0:	b510      	push	{r4, lr}
  syssts_t sts;
  virtual_timer_t vt;

  /* [1.2.1] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), non reentrant case.*/
  test_set_step(1);
 8002fd2:	4c31      	ldr	r4, [pc, #196]	; (8003098 <test_001_002_execute.lto_priv.89+0xc8>)
 8002fd4:	2301      	movs	r3, #1
 * - [1.2.4] Testing chSysUnconditionalUnlock().
 * - [1.2.5] Testing from ISR context using a virtual timer.
 * .
 */

static void test_001_002_execute(void) {
 8002fd6:	b086      	sub	sp, #24
  syssts_t sts;
  virtual_timer_t vt;

  /* [1.2.1] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), non reentrant case.*/
  test_set_step(1);
 8002fd8:	6023      	str	r3, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fda:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8002fde:	b91b      	cbnz	r3, 8002fe8 <test_001_002_execute.lto_priv.89+0x18>
 8002fe0:	f7fe fb9e 	bl	8001720 <chSysGetStatusAndLockX.part.1.lto_priv.186>
 8002fe4:	f7fe fb8c 	bl	8001700 <chSysRestoreStatusX.part.2.lto_priv.185>
    chSysRestoreStatusX(sts);
  }

  /* [1.2.2] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), reentrant case.*/
  test_set_step(2);
 8002fe8:	2302      	movs	r3, #2
 8002fea:	6023      	str	r3, [r4, #0]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002fec:	2320      	movs	r3, #32
 8002fee:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff6:	b91b      	cbnz	r3, 8003000 <test_001_002_execute.lto_priv.89+0x30>
 8002ff8:	f7fe fb92 	bl	8001720 <chSysGetStatusAndLockX.part.1.lto_priv.186>
 8002ffc:	f7fe fb80 	bl	8001700 <chSysRestoreStatusX.part.2.lto_priv.185>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003000:	2300      	movs	r3, #0
 8003002:	f383 8811 	msr	BASEPRI, r3
    chSysRestoreStatusX(sts);
    chSysUnlock();
  }

  /* [1.2.3] Testing chSysUnconditionalLock().*/
  test_set_step(3);
 8003006:	2303      	movs	r3, #3
 8003008:	6023      	str	r3, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800300a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 800300e:	b913      	cbnz	r3, 8003016 <test_001_002_execute.lto_priv.89+0x46>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003010:	2320      	movs	r3, #32
 8003012:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003016:	f3ef 8311 	mrs	r3, BASEPRI
 800301a:	b913      	cbnz	r3, 8003022 <test_001_002_execute.lto_priv.89+0x52>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800301c:	2320      	movs	r3, #32
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	2300      	movs	r3, #0
 8003024:	f383 8811 	msr	BASEPRI, r3
    chSysUnconditionalLock();
    chSysUnlock();
  }

  /* [1.2.4] Testing chSysUnconditionalUnlock().*/
  test_set_step(4);
 8003028:	2204      	movs	r2, #4
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003032:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003036:	b10a      	cbz	r2, 800303c <test_001_002_execute.lto_priv.89+0x6c>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003038:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800303c:	f3ef 8311 	mrs	r3, BASEPRI
 8003040:	b113      	cbz	r3, 8003048 <test_001_002_execute.lto_priv.89+0x78>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003042:	2300      	movs	r3, #0
 8003044:	f383 8811 	msr	BASEPRI, r3
    chSysUnconditionalUnlock();
    chSysUnconditionalUnlock();
  }

  /* [1.2.5] Testing from ISR context using a virtual timer.*/
  test_set_step(5);
 8003048:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	9304      	str	r3, [sp, #16]
 800304e:	6022      	str	r2, [r4, #0]
 8003050:	2320      	movs	r3, #32
 8003052:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003056:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8003058:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800305a:	b113      	cbz	r3, 8003062 <test_001_002_execute.lto_priv.89+0x92>
    chVTDoResetI(vtp);
 800305c:	4620      	mov	r0, r4
 800305e:	f7fe f917 	bl	8001290 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8003062:	4620      	mov	r0, r4
 8003064:	2300      	movs	r3, #0
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <test_001_002_execute.lto_priv.89+0xcc>)
 8003068:	2101      	movs	r1, #1
 800306a:	f7fe f949 	bl	8001300 <chVTDoSetI>
 800306e:	2400      	movs	r4, #0
 8003070:	f384 8811 	msr	BASEPRI, r4
  {
    chVTObjectInit(&vt);
    chVTSet(&vt, 1, vtcb, NULL);
    chThdSleep(10);
 8003074:	200a      	movs	r0, #10
 8003076:	f7fe fb33 	bl	80016e0 <chThdSleep>
 800307a:	2320      	movs	r3, #32
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	9804      	ldr	r0, [sp, #16]
 8003082:	f384 8811 	msr	BASEPRI, r4

    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8003086:	fab0 f080 	clz	r0, r0
 800308a:	4905      	ldr	r1, [pc, #20]	; (80030a0 <test_001_002_execute.lto_priv.89+0xd0>)
 800308c:	0940      	lsrs	r0, r0, #5
 800308e:	f7fd fae7 	bl	8000660 <_test_assert>
  }
}
 8003092:	b006      	add	sp, #24
 8003094:	bd10      	pop	{r4, pc}
 8003096:	bf00      	nop
 8003098:	200011e4 	.word	0x200011e4
 800309c:	080030b1 	.word	0x080030b1
 80030a0:	08006394 	.word	0x08006394
	...

080030b0 <vtcb>:
/****************************************************************************
 * Shared code.
 ****************************************************************************/

/* Timer callback for testing system functions in ISR context.*/
static void vtcb(void *p) {
 80030b0:	b508      	push	{r3, lr}
 80030b2:	2320      	movs	r3, #32
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	2200      	movs	r2, #0
 80030ba:	f382 8811 	msr	BASEPRI, r2
 80030be:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030c2:	f3ef 8311 	mrs	r3, BASEPRI
 80030c6:	b91b      	cbnz	r3, 80030d0 <vtcb+0x20>
 80030c8:	f7fe fb2a 	bl	8001720 <chSysGetStatusAndLockX.part.1.lto_priv.186>
 80030cc:	f7fe fb18 	bl	8001700 <chSysRestoreStatusX.part.2.lto_priv.185>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80030d0:	2300      	movs	r3, #0
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	bd08      	pop	{r3, pc}
	...

080030e0 <test_001_001_execute.lto_priv.88>:
 * - [1.1.3] Testing Registry List integrity.
 * - [1.1.4] Testing Port-defined integrity.
 * .
 */

static void test_001_001_execute(void) {
 80030e0:	b570      	push	{r4, r5, r6, lr}
  bool result;

  /* [1.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 80030e2:	4d24      	ldr	r5, [pc, #144]	; (8003174 <test_001_001_execute.lto_priv.88+0x94>)
 80030e4:	2001      	movs	r0, #1
 80030e6:	6028      	str	r0, [r5, #0]
 80030e8:	2420      	movs	r4, #32
 80030ea:	f384 8811 	msr	BASEPRI, r4
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80030ee:	f7fe fb27 	bl	8001740 <chSysIntegrityCheckI>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(result == false, "ready list check failed");
 80030f8:	f080 0001 	eor.w	r0, r0, #1
 80030fc:	b2c0      	uxtb	r0, r0
 80030fe:	491e      	ldr	r1, [pc, #120]	; (8003178 <test_001_001_execute.lto_priv.88+0x98>)
 8003100:	f7fd faae 	bl	8000660 <_test_assert>
 8003104:	b100      	cbz	r0, 8003108 <test_001_001_execute.lto_priv.88+0x28>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	4606      	mov	r6, r0
  }

  /* [1.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 800310a:	2002      	movs	r0, #2
 800310c:	6028      	str	r0, [r5, #0]
 800310e:	f384 8811 	msr	BASEPRI, r4
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8003112:	f7fe fb15 	bl	8001740 <chSysIntegrityCheckI>
 8003116:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    test_assert(result == false, "virtual timers list check failed");
 800311a:	f080 0001 	eor.w	r0, r0, #1
 800311e:	b2c0      	uxtb	r0, r0
 8003120:	4916      	ldr	r1, [pc, #88]	; (800317c <test_001_001_execute.lto_priv.88+0x9c>)
 8003122:	f7fd fa9d 	bl	8000660 <_test_assert>
 8003126:	4606      	mov	r6, r0
 8003128:	2800      	cmp	r0, #0
 800312a:	d1ec      	bne.n	8003106 <test_001_001_execute.lto_priv.88+0x26>
  }

  /* [1.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 800312c:	2303      	movs	r3, #3
 800312e:	602b      	str	r3, [r5, #0]
 8003130:	f384 8811 	msr	BASEPRI, r4
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8003134:	2004      	movs	r0, #4
 8003136:	f7fe fb03 	bl	8001740 <chSysIntegrityCheckI>
 800313a:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    test_assert(result == false, "registry list check failed");
 800313e:	f080 0001 	eor.w	r0, r0, #1
 8003142:	b2c0      	uxtb	r0, r0
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <test_001_001_execute.lto_priv.88+0xa0>)
 8003146:	f7fd fa8b 	bl	8000660 <_test_assert>
 800314a:	4606      	mov	r6, r0
 800314c:	2800      	cmp	r0, #0
 800314e:	d1da      	bne.n	8003106 <test_001_001_execute.lto_priv.88+0x26>
  }

  /* [1.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8003150:	2304      	movs	r3, #4
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	f384 8811 	msr	BASEPRI, r4
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8003158:	2008      	movs	r0, #8
 800315a:	f7fe faf1 	bl	8001740 <chSysIntegrityCheckI>
 800315e:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
}
 8003162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_set_step(4);
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
 8003166:	f080 0001 	eor.w	r0, r0, #1
 800316a:	b2c0      	uxtb	r0, r0
 800316c:	4905      	ldr	r1, [pc, #20]	; (8003184 <test_001_001_execute.lto_priv.88+0xa4>)
 800316e:	f7fd ba77 	b.w	8000660 <_test_assert>
 8003172:	bf00      	nop
 8003174:	200011e4 	.word	0x200011e4
 8003178:	080063a8 	.word	0x080063a8
 800317c:	080063c0 	.word	0x080063c0
 8003180:	080063e4 	.word	0x080063e4
 8003184:	08006400 	.word	0x08006400
	...

08003190 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003190:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f7fe faa4 	bl	80016e0 <chThdSleep>
 8003198:	2320      	movs	r3, #32
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031a4:	2300      	movs	r3, #0
 80031a6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80031aa:	bd08      	pop	{r3, pc}
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <test_004_003_execute.lto_priv.104>:

static void test_004_003_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_003_execute(void) {
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  systime_t target_time;
  msg_t msg;

  /* [4.3.1] Testing special case TIME_IMMEDIATE.*/
  test_set_step(1);
 80031b2:	4d4a      	ldr	r5, [pc, #296]	; (80032dc <test_004_003_execute.lto_priv.104+0x12c>)
 80031b4:	2001      	movs	r0, #1
 80031b6:	6028      	str	r0, [r5, #0]
 80031b8:	2320      	movs	r3, #32
 80031ba:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80031be:	4c48      	ldr	r4, [pc, #288]	; (80032e0 <test_004_003_execute.lto_priv.104+0x130>)
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	bf5c      	itt	pl
 80031c6:	60a3      	strpl	r3, [r4, #8]
 80031c8:	2000      	movpl	r0, #0
 80031ca:	2300      	movs	r3, #0
 80031cc:	f383 8811 	msr	BASEPRI, r3
  {
    msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80031d0:	4944      	ldr	r1, [pc, #272]	; (80032e4 <test_004_003_execute.lto_priv.104+0x134>)
 80031d2:	f7fd fa45 	bl	8000660 <_test_assert>
 80031d6:	b100      	cbz	r0, 80031da <test_004_003_execute.lto_priv.104+0x2a>
 80031d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	4942      	ldr	r1, [pc, #264]	; (80032e8 <test_004_003_execute.lto_priv.104+0x138>)
 80031de:	1b00      	subs	r0, r0, r4
 80031e0:	fab0 f080 	clz	r0, r0
 80031e4:	0940      	lsrs	r0, r0, #5
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next == (const thread_t *)tqp);
 80031e6:	4e3e      	ldr	r6, [pc, #248]	; (80032e0 <test_004_003_execute.lto_priv.104+0x130>)
 80031e8:	f7fd fa3a 	bl	8000660 <_test_assert>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d1f3      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
    test_assert(sem1.cnt == 0, "counter not zero");
 80031f0:	68b0      	ldr	r0, [r6, #8]
 80031f2:	493e      	ldr	r1, [pc, #248]	; (80032ec <test_004_003_execute.lto_priv.104+0x13c>)
 80031f4:	fab0 f080 	clz	r0, r0
 80031f8:	0940      	lsrs	r0, r0, #5
 80031fa:	f7fd fa31 	bl	8000660 <_test_assert>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1ea      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <test_004_003_execute.lto_priv.104+0x140>)
  }

  /* [4.3.2] Testing non-timeout condition.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003204:	4603      	mov	r3, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8003206:	6992      	ldr	r2, [r2, #24]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }

  /* [4.3.2] Testing non-timeout condition.*/
  test_set_step(2);
 8003208:	2702      	movs	r7, #2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800320a:	6891      	ldr	r1, [r2, #8]
 800320c:	4839      	ldr	r0, [pc, #228]	; (80032f4 <test_004_003_execute.lto_priv.104+0x144>)
 800320e:	3901      	subs	r1, #1
 8003210:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <test_004_003_execute.lto_priv.104+0x148>)
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }

  /* [4.3.2] Testing non-timeout condition.*/
  test_set_step(2);
 8003212:	602f      	str	r7, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003214:	f002 fbdc 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <test_004_003_execute.lto_priv.104+0x14c>)
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }

  /* [4.3.2] Testing non-timeout condition.*/
  test_set_step(2);
 800321a:	4f30      	ldr	r7, [pc, #192]	; (80032dc <test_004_003_execute.lto_priv.104+0x12c>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800321c:	6018      	str	r0, [r3, #0]
                                   thread2, 0);
    msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800321e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003222:	f002 fc25 	bl	8005a70 <chSemWaitTimeout.constprop.61>
 8003226:	4605      	mov	r5, r0
    test_wait_threads();
 8003228:	f7fd ffb2 	bl	8001190 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800322c:	fab5 f085 	clz	r0, r5
 8003230:	492c      	ldr	r1, [pc, #176]	; (80032e4 <test_004_003_execute.lto_priv.104+0x134>)
 8003232:	0940      	lsrs	r0, r0, #5
 8003234:	f7fd fa14 	bl	8000660 <_test_assert>
 8003238:	2800      	cmp	r0, #0
 800323a:	d1cd      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800323c:	6830      	ldr	r0, [r6, #0]
 800323e:	492a      	ldr	r1, [pc, #168]	; (80032e8 <test_004_003_execute.lto_priv.104+0x138>)
 8003240:	1b80      	subs	r0, r0, r6
 8003242:	fab0 f080 	clz	r0, r0
 8003246:	0940      	lsrs	r0, r0, #5
 8003248:	f7fd fa0a 	bl	8000660 <_test_assert>
 800324c:	2800      	cmp	r0, #0
 800324e:	d1c3      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003250:	68b0      	ldr	r0, [r6, #8]
 8003252:	4926      	ldr	r1, [pc, #152]	; (80032ec <test_004_003_execute.lto_priv.104+0x13c>)
 8003254:	fab0 f080 	clz	r0, r0
 8003258:	0940      	lsrs	r0, r0, #5
 800325a:	f7fd fa01 	bl	8000660 <_test_assert>
 800325e:	2800      	cmp	r0, #0
 8003260:	d1ba      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
  }

  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
 8003262:	2303      	movs	r3, #3
 8003264:	603b      	str	r3, [r7, #0]
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
 8003266:	f7ff ff93 	bl	8003190 <test_wait_tick>
 800326a:	4607      	mov	r7, r0
 800326c:	2541      	movs	r5, #65	; 0x41
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 800326e:	4628      	mov	r0, r5
 8003270:	f7fd f94e 	bl	8000510 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8003274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003278:	f002 fbfa 	bl	8005a70 <chSemWaitTimeout.constprop.61>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800327c:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003280:	fab0 f080 	clz	r0, r0
 8003284:	4917      	ldr	r1, [pc, #92]	; (80032e4 <test_004_003_execute.lto_priv.104+0x134>)
 8003286:	0940      	lsrs	r0, r0, #5
 8003288:	f7fd f9ea 	bl	8000660 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <test_004_003_execute.lto_priv.104+0x138>)
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800328e:	2800      	cmp	r0, #0
 8003290:	d1a2      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	1b00      	subs	r0, r0, r4
 8003296:	fab0 f080 	clz	r0, r0
 800329a:	0940      	lsrs	r0, r0, #5
 800329c:	f7fd f9e0 	bl	8000660 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 80032a0:	4912      	ldr	r1, [pc, #72]	; (80032ec <test_004_003_execute.lto_priv.104+0x13c>)
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d198      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
      test_assert(sem1.cnt == 0, "counter not zero");
 80032a6:	68b0      	ldr	r0, [r6, #8]
 80032a8:	3501      	adds	r5, #1
 80032aa:	fab0 f080 	clz	r0, r0
 80032ae:	0940      	lsrs	r0, r0, #5
 80032b0:	f7fd f9d6 	bl	8000660 <_test_assert>
 80032b4:	b2ed      	uxtb	r5, r5
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d18e      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>

  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
 80032ba:	2d46      	cmp	r5, #70	; 0x46
 80032bc:	d1d7      	bne.n	800326e <test_004_003_execute.lto_priv.104+0xbe>
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
      test_assert(sem1.cnt == 0, "counter not zero");
    }
    test_assert_sequence("ABCDE", "invalid sequence");
 80032be:	4910      	ldr	r1, [pc, #64]	; (8003300 <test_004_003_execute.lto_priv.104+0x150>)
 80032c0:	4810      	ldr	r0, [pc, #64]	; (8003304 <test_004_003_execute.lto_priv.104+0x154>)
 80032c2:	f7fd f9a5 	bl	8000610 <_test_assert_sequence>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d186      	bne.n	80031d8 <test_004_003_execute.lto_priv.104+0x28>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80032ca:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 80032ce:	f607 10c4 	addw	r0, r7, #2500	; 0x9c4
                            "out of time window");
  }
}
 80032d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
      test_assert(sem1.cnt == 0, "counter not zero");
    }
    test_assert_sequence("ABCDE", "invalid sequence");
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80032d6:	f002 befb 	b.w	80060d0 <_test_assert_time_window.constprop.2>
 80032da:	bf00      	nop
 80032dc:	200011e4 	.word	0x200011e4
 80032e0:	200012f0 	.word	0x200012f0
 80032e4:	08006418 	.word	0x08006418
 80032e8:	08006254 	.word	0x08006254
 80032ec:	080062b0 	.word	0x080062b0
 80032f0:	20001240 	.word	0x20001240
 80032f4:	20000ae8 	.word	0x20000ae8
 80032f8:	08002ba1 	.word	0x08002ba1
 80032fc:	200011f4 	.word	0x200011f4
 8003300:	080061c0 	.word	0x080061c0
 8003304:	08006224 	.word	0x08006224
	...

08003310 <test_009_001_setup.lto_priv.148>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <test_009_001_setup.lto_priv.148+0x10>)
 8003312:	2200      	movs	r2, #0
  mp->object_size = size;
 8003314:	2104      	movs	r1, #4
 8003316:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003318:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
  mp->provider = provider;
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000818 	.word	0x20000818
	...

08003330 <null_provider.lto_priv.170>:

  (void)size;
  (void)align;

  return NULL;
}
 8003330:	2000      	movs	r0, #0
 8003332:	4770      	bx	lr
	...

08003340 <test_008_003_setup.lto_priv.145>:
 * - [8.3.3] Resetting the mailbox.
 * - [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.
 * .
 */

static void test_008_003_setup(void) {
 8003340:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <test_008_003_setup.lto_priv.145+0x30>)
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <test_008_003_setup.lto_priv.145+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8003346:	2504      	movs	r5, #4
  mbp->rdptr = buf;
  mbp->wrptr = buf;
  mbp->top = &buf[n];
 8003348:	f102 0610 	add.w	r6, r2, #16
 800334c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800334e:	f103 001c 	add.w	r0, r3, #28
 8003352:	f103 0110 	add.w	r1, r3, #16
 8003356:	605e      	str	r6, [r3, #4]
 8003358:	625d      	str	r5, [r3, #36]	; 0x24
 800335a:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 800335c:	601a      	str	r2, [r3, #0]
  mbp->rdptr = buf;
 800335e:	60da      	str	r2, [r3, #12]
  mbp->wrptr = buf;
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	61d8      	str	r0, [r3, #28]
  tqp->prev = (thread_t *)tqp;
 8003364:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003366:	6119      	str	r1, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8003368:	6159      	str	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 800336a:	bc70      	pop	{r4, r5, r6}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000824 	.word	0x20000824
 8003374:	200012b8 	.word	0x200012b8
	...

08003380 <test_008_002_setup.lto_priv.142>:
 8003380:	f7ff bfde 	b.w	8003340 <test_008_003_setup.lto_priv.145>
	...

08003390 <test_008_001_setup.lto_priv.139>:
 8003390:	f7ff bfd6 	b.w	8003340 <test_008_003_setup.lto_priv.145>
	...

080033a0 <test_008_003_teardown.lto_priv.146>:

static void test_008_003_teardown(void) {
  chMBReset(&mb1);
 80033a0:	f002 bd76 	b.w	8005e90 <chMBReset.constprop.29>
	...

080033b0 <test_008_002_teardown.lto_priv.143>:
 80033b0:	f7ff bff6 	b.w	80033a0 <test_008_003_teardown.lto_priv.146>
	...

080033c0 <test_008_001_teardown.lto_priv.140>:
 80033c0:	f7ff bfee 	b.w	80033a0 <test_008_003_teardown.lto_priv.146>
	...

080033d0 <test_008_003_execute.lto_priv.147>:
}

static void test_008_003_execute(void) {
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
 80033d2:	4d58      	ldr	r5, [pc, #352]	; (8003534 <test_008_003_execute.lto_priv.147+0x164>)
 80033d4:	2301      	movs	r3, #1

static void test_008_003_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_003_execute(void) {
 80033d6:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	2442      	movs	r4, #66	; 0x42
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033e0:	4620      	mov	r0, r4
 80033e2:	f002 fd65 	bl	8005eb0 <chMBPost.constprop.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80033e6:	fab0 f080 	clz	r0, r0
 80033ea:	4953      	ldr	r1, [pc, #332]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 80033ec:	0940      	lsrs	r0, r0, #5
 80033ee:	f7fd f937 	bl	8000660 <_test_assert>
 80033f2:	3401      	adds	r4, #1
 80033f4:	b988      	cbnz	r0, 800341a <test_008_003_execute.lto_priv.147+0x4a>
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
  {
    for (i = 0; i < MB_SIZE; i++) {
 80033f6:	2c46      	cmp	r4, #70	; 0x46
 80033f8:	d1f0      	bne.n	80033dc <test_008_003_execute.lto_priv.147+0xc>
    }
  }

  /* [8.3.2] Testing chMBPost(), chMBPostI(), chMBPostAhead() and
     chMBPostAheadI() timeout.*/
  test_set_step(2);
 80033fa:	2302      	movs	r3, #2
  {
    msg1 = chMBPost(&mb1, 'X', 1);
 80033fc:	2101      	movs	r1, #1
 80033fe:	2058      	movs	r0, #88	; 0x58
    }
  }

  /* [8.3.2] Testing chMBPost(), chMBPostI(), chMBPostAhead() and
     chMBPostAheadI() timeout.*/
  test_set_step(2);
 8003400:	602b      	str	r3, [r5, #0]
  {
    msg1 = chMBPost(&mb1, 'X', 1);
 8003402:	f002 fd55 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003406:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800340a:	fab0 f080 	clz	r0, r0
 800340e:	494a      	ldr	r1, [pc, #296]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 8003410:	0940      	lsrs	r0, r0, #5
 8003412:	f7fd f925 	bl	8000660 <_test_assert>
 8003416:	4604      	mov	r4, r0
 8003418:	b108      	cbz	r0, 800341e <test_008_003_execute.lto_priv.147+0x4e>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 800341a:	b003      	add	sp, #12
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	2320      	movs	r3, #32
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	4e45      	ldr	r6, [pc, #276]	; (800353c <test_008_003_execute.lto_priv.147+0x16c>)
 8003426:	6a73      	ldr	r3, [r6, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8003428:	2b00      	cmp	r3, #0
 800342a:	dd7d      	ble.n	8003528 <test_008_003_execute.lto_priv.147+0x158>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 800342c:	68b1      	ldr	r1, [r6, #8]
  if (mbp->wrptr >= mbp->top) {
 800342e:	6870      	ldr	r0, [r6, #4]
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8003430:	1d0a      	adds	r2, r1, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8003432:	3b01      	subs	r3, #1
  if (mbp->wrptr >= mbp->top) {
 8003434:	4282      	cmp	r2, r0
 8003436:	6273      	str	r3, [r6, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8003438:	f04f 0758 	mov.w	r7, #88	; 0x58
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
 800343c:	bf28      	it	cs
 800343e:	6833      	ldrcs	r3, [r6, #0]
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8003440:	60b2      	str	r2, [r6, #8]
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
  }
  chSemSignalI(&mbp->fullsem);
 8003442:	483f      	ldr	r0, [pc, #252]	; (8003540 <test_008_003_execute.lto_priv.147+0x170>)
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8003444:	600f      	str	r7, [r1, #0]
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
 8003446:	bf28      	it	cs
 8003448:	60b3      	strcs	r3, [r6, #8]
  }
  chSemSignalI(&mbp->fullsem);
 800344a:	f7fd feb9 	bl	80011c0 <chSemSignalI>
 800344e:	2300      	movs	r3, #0
 8003450:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBPost(&mb1, 'X', 1);
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
    chSysLock();
    msg1 = chMBPostI(&mb1, 'X');
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003454:	4938      	ldr	r1, [pc, #224]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 8003456:	4620      	mov	r0, r4
 8003458:	f7fd f902 	bl	8000660 <_test_assert>
 800345c:	2800      	cmp	r0, #0
 800345e:	d1dc      	bne.n	800341a <test_008_003_execute.lto_priv.147+0x4a>
    msg1 = chMBPostAhead(&mb1, 'X', 1);
 8003460:	2101      	movs	r1, #1
 8003462:	2058      	movs	r0, #88	; 0x58
 8003464:	f002 fd4c 	bl	8005f00 <chMBPostAhead.constprop.26>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003468:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800346c:	fab0 f080 	clz	r0, r0
 8003470:	4931      	ldr	r1, [pc, #196]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 8003472:	0940      	lsrs	r0, r0, #5
 8003474:	f7fd f8f4 	bl	8000660 <_test_assert>
 8003478:	4604      	mov	r4, r0
 800347a:	2800      	cmp	r0, #0
 800347c:	d1cd      	bne.n	800341a <test_008_003_execute.lto_priv.147+0x4a>
 800347e:	2320      	movs	r3, #32
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8003486:	4a2d      	ldr	r2, [pc, #180]	; (800353c <test_008_003_execute.lto_priv.147+0x16c>)
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8003488:	2900      	cmp	r1, #0
 800348a:	dd4f      	ble.n	800352c <test_008_003_execute.lto_priv.147+0x15c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
 800348c:	68d3      	ldr	r3, [r2, #12]
 800348e:	6810      	ldr	r0, [r2, #0]
 8003490:	3b04      	subs	r3, #4
 8003492:	3901      	subs	r1, #1
 8003494:	4283      	cmp	r3, r0
 8003496:	6251      	str	r1, [r2, #36]	; 0x24
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	d202      	bcs.n	80034a2 <test_008_003_execute.lto_priv.147+0xd2>
    mbp->rdptr = mbp->top - 1;
 800349c:	6853      	ldr	r3, [r2, #4]
 800349e:	3b04      	subs	r3, #4
 80034a0:	60d3      	str	r3, [r2, #12]
  }
  *mbp->rdptr = msg;
 80034a2:	2258      	movs	r2, #88	; 0x58
 80034a4:	601a      	str	r2, [r3, #0]
  chSemSignalI(&mbp->fullsem);
 80034a6:	4826      	ldr	r0, [pc, #152]	; (8003540 <test_008_003_execute.lto_priv.147+0x170>)
 80034a8:	f7fd fe8a 	bl	80011c0 <chSemSignalI>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg1 = chMBPostAheadI(&mb1, 'X');
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80034b2:	4921      	ldr	r1, [pc, #132]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7fd f8d3 	bl	8000660 <_test_assert>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d1ad      	bne.n	800341a <test_008_003_execute.lto_priv.147+0x4a>
  }

  /* [8.3.3] Resetting the mailbox.*/
  test_set_step(3);
 80034be:	2303      	movs	r3, #3
 80034c0:	602b      	str	r3, [r5, #0]
  {
    chMBReset(&mb1);
 80034c2:	f002 fce5 	bl	8005e90 <chMBReset.constprop.29>
  }

  /* [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.*/
  test_set_step(4);
 80034c6:	2304      	movs	r3, #4
  {
    msg1 = chMBFetch(&mb1, &msg2, 1);
 80034c8:	2101      	movs	r1, #1
 80034ca:	eb0d 0003 	add.w	r0, sp, r3
  {
    chMBReset(&mb1);
  }

  /* [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.*/
  test_set_step(4);
 80034ce:	602b      	str	r3, [r5, #0]
  {
    msg1 = chMBFetch(&mb1, &msg2, 1);
 80034d0:	f002 fd46 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80034d4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80034d8:	fab0 f080 	clz	r0, r0
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 80034de:	0940      	lsrs	r0, r0, #5
 80034e0:	f7fd f8be 	bl	8000660 <_test_assert>
 80034e4:	4604      	mov	r4, r0
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d197      	bne.n	800341a <test_008_003_execute.lto_priv.147+0x4a>
 80034ea:	2320      	movs	r3, #32
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	69b2      	ldr	r2, [r6, #24]
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <test_008_003_execute.lto_priv.147+0x16c>)
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 80034f4:	2a00      	cmp	r2, #0
 80034f6:	dd1b      	ble.n	8003530 <test_008_003_execute.lto_priv.147+0x160>
 80034f8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	6199      	str	r1, [r3, #24]
  if (mbp->rdptr >= mbp->top) {
 80034fe:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 8003500:	6810      	ldr	r0, [r2, #0]
 8003502:	3204      	adds	r2, #4
  if (mbp->rdptr >= mbp->top) {
 8003504:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 8003506:	60da      	str	r2, [r3, #12]
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
 8003508:	bf28      	it	cs
 800350a:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 800350c:	9001      	str	r0, [sp, #4]
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
  }
  chSemSignalI(&mbp->emptysem);
 800350e:	480d      	ldr	r0, [pc, #52]	; (8003544 <test_008_003_execute.lto_priv.147+0x174>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
 8003510:	bf28      	it	cs
 8003512:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->emptysem);
 8003514:	f7fd fe54 	bl	80011c0 <chSemSignalI>
 8003518:	2300      	movs	r3, #0
 800351a:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800351e:	4906      	ldr	r1, [pc, #24]	; (8003538 <test_008_003_execute.lto_priv.147+0x168>)
 8003520:	4620      	mov	r0, r4
 8003522:	f7fd f89d 	bl	8000660 <_test_assert>
 8003526:	e778      	b.n	800341a <test_008_003_execute.lto_priv.147+0x4a>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8003528:	2401      	movs	r4, #1
 800352a:	e790      	b.n	800344e <test_008_003_execute.lto_priv.147+0x7e>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 800352c:	2401      	movs	r4, #1
 800352e:	e7bd      	b.n	80034ac <test_008_003_execute.lto_priv.147+0xdc>
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8003530:	2401      	movs	r4, #1
 8003532:	e7f1      	b.n	8003518 <test_008_003_execute.lto_priv.147+0x148>
 8003534:	200011e4 	.word	0x200011e4
 8003538:	08006418 	.word	0x08006418
 800353c:	20000824 	.word	0x20000824
 8003540:	20000834 	.word	0x20000834
 8003544:	20000840 	.word	0x20000840
	...

08003550 <test_008_001_execute.lto_priv.141>:

static void test_008_001_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_001_execute(void) {
 8003550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.1.1] Testing the mailbox size.*/
  test_set_step(1);
 8003554:	4f99      	ldr	r7, [pc, #612]	; (80037bc <test_008_001_execute.lto_priv.141+0x26c>)
 8003556:	2301      	movs	r3, #1

static void test_008_001_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_001_execute(void) {
 8003558:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [8.1.1] Testing the mailbox size.*/
  test_set_step(1);
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	2620      	movs	r6, #32
 800355e:	f386 8811 	msr	BASEPRI, r6
 8003562:	4d97      	ldr	r5, [pc, #604]	; (80037c0 <test_008_001_execute.lto_priv.141+0x270>)
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003564:	4997      	ldr	r1, [pc, #604]	; (80037c4 <test_008_001_execute.lto_priv.141+0x274>)
 8003566:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003568:	f1a0 0004 	sub.w	r0, r0, #4
 800356c:	fab0 f080 	clz	r0, r0
 8003570:	0940      	lsrs	r0, r0, #5
 8003572:	f7fd f875 	bl	8000660 <_test_assert>
 8003576:	b128      	cbz	r0, 8003584 <test_008_001_execute.lto_priv.141+0x34>
 8003578:	2300      	movs	r3, #0
 800357a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 800357e:	b003      	add	sp, #12
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	4604      	mov	r4, r0
 8003586:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  }

  /* [8.1.2] Resetting the mailbox, conditions are checked, no errors
     expected.*/
  test_set_step(2);
 800358a:	2302      	movs	r3, #2
 800358c:	603b      	str	r3, [r7, #0]
  {
    chMBReset(&mb1);
 800358e:	f002 fc7f 	bl	8005e90 <chMBReset.constprop.29>
 8003592:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003596:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003598:	498b      	ldr	r1, [pc, #556]	; (80037c8 <test_008_001_execute.lto_priv.141+0x278>)
 800359a:	f1a0 0004 	sub.w	r0, r0, #4
 800359e:	fab0 f080 	clz	r0, r0
 80035a2:	0940      	lsrs	r0, r0, #5
 80035a4:	f7fd f85c 	bl	8000660 <_test_assert>
 80035a8:	4680      	mov	r8, r0
 80035aa:	b120      	cbz	r0, 80035b6 <test_008_001_execute.lto_priv.141+0x66>
 80035ac:	f384 8811 	msr	BASEPRI, r4
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 80035b0:	b003      	add	sp, #12
 80035b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b6:	f380 8811 	msr	BASEPRI, r0
 80035ba:	f386 8811 	msr	BASEPRI, r6
     expected.*/
  test_set_step(2);
  {
    chMBReset(&mb1);
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80035be:	69a8      	ldr	r0, [r5, #24]
 80035c0:	4982      	ldr	r1, [pc, #520]	; (80037cc <test_008_001_execute.lto_priv.141+0x27c>)
 80035c2:	fab0 f080 	clz	r0, r0
 80035c6:	0940      	lsrs	r0, r0, #5
 80035c8:	f7fd f84a 	bl	8000660 <_test_assert>
 80035cc:	4604      	mov	r4, r0
 80035ce:	b110      	cbz	r0, 80035d6 <test_008_001_execute.lto_priv.141+0x86>
 80035d0:	f388 8811 	msr	BASEPRI, r8
 80035d4:	e7d3      	b.n	800357e <test_008_001_execute.lto_priv.141+0x2e>
 80035d6:	f380 8811 	msr	BASEPRI, r0
 80035da:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80035de:	6828      	ldr	r0, [r5, #0]
 80035e0:	68ab      	ldr	r3, [r5, #8]
 80035e2:	497b      	ldr	r1, [pc, #492]	; (80037d0 <test_008_001_execute.lto_priv.141+0x280>)
 80035e4:	1ac0      	subs	r0, r0, r3
 80035e6:	fab0 f080 	clz	r0, r0
 80035ea:	0940      	lsrs	r0, r0, #5
 80035ec:	f7fd f838 	bl	8000660 <_test_assert>
 80035f0:	4680      	mov	r8, r0
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d1da      	bne.n	80035ac <test_008_001_execute.lto_priv.141+0x5c>
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80035fe:	6828      	ldr	r0, [r5, #0]
 8003600:	68eb      	ldr	r3, [r5, #12]
 8003602:	4974      	ldr	r1, [pc, #464]	; (80037d4 <test_008_001_execute.lto_priv.141+0x284>)
 8003604:	1ac0      	subs	r0, r0, r3
 8003606:	fab0 f080 	clz	r0, r0
 800360a:	0940      	lsrs	r0, r0, #5
 800360c:	f7fd f828 	bl	8000660 <_test_assert>
 8003610:	2800      	cmp	r0, #0
 8003612:	d1dd      	bne.n	80035d0 <test_008_001_execute.lto_priv.141+0x80>
 8003614:	f380 8811 	msr	BASEPRI, r0
  }

  /* [8.1.3] Filling the mailbox using chMBPost() and chMBPostAhead()
     once, no errors expected.*/
  test_set_step(3);
 8003618:	2303      	movs	r3, #3
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	2442      	movs	r4, #66	; 0x42
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800361e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003622:	4620      	mov	r0, r4
 8003624:	f002 fc44 	bl	8005eb0 <chMBPost.constprop.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003628:	fab0 f080 	clz	r0, r0
 800362c:	496a      	ldr	r1, [pc, #424]	; (80037d8 <test_008_001_execute.lto_priv.141+0x288>)
 800362e:	0940      	lsrs	r0, r0, #5
 8003630:	f7fd f816 	bl	8000660 <_test_assert>
 8003634:	3401      	adds	r4, #1
 8003636:	2800      	cmp	r0, #0
 8003638:	d1a1      	bne.n	800357e <test_008_001_execute.lto_priv.141+0x2e>

  /* [8.1.3] Filling the mailbox using chMBPost() and chMBPostAhead()
     once, no errors expected.*/
  test_set_step(3);
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
 800363a:	2c45      	cmp	r4, #69	; 0x45
 800363c:	d1ef      	bne.n	800361e <test_008_001_execute.lto_priv.141+0xce>
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
    }
    msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800363e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003642:	2041      	movs	r0, #65	; 0x41
 8003644:	f002 fc5c 	bl	8005f00 <chMBPostAhead.constprop.26>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003648:	fab0 f080 	clz	r0, r0
 800364c:	4962      	ldr	r1, [pc, #392]	; (80037d8 <test_008_001_execute.lto_priv.141+0x288>)
 800364e:	0940      	lsrs	r0, r0, #5
 8003650:	f7fd f806 	bl	8000660 <_test_assert>
 8003654:	4606      	mov	r6, r0
 8003656:	2800      	cmp	r0, #0
 8003658:	d191      	bne.n	800357e <test_008_001_execute.lto_priv.141+0x2e>
  }

  /* [8.1.4] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(4);
 800365a:	2404      	movs	r4, #4
 800365c:	603c      	str	r4, [r7, #0]
 800365e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80037bc <test_008_001_execute.lto_priv.141+0x26c>
 8003662:	f04f 0a20 	mov.w	sl, #32
 8003666:	f38a 8811 	msr	BASEPRI, sl
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800366a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800366c:	495b      	ldr	r1, [pc, #364]	; (80037dc <test_008_001_execute.lto_priv.141+0x28c>)
 800366e:	fab0 f080 	clz	r0, r0
 8003672:	0940      	lsrs	r0, r0, #5
 8003674:	f7fc fff4 	bl	8000660 <_test_assert>
 8003678:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80037c0 <test_008_001_execute.lto_priv.141+0x270>
 800367c:	4683      	mov	fp, r0
 800367e:	b110      	cbz	r0, 8003686 <test_008_001_execute.lto_priv.141+0x136>
 8003680:	f386 8811 	msr	BASEPRI, r6
 8003684:	e77b      	b.n	800357e <test_008_001_execute.lto_priv.141+0x2e>
 8003686:	f380 8811 	msr	BASEPRI, r0
 800368a:	f38a 8811 	msr	BASEPRI, sl
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800368e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003692:	4953      	ldr	r1, [pc, #332]	; (80037e0 <test_008_001_execute.lto_priv.141+0x290>)
 8003694:	f1a0 0c04 	sub.w	ip, r0, #4
 8003698:	f1dc 0000 	rsbs	r0, ip, #0
 800369c:	eb40 000c 	adc.w	r0, r0, ip
 80036a0:	f7fc ffde 	bl	8000660 <_test_assert>
 80036a4:	4606      	mov	r6, r0
 80036a6:	b110      	cbz	r0, 80036ae <test_008_001_execute.lto_priv.141+0x15e>
 80036a8:	f38b 8811 	msr	BASEPRI, fp
 80036ac:	e767      	b.n	800357e <test_008_001_execute.lto_priv.141+0x2e>
 80036ae:	f380 8811 	msr	BASEPRI, r0
 80036b2:	f38a 8811 	msr	BASEPRI, sl
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80036b6:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80036ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80036be:	4949      	ldr	r1, [pc, #292]	; (80037e4 <test_008_001_execute.lto_priv.141+0x294>)
 80036c0:	ebc3 0e00 	rsb	lr, r3, r0
 80036c4:	f1de 0000 	rsbs	r0, lr, #0
 80036c8:	eb40 000e 	adc.w	r0, r0, lr
 80036cc:	f7fc ffc8 	bl	8000660 <_test_assert>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d1d5      	bne.n	8003680 <test_008_001_execute.lto_priv.141+0x130>
 80036d4:	f380 8811 	msr	BASEPRI, r0
  }

  /* [8.1.5] Emptying the mailbox using chMBFetch(), no errors
     expected.*/
  test_set_step(5);
 80036d8:	2305      	movs	r3, #5
 80036da:	f8c9 3000 	str.w	r3, [r9]
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80036de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036e2:	a801      	add	r0, sp, #4
 80036e4:	f002 fc3c 	bl	8005f60 <chMBFetch.constprop.24>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80036e8:	fab0 f080 	clz	r0, r0
 80036ec:	493a      	ldr	r1, [pc, #232]	; (80037d8 <test_008_001_execute.lto_priv.141+0x288>)
 80036ee:	0940      	lsrs	r0, r0, #5
 80036f0:	f7fc ffb6 	bl	8000660 <_test_assert>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	f47f af42 	bne.w	800357e <test_008_001_execute.lto_priv.141+0x2e>
      test_emit_token(msg2);
 80036fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80036fe:	f7fc ff07 	bl	8000510 <test_emit_token>

  /* [8.1.5] Emptying the mailbox using chMBFetch(), no errors
     expected.*/
  test_set_step(5);
  {
    for (i = 0; i < MB_SIZE; i++) {
 8003702:	3c01      	subs	r4, #1
 8003704:	d1eb      	bne.n	80036de <test_008_001_execute.lto_priv.141+0x18e>
      msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
      test_emit_token(msg2);
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 8003706:	4938      	ldr	r1, [pc, #224]	; (80037e8 <test_008_001_execute.lto_priv.141+0x298>)
 8003708:	4838      	ldr	r0, [pc, #224]	; (80037ec <test_008_001_execute.lto_priv.141+0x29c>)
 800370a:	f7fc ff81 	bl	8000610 <_test_assert_sequence>
 800370e:	2800      	cmp	r0, #0
 8003710:	f47f af35 	bne.w	800357e <test_008_001_execute.lto_priv.141+0x2e>
  }

  /* [8.1.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8003714:	2306      	movs	r3, #6
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003716:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800371a:	2046      	movs	r0, #70	; 0x46
    test_assert_sequence("ABCD", "wrong get sequence");
  }

  /* [8.1.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 800371c:	603b      	str	r3, [r7, #0]
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800371e:	f002 fbc7 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003722:	fab0 f080 	clz	r0, r0
 8003726:	492c      	ldr	r1, [pc, #176]	; (80037d8 <test_008_001_execute.lto_priv.141+0x288>)
 8003728:	0940      	lsrs	r0, r0, #5
    test_assert_sequence("ABCD", "wrong get sequence");
  }

  /* [8.1.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 800372a:	4e24      	ldr	r6, [pc, #144]	; (80037bc <test_008_001_execute.lto_priv.141+0x26c>)
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800372c:	f7fc ff98 	bl	8000660 <_test_assert>
 8003730:	2800      	cmp	r0, #0
 8003732:	f47f af24 	bne.w	800357e <test_008_001_execute.lto_priv.141+0x2e>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800373a:	a801      	add	r0, sp, #4
 800373c:	f002 fc10 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003740:	fab0 f080 	clz	r0, r0
 8003744:	4924      	ldr	r1, [pc, #144]	; (80037d8 <test_008_001_execute.lto_priv.141+0x288>)
 8003746:	0940      	lsrs	r0, r0, #5
 8003748:	f7fc ff8a 	bl	8000660 <_test_assert>
 800374c:	2800      	cmp	r0, #0
 800374e:	f47f af16 	bne.w	800357e <test_008_001_execute.lto_priv.141+0x2e>
  }

  /* [8.1.7] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(7);
 8003752:	2307      	movs	r3, #7
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	2620      	movs	r6, #32
 8003758:	f386 8811 	msr	BASEPRI, r6
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800375c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800375e:	491a      	ldr	r1, [pc, #104]	; (80037c8 <test_008_001_execute.lto_priv.141+0x278>)
 8003760:	1f05      	subs	r5, r0, #4
 8003762:	4268      	negs	r0, r5
 8003764:	4168      	adcs	r0, r5
 8003766:	4d16      	ldr	r5, [pc, #88]	; (80037c0 <test_008_001_execute.lto_priv.141+0x270>)
 8003768:	f7fc ff7a 	bl	8000660 <_test_assert>
 800376c:	2800      	cmp	r0, #0
 800376e:	f47f af1d 	bne.w	80035ac <test_008_001_execute.lto_priv.141+0x5c>
 8003772:	f384 8811 	msr	BASEPRI, r4
 8003776:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800377a:	69a8      	ldr	r0, [r5, #24]
 800377c:	4913      	ldr	r1, [pc, #76]	; (80037cc <test_008_001_execute.lto_priv.141+0x27c>)
 800377e:	fab0 f080 	clz	r0, r0
 8003782:	0940      	lsrs	r0, r0, #5
 8003784:	f7fc ff6c 	bl	8000660 <_test_assert>
 8003788:	2800      	cmp	r0, #0
 800378a:	f47f af0f 	bne.w	80035ac <test_008_001_execute.lto_priv.141+0x5c>
 800378e:	f384 8811 	msr	BASEPRI, r4
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003792:	6828      	ldr	r0, [r5, #0]
 8003794:	68ab      	ldr	r3, [r5, #8]
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <test_008_001_execute.lto_priv.141+0x280>)
 8003798:	1ac2      	subs	r2, r0, r3
 800379a:	4250      	negs	r0, r2
 800379c:	4150      	adcs	r0, r2
 800379e:	f7fc ff5f 	bl	8000660 <_test_assert>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	f47f aeeb 	bne.w	800357e <test_008_001_execute.lto_priv.141+0x2e>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80037a8:	6828      	ldr	r0, [r5, #0]
 80037aa:	68eb      	ldr	r3, [r5, #12]
 80037ac:	4909      	ldr	r1, [pc, #36]	; (80037d4 <test_008_001_execute.lto_priv.141+0x284>)
 80037ae:	1ac3      	subs	r3, r0, r3
 80037b0:	4258      	negs	r0, r3
 80037b2:	4158      	adcs	r0, r3
 80037b4:	f7fc ff54 	bl	8000660 <_test_assert>
 80037b8:	e6e1      	b.n	800357e <test_008_001_execute.lto_priv.141+0x2e>
 80037ba:	bf00      	nop
 80037bc:	200011e4 	.word	0x200011e4
 80037c0:	20000824 	.word	0x20000824
 80037c4:	08006430 	.word	0x08006430
 80037c8:	0800643c 	.word	0x0800643c
 80037cc:	08006448 	.word	0x08006448
 80037d0:	08006454 	.word	0x08006454
 80037d4:	08006478 	.word	0x08006478
 80037d8:	08006418 	.word	0x08006418
 80037dc:	0800649c 	.word	0x0800649c
 80037e0:	080064a8 	.word	0x080064a8
 80037e4:	080064b4 	.word	0x080064b4
 80037e8:	080064cc 	.word	0x080064cc
 80037ec:	080061f4 	.word	0x080061f4

080037f0 <test_008_002_execute.lto_priv.144>:

static void test_008_002_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_002_execute(void) {
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.2.1] Testing the mailbox size.*/
  test_set_step(1);
 80037f4:	4fba      	ldr	r7, [pc, #744]	; (8003ae0 <test_008_002_execute.lto_priv.144+0x2f0>)
 80037f6:	2301      	movs	r3, #1

static void test_008_002_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_002_execute(void) {
 80037f8:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [8.2.1] Testing the mailbox size.*/
  test_set_step(1);
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	2520      	movs	r5, #32
 80037fe:	f385 8811 	msr	BASEPRI, r5
 8003802:	4eb8      	ldr	r6, [pc, #736]	; (8003ae4 <test_008_002_execute.lto_priv.144+0x2f4>)
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003804:	49b8      	ldr	r1, [pc, #736]	; (8003ae8 <test_008_002_execute.lto_priv.144+0x2f8>)
 8003806:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003808:	f1a0 0004 	sub.w	r0, r0, #4
 800380c:	fab0 f080 	clz	r0, r0
 8003810:	0940      	lsrs	r0, r0, #5
 8003812:	f7fc ff25 	bl	8000660 <_test_assert>
 8003816:	b128      	cbz	r0, 8003824 <test_008_002_execute.lto_priv.144+0x34>
 8003818:	2300      	movs	r3, #0
 800381a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 800381e:	b003      	add	sp, #12
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003824:	4604      	mov	r4, r0
 8003826:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  }

  /* [8.2.2] Resetting the mailbox, conditions are checked, no errors
     expected.*/
  test_set_step(2);
 800382a:	2302      	movs	r3, #2
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	f385 8811 	msr	BASEPRI, r5
  {
    chSysLock();
    chMBResetI(&mb1);
 8003832:	f002 fb15 	bl	8005e60 <chMBResetI.constprop.30>
 8003836:	f384 8811 	msr	BASEPRI, r4
 800383a:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800383e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003840:	49aa      	ldr	r1, [pc, #680]	; (8003aec <test_008_002_execute.lto_priv.144+0x2fc>)
 8003842:	f1a0 0004 	sub.w	r0, r0, #4
 8003846:	fab0 f080 	clz	r0, r0
 800384a:	0940      	lsrs	r0, r0, #5
 800384c:	f7fc ff08 	bl	8000660 <_test_assert>
 8003850:	4680      	mov	r8, r0
 8003852:	b120      	cbz	r0, 800385e <test_008_002_execute.lto_priv.144+0x6e>
 8003854:	f384 8811 	msr	BASEPRI, r4
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 8003858:	b003      	add	sp, #12
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	f380 8811 	msr	BASEPRI, r0
 8003862:	f385 8811 	msr	BASEPRI, r5
  {
    chSysLock();
    chMBResetI(&mb1);
    chSysUnlock();
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003866:	69b0      	ldr	r0, [r6, #24]
 8003868:	49a1      	ldr	r1, [pc, #644]	; (8003af0 <test_008_002_execute.lto_priv.144+0x300>)
 800386a:	fab0 f080 	clz	r0, r0
 800386e:	0940      	lsrs	r0, r0, #5
 8003870:	f7fc fef6 	bl	8000660 <_test_assert>
 8003874:	4604      	mov	r4, r0
 8003876:	b110      	cbz	r0, 800387e <test_008_002_execute.lto_priv.144+0x8e>
 8003878:	f388 8811 	msr	BASEPRI, r8
 800387c:	e7cf      	b.n	800381e <test_008_002_execute.lto_priv.144+0x2e>
 800387e:	f380 8811 	msr	BASEPRI, r0
 8003882:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003886:	6830      	ldr	r0, [r6, #0]
 8003888:	68b3      	ldr	r3, [r6, #8]
 800388a:	499a      	ldr	r1, [pc, #616]	; (8003af4 <test_008_002_execute.lto_priv.144+0x304>)
 800388c:	1ac0      	subs	r0, r0, r3
 800388e:	fab0 f080 	clz	r0, r0
 8003892:	0940      	lsrs	r0, r0, #5
 8003894:	f7fc fee4 	bl	8000660 <_test_assert>
 8003898:	4680      	mov	r8, r0
 800389a:	2800      	cmp	r0, #0
 800389c:	d1da      	bne.n	8003854 <test_008_002_execute.lto_priv.144+0x64>
 800389e:	f380 8811 	msr	BASEPRI, r0
 80038a2:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80038a6:	6830      	ldr	r0, [r6, #0]
 80038a8:	68f3      	ldr	r3, [r6, #12]
 80038aa:	4993      	ldr	r1, [pc, #588]	; (8003af8 <test_008_002_execute.lto_priv.144+0x308>)
 80038ac:	1ac0      	subs	r0, r0, r3
 80038ae:	fab0 f080 	clz	r0, r0
 80038b2:	0940      	lsrs	r0, r0, #5
 80038b4:	f7fc fed4 	bl	8000660 <_test_assert>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d1dd      	bne.n	8003878 <test_008_002_execute.lto_priv.144+0x88>
 80038bc:	f380 8811 	msr	BASEPRI, r0
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80038c0:	4680      	mov	r8, r0
 80038c2:	4634      	mov	r4, r6
  }

  /* [8.2.3] Filling the mailbox using chMBPostI() and chMBPostAheadI()
     once, no errors expected.*/
  test_set_step(3);
 80038c4:	2303      	movs	r3, #3
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	2542      	movs	r5, #66	; 0x42
 80038ca:	2320      	movs	r3, #32
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
  }
  chSemSignalI(&mbp->fullsem);
 80038d2:	488a      	ldr	r0, [pc, #552]	; (8003afc <test_008_002_execute.lto_priv.144+0x30c>)
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80038da:	dd61      	ble.n	80039a0 <test_008_002_execute.lto_priv.144+0x1b0>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80038dc:	68a2      	ldr	r2, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 80038de:	6861      	ldr	r1, [r4, #4]
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80038e0:	1d13      	adds	r3, r2, #4
  if (mbp->wrptr >= mbp->top) {
 80038e2:	428b      	cmp	r3, r1
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80038e4:	60a3      	str	r3, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
 80038e6:	bf28      	it	cs
 80038e8:	6823      	ldrcs	r3, [r4, #0]
 80038ea:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80038ee:	6015      	str	r5, [r2, #0]
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
 80038f0:	bf28      	it	cs
 80038f2:	60a3      	strcs	r3, [r4, #8]
  }
  chSemSignalI(&mbp->fullsem);
 80038f4:	f7fd fc64 	bl	80011c0 <chSemSignalI>
 80038f8:	2001      	movs	r0, #1
 80038fa:	f388 8811 	msr	BASEPRI, r8
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
      chSysLock();
      msg1 = chMBPostI(&mb1, 'B' + i);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80038fe:	4980      	ldr	r1, [pc, #512]	; (8003b00 <test_008_002_execute.lto_priv.144+0x310>)
 8003900:	f7fc feae 	bl	8000660 <_test_assert>
 8003904:	3501      	adds	r5, #1
 8003906:	2800      	cmp	r0, #0
 8003908:	d189      	bne.n	800381e <test_008_002_execute.lto_priv.144+0x2e>

  /* [8.2.3] Filling the mailbox using chMBPostI() and chMBPostAheadI()
     once, no errors expected.*/
  test_set_step(3);
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
 800390a:	2d45      	cmp	r5, #69	; 0x45
 800390c:	d1dd      	bne.n	80038ca <test_008_002_execute.lto_priv.144+0xda>
 800390e:	2320      	movs	r3, #32
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8003916:	4a73      	ldr	r2, [pc, #460]	; (8003ae4 <test_008_002_execute.lto_priv.144+0x2f4>)
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8003918:	2900      	cmp	r1, #0
 800391a:	dd10      	ble.n	800393e <test_008_002_execute.lto_priv.144+0x14e>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
 800391c:	68d3      	ldr	r3, [r2, #12]
 800391e:	6810      	ldr	r0, [r2, #0]
 8003920:	3b04      	subs	r3, #4
 8003922:	3901      	subs	r1, #1
 8003924:	4283      	cmp	r3, r0
 8003926:	6251      	str	r1, [r2, #36]	; 0x24
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	d202      	bcs.n	8003932 <test_008_002_execute.lto_priv.144+0x142>
    mbp->rdptr = mbp->top - 1;
 800392c:	6853      	ldr	r3, [r2, #4]
 800392e:	3b04      	subs	r3, #4
 8003930:	60d3      	str	r3, [r2, #12]
  }
  *mbp->rdptr = msg;
 8003932:	2241      	movs	r2, #65	; 0x41
  chSemSignalI(&mbp->fullsem);
 8003934:	4871      	ldr	r0, [pc, #452]	; (8003afc <test_008_002_execute.lto_priv.144+0x30c>)
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
    mbp->rdptr = mbp->top - 1;
  }
  *mbp->rdptr = msg;
 8003936:	601a      	str	r2, [r3, #0]
  chSemSignalI(&mbp->fullsem);
 8003938:	f7fd fc42 	bl	80011c0 <chSemSignalI>
 800393c:	2001      	movs	r0, #1
 800393e:	2300      	movs	r3, #0
 8003940:	f383 8811 	msr	BASEPRI, r3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
    }
    chSysLock();
    msg1 = chMBPostAheadI(&mb1, 'A');
    chSysUnlock();
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003944:	496e      	ldr	r1, [pc, #440]	; (8003b00 <test_008_002_execute.lto_priv.144+0x310>)
 8003946:	f7fc fe8b 	bl	8000660 <_test_assert>
 800394a:	4680      	mov	r8, r0
 800394c:	2800      	cmp	r0, #0
 800394e:	f47f af66 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
  }

  /* [8.2.4] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(4);
 8003952:	2504      	movs	r5, #4
 8003954:	603d      	str	r5, [r7, #0]
 8003956:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8003ae0 <test_008_002_execute.lto_priv.144+0x2f0>
 800395a:	f04f 0a20 	mov.w	sl, #32
 800395e:	f38a 8811 	msr	BASEPRI, sl
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003962:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003964:	4967      	ldr	r1, [pc, #412]	; (8003b04 <test_008_002_execute.lto_priv.144+0x314>)
 8003966:	fab0 f080 	clz	r0, r0
 800396a:	0940      	lsrs	r0, r0, #5
 800396c:	f7fc fe78 	bl	8000660 <_test_assert>
 8003970:	4c5c      	ldr	r4, [pc, #368]	; (8003ae4 <test_008_002_execute.lto_priv.144+0x2f4>)
 8003972:	4683      	mov	fp, r0
 8003974:	2800      	cmp	r0, #0
 8003976:	f47f af7f 	bne.w	8003878 <test_008_002_execute.lto_priv.144+0x88>
 800397a:	f380 8811 	msr	BASEPRI, r0
 800397e:	f38a 8811 	msr	BASEPRI, sl
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003982:	69a0      	ldr	r0, [r4, #24]
 8003984:	4960      	ldr	r1, [pc, #384]	; (8003b08 <test_008_002_execute.lto_priv.144+0x318>)
 8003986:	f1a0 0c04 	sub.w	ip, r0, #4
 800398a:	f1dc 0000 	rsbs	r0, ip, #0
 800398e:	eb40 000c 	adc.w	r0, r0, ip
 8003992:	f7fc fe65 	bl	8000660 <_test_assert>
 8003996:	4680      	mov	r8, r0
 8003998:	b120      	cbz	r0, 80039a4 <test_008_002_execute.lto_priv.144+0x1b4>
 800399a:	f38b 8811 	msr	BASEPRI, fp
 800399e:	e73e      	b.n	800381e <test_008_002_execute.lto_priv.144+0x2e>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80039a0:	2000      	movs	r0, #0
 80039a2:	e7aa      	b.n	80038fa <test_008_002_execute.lto_priv.144+0x10a>
 80039a4:	f380 8811 	msr	BASEPRI, r0
 80039a8:	f38a 8811 	msr	BASEPRI, sl
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80039ac:	68e0      	ldr	r0, [r4, #12]
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	4956      	ldr	r1, [pc, #344]	; (8003b0c <test_008_002_execute.lto_priv.144+0x31c>)
 80039b2:	ebc3 0e00 	rsb	lr, r3, r0
 80039b6:	f1de 0000 	rsbs	r0, lr, #0
 80039ba:	eb40 000e 	adc.w	r0, r0, lr
 80039be:	f7fc fe4f 	bl	8000660 <_test_assert>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	f47f af58 	bne.w	8003878 <test_008_002_execute.lto_priv.144+0x88>
 80039c8:	f380 8811 	msr	BASEPRI, r0
  }

  /* [8.2.5] Emptying the mailbox using chMBFetchI(), no errors
     expected.*/
  test_set_step(5);
 80039cc:	2305      	movs	r3, #5
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
  }
  chSemSignalI(&mbp->emptysem);

  return MSG_OK;
 80039ce:	4680      	mov	r8, r0
 80039d0:	f8c9 3000 	str.w	r3, [r9]
 80039d4:	e01d      	b.n	8003a12 <test_008_002_execute.lto_priv.144+0x222>

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 80039d6:	68e1      	ldr	r1, [r4, #12]
  if (mbp->rdptr >= mbp->top) {
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	61a2      	str	r2, [r4, #24]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	3104      	adds	r1, #4
  if (mbp->rdptr >= mbp->top) {
 80039e0:	4299      	cmp	r1, r3
    mbp->rdptr = mbp->buffer;
 80039e2:	bf28      	it	cs
 80039e4:	6823      	ldrcs	r3, [r4, #0]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 80039e6:	60e1      	str	r1, [r4, #12]
 80039e8:	9201      	str	r2, [sp, #4]
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
 80039ea:	bf28      	it	cs
 80039ec:	60e3      	strcs	r3, [r4, #12]
  }
  chSemSignalI(&mbp->emptysem);
 80039ee:	f7fd fbe7 	bl	80011c0 <chSemSignalI>

  return MSG_OK;
 80039f2:	2000      	movs	r0, #0
 80039f4:	f388 8811 	msr	BASEPRI, r8
  {
    for (i = 0; i < MB_SIZE; i++) {
      chSysLock();
      msg1 = chMBFetchI(&mb1, &msg2);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80039f8:	4941      	ldr	r1, [pc, #260]	; (8003b00 <test_008_002_execute.lto_priv.144+0x310>)
 80039fa:	3001      	adds	r0, #1
 80039fc:	f7fc fe30 	bl	8000660 <_test_assert>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f47f af0c 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
      test_emit_token(msg2);
 8003a06:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003a0a:	f7fc fd81 	bl	8000510 <test_emit_token>

  /* [8.2.5] Emptying the mailbox using chMBFetchI(), no errors
     expected.*/
  test_set_step(5);
  {
    for (i = 0; i < MB_SIZE; i++) {
 8003a0e:	3d01      	subs	r5, #1
 8003a10:	d00b      	beq.n	8003a2a <test_008_002_execute.lto_priv.144+0x23a>
 8003a12:	2320      	movs	r3, #32
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	69b3      	ldr	r3, [r6, #24]
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
  }
  chSemSignalI(&mbp->emptysem);
 8003a1a:	483d      	ldr	r0, [pc, #244]	; (8003b10 <test_008_002_execute.lto_priv.144+0x320>)
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003a22:	dcd8      	bgt.n	80039d6 <test_008_002_execute.lto_priv.144+0x1e6>
    return MSG_TIMEOUT;
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a28:	e7e4      	b.n	80039f4 <test_008_002_execute.lto_priv.144+0x204>
      msg1 = chMBFetchI(&mb1, &msg2);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
      test_emit_token(msg2);
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 8003a2a:	493a      	ldr	r1, [pc, #232]	; (8003b14 <test_008_002_execute.lto_priv.144+0x324>)
 8003a2c:	483a      	ldr	r0, [pc, #232]	; (8003b18 <test_008_002_execute.lto_priv.144+0x328>)
 8003a2e:	f7fc fdef 	bl	8000610 <_test_assert_sequence>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	f47f aef3 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
  }

  /* [8.2.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8003a38:	2306      	movs	r3, #6
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003a3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a3e:	2046      	movs	r0, #70	; 0x46
    test_assert_sequence("ABCD", "wrong get sequence");
  }

  /* [8.2.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8003a40:	603b      	str	r3, [r7, #0]
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8003a42:	f002 fa35 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a46:	fab0 f080 	clz	r0, r0
 8003a4a:	492d      	ldr	r1, [pc, #180]	; (8003b00 <test_008_002_execute.lto_priv.144+0x310>)
 8003a4c:	0940      	lsrs	r0, r0, #5
    test_assert_sequence("ABCD", "wrong get sequence");
  }

  /* [8.2.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8003a4e:	4c24      	ldr	r4, [pc, #144]	; (8003ae0 <test_008_002_execute.lto_priv.144+0x2f0>)
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a50:	f7fc fe06 	bl	8000660 <_test_assert>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	f47f aee2 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003a5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a5e:	a801      	add	r0, sp, #4
 8003a60:	f002 fa7e 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003a64:	fab0 f080 	clz	r0, r0
 8003a68:	4925      	ldr	r1, [pc, #148]	; (8003b00 <test_008_002_execute.lto_priv.144+0x310>)
 8003a6a:	0940      	lsrs	r0, r0, #5
 8003a6c:	f7fc fdf8 	bl	8000660 <_test_assert>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	f47f aed4 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
  }

  /* [8.2.7] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(7);
 8003a76:	2307      	movs	r3, #7
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	2720      	movs	r7, #32
 8003a7c:	f387 8811 	msr	BASEPRI, r7
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003a80:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003a82:	491a      	ldr	r1, [pc, #104]	; (8003aec <test_008_002_execute.lto_priv.144+0x2fc>)
 8003a84:	1f04      	subs	r4, r0, #4
 8003a86:	4260      	negs	r0, r4
 8003a88:	4160      	adcs	r0, r4
 8003a8a:	4c16      	ldr	r4, [pc, #88]	; (8003ae4 <test_008_002_execute.lto_priv.144+0x2f4>)
 8003a8c:	f7fc fde8 	bl	8000660 <_test_assert>
 8003a90:	b110      	cbz	r0, 8003a98 <test_008_002_execute.lto_priv.144+0x2a8>
 8003a92:	f385 8811 	msr	BASEPRI, r5
 8003a96:	e6c2      	b.n	800381e <test_008_002_execute.lto_priv.144+0x2e>
 8003a98:	f385 8811 	msr	BASEPRI, r5
 8003a9c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003aa0:	69a0      	ldr	r0, [r4, #24]
 8003aa2:	4913      	ldr	r1, [pc, #76]	; (8003af0 <test_008_002_execute.lto_priv.144+0x300>)
 8003aa4:	fab0 f080 	clz	r0, r0
 8003aa8:	0940      	lsrs	r0, r0, #5
 8003aaa:	f7fc fdd9 	bl	8000660 <_test_assert>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d1ef      	bne.n	8003a92 <test_008_002_execute.lto_priv.144+0x2a2>
 8003ab2:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	68a3      	ldr	r3, [r4, #8]
 8003aba:	490e      	ldr	r1, [pc, #56]	; (8003af4 <test_008_002_execute.lto_priv.144+0x304>)
 8003abc:	1ac2      	subs	r2, r0, r3
 8003abe:	4250      	negs	r0, r2
 8003ac0:	4150      	adcs	r0, r2
 8003ac2:	f7fc fdcd 	bl	8000660 <_test_assert>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	f47f aea9 	bne.w	800381e <test_008_002_execute.lto_priv.144+0x2e>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	4909      	ldr	r1, [pc, #36]	; (8003af8 <test_008_002_execute.lto_priv.144+0x308>)
 8003ad2:	1ac3      	subs	r3, r0, r3
 8003ad4:	4258      	negs	r0, r3
 8003ad6:	4158      	adcs	r0, r3
 8003ad8:	f7fc fdc2 	bl	8000660 <_test_assert>
 8003adc:	e69f      	b.n	800381e <test_008_002_execute.lto_priv.144+0x2e>
 8003ade:	bf00      	nop
 8003ae0:	200011e4 	.word	0x200011e4
 8003ae4:	20000824 	.word	0x20000824
 8003ae8:	08006430 	.word	0x08006430
 8003aec:	0800643c 	.word	0x0800643c
 8003af0:	08006448 	.word	0x08006448
 8003af4:	08006454 	.word	0x08006454
 8003af8:	08006478 	.word	0x08006478
 8003afc:	20000834 	.word	0x20000834
 8003b00:	08006418 	.word	0x08006418
 8003b04:	0800649c 	.word	0x0800649c
 8003b08:	080064a8 	.word	0x080064a8
 8003b0c:	080064b4 	.word	0x080064b4
 8003b10:	20000840 	.word	0x20000840
 8003b14:	080064cc 	.word	0x080064cc
 8003b18:	080061f4 	.word	0x080061f4
 8003b1c:	00000000 	.word	0x00000000

08003b20 <test_007_007_setup.lto_priv.137>:
 *   has been emptied.
 * - [7.7.4] Unregistering from the Event Sources.
 * .
 */

static void test_007_007_setup(void) {
 8003b20:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8003b22:	f002 f855 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
 8003b26:	4a02      	ldr	r2, [pc, #8]	; (8003b30 <test_007_007_setup.lto_priv.137+0x10>)
 8003b28:	4b02      	ldr	r3, [pc, #8]	; (8003b34 <test_007_007_setup.lto_priv.137+0x14>)
 8003b2a:	6012      	str	r2, [r2, #0]
 8003b2c:	601b      	str	r3, [r3, #0]
 8003b2e:	bd08      	pop	{r3, pc}
 8003b30:	20000810 	.word	0x20000810
 8003b34:	20000814 	.word	0x20000814
	...

08003b40 <test_007_006_setup.lto_priv.135>:
 *   timeout condition is tested.
 * .
 */

static void test_007_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
 8003b40:	f002 b846 	b.w	8005bd0 <chEvtGetAndClearEvents.constprop.47>
	...

08003b50 <test_007_005_setup.lto_priv.133>:
 8003b50:	f7ff bff6 	b.w	8003b40 <test_007_006_setup.lto_priv.135>
	...

08003b60 <test_007_007_execute.lto_priv.138>:
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void test_007_007_execute(void) {
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [7.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8003b64:	4d3c      	ldr	r5, [pc, #240]	; (8003c58 <test_007_007_execute.lto_priv.138+0xf8>)
 8003b66:	2401      	movs	r4, #1
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void test_007_007_execute(void) {
 8003b68:	b08b      	sub	sp, #44	; 0x2c
  event_listener_t el1, el2;
  systime_t target_time;

  /* [7.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8003b6a:	602c      	str	r4, [r5, #0]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f382 8811 	msr	BASEPRI, r2
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8003b72:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003c78 <test_007_007_execute.lto_priv.138+0x118>
  esp->next     = elp;
  elp->listener = currp;
 8003b76:	4f39      	ldr	r7, [pc, #228]	; (8003c5c <test_007_007_execute.lto_priv.138+0xfc>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8003b78:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7c:	ae0a      	add	r6, sp, #40	; 0x28
  esp->next     = elp;
  elp->listener = currp;
 8003b7e:	69b9      	ldr	r1, [r7, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8003b80:	f846 3d14 	str.w	r3, [r6, #-20]!
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8003b88:	2300      	movs	r3, #0

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
 8003b8a:	9407      	str	r4, [sp, #28]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8003b8c:	9106      	str	r1, [sp, #24]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
 8003b8e:	f8c8 6000 	str.w	r6, [r8]
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8003b92:	9308      	str	r3, [sp, #32]
  elp->wflags   = wflags;
 8003b94:	9009      	str	r0, [sp, #36]	; 0x24
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f382 8811 	msr	BASEPRI, r2
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8003b9e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003c7c <test_007_007_execute.lto_priv.138+0x11c>
 8003ba2:	ac0a      	add	r4, sp, #40	; 0x28
 8003ba4:	f8d9 1000 	ldr.w	r1, [r9]
  esp->next     = elp;
  elp->listener = currp;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
  elp->events   = events;
 8003baa:	f04f 0a04 	mov.w	sl, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8003bae:	f844 1d28 	str.w	r1, [r4, #-40]!
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8003bb2:	9303      	str	r3, [sp, #12]
  elp->wflags   = wflags;
 8003bb4:	9004      	str	r0, [sp, #16]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8003bb6:	9201      	str	r2, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
 8003bb8:	f8c9 4000 	str.w	r4, [r9]
  elp->listener = currp;
  elp->events   = events;
 8003bbc:	f8cd a008 	str.w	sl, [sp, #8]
 8003bc0:	f383 8811 	msr	BASEPRI, r3
  }

  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	602b      	str	r3, [r5, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8003bc8:	f7ff fae2 	bl	8003190 <test_wait_tick>
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003bd0:	6891      	ldr	r1, [r2, #8]
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <test_007_007_execute.lto_priv.138+0x100>)
 8003bd4:	3901      	subs	r1, #1
 8003bd6:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <test_007_007_execute.lto_priv.138+0x104>)
 8003bd8:	4823      	ldr	r0, [pc, #140]	; (8003c68 <test_007_007_execute.lto_priv.138+0x108>)
 8003bda:	f001 fef9 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8003bde:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <test_007_007_execute.lto_priv.138+0x10c>)
  }

  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8003be0:	2303      	movs	r3, #3
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003be2:	6010      	str	r0, [r2, #0]
  }

  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8003be4:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 8003be6:	f002 f83b 	bl	8005c60 <chEvtWaitAll.constprop.41>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003bea:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 8003bee:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 8003bf2:	f002 fa6d 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8003bf6:	b110      	cbz	r0, 8003bfe <test_007_007_execute.lto_priv.138+0x9e>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8003bf8:	b00b      	add	sp, #44	; 0x2c
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003bfe:	f001 ffe7 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8003c02:	fab0 f080 	clz	r0, r0
 8003c06:	491a      	ldr	r1, [pc, #104]	; (8003c70 <test_007_007_execute.lto_priv.138+0x110>)
 8003c08:	0940      	lsrs	r0, r0, #5
 8003c0a:	f7fc fd29 	bl	8000660 <_test_assert>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d1f2      	bne.n	8003bf8 <test_007_007_execute.lto_priv.138+0x98>
    test_wait_threads();
 8003c12:	f7fd fabd 	bl	8001190 <test_wait_threads>
  }

  /* [7.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
  {
    chEvtUnregister(&es1, &el1);
 8003c16:	4631      	mov	r1, r6
 8003c18:	4640      	mov	r0, r8
    test_assert(m == 0, "stuck event");
    test_wait_threads();
  }

  /* [7.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 8003c1a:	f8c5 a000 	str.w	sl, [r5]
  {
    chEvtUnregister(&es1, &el1);
 8003c1e:	f7fc fdf7 	bl	8000810 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8003c22:	4621      	mov	r1, r4
 8003c24:	4648      	mov	r0, r9
 8003c26:	f7fc fdf3 	bl	8000810 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8003c2a:	f8d8 0000 	ldr.w	r0, [r8]
 8003c2e:	4911      	ldr	r1, [pc, #68]	; (8003c74 <test_007_007_execute.lto_priv.138+0x114>)
 8003c30:	ebc8 0000 	rsb	r0, r8, r0
 8003c34:	fab0 f080 	clz	r0, r0
 8003c38:	0940      	lsrs	r0, r0, #5
 8003c3a:	f7fc fd11 	bl	8000660 <_test_assert>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d1da      	bne.n	8003bf8 <test_007_007_execute.lto_priv.138+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8003c42:	f8d9 0000 	ldr.w	r0, [r9]
 8003c46:	490b      	ldr	r1, [pc, #44]	; (8003c74 <test_007_007_execute.lto_priv.138+0x114>)
 8003c48:	ebc9 0000 	rsb	r0, r9, r0
 8003c4c:	fab0 f080 	clz	r0, r0
 8003c50:	0940      	lsrs	r0, r0, #5
 8003c52:	f7fc fd05 	bl	8000660 <_test_assert>
 8003c56:	e7cf      	b.n	8003bf8 <test_007_007_execute.lto_priv.138+0x98>
 8003c58:	200011e4 	.word	0x200011e4
 8003c5c:	20001240 	.word	0x20001240
 8003c60:	080061fc 	.word	0x080061fc
 8003c64:	08001be1 	.word	0x08001be1
 8003c68:	20000ae8 	.word	0x20000ae8
 8003c6c:	200011f4 	.word	0x200011f4
 8003c70:	080061a0 	.word	0x080061a0
 8003c74:	080061e4 	.word	0x080061e4
 8003c78:	20000810 	.word	0x20000810
 8003c7c:	20000814 	.word	0x20000814

08003c80 <test_007_006_execute.lto_priv.136>:

static void test_007_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_006_execute(void) {
 8003c80:	b570      	push	{r4, r5, r6, lr}
  eventmask_t m;

  /* [7.6.1] The functions are invoked first with TIME_IMMEDIATE
     timeout, the timeout condition is tested.*/
  test_set_step(1);
 8003c82:	4d57      	ldr	r5, [pc, #348]	; (8003de0 <test_007_006_execute.lto_priv.136+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003c84:	4c57      	ldr	r4, [pc, #348]	; (8003de4 <test_007_006_execute.lto_priv.136+0x164>)
 8003c86:	2001      	movs	r0, #1
 8003c88:	6028      	str	r0, [r5, #0]
 8003c8a:	69a2      	ldr	r2, [r4, #24]
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003c92:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003c94:	b933      	cbnz	r3, 8003ca4 <test_007_006_execute.lto_priv.136+0x24>
 8003c96:	f383 8811 	msr	BASEPRI, r3
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8003c9a:	4953      	ldr	r1, [pc, #332]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003c9c:	f7fc fce0 	bl	8000660 <_test_assert>
 8003ca0:	b180      	cbz	r0, 8003cc4 <test_007_006_execute.lto_priv.136+0x44>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8003ca4:	4258      	negs	r0, r3
 8003ca6:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8003ca8:	ea23 0300 	bic.w	r3, r3, r0
 8003cac:	6353      	str	r3, [r2, #52]	; 0x34
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	fab0 f080 	clz	r0, r0
 8003cb8:	494b      	ldr	r1, [pc, #300]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003cba:	0940      	lsrs	r0, r0, #5
 8003cbc:	f7fc fcd0 	bl	8000660 <_test_assert>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1ee      	bne.n	8003ca2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003cc4:	69a3      	ldr	r3, [r4, #24]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d072      	beq.n	8003db8 <test_007_006_execute.lto_priv.136+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8003cd2:	6358      	str	r0, [r3, #52]	; 0x34
 8003cd4:	f380 8811 	msr	BASEPRI, r0
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8003cd8:	4943      	ldr	r1, [pc, #268]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003cda:	f7fc fcc1 	bl	8000660 <_test_assert>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d1df      	bne.n	8003ca2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003ce2:	69a3      	ldr	r3, [r4, #24]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8003cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cec:	3201      	adds	r2, #1
 8003cee:	d067      	beq.n	8003dc0 <test_007_006_execute.lto_priv.136+0x140>
 8003cf0:	f380 8811 	msr	BASEPRI, r0
 8003cf4:	2001      	movs	r0, #1
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8003cf6:	493c      	ldr	r1, [pc, #240]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003cf8:	f7fc fcb2 	bl	8000660 <_test_assert>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d1d0      	bne.n	8003ca2 <test_007_006_execute.lto_priv.136+0x22>
  }

  /* [7.6.2] The functions are invoked first with a 50mS timeout, the
     timeout condition is tested.*/
  test_set_step(2);
 8003d00:	2302      	movs	r3, #2
 8003d02:	602b      	str	r3, [r5, #0]
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003d04:	69a6      	ldr	r6, [r4, #24]
 8003d06:	2320      	movs	r3, #32
 8003d08:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003d0c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003d0e:	b955      	cbnz	r5, 8003d26 <test_007_006_execute.lto_priv.136+0xa6>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d14:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003d16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d1a:	200a      	movs	r0, #10
 8003d1c:	f7fd fb30 	bl	8001380 <chSchGoSleepTimeoutS>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	db51      	blt.n	8003dc8 <test_007_006_execute.lto_priv.136+0x148>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 8003d24:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8003d26:	4268      	negs	r0, r5
 8003d28:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 8003d2a:	ea25 0500 	bic.w	r5, r5, r0
 8003d2e:	6375      	str	r5, [r6, #52]	; 0x34
 8003d30:	2300      	movs	r3, #0
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	fab0 f080 	clz	r0, r0
 8003d3a:	0940      	lsrs	r0, r0, #5
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8003d3c:	492a      	ldr	r1, [pc, #168]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003d3e:	f7fc fc8f 	bl	8000660 <_test_assert>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d1ad      	bne.n	8003ca2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003d46:	69a6      	ldr	r6, [r4, #24]
 8003d48:	2320      	movs	r3, #32
 8003d4a:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003d4e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003d50:	b955      	cbnz	r5, 8003d68 <test_007_006_execute.lto_priv.136+0xe8>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d56:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003d58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d5c:	200a      	movs	r0, #10
 8003d5e:	f7fd fb0f 	bl	8001380 <chSchGoSleepTimeoutS>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	db34      	blt.n	8003dd0 <test_007_006_execute.lto_priv.136+0x150>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 8003d66:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->epending &= ~m;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6373      	str	r3, [r6, #52]	; 0x34
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	fab5 f085 	clz	r0, r5
 8003d74:	0940      	lsrs	r0, r0, #5
    m = chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8003d76:	491c      	ldr	r1, [pc, #112]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003d78:	f7fc fc72 	bl	8000660 <_test_assert>
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d18f      	bne.n	8003ca2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003d82:	69a4      	ldr	r4, [r4, #24]
 8003d84:	2320      	movs	r3, #32
 8003d86:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 8003d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	d009      	beq.n	8003da4 <test_007_006_execute.lto_priv.136+0x124>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d94:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8003d96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d9a:	200b      	movs	r0, #11
 8003d9c:	f7fd faf0 	bl	8001380 <chSchGoSleepTimeoutS>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	db19      	blt.n	8003dd8 <test_007_006_execute.lto_priv.136+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8003da4:	2300      	movs	r3, #0
 8003da6:	6363      	str	r3, [r4, #52]	; 0x34
 8003da8:	f383 8811 	msr	BASEPRI, r3
    m = chEvtWaitAllTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8003dac:	4628      	mov	r0, r5
  }
}
 8003dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    m = chEvtWaitOneTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
    m = chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
    m = chEvtWaitAllTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8003db2:	490d      	ldr	r1, [pc, #52]	; (8003de8 <test_007_006_execute.lto_priv.136+0x168>)
 8003db4:	f7fc bc54 	b.w	8000660 <_test_assert>
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e78b      	b.n	8003cd8 <test_007_006_execute.lto_priv.136+0x58>
 8003dc0:	6358      	str	r0, [r3, #52]	; 0x34
 8003dc2:	f380 8811 	msr	BASEPRI, r0
 8003dc6:	e796      	b.n	8003cf6 <test_007_006_execute.lto_priv.136+0x76>
 8003dc8:	f385 8811 	msr	BASEPRI, r5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	e7b5      	b.n	8003d3c <test_007_006_execute.lto_priv.136+0xbc>
 8003dd0:	f385 8811 	msr	BASEPRI, r5
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	e7ce      	b.n	8003d76 <test_007_006_execute.lto_priv.136+0xf6>
 8003dd8:	f385 8811 	msr	BASEPRI, r5
 8003ddc:	2501      	movs	r5, #1
 8003dde:	e7e5      	b.n	8003dac <test_007_006_execute.lto_priv.136+0x12c>
 8003de0:	200011e4 	.word	0x200011e4
 8003de4:	20001240 	.word	0x20001240
 8003de8:	080064e0 	.word	0x080064e0
 8003dec:	00000000 	.word	0x00000000

08003df0 <test_007_005_execute.lto_priv.134>:

static void test_007_005_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_005_execute(void) {
 8003df0:	b538      	push	{r3, r4, r5, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.5.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8003df2:	4c2b      	ldr	r4, [pc, #172]	; (8003ea0 <test_007_005_execute.lto_priv.134+0xb0>)
 8003df4:	2301      	movs	r3, #1
  {
    chEvtAddEvents(5);
 8003df6:	2005      	movs	r0, #5
static void test_007_005_execute(void) {
  eventmask_t m;
  systime_t target_time;

  /* [7.5.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8003df8:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(5);
 8003dfa:	f7fc fcf9 	bl	80007f0 <chEvtAddEvents>
  }

  /* [7.5.2] Calling chEvtWaitAll() one time, the two flags must be
     returned.*/
  test_set_step(2);
 8003dfe:	2302      	movs	r3, #2
 8003e00:	6023      	str	r3, [r4, #0]
  {
    m = chEvtWaitAll(5);
 8003e02:	f001 ff2d 	bl	8005c60 <chEvtWaitAll.constprop.41>
    test_assert(m == 5, "unexpected pending bit");
 8003e06:	f1a0 0005 	sub.w	r0, r0, #5
 8003e0a:	fab0 f080 	clz	r0, r0
 8003e0e:	4925      	ldr	r1, [pc, #148]	; (8003ea4 <test_007_005_execute.lto_priv.134+0xb4>)
 8003e10:	0940      	lsrs	r0, r0, #5
 8003e12:	f7fc fc25 	bl	8000660 <_test_assert>
 8003e16:	b100      	cbz	r0, 8003e1a <test_007_005_execute.lto_priv.134+0x2a>
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003e1a:	f001 fed9 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8003e1e:	fab0 f080 	clz	r0, r0
 8003e22:	4921      	ldr	r1, [pc, #132]	; (8003ea8 <test_007_005_execute.lto_priv.134+0xb8>)
 8003e24:	0940      	lsrs	r0, r0, #5
 8003e26:	f7fc fc1b 	bl	8000660 <_test_assert>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d1f4      	bne.n	8003e18 <test_007_005_execute.lto_priv.134+0x28>
  }

  /* [7.5.3] Setting one event flag.*/
  test_set_step(3);
 8003e2e:	2303      	movs	r3, #3
  {
    chEvtAddEvents(4);
 8003e30:	2004      	movs	r0, #4
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
  }

  /* [7.5.3] Setting one event flag.*/
  test_set_step(3);
 8003e32:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(4);
 8003e34:	f7fc fcdc 	bl	80007f0 <chEvtAddEvents>
  }

  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
 8003e38:	2304      	movs	r3, #4
 8003e3a:	6023      	str	r3, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8003e3c:	f7ff f9a8 	bl	8003190 <test_wait_tick>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <test_007_005_execute.lto_priv.134+0xbc>)
 8003e42:	4605      	mov	r5, r0
 8003e44:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <test_007_005_execute.lto_priv.134+0xc0>)
 8003e48:	6899      	ldr	r1, [r3, #8]
 8003e4a:	481a      	ldr	r0, [pc, #104]	; (8003eb4 <test_007_005_execute.lto_priv.134+0xc4>)
 8003e4c:	3901      	subs	r1, #1
 8003e4e:	f001 fdbf 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8003e52:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <test_007_005_execute.lto_priv.134+0xc8>)
  }

  /* [7.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
 8003e54:	2305      	movs	r3, #5
 8003e56:	6023      	str	r3, [r4, #0]
  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003e58:	6010      	str	r0, [r2, #0]
  /* [7.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
 8003e5a:	f001 ff01 	bl	8005c60 <chEvtWaitAll.constprop.41>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003e5e:	f505 7102 	add.w	r1, r5, #520	; 0x208
  /* [7.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
 8003e62:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003e64:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8003e68:	f002 f932 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1d3      	bne.n	8003e18 <test_007_005_execute.lto_priv.134+0x28>
                            "out of time window");
    test_assert(m == 5, "event flags error");
 8003e70:	f1a4 0005 	sub.w	r0, r4, #5
 8003e74:	fab0 f080 	clz	r0, r0
 8003e78:	4910      	ldr	r1, [pc, #64]	; (8003ebc <test_007_005_execute.lto_priv.134+0xcc>)
 8003e7a:	0940      	lsrs	r0, r0, #5
 8003e7c:	f7fc fbf0 	bl	8000660 <_test_assert>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d1c9      	bne.n	8003e18 <test_007_005_execute.lto_priv.134+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003e84:	f001 fea4 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8003e88:	fab0 f080 	clz	r0, r0
 8003e8c:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <test_007_005_execute.lto_priv.134+0xb8>)
 8003e8e:	0940      	lsrs	r0, r0, #5
 8003e90:	f7fc fbe6 	bl	8000660 <_test_assert>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d1bf      	bne.n	8003e18 <test_007_005_execute.lto_priv.134+0x28>
    test_wait_threads();
  }
}
 8003e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
    test_assert(m == 5, "event flags error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
 8003e9c:	f7fd b978 	b.w	8001190 <test_wait_threads>
 8003ea0:	200011e4 	.word	0x200011e4
 8003ea4:	080064f0 	.word	0x080064f0
 8003ea8:	080061a0 	.word	0x080061a0
 8003eac:	20001240 	.word	0x20001240
 8003eb0:	08001c21 	.word	0x08001c21
 8003eb4:	20000ae8 	.word	0x20000ae8
 8003eb8:	200011f4 	.word	0x200011f4
 8003ebc:	08006508 	.word	0x08006508

08003ec0 <test_007_004_execute.lto_priv.132>:

static void test_007_004_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_004_execute(void) {
 8003ec0:	b538      	push	{r3, r4, r5, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.4.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8003ec2:	4c29      	ldr	r4, [pc, #164]	; (8003f68 <test_007_004_execute.lto_priv.132+0xa8>)
 8003ec4:	2301      	movs	r3, #1
  {
    chEvtAddEvents(5);
 8003ec6:	2005      	movs	r0, #5
static void test_007_004_execute(void) {
  eventmask_t m;
  systime_t target_time;

  /* [7.4.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8003ec8:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(5);
 8003eca:	f7fc fc91 	bl	80007f0 <chEvtAddEvents>
  }

  /* [7.4.2] Calling chEvtWaitAny() one time, the two flags must be
     returned.*/
  test_set_step(2);
 8003ece:	2302      	movs	r3, #2
 8003ed0:	6023      	str	r3, [r4, #0]
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8003ed2:	f001 fead 	bl	8005c30 <chEvtWaitAny.constprop.42>
    test_assert(m == 5, "unexpected pending bit");
 8003ed6:	f1a0 0005 	sub.w	r0, r0, #5
 8003eda:	fab0 f080 	clz	r0, r0
 8003ede:	4923      	ldr	r1, [pc, #140]	; (8003f6c <test_007_004_execute.lto_priv.132+0xac>)
 8003ee0:	0940      	lsrs	r0, r0, #5
 8003ee2:	f7fc fbbd 	bl	8000660 <_test_assert>
 8003ee6:	b100      	cbz	r0, 8003eea <test_007_004_execute.lto_priv.132+0x2a>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003eea:	f001 fe71 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8003eee:	fab0 f080 	clz	r0, r0
 8003ef2:	491f      	ldr	r1, [pc, #124]	; (8003f70 <test_007_004_execute.lto_priv.132+0xb0>)
 8003ef4:	0940      	lsrs	r0, r0, #5
 8003ef6:	f7fc fbb3 	bl	8000660 <_test_assert>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1f4      	bne.n	8003ee8 <test_007_004_execute.lto_priv.132+0x28>
  }

  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 8003efe:	2303      	movs	r3, #3
 8003f00:	6023      	str	r3, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8003f02:	f7ff f945 	bl	8003190 <test_wait_tick>
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <test_007_004_execute.lto_priv.132+0xb4>)
 8003f08:	4605      	mov	r5, r0
 8003f0a:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003f0c:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <test_007_004_execute.lto_priv.132+0xb8>)
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	481a      	ldr	r0, [pc, #104]	; (8003f7c <test_007_004_execute.lto_priv.132+0xbc>)
 8003f12:	3901      	subs	r1, #1
 8003f14:	f001 fd5c 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <test_007_004_execute.lto_priv.132+0xc0>)
  }

  /* [7.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	6023      	str	r3, [r4, #0]
  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003f1e:	6010      	str	r0, [r2, #0]
  /* [7.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8003f20:	f001 fe86 	bl	8005c30 <chEvtWaitAny.constprop.42>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003f24:	f505 7102 	add.w	r1, r5, #520	; 0x208
  /* [7.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8003f28:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003f2a:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8003f2e:	f002 f8cf 	bl	80060d0 <_test_assert_time_window.constprop.2>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1d8      	bne.n	8003ee8 <test_007_004_execute.lto_priv.132+0x28>
                            "out of time window");
    test_assert(m == 1, "event flag error");
 8003f36:	f1a4 0001 	sub.w	r0, r4, #1
 8003f3a:	fab0 f080 	clz	r0, r0
 8003f3e:	4911      	ldr	r1, [pc, #68]	; (8003f84 <test_007_004_execute.lto_priv.132+0xc4>)
 8003f40:	0940      	lsrs	r0, r0, #5
 8003f42:	f7fc fb8d 	bl	8000660 <_test_assert>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d1ce      	bne.n	8003ee8 <test_007_004_execute.lto_priv.132+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003f4a:	f001 fe41 	bl	8005bd0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8003f4e:	fab0 f080 	clz	r0, r0
 8003f52:	4907      	ldr	r1, [pc, #28]	; (8003f70 <test_007_004_execute.lto_priv.132+0xb0>)
 8003f54:	0940      	lsrs	r0, r0, #5
 8003f56:	f7fc fb83 	bl	8000660 <_test_assert>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d1c4      	bne.n	8003ee8 <test_007_004_execute.lto_priv.132+0x28>
    test_wait_threads();
  }
}
 8003f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
    test_assert(m == 1, "event flag error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
 8003f62:	f7fd b915 	b.w	8001190 <test_wait_threads>
 8003f66:	bf00      	nop
 8003f68:	200011e4 	.word	0x200011e4
 8003f6c:	080064f0 	.word	0x080064f0
 8003f70:	080061a0 	.word	0x080061a0
 8003f74:	20001240 	.word	0x20001240
 8003f78:	08001c21 	.word	0x08001c21
 8003f7c:	20000ae8 	.word	0x20000ae8
 8003f80:	200011f4 	.word	0x200011f4
 8003f84:	080061ac 	.word	0x080061ac
	...

08003f90 <test_012_011_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <test_012_011_setup+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8003f92:	2200      	movs	r2, #0
 8003f94:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003f96:	605b      	str	r3, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	4770      	bx	lr
 8003f9c:	20000974 	.word	0x20000974

08003fa0 <test_012_010_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <test_012_010_setup+0xc>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003fa6:	605b      	str	r3, [r3, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	4770      	bx	lr
 8003fac:	200011e8 	.word	0x200011e8

08003fb0 <test_012_007_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <test_012_007_setup+0xc>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003fb6:	605b      	str	r3, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	4770      	bx	lr
 8003fbc:	200011e8 	.word	0x200011e8

08003fc0 <Thread1>:
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED5);       /* Orange.  */
 8003fc0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003fc4:	462e      	mov	r6, r5
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8003fc6:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <Thread1+0x28>)
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <Thread1+0x2c>)
 8003fcc:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED5);       /* Orange.  */
 8003fce:	4c08      	ldr	r4, [pc, #32]	; (8003ff0 <Thread1+0x30>)
 8003fd0:	619a      	str	r2, [r3, #24]
 8003fd2:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8003fd4:	f241 3088 	movw	r0, #5000	; 0x1388
 8003fd8:	f7fd fb82 	bl	80016e0 <chThdSleep>
    palClearPad(GPIOD, GPIOD_LED5);     /* Orange.  */
 8003fdc:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 8003fde:	f241 3088 	movw	r0, #5000	; 0x1388
 8003fe2:	f7fd fb7d 	bl	80016e0 <chThdSleep>
 8003fe6:	e7f4      	b.n	8003fd2 <Thread1+0x12>
 8003fe8:	20001240 	.word	0x20001240
 8003fec:	080069cc 	.word	0x080069cc
 8003ff0:	40020c00 	.word	0x40020c00
	...

08004000 <test_012_012_execute>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void test_012_012_execute(void) {
 8004000:	b570      	push	{r4, r5, r6, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8004002:	4d33      	ldr	r5, [pc, #204]	; (80040d0 <test_012_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8004004:	4c33      	ldr	r4, [pc, #204]	; (80040d4 <test_012_012_execute+0xd4>)
 */

static void test_012_012_execute(void) {

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8004006:	2301      	movs	r3, #1
  {
    test_print("--- System: ");
 8004008:	4833      	ldr	r0, [pc, #204]	; (80040d8 <test_012_012_execute+0xd8>)
 */

static void test_012_012_execute(void) {

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 800400a:	602b      	str	r3, [r5, #0]
  {
    test_print("--- System: ");
 800400c:	f7fc fab8 	bl	8000580 <test_print>
    test_printn(sizeof(ch_system_t));
 8004010:	2078      	movs	r0, #120	; 0x78
 8004012:	f7fc facd 	bl	80005b0 <test_printn>
    test_println(" bytes");
 8004016:	4620      	mov	r0, r4
 8004018:	f7fc fa92 	bl	8000540 <test_println>
  }

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800401c:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 800401e:	482f      	ldr	r0, [pc, #188]	; (80040dc <test_012_012_execute+0xdc>)
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
  }

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8004020:	602b      	str	r3, [r5, #0]
  {
    test_print("--- Thread: ");
 8004022:	f7fc faad 	bl	8000580 <test_print>
    test_printn(sizeof(thread_t));
 8004026:	2044      	movs	r0, #68	; 0x44
 8004028:	f7fc fac2 	bl	80005b0 <test_printn>
    test_println(" bytes");
 800402c:	4620      	mov	r0, r4
 800402e:	f7fc fa87 	bl	8000540 <test_println>
  }

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8004032:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8004034:	482a      	ldr	r0, [pc, #168]	; (80040e0 <test_012_012_execute+0xe0>)
    test_printn(sizeof(thread_t));
    test_println(" bytes");
  }

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8004036:	602b      	str	r3, [r5, #0]
  {
    test_print("--- Timer : ");
 8004038:	f7fc faa2 	bl	8000580 <test_print>
    test_printn(sizeof(virtual_timer_t));
 800403c:	2014      	movs	r0, #20
 800403e:	f7fc fab7 	bl	80005b0 <test_printn>
    test_println(" bytes");
 8004042:	4620      	mov	r0, r4
 8004044:	f7fc fa7c 	bl	8000540 <test_println>
  }

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8004048:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800404a:	4826      	ldr	r0, [pc, #152]	; (80040e4 <test_012_012_execute+0xe4>)
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
  }

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 800404c:	602e      	str	r6, [r5, #0]
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800404e:	f7fc fa97 	bl	8000580 <test_print>
    test_printn(sizeof(semaphore_t));
 8004052:	200c      	movs	r0, #12
 8004054:	f7fc faac 	bl	80005b0 <test_printn>
    test_println(" bytes");
 8004058:	4620      	mov	r0, r4
 800405a:	f7fc fa71 	bl	8000540 <test_println>
#endif
  }

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800405e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8004060:	4821      	ldr	r0, [pc, #132]	; (80040e8 <test_012_012_execute+0xe8>)
    test_println(" bytes");
#endif
  }

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8004062:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8004064:	f7fc fa8c 	bl	8000580 <test_print>
    test_printn(sizeof(mutex_t));
 8004068:	2010      	movs	r0, #16
 800406a:	f7fc faa1 	bl	80005b0 <test_printn>
    test_println(" bytes");
 800406e:	4620      	mov	r0, r4
 8004070:	f7fc fa66 	bl	8000540 <test_println>
#endif
  }

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8004074:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8004076:	481d      	ldr	r0, [pc, #116]	; (80040ec <test_012_012_execute+0xec>)
    test_println(" bytes");
#endif
  }

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8004078:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 800407a:	f7fc fa81 	bl	8000580 <test_print>
    test_printn(sizeof(condition_variable_t));
 800407e:	2008      	movs	r0, #8
 8004080:	f7fc fa96 	bl	80005b0 <test_printn>
    test_println(" bytes");
 8004084:	4620      	mov	r0, r4
 8004086:	f7fc fa5b 	bl	8000540 <test_println>
#endif
  }

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800408a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800408c:	4818      	ldr	r0, [pc, #96]	; (80040f0 <test_012_012_execute+0xf0>)
    test_println(" bytes");
#endif
  }

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800408e:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8004090:	f7fc fa76 	bl	8000580 <test_print>
    test_printn(sizeof(event_source_t));
 8004094:	4630      	mov	r0, r6
 8004096:	f7fc fa8b 	bl	80005b0 <test_printn>
    test_println(" bytes");
 800409a:	4620      	mov	r0, r4
 800409c:	f7fc fa50 	bl	8000540 <test_println>
#endif
  }

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 80040a0:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 80040a2:	4814      	ldr	r0, [pc, #80]	; (80040f4 <test_012_012_execute+0xf4>)
    test_println(" bytes");
#endif
  }

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 80040a4:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 80040a6:	f7fc fa6b 	bl	8000580 <test_print>
    test_printn(sizeof(event_listener_t));
 80040aa:	2014      	movs	r0, #20
 80040ac:	f7fc fa80 	bl	80005b0 <test_printn>
    test_println(" bytes");
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7fc fa45 	bl	8000540 <test_println>
#endif
  }

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 80040b6:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 80040b8:	480f      	ldr	r0, [pc, #60]	; (80040f8 <test_012_012_execute+0xf8>)
    test_println(" bytes");
#endif
  }

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 80040ba:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 80040bc:	f7fc fa60 	bl	8000580 <test_print>
    test_printn(sizeof(mailbox_t));
 80040c0:	2028      	movs	r0, #40	; 0x28
 80040c2:	f7fc fa75 	bl	80005b0 <test_printn>
    test_println(" bytes");
 80040c6:	4620      	mov	r0, r4
#endif
  }
}
 80040c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_set_step(9);
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 80040cc:	f7fc ba38 	b.w	8000540 <test_println>
 80040d0:	200011e4 	.word	0x200011e4
 80040d4:	080069e4 	.word	0x080069e4
 80040d8:	080069d4 	.word	0x080069d4
 80040dc:	080069ec 	.word	0x080069ec
 80040e0:	080069fc 	.word	0x080069fc
 80040e4:	08006a0c 	.word	0x08006a0c
 80040e8:	08006a1c 	.word	0x08006a1c
 80040ec:	08006a2c 	.word	0x08006a2c
 80040f0:	08006a3c 	.word	0x08006a3c
 80040f4:	08006a4c 	.word	0x08006a4c
 80040f8:	08006a5c 	.word	0x08006a5c
 80040fc:	00000000 	.word	0x00000000

08004100 <test_012_011_execute>:

static void test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}

static void test_012_011_execute(void) {
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8004104:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004180 <test_012_011_execute+0x80>
 8004108:	2301      	movs	r3, #1
 800410a:	f8c8 3000 	str.w	r3, [r8]
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 800410e:	f7ff f83f 	bl	8003190 <test_wait_tick>
      chMtxUnlock(&mtx1);
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004112:	f242 770f 	movw	r7, #9999	; 0x270f
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8004116:	4606      	mov	r6, r0
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 8004118:	2400      	movs	r4, #0
 800411a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chMtxLock(&mtx1);
 800411e:	4815      	ldr	r0, [pc, #84]	; (8004174 <test_012_011_execute+0x74>)
 8004120:	f7fc ff3e 	bl	8000fa0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8004124:	4813      	ldr	r0, [pc, #76]	; (8004174 <test_012_011_execute+0x74>)
 8004126:	f7fc fe9b 	bl	8000e60 <chMtxUnlock>
      chMtxLock(&mtx1);
 800412a:	4812      	ldr	r0, [pc, #72]	; (8004174 <test_012_011_execute+0x74>)
 800412c:	f7fc ff38 	bl	8000fa0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8004130:	4810      	ldr	r0, [pc, #64]	; (8004174 <test_012_011_execute+0x74>)
 8004132:	f7fc fe95 	bl	8000e60 <chMtxUnlock>
      chMtxLock(&mtx1);
 8004136:	480f      	ldr	r0, [pc, #60]	; (8004174 <test_012_011_execute+0x74>)
 8004138:	f7fc ff32 	bl	8000fa0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800413c:	480d      	ldr	r0, [pc, #52]	; (8004174 <test_012_011_execute+0x74>)
 800413e:	f7fc fe8f 	bl	8000e60 <chMtxUnlock>
      chMtxLock(&mtx1);
 8004142:	480c      	ldr	r0, [pc, #48]	; (8004174 <test_012_011_execute+0x74>)
 8004144:	f7fc ff2c 	bl	8000fa0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8004148:	480a      	ldr	r0, [pc, #40]	; (8004174 <test_012_011_execute+0x74>)
 800414a:	f7fc fe89 	bl	8000e60 <chMtxUnlock>
 800414e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      n++;
 8004150:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004152:	1b9b      	subs	r3, r3, r6
 8004154:	42bb      	cmp	r3, r7
 8004156:	d9e2      	bls.n	800411e <test_012_011_execute+0x1e>
  }

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 8004158:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 800415a:	4807      	ldr	r0, [pc, #28]	; (8004178 <test_012_011_execute+0x78>)
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
  }

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 800415c:	f8c8 3000 	str.w	r3, [r8]
  {
    test_print("--- Score : ");
 8004160:	f7fc fa0e 	bl	8000580 <test_print>
    test_printn(n * 4);
 8004164:	00a0      	lsls	r0, r4, #2
 8004166:	f7fc fa23 	bl	80005b0 <test_printn>
    test_println(" lock+unlock/S");
  }
}
 800416a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* [12.11.2] The score is printed.*/
  test_set_step(2);
  {
    test_print("--- Score : ");
    test_printn(n * 4);
    test_println(" lock+unlock/S");
 800416e:	4803      	ldr	r0, [pc, #12]	; (800417c <test_012_011_execute+0x7c>)
 8004170:	f7fc b9e6 	b.w	8000540 <test_println>
 8004174:	20000974 	.word	0x20000974
 8004178:	08006a6c 	.word	0x08006a6c
 800417c:	08006a7c 	.word	0x08006a7c
 8004180:	200011e4 	.word	0x200011e4
	...

08004190 <test_012_010_execute>:

static void test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_012_010_execute(void) {
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t n;

  /* [12.10.1] A semaphore is teken and released. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8004194:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004210 <test_012_010_execute+0x80>
 8004198:	2301      	movs	r3, #1
 800419a:	f8c8 3000 	str.w	r3, [r8]
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 800419e:	f7fe fff7 	bl	8003190 <test_wait_tick>
      chSemSignal(&sem1);
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80041a2:	f242 770f 	movw	r7, #9999	; 0x270f
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 80041a6:	4606      	mov	r6, r0
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 80041a8:	2400      	movs	r4, #0
 80041aa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSemWait(&sem1);
 80041ae:	4815      	ldr	r0, [pc, #84]	; (8004204 <test_012_010_execute+0x74>)
 80041b0:	f7fc fcb6 	bl	8000b20 <chSemWait>
      chSemSignal(&sem1);
 80041b4:	4813      	ldr	r0, [pc, #76]	; (8004204 <test_012_010_execute+0x74>)
 80041b6:	f7fc fc5b 	bl	8000a70 <chSemSignal>
      chSemWait(&sem1);
 80041ba:	4812      	ldr	r0, [pc, #72]	; (8004204 <test_012_010_execute+0x74>)
 80041bc:	f7fc fcb0 	bl	8000b20 <chSemWait>
      chSemSignal(&sem1);
 80041c0:	4810      	ldr	r0, [pc, #64]	; (8004204 <test_012_010_execute+0x74>)
 80041c2:	f7fc fc55 	bl	8000a70 <chSemSignal>
      chSemWait(&sem1);
 80041c6:	480f      	ldr	r0, [pc, #60]	; (8004204 <test_012_010_execute+0x74>)
 80041c8:	f7fc fcaa 	bl	8000b20 <chSemWait>
      chSemSignal(&sem1);
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <test_012_010_execute+0x74>)
 80041ce:	f7fc fc4f 	bl	8000a70 <chSemSignal>
      chSemWait(&sem1);
 80041d2:	480c      	ldr	r0, [pc, #48]	; (8004204 <test_012_010_execute+0x74>)
 80041d4:	f7fc fca4 	bl	8000b20 <chSemWait>
      chSemSignal(&sem1);
 80041d8:	480a      	ldr	r0, [pc, #40]	; (8004204 <test_012_010_execute+0x74>)
 80041da:	f7fc fc49 	bl	8000a70 <chSemSignal>
 80041de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      n++;
 80041e0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80041e2:	1b9b      	subs	r3, r3, r6
 80041e4:	42bb      	cmp	r3, r7
 80041e6:	d9e2      	bls.n	80041ae <test_012_010_execute+0x1e>
  }

  /* [12.10.2] The score is printed.*/
  test_set_step(2);
 80041e8:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 80041ea:	4807      	ldr	r0, [pc, #28]	; (8004208 <test_012_010_execute+0x78>)
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
  }

  /* [12.10.2] The score is printed.*/
  test_set_step(2);
 80041ec:	f8c8 3000 	str.w	r3, [r8]
  {
    test_print("--- Score : ");
 80041f0:	f7fc f9c6 	bl	8000580 <test_print>
    test_printn(n * 4);
 80041f4:	00a0      	lsls	r0, r4, #2
 80041f6:	f7fc f9db 	bl	80005b0 <test_printn>
    test_println(" wait+signal/S");
  }
}
 80041fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* [12.10.2] The score is printed.*/
  test_set_step(2);
  {
    test_print("--- Score : ");
    test_printn(n * 4);
    test_println(" wait+signal/S");
 80041fe:	4803      	ldr	r0, [pc, #12]	; (800420c <test_012_010_execute+0x7c>)
 8004200:	f7fc b99e 	b.w	8000540 <test_println>
 8004204:	200011e8 	.word	0x200011e8
 8004208:	08006a6c 	.word	0x08006a6c
 800420c:	08006a8c 	.word	0x08006a8c
 8004210:	200011e4 	.word	0x200011e4
	...

08004220 <test_012_009_execute>:
 *   one-second time window.
 * - [12.9.2] The score is printed.
 * .
 */

static void test_012_009_execute(void) {
 8004220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t n;

  /* [12.9.1] Two timers are set then reset without waiting for their
     counter to elapse. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8004224:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80042ac <test_012_009_execute+0x8c>
 8004228:	2301      	movs	r3, #1
 800422a:	f8c8 3000 	str.w	r3, [r8]
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 800422e:	f7fe ffaf 	bl	8003190 <test_wait_tick>
     one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 8004232:	2400      	movs	r4, #0
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8004234:	4627      	mov	r7, r4
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8004236:	4606      	mov	r6, r0
 8004238:	2520      	movs	r5, #32
 800423a:	f385 8811 	msr	BASEPRI, r5
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800423e:	2300      	movs	r3, #0
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <test_012_009_execute+0x78>)
 8004242:	2101      	movs	r1, #1
 8004244:	4815      	ldr	r0, [pc, #84]	; (800429c <test_012_009_execute+0x7c>)
 8004246:	f7fd f85b 	bl	8001300 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 800424a:	2300      	movs	r3, #0
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <test_012_009_execute+0x78>)
 800424e:	f242 7110 	movw	r1, #10000	; 0x2710
 8004252:	4813      	ldr	r0, [pc, #76]	; (80042a0 <test_012_009_execute+0x80>)
 8004254:	f7fd f854 	bl	8001300 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8004258:	4810      	ldr	r0, [pc, #64]	; (800429c <test_012_009_execute+0x7c>)
 800425a:	f7fd f819 	bl	8001290 <chVTDoResetI>
      chVTDoResetI(&vt2);
 800425e:	4810      	ldr	r0, [pc, #64]	; (80042a0 <test_012_009_execute+0x80>)
 8004260:	f7fd f816 	bl	8001290 <chVTDoResetI>
 8004264:	f387 8811 	msr	BASEPRI, r7
      chSysUnlock();
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004268:	f242 720f 	movw	r2, #9999	; 0x270f
 800426c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      chVTDoSetI(&vt1, 1, tmo, NULL);
      chVTDoSetI(&vt2, 10000, tmo, NULL);
      chVTDoResetI(&vt1);
      chVTDoResetI(&vt2);
      chSysUnlock();
      n++;
 8004272:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004274:	1b9b      	subs	r3, r3, r6
 8004276:	4293      	cmp	r3, r2
 8004278:	d9df      	bls.n	800423a <test_012_009_execute+0x1a>
  }

  /* [12.9.2] The score is printed.*/
  test_set_step(2);
 800427a:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 800427c:	4809      	ldr	r0, [pc, #36]	; (80042a4 <test_012_009_execute+0x84>)
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
  }

  /* [12.9.2] The score is printed.*/
  test_set_step(2);
 800427e:	f8c8 3000 	str.w	r3, [r8]
  {
    test_print("--- Score : ");
 8004282:	f7fc f97d 	bl	8000580 <test_print>
    test_printn(n * 2);
 8004286:	0060      	lsls	r0, r4, #1
 8004288:	f7fc f992 	bl	80005b0 <test_printn>
    test_println(" timers/S");
  }
}
 800428c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* [12.9.2] The score is printed.*/
  test_set_step(2);
  {
    test_print("--- Score : ");
    test_printn(n * 2);
    test_println(" timers/S");
 8004290:	4805      	ldr	r0, [pc, #20]	; (80042a8 <test_012_009_execute+0x88>)
 8004292:	f7fc b955 	b.w	8000540 <test_println>
 8004296:	bf00      	nop
 8004298:	08004d91 	.word	0x08004d91
 800429c:	20001150 	.word	0x20001150
 80042a0:	20000984 	.word	0x20000984
 80042a4:	08006a6c 	.word	0x08006a6c
 80042a8:	08006a9c 	.word	0x08006a9c
 80042ac:	200011e4 	.word	0x200011e4

080042b0 <test_012_004_execute>:
 80042b0:	4b2e      	ldr	r3, [pc, #184]	; (800436c <test_012_004_execute+0xbc>)
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void test_012_004_execute(void) {
 80042b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80042b6:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 80042b8:	2401      	movs	r4, #1
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80042ba:	6899      	ldr	r1, [r3, #8]
static void test_012_004_execute(void) {
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 80042bc:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8004384 <test_012_004_execute+0xd4>
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80042c0:	4421      	add	r1, r4
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void test_012_004_execute(void) {
 80042c2:	b083      	sub	sp, #12
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80042c4:	2300      	movs	r3, #0
 80042c6:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <test_012_004_execute+0xc0>)
 80042c8:	482a      	ldr	r0, [pc, #168]	; (8004374 <test_012_004_execute+0xc4>)
static void test_012_004_execute(void) {
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 80042ca:	f8cb 4000 	str.w	r4, [fp]
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80042ce:	f001 fb7f 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80042d2:	4a29      	ldr	r2, [pc, #164]	; (8004378 <test_012_004_execute+0xc8>)
                                        bmk_thread4, NULL);
  }

  /* [12.4.2] Waking up the thread as fast as possible in a one second
     time window.*/
  test_set_step(2);
 80042d4:	2302      	movs	r3, #2
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80042d6:	4604      	mov	r4, r0
 80042d8:	6010      	str	r0, [r2, #0]
                                        bmk_thread4, NULL);
  }

  /* [12.4.2] Waking up the thread as fast as possible in a one second
     time window.*/
  test_set_step(2);
 80042da:	f8cb 3000 	str.w	r3, [fp]
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 80042de:	f7fe ff57 	bl	8003190 <test_wait_tick>
     time window.*/
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
 80042e2:	2500      	movs	r5, #0
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chSchWakeupS(tp, MSG_OK);
 80042e4:	46aa      	mov	sl, r5
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 80042e6:	4681      	mov	r9, r0
 80042e8:	f04f 0820 	mov.w	r8, #32
 80042ec:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80042f0:	2620      	movs	r6, #32
 80042f2:	f388 8811 	msr	BASEPRI, r8
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chSchWakeupS(tp, MSG_OK);
 80042f6:	2100      	movs	r1, #0
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fc fb89 	bl	8000a10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80042fe:	4620      	mov	r0, r4
 8004300:	2100      	movs	r1, #0
 8004302:	f7fc fb85 	bl	8000a10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8004306:	4620      	mov	r0, r4
 8004308:	2100      	movs	r1, #0
 800430a:	f7fc fb81 	bl	8000a10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800430e:	4620      	mov	r0, r4
 8004310:	2100      	movs	r1, #0
 8004312:	f7fc fb7d 	bl	8000a10 <chSchWakeupS>
 8004316:	2200      	movs	r2, #0
 8004318:	f38a 8811 	msr	BASEPRI, sl
      chSysUnlock();
      n += 4;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800431c:	f242 710f 	movw	r1, #9999	; 0x270f
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      chSchWakeupS(tp, MSG_OK);
      chSchWakeupS(tp, MSG_OK);
      chSchWakeupS(tp, MSG_OK);
      chSchWakeupS(tp, MSG_OK);
      chSysUnlock();
      n += 4;
 8004322:	3504      	adds	r5, #4
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004324:	ebc9 0303 	rsb	r3, r9, r3
 8004328:	428b      	cmp	r3, r1
 800432a:	d9e1      	bls.n	80042f0 <test_012_004_execute+0x40>
  }

  /* [12.4.3] Stopping the target thread.*/
  test_set_step(3);
 800432c:	2303      	movs	r3, #3
 800432e:	9201      	str	r2, [sp, #4]
 8004330:	f8cb 3000 	str.w	r3, [fp]
 8004334:	f386 8811 	msr	BASEPRI, r6
  {
    chSysLock();
    chSchWakeupS(tp, MSG_TIMEOUT);
 8004338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800433c:	4620      	mov	r0, r4
 800433e:	f7fc fb67 	bl	8000a10 <chSchWakeupS>
 8004342:	9a01      	ldr	r2, [sp, #4]
 8004344:	f382 8811 	msr	BASEPRI, r2
    chSysUnlock();
    test_wait_threads();
 8004348:	f7fc ff22 	bl	8001190 <test_wait_threads>
  }

  /* [12.4.4] Score is printed.*/
  test_set_step(4);
 800434c:	2304      	movs	r3, #4
  {
    test_print("--- Score : ");
 800434e:	480b      	ldr	r0, [pc, #44]	; (800437c <test_012_004_execute+0xcc>)
    chSysUnlock();
    test_wait_threads();
  }

  /* [12.4.4] Score is printed.*/
  test_set_step(4);
 8004350:	f8cb 3000 	str.w	r3, [fp]
  {
    test_print("--- Score : ");
 8004354:	f7fc f914 	bl	8000580 <test_print>
    test_printn(n * 2);
 8004358:	0068      	lsls	r0, r5, #1
 800435a:	f7fc f929 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
 800435e:	4808      	ldr	r0, [pc, #32]	; (8004380 <test_012_004_execute+0xd0>)
  }
}
 8004360:	b003      	add	sp, #12
 8004362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* [12.4.4] Score is printed.*/
  test_set_step(4);
  {
    test_print("--- Score : ");
    test_printn(n * 2);
    test_println(" ctxswc/S");
 8004366:	f7fc b8eb 	b.w	8000540 <test_println>
 800436a:	bf00      	nop
 800436c:	20001240 	.word	0x20001240
 8004370:	08004eb1 	.word	0x08004eb1
 8004374:	20000ae8 	.word	0x20000ae8
 8004378:	200011f4 	.word	0x200011f4
 800437c:	08006a6c 	.word	0x08006a6c
 8004380:	08006aa8 	.word	0x08006aa8
 8004384:	200011e4 	.word	0x200011e4
	...

08004390 <test_012_008_execute>:
 * - [12.8.2] Waiting one second then terminating the 5 threads.
 * - [12.8.3] The score is printed.
 * .
 */

static void test_012_008_execute(void) {
 8004390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8004394:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800446c <test_012_008_execute+0xdc>
 8004398:	b083      	sub	sp, #12
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 800439a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004470 <test_012_008_execute+0xe0>
  {
    n = 0;
 800439e:	ac02      	add	r4, sp, #8
 80043a0:	2200      	movs	r2, #0
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 80043a2:	2301      	movs	r3, #1
  {
    n = 0;
 80043a4:	f844 2d04 	str.w	r2, [r4, #-4]!
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 80043a8:	f8c9 3000 	str.w	r3, [r9]
  {
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043ac:	f7fe fef0 	bl	8003190 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80043b0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043b4:	4f28      	ldr	r7, [pc, #160]	; (8004458 <test_012_008_execute+0xc8>)
 80043b6:	4e29      	ldr	r6, [pc, #164]	; (800445c <test_012_008_execute+0xcc>)
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	463a      	mov	r2, r7
 80043bc:	4623      	mov	r3, r4
 80043be:	3901      	subs	r1, #1
 80043c0:	4630      	mov	r0, r6
 80043c2:	f001 fb05 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80043c6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043ca:	4d25      	ldr	r5, [pc, #148]	; (8004460 <test_012_008_execute+0xd0>)

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	463a      	mov	r2, r7
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
  {
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043d0:	6028      	str	r0, [r5, #0]

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043d2:	4623      	mov	r3, r4
 80043d4:	3901      	subs	r1, #1
 80043d6:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80043da:	f001 faf9 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80043de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043e2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	463a      	mov	r2, r7
 80043e8:	4623      	mov	r3, r4
 80043ea:	3901      	subs	r1, #1
 80043ec:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80043f0:	f001 faee 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80043f4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043f8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	463a      	mov	r2, r7
 80043fe:	4623      	mov	r3, r4
 8004400:	3901      	subs	r1, #1
 8004402:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004406:	f001 fae3 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800440a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800440e:	463a      	mov	r2, r7
 8004410:	6899      	ldr	r1, [r3, #8]
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004412:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004414:	3901      	subs	r1, #1
 8004416:	4623      	mov	r3, r4
 8004418:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800441c:	f001 fad8 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
 8004420:	2302      	movs	r3, #2
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004422:	6128      	str	r0, [r5, #16]
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
  {
    chThdSleepSeconds(1);
 8004424:	f242 7010 	movw	r0, #10000	; 0x2710
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
 8004428:	f8c9 3000 	str.w	r3, [r9]
  {
    chThdSleepSeconds(1);
 800442c:	f7fd f958 	bl	80016e0 <chThdSleep>
    test_terminate_threads();
 8004430:	f7fc f84e 	bl	80004d0 <test_terminate_threads>
    test_wait_threads();
 8004434:	f7fc feac 	bl	8001190 <test_wait_threads>
  }

  /* [12.8.3] The score is printed.*/
  test_set_step(3);
 8004438:	2303      	movs	r3, #3
  {
    test_print("--- Score : ");
 800443a:	480a      	ldr	r0, [pc, #40]	; (8004464 <test_012_008_execute+0xd4>)
    test_terminate_threads();
    test_wait_threads();
  }

  /* [12.8.3] The score is printed.*/
  test_set_step(3);
 800443c:	f8c9 3000 	str.w	r3, [r9]
  {
    test_print("--- Score : ");
 8004440:	f7fc f89e 	bl	8000580 <test_print>
    test_printn(n);
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	f7fc f8b3 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
 800444a:	4807      	ldr	r0, [pc, #28]	; (8004468 <test_012_008_execute+0xd8>)
 800444c:	f7fc f878 	bl	8000540 <test_println>
  }
}
 8004450:	b003      	add	sp, #12
 8004452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004456:	bf00      	nop
 8004458:	08004e51 	.word	0x08004e51
 800445c:	20000ae8 	.word	0x20000ae8
 8004460:	200011f4 	.word	0x200011f4
 8004464:	08006a6c 	.word	0x08006a6c
 8004468:	08006aa8 	.word	0x08006aa8
 800446c:	20001240 	.word	0x20001240
 8004470:	200011e4 	.word	0x200011e4
	...

08004480 <test_012_007_execute>:

static void test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_012_007_execute(void) {
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8004482:	4d32      	ldr	r5, [pc, #200]	; (800454c <test_012_007_execute+0xcc>)
  uint32_t n;

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
 8004484:	4f32      	ldr	r7, [pc, #200]	; (8004550 <test_012_007_execute+0xd0>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8004486:	69ab      	ldr	r3, [r5, #24]
 8004488:	2401      	movs	r4, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800448a:	6899      	ldr	r1, [r3, #8]
 800448c:	4a31      	ldr	r2, [pc, #196]	; (8004554 <test_012_007_execute+0xd4>)
 800448e:	2300      	movs	r3, #0
 8004490:	3105      	adds	r1, #5
 8004492:	4831      	ldr	r0, [pc, #196]	; (8004558 <test_012_007_execute+0xd8>)
static void test_012_007_execute(void) {
  uint32_t n;

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
 8004494:	603c      	str	r4, [r7, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8004496:	f001 fa9b 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800449a:	69ab      	ldr	r3, [r5, #24]
 800449c:	4c2f      	ldr	r4, [pc, #188]	; (800455c <test_012_007_execute+0xdc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <test_012_007_execute+0xd4>)

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80044a2:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80044a4:	3104      	adds	r1, #4
 80044a6:	2300      	movs	r3, #0
 80044a8:	482d      	ldr	r0, [pc, #180]	; (8004560 <test_012_007_execute+0xe0>)
 80044aa:	f001 fa91 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80044ae:	69ab      	ldr	r3, [r5, #24]
 80044b0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <test_012_007_execute+0xd4>)
 80044b6:	2300      	movs	r3, #0
 80044b8:	3103      	adds	r1, #3
 80044ba:	482a      	ldr	r0, [pc, #168]	; (8004564 <test_012_007_execute+0xe4>)
 80044bc:	f001 fa88 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80044c0:	69ab      	ldr	r3, [r5, #24]
 80044c2:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	4a23      	ldr	r2, [pc, #140]	; (8004554 <test_012_007_execute+0xd4>)
 80044c8:	2300      	movs	r3, #0
 80044ca:	3102      	adds	r1, #2
 80044cc:	4826      	ldr	r0, [pc, #152]	; (8004568 <test_012_007_execute+0xe8>)
 80044ce:	f001 fa7f 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80044d2:	69ab      	ldr	r3, [r5, #24]
 80044d4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80044d6:	6899      	ldr	r1, [r3, #8]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <test_012_007_execute+0xd4>)
 80044da:	2300      	movs	r3, #0
 80044dc:	3101      	adds	r1, #1
 80044de:	4823      	ldr	r0, [pc, #140]	; (800456c <test_012_007_execute+0xec>)
 80044e0:	f001 fa76 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [12.7.2] The semaphore is reset waking up the five threads. The
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
 80044e4:	2302      	movs	r3, #2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80044e6:	6120      	str	r0, [r4, #16]
  }

  /* [12.7.2] The semaphore is reset waking up the five threads. The
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
 80044e8:	603b      	str	r3, [r7, #0]
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 80044ea:	f7fe fe51 	bl	8003190 <test_wait_tick>
 80044ee:	4606      	mov	r6, r0
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
 80044f0:	2400      	movs	r4, #0
 80044f2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSemReset(&sem1, 0);
 80044f6:	2100      	movs	r1, #0
 80044f8:	481d      	ldr	r0, [pc, #116]	; (8004570 <test_012_007_execute+0xf0>)
 80044fa:	f7fc fe91 	bl	8001220 <chSemReset>
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80044fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    n = 0;
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSemReset(&sem1, 0);
      n++;
 8004504:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004506:	1b9b      	subs	r3, r3, r6
 8004508:	4293      	cmp	r3, r2
 800450a:	d9f4      	bls.n	80044f6 <test_012_007_execute+0x76>
  }

  /* [12.7.3] The five threads are terminated.*/
  test_set_step(3);
 800450c:	2303      	movs	r3, #3
 800450e:	603b      	str	r3, [r7, #0]
  {
    test_terminate_threads();
 8004510:	f7fb ffde 	bl	80004d0 <test_terminate_threads>
    chSemReset(&sem1, 0);
 8004514:	2100      	movs	r1, #0
 8004516:	4816      	ldr	r0, [pc, #88]	; (8004570 <test_012_007_execute+0xf0>)
 8004518:	f7fc fe82 	bl	8001220 <chSemReset>
    test_wait_threads();
 800451c:	f7fc fe38 	bl	8001190 <test_wait_threads>
  }

  /* [12.7.4] The score is printed.*/
  test_set_step(4);
 8004520:	2304      	movs	r3, #4
  {
    test_print("--- Score : ");
 8004522:	4814      	ldr	r0, [pc, #80]	; (8004574 <test_012_007_execute+0xf4>)
    chSemReset(&sem1, 0);
    test_wait_threads();
  }

  /* [12.7.4] The score is printed.*/
  test_set_step(4);
 8004524:	603b      	str	r3, [r7, #0]
  {
    test_print("--- Score : ");
 8004526:	f7fc f82b 	bl	8000580 <test_print>
    test_printn(n);
 800452a:	4620      	mov	r0, r4
 800452c:	f7fc f840 	bl	80005b0 <test_printn>
    test_print(" reschedules/S, ");
 8004530:	4811      	ldr	r0, [pc, #68]	; (8004578 <test_012_007_execute+0xf8>)
 8004532:	f7fc f825 	bl	8000580 <test_print>
    test_printn(n * 6);
 8004536:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800453a:	0040      	lsls	r0, r0, #1
 800453c:	f7fc f838 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
  }
}
 8004540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  {
    test_print("--- Score : ");
    test_printn(n);
    test_print(" reschedules/S, ");
    test_printn(n * 6);
    test_println(" ctxswc/S");
 8004544:	480d      	ldr	r0, [pc, #52]	; (800457c <test_012_007_execute+0xfc>)
 8004546:	f7fb bffb 	b.w	8000540 <test_println>
 800454a:	bf00      	nop
 800454c:	20001240 	.word	0x20001240
 8004550:	200011e4 	.word	0x200011e4
 8004554:	08004e81 	.word	0x08004e81
 8004558:	20000ae8 	.word	0x20000ae8
 800455c:	200011f4 	.word	0x200011f4
 8004560:	20000c30 	.word	0x20000c30
 8004564:	20000d78 	.word	0x20000d78
 8004568:	20000ec0 	.word	0x20000ec0
 800456c:	20001008 	.word	0x20001008
 8004570:	200011e8 	.word	0x200011e8
 8004574:	08006a6c 	.word	0x08006a6c
 8004578:	08006ab4 	.word	0x08006ab4
 800457c:	08006aa8 	.word	0x08006aa8

08004580 <test_012_006_execute>:
 *   one-second time window.
 * - [12.6.2] Score is printed.
 * .
 */

static void test_012_006_execute(void) {
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <test_012_006_execute+0x54>)
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8004584:	4e14      	ldr	r6, [pc, #80]	; (80045d8 <test_012_006_execute+0x58>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	2301      	movs	r3, #1
 * .
 */

static void test_012_006_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 800458a:	6895      	ldr	r5, [r2, #8]
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 800458c:	6033      	str	r3, [r6, #0]
 * .
 */

static void test_012_006_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 800458e:	441d      	add	r5, r3
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
  {
    n = 0;
    start = test_wait_tick();
 8004590:	f7fe fdfe 	bl	8003190 <test_wait_tick>
 8004594:	4607      	mov	r7, r0
  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
  {
    n = 0;
 8004596:	2400      	movs	r4, #0
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
#if CH_CFG_USE_REGISTRY
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004598:	2300      	movs	r3, #0
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <test_012_006_execute+0x5c>)
 800459c:	4629      	mov	r1, r5
 800459e:	4810      	ldr	r0, [pc, #64]	; (80045e0 <test_012_006_execute+0x60>)
 80045a0:	f001 fa16 	bl	80059d0 <chThdCreateStatic.constprop.65>
 80045a4:	f7fc fd9c 	bl	80010e0 <chThdRelease>
#endif
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80045a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80045ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if CH_CFG_USE_REGISTRY
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
#else
      chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL);
#endif
      n++;
 80045b2:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80045b4:	1bdb      	subs	r3, r3, r7
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d9ee      	bls.n	8004598 <test_012_006_execute+0x18>
  }

  /* [12.6.2] Score is printed.*/
  test_set_step(2);
 80045ba:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 80045bc:	4809      	ldr	r0, [pc, #36]	; (80045e4 <test_012_006_execute+0x64>)
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
  }

  /* [12.6.2] Score is printed.*/
  test_set_step(2);
 80045be:	6033      	str	r3, [r6, #0]
  {
    test_print("--- Score : ");
 80045c0:	f7fb ffde 	bl	8000580 <test_print>
    test_printn(n);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7fb fff3 	bl	80005b0 <test_printn>
    test_println(" threads/S");
  }
}
 80045ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* [12.6.2] Score is printed.*/
  test_set_step(2);
  {
    test_print("--- Score : ");
    test_printn(n);
    test_println(" threads/S");
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <test_012_006_execute+0x68>)
 80045d0:	f7fb bfb6 	b.w	8000540 <test_println>
 80045d4:	20001240 	.word	0x20001240
 80045d8:	200011e4 	.word	0x200011e4
 80045dc:	080059b1 	.word	0x080059b1
 80045e0:	20000ae8 	.word	0x20000ae8
 80045e4:	08006a6c 	.word	0x08006a6c
 80045e8:	08006ac8 	.word	0x08006ac8
 80045ec:	00000000 	.word	0x00000000

080045f0 <test_012_005_execute>:
 *   repeated continuously in a one-second time window.
 * - [12.5.2] Score is printed.
 * .
 */

static void test_012_005_execute(void) {
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <test_012_005_execute+0x54>)
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80045f4:	4e14      	ldr	r6, [pc, #80]	; (8004648 <test_012_005_execute+0x58>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	2301      	movs	r3, #1
 * .
 */

static void test_012_005_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 80045fa:	6895      	ldr	r5, [r2, #8]
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80045fc:	6033      	str	r3, [r6, #0]
  {
    n = 0;
    start = test_wait_tick();
 80045fe:	f7fe fdc7 	bl	8003190 <test_wait_tick>
 8004602:	4607      	mov	r7, r0
 * .
 */

static void test_012_005_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 8004604:	3d01      	subs	r5, #1
  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    n = 0;
 8004606:	2400      	movs	r4, #0
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004608:	2300      	movs	r3, #0
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <test_012_005_execute+0x5c>)
 800460c:	4629      	mov	r1, r5
 800460e:	4810      	ldr	r0, [pc, #64]	; (8004650 <test_012_005_execute+0x60>)
 8004610:	f001 f9de 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8004614:	f7fc fd9c 	bl	8001150 <chThdWait>
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004618:	f242 720f 	movw	r2, #9999	; 0x270f
 800461c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    n = 0;
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
      n++;
 8004622:	3401      	adds	r4, #1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8004624:	1bdb      	subs	r3, r3, r7
 8004626:	4293      	cmp	r3, r2
 8004628:	d9ee      	bls.n	8004608 <test_012_005_execute+0x18>
  }

  /* [12.5.2] Score is printed.*/
  test_set_step(2);
 800462a:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 800462c:	4809      	ldr	r0, [pc, #36]	; (8004654 <test_012_005_execute+0x64>)
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
  }

  /* [12.5.2] Score is printed.*/
  test_set_step(2);
 800462e:	6033      	str	r3, [r6, #0]
  {
    test_print("--- Score : ");
 8004630:	f7fb ffa6 	bl	8000580 <test_print>
    test_printn(n);
 8004634:	4620      	mov	r0, r4
 8004636:	f7fb ffbb 	bl	80005b0 <test_printn>
    test_println(" threads/S");
  }
}
 800463a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* [12.5.2] Score is printed.*/
  test_set_step(2);
  {
    test_print("--- Score : ");
    test_printn(n);
    test_println(" threads/S");
 800463e:	4806      	ldr	r0, [pc, #24]	; (8004658 <test_012_005_execute+0x68>)
 8004640:	f7fb bf7e 	b.w	8000540 <test_println>
 8004644:	20001240 	.word	0x20001240
 8004648:	200011e4 	.word	0x200011e4
 800464c:	080059b1 	.word	0x080059b1
 8004650:	20000ae8 	.word	0x20000ae8
 8004654:	08006a6c 	.word	0x08006a6c
 8004658:	08006ac8 	.word	0x08006ac8
 800465c:	00000000 	.word	0x00000000

08004660 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c) and AHB2 is not
     present in STM32F410. */
  rccResetAHB1(~0);
 8004660:	4bbc      	ldr	r3, [pc, #752]	; (8004954 <main+0x2f4>)
 8004662:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004666:	2200      	movs	r2, #0
 8004668:	6918      	ldr	r0, [r3, #16]
}

/*
 * Application entry point.
 */
int main(void) {
 800466a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800466e:	6119      	str	r1, [r3, #16]
 8004670:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8004672:	6958      	ldr	r0, [r3, #20]
 8004674:	6159      	str	r1, [r3, #20]
 8004676:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8004678:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800467a:	4cb7      	ldr	r4, [pc, #732]	; (8004958 <main+0x2f8>)
     present in STM32F410. */
  rccResetAHB1(~0);
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800467c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8004680:	6218      	str	r0, [r3, #32]
 8004682:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8004684:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004686:	6259      	str	r1, [r3, #36]	; 0x24
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800468a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800468c:	b08b      	sub	sp, #44	; 0x2c
 800468e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004692:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800469a:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800469c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800469e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80046a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80046a6:	d003      	beq.n	80046b0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80046a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80046ac:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80046ae:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80046b0:	4aa9      	ldr	r2, [pc, #676]	; (8004958 <main+0x2f8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80046b2:	4ea8      	ldr	r6, [pc, #672]	; (8004954 <main+0x2f4>)
 80046b4:	6853      	ldr	r3, [r2, #4]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80046b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046be:	6053      	str	r3, [r2, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80046c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80046c2:	f640 7aff 	movw	sl, #4095	; 0xfff
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80046c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80046ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80046ce:	6333      	str	r3, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80046d0:	6d35      	ldr	r5, [r6, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80046d2:	49a2      	ldr	r1, [pc, #648]	; (800495c <main+0x2fc>)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80046d4:	ea6f 2555 	mvn.w	r5, r5, lsr #9
 80046d8:	ea6f 2545 	mvn.w	r5, r5, lsl #9
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80046dc:	2400      	movs	r4, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80046de:	6535      	str	r5, [r6, #80]	; 0x50

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80046e0:	4f9f      	ldr	r7, [pc, #636]	; (8004960 <main+0x300>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80046e2:	f46f 45a8 	mvn.w	r5, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80046e6:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80046e8:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80049b4 <main+0x354>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80046ec:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80046ee:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80049b8 <main+0x358>
  gpiop->MODER   = config->moder;
 80046f2:	4d9c      	ldr	r5, [pc, #624]	; (8004964 <main+0x304>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80046f4:	60cf      	str	r7, [r1, #12]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80046f6:	f507 3781 	add.w	r7, r7, #66048	; 0x10200
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80046fa:	6148      	str	r0, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80046fc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004700:	f8c1 c020 	str.w	ip, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004704:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004708:	600d      	str	r5, [r1, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800470a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80049bc <main+0x35c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800470e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004712:	6079      	str	r1, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004718:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800471a:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 80049c0 <main+0x360>

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800471e:	f8c7 900c 	str.w	r9, [r7, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004722:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004726:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8004728:	f8c7 9020 	str.w	r9, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800472c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8004730:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004734:	f8c7 c000 	str.w	ip, [r7]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004738:	f10c 4caa 	add.w	ip, ip, #1426063360	; 0x55000000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800473c:	f105 55ab 	add.w	r5, r5, #358612992	; 0x15600000
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004740:	f5ac 0c43 	sub.w	ip, ip, #12779520	; 0xc30000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004744:	f505 35af 	add.w	r5, r5, #89600	; 0x15e00
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004748:	f6ac 3c2c 	subw	ip, ip, #2860	; 0xb2c
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800474c:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800474e:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8004750:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004754:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004758:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 800475a:	4f83      	ldr	r7, [pc, #524]	; (8004968 <main+0x308>)

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800475c:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8004760:	f8df c260 	ldr.w	ip, [pc, #608]	; 80049c4 <main+0x364>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8004764:	626f      	str	r7, [r5, #36]	; 0x24
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004766:	4f81      	ldr	r7, [pc, #516]	; (800496c <main+0x30c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8004768:	f8c5 c000 	str.w	ip, [r5]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800476c:	4d80      	ldr	r5, [pc, #512]	; (8004970 <main+0x310>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800476e:	f8df c258 	ldr.w	ip, [pc, #600]	; 80049c8 <main+0x368>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004772:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004774:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8004776:	60fd      	str	r5, [r7, #12]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004778:	4d7e      	ldr	r5, [pc, #504]	; (8004974 <main+0x314>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 800477a:	f8c7 a014 	str.w	sl, [r7, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800477e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80049cc <main+0x36c>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004782:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8004784:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004786:	f8c7 c000 	str.w	ip, [r7]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800478a:	f8df c244 	ldr.w	ip, [pc, #580]	; 80049d0 <main+0x370>
 800478e:	606c      	str	r4, [r5, #4]
 8004790:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 8004794:	60a9      	str	r1, [r5, #8]
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8004796:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800497c <main+0x31c>
  gpiop->PUPDR   = config->pupdr;
 800479a:	60ec      	str	r4, [r5, #12]
  gpiop->ODR     = config->odr;
 800479c:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800479e:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80047a0:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047a2:	f8c5 9000 	str.w	r9, [r5]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80047a6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 80047aa:	f8ca 4004 	str.w	r4, [sl, #4]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80047ae:	f04f 0b10 	mov.w	fp, #16
  gpiop->OSPEEDR = config->ospeedr;
 80047b2:	f8ca 1008 	str.w	r1, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 80047b6:	f8ca 400c 	str.w	r4, [sl, #12]
  gpiop->ODR     = config->odr;
 80047ba:	f8ca 0014 	str.w	r0, [sl, #20]
  gpiop->AFRL    = config->afrl;
 80047be:	f8ca 4020 	str.w	r4, [sl, #32]
  gpiop->AFRH    = config->afrh;
 80047c2:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047c6:	f8ca 4000 	str.w	r4, [sl]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80047ca:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047ce:	f8cc 1008 	str.w	r1, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 80047d2:	f8cc 400c 	str.w	r4, [ip, #12]
  gpiop->ODR     = config->odr;
 80047d6:	f8cc 0014 	str.w	r0, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80047da:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80047de:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047e2:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80047e6:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047e8:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80047ea:	60fc      	str	r4, [r7, #12]
  gpiop->ODR     = config->odr;
 80047ec:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80047ee:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80047f0:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047f2:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80047f4:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047f6:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80047f8:	60ec      	str	r4, [r5, #12]
  gpiop->ODR     = config->odr;
 80047fa:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80047fc:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80047fe:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004800:	602c      	str	r4, [r5, #0]
 8004802:	4d5d      	ldr	r5, [pc, #372]	; (8004978 <main+0x318>)
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8004804:	f8c8 4014 	str.w	r4, [r8, #20]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8004808:	f8c8 b038 	str.w	fp, [r8, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800480c:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800480e:	f848 5b04 	str.w	r5, [r8], #4
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004812:	4d5a      	ldr	r5, [pc, #360]	; (800497c <main+0x31c>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004814:	f241 7e6f 	movw	lr, #5999	; 0x176f
  iqp->q_link    = link;
 8004818:	462b      	mov	r3, r5

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800481a:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80049d4 <main+0x374>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800481e:	f040 0001 	orr.w	r0, r0, #1
 8004822:	6430      	str	r0, [r6, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004824:	f8dc 0008 	ldr.w	r0, [ip, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8004828:	62ac      	str	r4, [r5, #40]	; 0x28
 800482a:	f8c5 8004 	str.w	r8, [r5, #4]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800482e:	651d      	str	r5, [r3, #80]	; 0x50
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8004830:	62ed      	str	r5, [r5, #44]	; 0x2c
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8004832:	3574      	adds	r5, #116	; 0x74
 8004834:	641d      	str	r5, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8004836:	4f52      	ldr	r7, [pc, #328]	; (8004980 <main+0x320>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8004838:	4d52      	ldr	r5, [pc, #328]	; (8004984 <main+0x324>)
 800483a:	f040 0001 	orr.w	r0, r0, #1
 800483e:	64df      	str	r7, [r3, #76]	; 0x4c
 8004840:	675d      	str	r5, [r3, #116]	; 0x74
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004842:	f103 080c 	add.w	r8, r3, #12
 8004846:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800484a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800484e:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8004852:	4d4d      	ldr	r5, [pc, #308]	; (8004988 <main+0x328>)
 8004854:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004858:	4f4c      	ldr	r7, [pc, #304]	; (800498c <main+0x32c>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800485a:	62c1      	str	r1, [r0, #44]	; 0x2c
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800485c:	f103 0e64 	add.w	lr, r3, #100	; 0x64
 8004860:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->CCMR1  = 0;
 8004864:	6184      	str	r4, [r0, #24]
  tqp->prev = (thread_t *)tqp;
 8004866:	f8c3 8010 	str.w	r8, [r3, #16]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800486a:	f8c3 c018 	str.w	ip, [r3, #24]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800486e:	f04f 0801 	mov.w	r8, #1
  iqp->q_rdptr   = bp;
 8004872:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8004876:	f8c3 c020 	str.w	ip, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800487a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  iqp->q_top     = bp + size;
 800487e:	f8c3 e01c 	str.w	lr, [r3, #28]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8004882:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8004886:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800488a:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
 800488e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8004892:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
 8004896:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800489a:	f883 8008 	strb.w	r8, [r3, #8]
  STM32_ST_TIM->CCR[0] = 0;
 800489e:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80048a0:	60c4      	str	r4, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 80048a2:	6044      	str	r4, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80048a4:	f8c0 8014 	str.w	r8, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80048a8:	f8c0 8000 	str.w	r8, [r0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80048ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80048b0:	f887 a31c 	strb.w	sl, [r7, #796]	; 0x31c

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80048b4:	2200      	movs	r2, #0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80048b6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 80048ba:	2300      	movs	r3, #0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80048bc:	6038      	str	r0, [r7, #0]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80048be:	9104      	str	r1, [sp, #16]
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 80048c0:	6269      	str	r1, [r5, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80048c2:	eb0d 000b 	add.w	r0, sp, fp
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80048c6:	f105 011c 	add.w	r1, r5, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80048ca:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
 80048cc:	606d      	str	r5, [r5, #4]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80048ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048d2:	61e9      	str	r1, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80048d4:	6229      	str	r1, [r5, #32]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 80048d6:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80048d8:	62ac      	str	r4, [r5, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80048da:	676c      	str	r4, [r5, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80048dc:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80048de:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80048e0:	9407      	str	r4, [sp, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80048e2:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80048e4:	616d      	str	r5, [r5, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80048e6:	f001 f86b 	bl	80059c0 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 80048ea:	eb0d 000b 	add.w	r0, sp, fp
 80048ee:	f7fb ffa7 	bl	8000840 <chTMStopMeasurementX>
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f2:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <main+0x330>)
 80048f8:	4926      	ldr	r1, [pc, #152]	; (8004994 <main+0x334>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80048fa:	4a27      	ldr	r2, [pc, #156]	; (8004998 <main+0x338>)
 80048fc:	6019      	str	r1, [r3, #0]
 80048fe:	4927      	ldr	r1, [pc, #156]	; (800499c <main+0x33c>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8004900:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
 8004904:	6011      	str	r1, [r2, #0]
  endmem  = __heap_end__;
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <main+0x340>)
 8004908:	4926      	ldr	r1, [pc, #152]	; (80049a4 <main+0x344>)
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800490a:	4827      	ldr	r0, [pc, #156]	; (80049a8 <main+0x348>)
 800490c:	6011      	str	r1, [r2, #0]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800490e:	4a27      	ldr	r2, [pc, #156]	; (80049ac <main+0x34c>)
  REG_INSERT(tp);
 8004910:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004914:	68d1      	ldr	r1, [r2, #12]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8004916:	64a8      	str	r0, [r5, #72]	; 0x48
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004918:	ea01 0e0e 	and.w	lr, r1, lr
  reg_value  =  (reg_value                                   |
 800491c:	4824      	ldr	r0, [pc, #144]	; (80049b0 <main+0x350>)
  ch.tm.offset = tm.last;
 800491e:	9906      	ldr	r1, [sp, #24]
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8004920:	f8c5 a06c 	str.w	sl, [r5, #108]	; 0x6c
 8004924:	6769      	str	r1, [r5, #116]	; 0x74
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004926:	eb03 0a0b 	add.w	sl, r3, fp
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800492a:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800492e:	ea4e 0000 	orr.w	r0, lr, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004932:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80049d8 <main+0x378>
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8004936:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800493a:	666c      	str	r4, [r5, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 800493c:	f885 8052 	strb.w	r8, [r5, #82]	; 0x52
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8004940:	66ac      	str	r4, [r5, #104]	; 0x68
 8004942:	619c      	str	r4, [r3, #24]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8004944:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
 8004948:	f8c3 a010 	str.w	sl, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 800494c:	f8c3 a014 	str.w	sl, [r3, #20]
 8004950:	642d      	str	r5, [r5, #64]	; 0x40
 8004952:	e043      	b.n	80049dc <main+0x37c>
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000
 800495c:	40020000 	.word	0x40020000
 8004960:	40010054 	.word	0x40010054
 8004964:	2aa0aa00 	.word	0x2aa0aa00
 8004968:	00060600 	.word	0x00060600
 800496c:	40020c00 	.word	0x40020c00
 8004970:	00555055 	.word	0x00555055
 8004974:	40021000 	.word	0x40021000
 8004978:	08006640 	.word	0x08006640
 800497c:	20001168 	.word	0x20001168
 8004980:	080002d1 	.word	0x080002d1
 8004984:	40004400 	.word	0x40004400
 8004988:	20001240 	.word	0x20001240
 800498c:	e000e100 	.word	0xe000e100
 8004990:	20001300 	.word	0x20001300
 8004994:	08000401 	.word	0x08000401
 8004998:	20000970 	.word	0x20000970
 800499c:	20001330 	.word	0x20001330
 80049a0:	20001164 	.word	0x20001164
 80049a4:	20020000 	.word	0x20020000
 80049a8:	08006588 	.word	0x08006588
 80049ac:	e000ed00 	.word	0xe000ed00
 80049b0:	05fa0300 	.word	0x05fa0300
 80049b4:	55560000 	.word	0x55560000
 80049b8:	000aaa00 	.word	0x000aaa00
 80049bc:	55514515 	.word	0x55514515
 80049c0:	00082080 	.word	0x00082080
 80049c4:	02208001 	.word	0x02208001
 80049c8:	55000100 	.word	0x55000100
 80049cc:	40021400 	.word	0x40021400
 80049d0:	40021800 	.word	0x40021800
 80049d4:	e0042000 	.word	0xe0042000
 80049d8:	e000edf0 	.word	0xe000edf0
 80049dc:	f8cc 1010 	str.w	r1, [ip, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80049e0:	60d0      	str	r0, [r2, #12]
 80049e2:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
 80049e6:	609c      	str	r4, [r3, #8]
 80049e8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80049ec:	f8ce 000c 	str.w	r0, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80049f0:	4834      	ldr	r0, [pc, #208]	; (8004ac4 <main+0x464>)
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80049f2:	f105 0e58 	add.w	lr, r5, #88	; 0x58
  H_PAGES(&default_heap.header) = 0;
 80049f6:	60dc      	str	r4, [r3, #12]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80049f8:	f885 8050 	strb.w	r8, [r5, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80049fc:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8004a00:	6169      	str	r1, [r5, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004a02:	61a9      	str	r1, [r5, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8004a04:	64ec      	str	r4, [r5, #76]	; 0x4c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8004a06:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004a0a:	65eb      	str	r3, [r5, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8004a0c:	662b      	str	r3, [r5, #96]	; 0x60
 8004a0e:	6803      	ldr	r3, [r0, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	2520      	movs	r5, #32
 8004a12:	ea43 0308 	orr.w	r3, r3, r8
 8004a16:	6003      	str	r3, [r0, #0]
 8004a18:	f882 b01f 	strb.w	fp, [r2, #31]
 8004a1c:	f882 5022 	strb.w	r5, [r2, #34]	; 0x22
 8004a20:	f384 8811 	msr	BASEPRI, r4
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a24:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004a26:	f385 8811 	msr	BASEPRI, r5
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 8004a2a:	4827      	ldr	r0, [pc, #156]	; (8004ac8 <main+0x468>)
 8004a2c:	f7fb ff60 	bl	80008f0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004a30:	4621      	mov	r1, r4
 8004a32:	f7fb ffed 	bl	8000a10 <chSchWakeupS>
 8004a36:	f384 8811 	msr	BASEPRI, r4
 8004a3a:	f385 8811 	msr	BASEPRI, r5
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <main+0x46c>)
 8004a40:	7a1b      	ldrb	r3, [r3, #8]
 8004a42:	4543      	cmp	r3, r8
 8004a44:	d10a      	bne.n	8004a5c <main+0x3fc>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8004a46:	6c33      	ldr	r3, [r6, #64]	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004a48:	22c0      	movs	r2, #192	; 0xc0
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	6433      	str	r3, [r6, #64]	; 0x40
 8004a50:	f887 2326 	strb.w	r2, [r7, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004a54:	f8c7 9184 	str.w	r9, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004a58:	f8c7 9004 	str.w	r9, [r7, #4]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <main+0x46c>)
 8004a5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <main+0x470>)
 8004a62:	429a      	cmp	r2, r3
 8004a64:	f000 8153 	beq.w	8004d0e <main+0x6ae>
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	f000 814e 	beq.w	8004d0e <main+0x6ae>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8004a72:	f240 330d 	movw	r3, #781	; 0x30d
 8004a76:	6093      	str	r3, [r2, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a78:	f242 102c 	movw	r0, #8492	; 0x212c
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a7c:	2140      	movs	r1, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a7e:	2301      	movs	r3, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8004a80:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a82:	6111      	str	r1, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a84:	6153      	str	r3, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a86:	60d0      	str	r0, [r2, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8004a88:	6015      	str	r5, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8004a8a:	6810      	ldr	r0, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004a8c:	6852      	ldr	r2, [r2, #4]
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
    sdp->rxmask = 0x7F;
  }
  else {
    sdp->rxmask = 0xFF;
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <main+0x46c>)
 8004a90:	21ff      	movs	r1, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
 8004a98:	7213      	strb	r3, [r2, #8]
 8004a9a:	f385 8811 	msr	BASEPRI, r5
  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8004a9e:	2004      	movs	r0, #4
 8004aa0:	f001 faae 	bl	8006000 <_pal_lld_setgroupmode.constprop.5>
 8004aa4:	4c0b      	ldr	r4, [pc, #44]	; (8004ad4 <main+0x474>)
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8004aa6:	2008      	movs	r0, #8
 8004aa8:	f001 faaa 	bl	8006000 <_pal_lld_setgroupmode.constprop.5>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8004aac:	462b      	mov	r3, r5
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <main+0x478>)
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	480a      	ldr	r0, [pc, #40]	; (8004adc <main+0x47c>)
 8004ab4:	f000 ff8c 	bl	80059d0 <chThdCreateStatic.constprop.65>
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004ab8:	46a1      	mov	r9, r4
 8004aba:	4e09      	ldr	r6, [pc, #36]	; (8004ae0 <main+0x480>)
 8004abc:	f8df a024 	ldr.w	sl, [pc, #36]	; 8004ae4 <main+0x484>
 8004ac0:	e016      	b.n	8004af0 <main+0x490>
 8004ac2:	bf00      	nop
 8004ac4:	e0001000 	.word	0xe0001000
 8004ac8:	08006984 	.word	0x08006984
 8004acc:	20001168 	.word	0x20001168
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	20000998 	.word	0x20000998
 8004ad8:	08003fc1 	.word	0x08003fc1
 8004adc:	200009a0 	.word	0x200009a0
 8004ae0:	20001208 	.word	0x20001208
 8004ae4:	200012ec 	.word	0x200012ec
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
      test_execute((BaseSequentialStream *)&SD2);
    chThdSleepMilliseconds(500);
 8004ae8:	f241 3088 	movw	r0, #5000	; 0x1388
 8004aec:	f7fc fdf8 	bl	80016e0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 8004af0:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <main+0x6b8>)
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	07db      	lsls	r3, r3, #31
 8004af6:	d5f7      	bpl.n	8004ae8 <main+0x488>
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream) {
  int i, j;

  test_chp = stream;
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <main+0x6bc>)
  test_println("");
 8004afa:	4889      	ldr	r0, [pc, #548]	; (8004d20 <main+0x6c0>)
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream) {
  int i, j;

  test_chp = stream;
 8004afc:	6023      	str	r3, [r4, #0]
  test_println("");
 8004afe:	f7fb fd1f 	bl	8000540 <test_println>
#if defined(TEST_SUITE_NAME)
  test_println("*** " TEST_SUITE_NAME);
 8004b02:	4888      	ldr	r0, [pc, #544]	; (8004d24 <main+0x6c4>)
 8004b04:	f7fb fd1c 	bl	8000540 <test_println>
#else
  test_println("*** ChibiOS test suite");
#endif
  test_println("***");
 8004b08:	4d87      	ldr	r5, [pc, #540]	; (8004d28 <main+0x6c8>)
 8004b0a:	4888      	ldr	r0, [pc, #544]	; (8004d2c <main+0x6cc>)
 8004b0c:	f7fb fd18 	bl	8000540 <test_println>
 8004b10:	212a      	movs	r1, #42	; 0x2a
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	6803      	ldr	r3, [r0, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b1a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b1e:	2900      	cmp	r1, #0
 8004b20:	d1f7      	bne.n	8004b12 <main+0x4b2>
#else
  test_println("*** ChibiOS test suite");
#endif
  test_println("***");
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8004b22:	4883      	ldr	r0, [pc, #524]	; (8004d30 <main+0x6d0>)
 8004b24:	4d83      	ldr	r5, [pc, #524]	; (8004d34 <main+0x6d4>)
 8004b26:	f7fb fd0b 	bl	8000540 <test_println>
 8004b2a:	212a      	movs	r1, #42	; 0x2a
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	6803      	ldr	r3, [r0, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b34:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	d1f7      	bne.n	8004b2c <main+0x4cc>
  test_println("***");
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8004b3c:	487e      	ldr	r0, [pc, #504]	; (8004d38 <main+0x6d8>)
 8004b3e:	4d7f      	ldr	r5, [pc, #508]	; (8004d3c <main+0x6dc>)
 8004b40:	f7fb fcfe 	bl	8000540 <test_println>
 8004b44:	212a      	movs	r1, #42	; 0x2a
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	6803      	ldr	r3, [r0, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d1f7      	bne.n	8004b46 <main+0x4e6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8004b56:	487a      	ldr	r0, [pc, #488]	; (8004d40 <main+0x6e0>)
 8004b58:	9101      	str	r1, [sp, #4]
 8004b5a:	f7fb fcf1 	bl	8000540 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8004b5e:	4870      	ldr	r0, [pc, #448]	; (8004d20 <main+0x6c0>)
 8004b60:	f7fb fcee 	bl	8000540 <test_println>

  test_global_fail = false;
 8004b64:	4b77      	ldr	r3, [pc, #476]	; (8004d44 <main+0x6e4>)
 8004b66:	9901      	ldr	r1, [sp, #4]
 8004b68:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8004d7c <main+0x71c>
 8004b6c:	7019      	strb	r1, [r3, #0]
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <main+0x6e8>)
 8004b70:	9303      	str	r3, [sp, #12]
 8004b72:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <main+0x6ec>)
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <main+0x6f0>)
 8004b78:	9a01      	ldr	r2, [sp, #4]
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8004b7a:	2700      	movs	r7, #0
 8004b7c:	3201      	adds	r2, #1
 8004b7e:	9201      	str	r2, [sp, #4]

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 809b 	beq.w	8004cbc <main+0x65c>
      print_line();
 8004b86:	4d73      	ldr	r5, [pc, #460]	; (8004d54 <main+0x6f4>)
 8004b88:	f7fb fd82 	bl	8000690 <print_line.lto_priv.164>
 8004b8c:	212d      	movs	r1, #45	; 0x2d
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b96:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b9a:	2900      	cmp	r1, #0
 8004b9c:	d1f7      	bne.n	8004b8e <main+0x52e>
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8004b9e:	9801      	ldr	r0, [sp, #4]
 8004ba0:	f7fb fd06 	bl	80005b0 <test_printn>
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004ba4:	f8d9 0000 	ldr.w	r0, [r9]
 8004ba8:	212e      	movs	r1, #46	; 0x2e
 8004baa:	6803      	ldr	r3, [r0, #0]
 8004bac:	1c7d      	adds	r5, r7, #1
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4798      	blx	r3
    while (test_suite[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8004bb2:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8004d80 <main+0x720>
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7fb fcfa 	bl	80005b0 <test_printn>
 8004bbc:	2120      	movs	r1, #32
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	6803      	ldr	r3, [r0, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004bc6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004bca:	2900      	cmp	r1, #0
 8004bcc:	d1f7      	bne.n	8004bbe <main+0x55e>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(test_suite[i][j]->name);
 8004bce:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 8004bd2:	f8d3 b000 	ldr.w	fp, [r3]
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004bd6:	f89b 1000 	ldrb.w	r1, [fp]
 8004bda:	b139      	cbz	r1, 8004bec <main+0x58c>
    streamPut(test_chp, *msgp++);
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	6803      	ldr	r3, [r0, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004be4:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d1f7      	bne.n	8004bdc <main+0x57c>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(test_suite[i][j]->name);
      test_println(")");
 8004bec:	485a      	ldr	r0, [pc, #360]	; (8004d58 <main+0x6f8>)
 8004bee:	f7fb fca7 	bl	8000540 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {

  chThdSleep(time);
 8004bf2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004bf6:	f7fc fd73 	bl	80016e0 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
 8004bfa:	f858 b027 	ldr.w	fp, [r8, r7, lsl #2]
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 8004bfe:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <main+0x6fc>)

  /* Initialization */
  clear_tokens();
  test_local_fail = false;

  if (tcp->setup != NULL)
 8004c00:	f8db 2004 	ldr.w	r2, [fp, #4]

static void execute_test(const testcase_t *tcp) {

  /* Initialization */
  clear_tokens();
  test_local_fail = false;
 8004c04:	2100      	movs	r1, #0
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 8004c06:	6033      	str	r3, [r6, #0]

static void execute_test(const testcase_t *tcp) {

  /* Initialization */
  clear_tokens();
  test_local_fail = false;
 8004c08:	f88a 1000 	strb.w	r1, [sl]

  if (tcp->setup != NULL)
 8004c0c:	b102      	cbz	r2, 8004c10 <main+0x5b0>
    tcp->setup();
 8004c0e:	4790      	blx	r2
  tcp->execute();
 8004c10:	f8db 200c 	ldr.w	r2, [fp, #12]
 8004c14:	4790      	blx	r2
  if (tcp->teardown != NULL)
 8004c16:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004c1a:	b103      	cbz	r3, 8004c1e <main+0x5be>
    tcp->teardown();
 8004c1c:	4798      	blx	r3
      test_println(")");
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
      if (test_local_fail) {
 8004c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d055      	beq.n	8004cd2 <main+0x672>
 8004c26:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8004d84 <main+0x724>
 8004c2a:	212d      	movs	r1, #45	; 0x2d
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	6803      	ldr	r3, [r0, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c34:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d1f7      	bne.n	8004c2c <main+0x5cc>
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
      if (test_local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8004c3c:	4b48      	ldr	r3, [pc, #288]	; (8004d60 <main+0x700>)
 8004c3e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8004d88 <main+0x728>
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	f7fb fcb4 	bl	80005b0 <test_printn>
 8004c48:	2120      	movs	r1, #32
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	6803      	ldr	r3, [r0, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c52:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004c56:	2900      	cmp	r1, #0
 8004c58:	d1f7      	bne.n	8004c4a <main+0x5ea>
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8004c5a:	6833      	ldr	r3, [r6, #0]
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <main+0x6fc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d909      	bls.n	8004c76 <main+0x616>
 8004c62:	4693      	mov	fp, r2
    streamPut(test_chp, *cp++);
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	459b      	cmp	fp, r3
 8004c74:	d3f6      	bcc.n	8004c64 <main+0x604>
 8004c76:	f8df b114 	ldr.w	fp, [pc, #276]	; 8004d8c <main+0x72c>
 8004c7a:	215d      	movs	r1, #93	; 0x5d
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c84:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d1f7      	bne.n	8004c7c <main+0x61c>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <main+0x704>)
 8004c8e:	f8d3 b000 	ldr.w	fp, [r3]
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c92:	f89b 1000 	ldrb.w	r1, [fp]
 8004c96:	b139      	cbz	r1, 8004ca8 <main+0x648>
    streamPut(test_chp, *msgp++);
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	6803      	ldr	r3, [r0, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004ca0:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d1f7      	bne.n	8004c98 <main+0x638>
        test_printn(test_step);
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
 8004ca8:	482f      	ldr	r0, [pc, #188]	; (8004d68 <main+0x708>)
 8004caa:	f7fb fc49 	bl	8000540 <test_println>
 8004cae:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	462f      	mov	r7, r5

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f47f af65 	bne.w	8004b86 <main+0x526>
#endif
  test_println("");

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
 8004cbc:	9902      	ldr	r1, [sp, #8]
 8004cbe:	b161      	cbz	r1, 8004cda <main+0x67a>
 8004cc0:	9a03      	ldr	r2, [sp, #12]
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	4688      	mov	r8, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004ccc:	9202      	str	r2, [sp, #8]
 8004cce:	9103      	str	r1, [sp, #12]
 8004cd0:	e752      	b.n	8004b78 <main+0x518>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else
        test_println("--- Result: SUCCESS");
 8004cd2:	4826      	ldr	r0, [pc, #152]	; (8004d6c <main+0x70c>)
 8004cd4:	f7fb fc34 	bl	8000540 <test_println>
 8004cd8:	e7e9      	b.n	8004cae <main+0x64e>
      j++;
    }
    i++;
  }
  print_line();
 8004cda:	f7fb fcd9 	bl	8000690 <print_line.lto_priv.164>
  test_println("");
 8004cde:	4d24      	ldr	r5, [pc, #144]	; (8004d70 <main+0x710>)
 8004ce0:	480f      	ldr	r0, [pc, #60]	; (8004d20 <main+0x6c0>)
 8004ce2:	f7fb fc2d 	bl	8000540 <test_println>
 8004ce6:	2146      	movs	r1, #70	; 0x46
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	6803      	ldr	r3, [r0, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004cf0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d1f7      	bne.n	8004ce8 <main+0x688>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <main+0x6e4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b91b      	cbnz	r3, 8004d06 <main+0x6a6>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004cfe:	481d      	ldr	r0, [pc, #116]	; (8004d74 <main+0x714>)
 8004d00:	f7fb fc1e 	bl	8000540 <test_println>
 8004d04:	e6f0      	b.n	8004ae8 <main+0x488>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8004d06:	481c      	ldr	r0, [pc, #112]	; (8004d78 <main+0x718>)
 8004d08:	f7fb fc1a 	bl	8000540 <test_println>
 8004d0c:	e6ec      	b.n	8004ae8 <main+0x488>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8004d0e:	f240 631a 	movw	r3, #1562	; 0x61a
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	e6b0      	b.n	8004a78 <main+0x418>
 8004d16:	bf00      	nop
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	20001168 	.word	0x20001168
 8004d20:	08006ac4 	.word	0x08006ac4
 8004d24:	08006b54 	.word	0x08006b54
 8004d28:	08006ad4 	.word	0x08006ad4
 8004d2c:	08006b70 	.word	0x08006b70
 8004d30:	08006b94 	.word	0x08006b94
 8004d34:	08006ae8 	.word	0x08006ae8
 8004d38:	08006bac 	.word	0x08006bac
 8004d3c:	08006afc 	.word	0x08006afc
 8004d40:	08006bc8 	.word	0x08006bc8
 8004d44:	200012ed 	.word	0x200012ed
 8004d48:	080068e4 	.word	0x080068e4
 8004d4c:	0800676c 	.word	0x0800676c
 8004d50:	08006974 	.word	0x08006974
 8004d54:	08006b10 	.word	0x08006b10
 8004d58:	08006bf4 	.word	0x08006bf4
 8004d5c:	20000884 	.word	0x20000884
 8004d60:	200011e4 	.word	0x200011e4
 8004d64:	200012e8 	.word	0x200012e8
 8004d68:	08006b74 	.word	0x08006b74
 8004d6c:	08006b78 	.word	0x08006b78
 8004d70:	08006b44 	.word	0x08006b44
 8004d74:	08006b84 	.word	0x08006b84
 8004d78:	08006b8c 	.word	0x08006b8c
 8004d7c:	08006758 	.word	0x08006758
 8004d80:	08006b20 	.word	0x08006b20
 8004d84:	08006b24 	.word	0x08006b24
 8004d88:	08006b3c 	.word	0x08006b3c
 8004d8c:	08006b40 	.word	0x08006b40

08004d90 <tmo.lto_priv.74>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
	...

08004da0 <test_011_002_setup.lto_priv.159>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <test_011_002_setup.lto_priv.159+0x10>)
 8004da2:	2200      	movs	r2, #0
  mp->object_size = size;
 8004da4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004da8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8004daa:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
  mp->provider = provider;
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	4770      	bx	lr
 8004db0:	20001320 	.word	0x20001320
	...

08004dc0 <test_011_001_setup.lto_priv.157>:
  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
 8004dc0:	4908      	ldr	r1, [pc, #32]	; (8004de4 <test_011_001_setup.lto_priv.157+0x24>)
 *   freeing memory.
 * - [11.1.7] Getting heap info again for verification.
 * .
 */

static void test_011_001_setup(void) {
 8004dc2:	b410      	push	{r4}

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004dc4:	2200      	movs	r2, #0
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004dc6:	24cc      	movs	r4, #204	; 0xcc

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <test_011_001_setup.lto_priv.157+0x28>)
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004dca:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004dce:	f103 0010 	add.w	r0, r3, #16
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
 8004dd2:	60da      	str	r2, [r3, #12]
  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
 8004dd4:	6099      	str	r1, [r3, #8]
 8004dd6:	6118      	str	r0, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8004dd8:	6158      	str	r0, [r3, #20]

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	619a      	str	r2, [r3, #24]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8004dde:	bc10      	pop	{r4}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000ae8 	.word	0x20000ae8
 8004de8:	200012c8 	.word	0x200012c8
 8004dec:	00000000 	.word	0x00000000

08004df0 <test_010_001_setup.lto_priv.154>:
  H_NEXT(&heapp->header) = hp;
 8004df0:	4908      	ldr	r1, [pc, #32]	; (8004e14 <test_010_001_setup.lto_priv.154+0x24>)
 * - [10.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void test_010_001_setup(void) {
 8004df2:	b410      	push	{r4}

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004df4:	2200      	movs	r2, #0
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004df6:	24cc      	movs	r4, #204	; 0xcc

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <test_010_001_setup.lto_priv.154+0x28>)
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004dfa:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004dfe:	f103 0010 	add.w	r0, r3, #16
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
 8004e02:	60da      	str	r2, [r3, #12]
  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
 8004e04:	6099      	str	r1, [r3, #8]
 8004e06:	6118      	str	r0, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8004e08:	6158      	str	r0, [r3, #20]

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	619a      	str	r2, [r3, #24]
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}
 8004e0e:	bc10      	pop	{r4}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000ae8 	.word	0x20000ae8
 8004e18:	20001220 	.word	0x20001220
 8004e1c:	00000000 	.word	0x00000000

08004e20 <test_009_003_setup.lto_priv.152>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <test_009_003_setup.lto_priv.152+0x14>)
 8004e22:	2200      	movs	r2, #0
  mp->object_size = size;
 8004e24:	2104      	movs	r1, #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004e26:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004e28:	605b      	str	r3, [r3, #4]
 8004e2a:	6119      	str	r1, [r3, #16]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8004e2c:	60da      	str	r2, [r3, #12]
  mp->object_size = size;
  mp->provider = provider;
 8004e2e:	615a      	str	r2, [r3, #20]
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	4770      	bx	lr
 8004e34:	20000854 	.word	0x20000854
	...

08004e40 <test_009_002_setup.lto_priv.150>:
 8004e40:	f7ff bfee 	b.w	8004e20 <test_009_003_setup.lto_priv.152>
	...

08004e50 <bmk_thread8.lto_priv.75>:
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
}
#endif

static THD_FUNCTION(bmk_thread8, p) {
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4604      	mov	r4, r0
 8004e54:	4d08      	ldr	r5, [pc, #32]	; (8004e78 <bmk_thread8.lto_priv.75+0x28>)

  do {
    chThdYield();
 8004e56:	f7fb fd1b 	bl	8000890 <chThdYield>
    chThdYield();
 8004e5a:	f7fb fd19 	bl	8000890 <chThdYield>
    chThdYield();
 8004e5e:	f7fb fd17 	bl	8000890 <chThdYield>
    chThdYield();
 8004e62:	f7fb fd15 	bl	8000890 <chThdYield>
    (*(uint32_t *)p) += 4;
 8004e66:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004e68:	69aa      	ldr	r2, [r5, #24]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	6023      	str	r3, [r4, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8004e6e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004e72:	075b      	lsls	r3, r3, #29
 8004e74:	d5ef      	bpl.n	8004e56 <bmk_thread8.lto_priv.75+0x6>
}
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20001240 	.word	0x20001240
 8004e7c:	00000000 	.word	0x00000000

08004e80 <bmk_thread7.lto_priv.76>:
  } while (msg == MSG_OK);
  chSysUnlock();
}

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 8004e80:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8004e82:	4c07      	ldr	r4, [pc, #28]	; (8004ea0 <bmk_thread7.lto_priv.76+0x20>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004e84:	69a3      	ldr	r3, [r4, #24]

  (void)p;
  while (!chThdShouldTerminateX())
 8004e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e8a:	075a      	lsls	r2, r3, #29
 8004e8c:	d407      	bmi.n	8004e9e <bmk_thread7.lto_priv.76+0x1e>
    chSemWait(&sem1);
 8004e8e:	4805      	ldr	r0, [pc, #20]	; (8004ea4 <bmk_thread7.lto_priv.76+0x24>)
 8004e90:	f7fb fe46 	bl	8000b20 <chSemWait>
 8004e94:	69a3      	ldr	r3, [r4, #24]

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8004e96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e9a:	075b      	lsls	r3, r3, #29
 8004e9c:	d5f7      	bpl.n	8004e8e <bmk_thread7.lto_priv.76+0xe>
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	20001240 	.word	0x20001240
 8004ea4:	200011e8 	.word	0x200011e8
	...

08004eb0 <bmk_thread4.lto_priv.78>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8004eb0:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <bmk_thread4.lto_priv.78+0x20>)
static THD_FUNCTION(bmk_thread3, p) {

  chThdExit((msg_t)p);
}

static THD_FUNCTION(bmk_thread4, p) {
 8004eb2:	b510      	push	{r4, lr}
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	6994      	ldr	r4, [r2, #24]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	f7fb fdf7 	bl	8000ab0 <chSchGoSleepS>
    msg = self->u.rdymsg;
  } while (msg == MSG_OK);
 8004ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f9      	beq.n	8004ebc <bmk_thread4.lto_priv.78+0xc>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	bd10      	pop	{r4, pc}
 8004ed0:	20001240 	.word	0x20001240
	...

08004ee0 <msg_loop_test>:
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
}

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	4605      	mov	r5, r0
  systime_t start, end;

  uint32_t n = 0;
  start = test_wait_tick();
 8004ee6:	f7fe f953 	bl	8003190 <test_wait_tick>
    (void)chMsgSend(tp, 1);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (chVTIsSystemTimeWithinX(start, end));
 8004eea:	f242 780f 	movw	r8, #9999	; 0x270f

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
  systime_t start, end;

  uint32_t n = 0;
  start = test_wait_tick();
 8004eee:	4607      	mov	r7, r0
}

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
  systime_t start, end;

  uint32_t n = 0;
 8004ef0:	2400      	movs	r4, #0
 8004ef2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  start = test_wait_tick();
  end = start + MS2ST(1000);
  do {
    (void)chMsgSend(tp, 1);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7fb fe51 	bl	8000ba0 <chMsgSend>
 8004efe:	6a73      	ldr	r3, [r6, #36]	; 0x24
    n++;
 8004f00:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (chVTIsSystemTimeWithinX(start, end));
 8004f02:	1bdb      	subs	r3, r3, r7
 8004f04:	4543      	cmp	r3, r8
 8004f06:	d9f6      	bls.n	8004ef6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 8004f08:	4628      	mov	r0, r5
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f7fb fe48 	bl	8000ba0 <chMsgSend>
  return n;
}
 8004f10:	4620      	mov	r0, r4
 8004f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f16:	bf00      	nop
	...

08004f20 <test_012_003_execute.lto_priv.163>:
 *   second time window.
 * - [12.3.4] Score is printed.
 * .
 */

static void test_012_003_execute(void) {
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4e2b      	ldr	r6, [pc, #172]	; (8004fd4 <test_012_003_execute.lto_priv.163+0xb4>)

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f26:	4d2c      	ldr	r5, [pc, #176]	; (8004fd8 <test_012_003_execute.lto_priv.163+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8004f28:	69b3      	ldr	r3, [r6, #24]
static void test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8004f2a:	4f2c      	ldr	r7, [pc, #176]	; (8004fdc <test_012_003_execute.lto_priv.163+0xbc>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	4628      	mov	r0, r5
 8004f30:	3101      	adds	r1, #1
static void test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8004f32:	2401      	movs	r4, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f34:	2300      	movs	r3, #0
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <test_012_003_execute.lto_priv.163+0xc0>)
static void test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8004f38:	603c      	str	r4, [r7, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f3a:	f000 fd49 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8004f3e:	69b3      	ldr	r3, [r6, #24]
 8004f40:	4c28      	ldr	r4, [pc, #160]	; (8004fe4 <test_012_003_execute.lto_priv.163+0xc4>)

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f42:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8004ff4 <test_012_003_execute.lto_priv.163+0xd4>
 8004f46:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  }

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 8004f48:	f04f 0e02 	mov.w	lr, #2

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f4c:	6020      	str	r0, [r4, #0]

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f4e:	4642      	mov	r2, r8
 8004f50:	3902      	subs	r1, #2
 8004f52:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8004f56:	2300      	movs	r3, #0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  }

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 8004f58:	f8c7 e000 	str.w	lr, [r7]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f5c:	f000 fd38 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8004f60:	69b3      	ldr	r3, [r6, #24]
 8004f62:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	4642      	mov	r2, r8
 8004f68:	3903      	subs	r1, #3
 8004f6a:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f000 fd2e 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8004f74:	69b3      	ldr	r3, [r6, #24]
 8004f76:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	3904      	subs	r1, #4
 8004f7e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8004f82:	2300      	movs	r3, #0
 8004f84:	f000 fd24 	bl	80059d0 <chThdCreateStatic.constprop.65>
 8004f88:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004f8a:	4642      	mov	r2, r8
 8004f8c:	6899      	ldr	r1, [r3, #8]
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8004f8e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004f90:	3905      	subs	r1, #5
 8004f92:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8004f96:	2300      	movs	r3, #0
 8004f98:	f000 fd1a 	bl	80059d0 <chThdCreateStatic.constprop.65>
  }

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 8004f9c:	2303      	movs	r3, #3
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004f9e:	6120      	str	r0, [r4, #16]

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
  {
    n = msg_loop_test(threads[0]);
 8004fa0:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
  }

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 8004fa2:	603b      	str	r3, [r7, #0]
  {
    n = msg_loop_test(threads[0]);
 8004fa4:	f7ff ff9c 	bl	8004ee0 <msg_loop_test>
 8004fa8:	4604      	mov	r4, r0
    test_wait_threads();
 8004faa:	f7fc f8f1 	bl	8001190 <test_wait_threads>
  }

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 8004fae:	2304      	movs	r3, #4
  {
    test_print("--- Score : ");
 8004fb0:	480d      	ldr	r0, [pc, #52]	; (8004fe8 <test_012_003_execute.lto_priv.163+0xc8>)
    n = msg_loop_test(threads[0]);
    test_wait_threads();
  }

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 8004fb2:	603b      	str	r3, [r7, #0]
  {
    test_print("--- Score : ");
 8004fb4:	f7fb fae4 	bl	8000580 <test_print>
    test_printn(n);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7fb faf9 	bl	80005b0 <test_printn>
    test_print(" msgs/S, ");
 8004fbe:	480b      	ldr	r0, [pc, #44]	; (8004fec <test_012_003_execute.lto_priv.163+0xcc>)
 8004fc0:	f7fb fade 	bl	8000580 <test_print>
    test_printn(n << 1);
 8004fc4:	0060      	lsls	r0, r4, #1
 8004fc6:	f7fb faf3 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
  }
}
 8004fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  {
    test_print("--- Score : ");
    test_printn(n);
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
 8004fce:	4808      	ldr	r0, [pc, #32]	; (8004ff0 <test_012_003_execute.lto_priv.163+0xd0>)
 8004fd0:	f7fb bab6 	b.w	8000540 <test_println>
 8004fd4:	20001240 	.word	0x20001240
 8004fd8:	20000ae8 	.word	0x20000ae8
 8004fdc:	200011e4 	.word	0x200011e4
 8004fe0:	08005101 	.word	0x08005101
 8004fe4:	200011f4 	.word	0x200011f4
 8004fe8:	08006a6c 	.word	0x08006a6c
 8004fec:	080072bc 	.word	0x080072bc
 8004ff0:	08006aa8 	.word	0x08006aa8
 8004ff4:	080059b1 	.word	0x080059b1
	...

08005000 <test_012_002_execute.lto_priv.162>:
 *   second time window.
 * - [12.2.3] Score is printed.
 * .
 */

static void test_012_002_execute(void) {
 8005000:	b538      	push	{r3, r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <test_012_002_execute.lto_priv.162+0x54>)
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8005004:	4c14      	ldr	r4, [pc, #80]	; (8005058 <test_012_002_execute.lto_priv.162+0x58>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2501      	movs	r5, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800500a:	6899      	ldr	r1, [r3, #8]
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <test_012_002_execute.lto_priv.162+0x5c>)
 800500e:	4429      	add	r1, r5
 8005010:	2300      	movs	r3, #0
 8005012:	4813      	ldr	r0, [pc, #76]	; (8005060 <test_012_002_execute.lto_priv.162+0x60>)
static void test_012_002_execute(void) {
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8005014:	6025      	str	r5, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005016:	f000 fcdb 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <test_012_002_execute.lto_priv.162+0x64>)
  }

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800501c:	2302      	movs	r3, #2

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800501e:	6010      	str	r0, [r2, #0]
  }

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 8005020:	6023      	str	r3, [r4, #0]
  {
    n = msg_loop_test(threads[0]);
 8005022:	f7ff ff5d 	bl	8004ee0 <msg_loop_test>
 8005026:	4605      	mov	r5, r0
    test_wait_threads();
 8005028:	f7fc f8b2 	bl	8001190 <test_wait_threads>
  }

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 800502c:	2303      	movs	r3, #3
  {
    test_print("--- Score : ");
 800502e:	480e      	ldr	r0, [pc, #56]	; (8005068 <test_012_002_execute.lto_priv.162+0x68>)
    n = msg_loop_test(threads[0]);
    test_wait_threads();
  }

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 8005030:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 8005032:	f7fb faa5 	bl	8000580 <test_print>
    test_printn(n);
 8005036:	4628      	mov	r0, r5
 8005038:	f7fb faba 	bl	80005b0 <test_printn>
    test_print(" msgs/S, ");
 800503c:	480b      	ldr	r0, [pc, #44]	; (800506c <test_012_002_execute.lto_priv.162+0x6c>)
 800503e:	f7fb fa9f 	bl	8000580 <test_print>
    test_printn(n << 1);
 8005042:	0068      	lsls	r0, r5, #1
 8005044:	f7fb fab4 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
  }
}
 8005048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    test_print("--- Score : ");
    test_printn(n);
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
 800504c:	4808      	ldr	r0, [pc, #32]	; (8005070 <test_012_002_execute.lto_priv.162+0x70>)
 800504e:	f7fb ba77 	b.w	8000540 <test_println>
 8005052:	bf00      	nop
 8005054:	20001240 	.word	0x20001240
 8005058:	200011e4 	.word	0x200011e4
 800505c:	08005101 	.word	0x08005101
 8005060:	20000ae8 	.word	0x20000ae8
 8005064:	200011f4 	.word	0x200011f4
 8005068:	08006a6c 	.word	0x08006a6c
 800506c:	080072bc 	.word	0x080072bc
 8005070:	08006aa8 	.word	0x08006aa8
	...

08005080 <test_012_001_execute.lto_priv.161>:
 *   second time window.
 * - [12.1.3] Score is printed.
 * .
 */

static void test_012_001_execute(void) {
 8005080:	b538      	push	{r3, r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <test_012_001_execute.lto_priv.161+0x54>)
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 8005084:	4c14      	ldr	r4, [pc, #80]	; (80050d8 <test_012_001_execute.lto_priv.161+0x58>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2501      	movs	r5, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800508a:	6899      	ldr	r1, [r3, #8]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <test_012_001_execute.lto_priv.161+0x5c>)
 800508e:	3901      	subs	r1, #1
 8005090:	2300      	movs	r3, #0
 8005092:	4813      	ldr	r0, [pc, #76]	; (80050e0 <test_012_001_execute.lto_priv.161+0x60>)
static void test_012_001_execute(void) {
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 8005094:	6025      	str	r5, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005096:	f000 fc9b 	bl	80059d0 <chThdCreateStatic.constprop.65>
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <test_012_001_execute.lto_priv.161+0x64>)
  }

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800509c:	2302      	movs	r3, #2

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800509e:	6010      	str	r0, [r2, #0]
  }

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 80050a0:	6023      	str	r3, [r4, #0]
  {
    n = msg_loop_test(threads[0]);
 80050a2:	f7ff ff1d 	bl	8004ee0 <msg_loop_test>
 80050a6:	4605      	mov	r5, r0
    test_wait_threads();
 80050a8:	f7fc f872 	bl	8001190 <test_wait_threads>
  }

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 80050ac:	2303      	movs	r3, #3
  {
    test_print("--- Score : ");
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <test_012_001_execute.lto_priv.161+0x68>)
    n = msg_loop_test(threads[0]);
    test_wait_threads();
  }

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 80050b0:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 80050b2:	f7fb fa65 	bl	8000580 <test_print>
    test_printn(n);
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7fb fa7a 	bl	80005b0 <test_printn>
    test_print(" msgs/S, ");
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <test_012_001_execute.lto_priv.161+0x6c>)
 80050be:	f7fb fa5f 	bl	8000580 <test_print>
    test_printn(n << 1);
 80050c2:	0068      	lsls	r0, r5, #1
 80050c4:	f7fb fa74 	bl	80005b0 <test_printn>
    test_println(" ctxswc/S");
  }
}
 80050c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    test_print("--- Score : ");
    test_printn(n);
    test_print(" msgs/S, ");
    test_printn(n << 1);
    test_println(" ctxswc/S");
 80050cc:	4808      	ldr	r0, [pc, #32]	; (80050f0 <test_012_001_execute.lto_priv.161+0x70>)
 80050ce:	f7fb ba37 	b.w	8000540 <test_println>
 80050d2:	bf00      	nop
 80050d4:	20001240 	.word	0x20001240
 80050d8:	200011e4 	.word	0x200011e4
 80050dc:	08005101 	.word	0x08005101
 80050e0:	20000ae8 	.word	0x20000ae8
 80050e4:	200011f4 	.word	0x200011f4
 80050e8:	08006a6c 	.word	0x08006a6c
 80050ec:	080072bc 	.word	0x080072bc
 80050f0:	08006aa8 	.word	0x08006aa8
	...

08005100 <bmk_thread1>:
#endif

static void tmo(void *param) {(void)param;}

#if CH_CFG_USE_MESSAGES
static THD_FUNCTION(bmk_thread1, p) {
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	2620      	movs	r6, #32
 8005104:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8005106:	f7fb fceb 	bl	8000ae0 <chMsgWait>
 800510a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800510c:	f386 8811 	msr	BASEPRI, r6
 8005110:	4621      	mov	r1, r4
 8005112:	f7fb fc7d 	bl	8000a10 <chSchWakeupS>
 8005116:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800511a:	2c00      	cmp	r4, #0
 800511c:	d1f3      	bne.n	8005106 <bmk_thread1+0x6>
}
 800511e:	bd70      	pop	{r4, r5, r6, pc}

08005120 <test_009_001_execute.lto_priv.149>:

static void test_009_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}

static void test_009_001_execute(void) {
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* [9.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8005124:	4e39      	ldr	r6, [pc, #228]	; (800520c <test_009_001_execute.lto_priv.149+0xec>)
 8005126:	2201      	movs	r2, #1
 8005128:	4b39      	ldr	r3, [pc, #228]	; (8005210 <test_009_001_execute.lto_priv.149+0xf0>)
 800512a:	4c3a      	ldr	r4, [pc, #232]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
 800512c:	6032      	str	r2, [r6, #0]
 800512e:	2520      	movs	r5, #32
 8005130:	2204      	movs	r2, #4
 8005132:	2000      	movs	r0, #0
 8005134:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005138:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 800513a:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800513c:	6019      	str	r1, [r3, #0]
 800513e:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005142:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8005144:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005146:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8005148:	d1f4      	bne.n	8005134 <test_009_001_execute.lto_priv.149+0x14>
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }

  /* [9.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 800514a:	2302      	movs	r3, #2
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	2504      	movs	r5, #4
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005150:	4830      	ldr	r0, [pc, #192]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
 8005152:	f7fb fb35 	bl	80007c0 <chPoolAlloc>
 8005156:	3000      	adds	r0, #0
 8005158:	bf18      	it	ne
 800515a:	2001      	movne	r0, #1
 800515c:	492e      	ldr	r1, [pc, #184]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
 800515e:	f7fb fa7f 	bl	8000660 <_test_assert>
 8005162:	2800      	cmp	r0, #0
 8005164:	d13d      	bne.n	80051e2 <test_009_001_execute.lto_priv.149+0xc2>
  }

  /* [9.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005166:	3d01      	subs	r5, #1
 8005168:	d1f2      	bne.n	8005150 <test_009_001_execute.lto_priv.149+0x30>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.3] Now must be empty.*/
  test_set_step(3);
 800516a:	2303      	movs	r3, #3
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800516c:	4829      	ldr	r0, [pc, #164]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.3] Now must be empty.*/
  test_set_step(3);
 800516e:	6033      	str	r3, [r6, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005170:	f7fb fb26 	bl	80007c0 <chPoolAlloc>
 8005174:	fab0 f080 	clz	r0, r0
 8005178:	4928      	ldr	r1, [pc, #160]	; (800521c <test_009_001_execute.lto_priv.149+0xfc>)
 800517a:	0940      	lsrs	r0, r0, #5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.3] Now must be empty.*/
  test_set_step(3);
 800517c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800520c <test_009_001_execute.lto_priv.149+0xec>
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005180:	f7fb fa6e 	bl	8000660 <_test_assert>
 8005184:	bb68      	cbnz	r0, 80051e2 <test_009_001_execute.lto_priv.149+0xc2>
 8005186:	4b22      	ldr	r3, [pc, #136]	; (8005210 <test_009_001_execute.lto_priv.149+0xf0>)
  }

  /* [9.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 8005188:	2204      	movs	r2, #4
 800518a:	f103 0710 	add.w	r7, r3, #16
 800518e:	f8c8 2000 	str.w	r2, [r8]
 8005192:	2020      	movs	r0, #32
 8005194:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005198:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 800519a:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800519c:	f843 2b04 	str.w	r2, [r3], #4
 80051a0:	f385 8811 	msr	BASEPRI, r5
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80051a4:	42bb      	cmp	r3, r7
 80051a6:	d1f5      	bne.n	8005194 <test_009_001_execute.lto_priv.149+0x74>
      chPoolFree(&mp1, &objects[i]);
  }

  /* [9.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 80051a8:	2305      	movs	r3, #5
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	2404      	movs	r4, #4
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80051ae:	4d19      	ldr	r5, [pc, #100]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
 80051b0:	4628      	mov	r0, r5
 80051b2:	f7fb fb05 	bl	80007c0 <chPoolAlloc>
 80051b6:	3000      	adds	r0, #0
 80051b8:	bf18      	it	ne
 80051ba:	2001      	movne	r0, #1
 80051bc:	4916      	ldr	r1, [pc, #88]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
 80051be:	f7fb fa4f 	bl	8000660 <_test_assert>
 80051c2:	b970      	cbnz	r0, 80051e2 <test_009_001_execute.lto_priv.149+0xc2>
  }

  /* [9.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80051c4:	3c01      	subs	r4, #1
 80051c6:	d1f2      	bne.n	80051ae <test_009_001_execute.lto_priv.149+0x8e>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 80051c8:	2306      	movs	r3, #6
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80051ca:	4628      	mov	r0, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 80051cc:	6033      	str	r3, [r6, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80051ce:	f7fb faf7 	bl	80007c0 <chPoolAlloc>
 80051d2:	fab0 f080 	clz	r0, r0
 80051d6:	4911      	ldr	r1, [pc, #68]	; (800521c <test_009_001_execute.lto_priv.149+0xfc>)
 80051d8:	0940      	lsrs	r0, r0, #5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 80051da:	4e0c      	ldr	r6, [pc, #48]	; (800520c <test_009_001_execute.lto_priv.149+0xec>)
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80051dc:	f7fb fa40 	bl	8000660 <_test_assert>
 80051e0:	b108      	cbz	r0, 80051e6 <test_009_001_execute.lto_priv.149+0xc6>
 80051e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->provider = provider;
 80051e6:	490e      	ldr	r1, [pc, #56]	; (8005220 <test_009_001_execute.lto_priv.149+0x100>)
  }

  /* [9.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 80051e8:	2207      	movs	r2, #7
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
 80051ea:	2304      	movs	r3, #4
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80051ec:	4628      	mov	r0, r5
  mp->provider = provider;
 80051ee:	60a9      	str	r1, [r5, #8]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 80051f0:	602c      	str	r4, [r5, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }

  /* [9.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 80051f2:	6032      	str	r2, [r6, #0]
  mp->object_size = size;
 80051f4:	606b      	str	r3, [r5, #4]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80051f6:	f7fb fae3 	bl	80007c0 <chPoolAlloc>
  }
}
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* [9.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80051fe:	fab0 f080 	clz	r0, r0
 8005202:	4908      	ldr	r1, [pc, #32]	; (8005224 <test_009_001_execute.lto_priv.149+0x104>)
 8005204:	0940      	lsrs	r0, r0, #5
 8005206:	f7fb ba2b 	b.w	8000660 <_test_assert>
 800520a:	bf00      	nop
 800520c:	200011e4 	.word	0x200011e4
 8005210:	2000120c 	.word	0x2000120c
 8005214:	20000818 	.word	0x20000818
 8005218:	080072c8 	.word	0x080072c8
 800521c:	080072d4 	.word	0x080072d4
 8005220:	08003331 	.word	0x08003331
 8005224:	080072e4 	.word	0x080072e4
	...

08005230 <test_011_002_execute.lto_priv.160>:

static void test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void test_011_002_execute(void) {
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8005232:	4d3e      	ldr	r5, [pc, #248]	; (800532c <test_011_002_execute.lto_priv.160+0xfc>)
 8005234:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <test_011_002_execute.lto_priv.160+0x100>)
 8005236:	2001      	movs	r0, #1
 8005238:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <test_011_002_execute.lto_priv.160+0x104>)
 800523a:	493f      	ldr	r1, [pc, #252]	; (8005338 <test_011_002_execute.lto_priv.160+0x108>)
 800523c:	6028      	str	r0, [r5, #0]
 800523e:	f103 070c 	add.w	r7, r3, #12
 8005242:	2620      	movs	r6, #32
 8005244:	2400      	movs	r4, #0
 8005246:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800524a:	6808      	ldr	r0, [r1, #0]
 800524c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800524e:	600a      	str	r2, [r1, #0]
 8005250:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8005254:	429f      	cmp	r7, r3
 8005256:	d002      	beq.n	800525e <test_011_002_execute.lto_priv.160+0x2e>
 8005258:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800525c:	e7f3      	b.n	8005246 <test_011_002_execute.lto_priv.160+0x16>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800525e:	4a37      	ldr	r2, [pc, #220]	; (800533c <test_011_002_execute.lto_priv.160+0x10c>)
  {
    prio = chThdGetPriorityX();
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 8005260:	2303      	movs	r3, #3
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005262:	6991      	ldr	r1, [r2, #24]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005264:	4836      	ldr	r0, [pc, #216]	; (8005340 <test_011_002_execute.lto_priv.160+0x110>)
 8005266:	688e      	ldr	r6, [r1, #8]
 8005268:	4a36      	ldr	r2, [pc, #216]	; (8005344 <test_011_002_execute.lto_priv.160+0x114>)
 800526a:	1e71      	subs	r1, r6, #1
  {
    prio = chThdGetPriorityX();
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 800526c:	602b      	str	r3, [r5, #0]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800526e:	f000 fdc7 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
 8005272:	4c35      	ldr	r4, [pc, #212]	; (8005348 <test_011_002_execute.lto_priv.160+0x118>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005274:	1eb1      	subs	r1, r6, #2
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005276:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005278:	4a34      	ldr	r2, [pc, #208]	; (800534c <test_011_002_execute.lto_priv.160+0x11c>)
 800527a:	4835      	ldr	r0, [pc, #212]	; (8005350 <test_011_002_execute.lto_priv.160+0x120>)
 800527c:	f000 fdc0 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005280:	1ef1      	subs	r1, r6, #3

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005282:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005284:	4a33      	ldr	r2, [pc, #204]	; (8005354 <test_011_002_execute.lto_priv.160+0x124>)
 8005286:	4834      	ldr	r0, [pc, #208]	; (8005358 <test_011_002_execute.lto_priv.160+0x128>)
 8005288:	f000 fdba 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800528c:	1f31      	subs	r1, r6, #4
  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800528e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005290:	4a32      	ldr	r2, [pc, #200]	; (800535c <test_011_002_execute.lto_priv.160+0x12c>)
 8005292:	4833      	ldr	r0, [pc, #204]	; (8005360 <test_011_002_execute.lto_priv.160+0x130>)
 8005294:	f000 fdb4 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005298:	4a32      	ldr	r2, [pc, #200]	; (8005364 <test_011_002_execute.lto_priv.160+0x134>)
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800529a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800529c:	1f71      	subs	r1, r6, #5
 800529e:	4832      	ldr	r0, [pc, #200]	; (8005368 <test_011_002_execute.lto_priv.160+0x138>)
 80052a0:	f000 fdae 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80052a4:	6823      	ldr	r3, [r4, #0]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 80052a6:	2204      	movs	r2, #4
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80052a8:	6120      	str	r0, [r4, #16]
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 80052aa:	602a      	str	r2, [r5, #0]
  {
    test_assert((threads[0] != NULL) &&
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d03b      	beq.n	8005328 <test_011_002_execute.lto_priv.160+0xf8>
 80052b0:	6860      	ldr	r0, [r4, #4]
 80052b2:	b128      	cbz	r0, 80052c0 <test_011_002_execute.lto_priv.160+0x90>
 80052b4:	68a0      	ldr	r0, [r4, #8]
 80052b6:	b118      	cbz	r0, 80052c0 <test_011_002_execute.lto_priv.160+0x90>
 80052b8:	68e0      	ldr	r0, [r4, #12]
 80052ba:	3000      	adds	r0, #0
 80052bc:	bf18      	it	ne
 80052be:	2001      	movne	r0, #1
 80052c0:	492a      	ldr	r1, [pc, #168]	; (800536c <test_011_002_execute.lto_priv.160+0x13c>)
 80052c2:	f7fb f9cd 	bl	8000660 <_test_assert>
 80052c6:	b100      	cbz	r0, 80052ca <test_011_002_execute.lto_priv.160+0x9a>
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
 80052ca:	6920      	ldr	r0, [r4, #16]
 80052cc:	4928      	ldr	r1, [pc, #160]	; (8005370 <test_011_002_execute.lto_priv.160+0x140>)
 80052ce:	fab0 f080 	clz	r0, r0
 80052d2:	0940      	lsrs	r0, r0, #5
 80052d4:	f7fb f9c4 	bl	8000660 <_test_assert>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1f5      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
                "thread creation not failed");
  }

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 80052dc:	2305      	movs	r3, #5
 80052de:	602b      	str	r3, [r5, #0]
  {
    test_wait_threads();
 80052e0:	f7fb ff56 	bl	8001190 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 80052e4:	4923      	ldr	r1, [pc, #140]	; (8005374 <test_011_002_execute.lto_priv.160+0x144>)
 80052e6:	4824      	ldr	r0, [pc, #144]	; (8005378 <test_011_002_execute.lto_priv.160+0x148>)
                "thread creation not failed");
  }

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 80052e8:	4c10      	ldr	r4, [pc, #64]	; (800532c <test_011_002_execute.lto_priv.160+0xfc>)
  {
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 80052ea:	f7fb f991 	bl	8000610 <_test_assert_sequence>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d1ea      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
  }

  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 80052f2:	2306      	movs	r3, #6
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	2404      	movs	r4, #4
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 80052f8:	480f      	ldr	r0, [pc, #60]	; (8005338 <test_011_002_execute.lto_priv.160+0x108>)
 80052fa:	f7fb fa61 	bl	80007c0 <chPoolAlloc>
 80052fe:	3000      	adds	r0, #0
 8005300:	bf18      	it	ne
 8005302:	2001      	movne	r0, #1
 8005304:	491d      	ldr	r1, [pc, #116]	; (800537c <test_011_002_execute.lto_priv.160+0x14c>)
 8005306:	f7fb f9ab 	bl	8000660 <_test_assert>
 800530a:	2800      	cmp	r0, #0
 800530c:	d1dc      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
  }

  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
  {
    for (i = 0; i < 4; i++)
 800530e:	3c01      	subs	r4, #1
 8005310:	d1f2      	bne.n	80052f8 <test_011_002_execute.lto_priv.160+0xc8>
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005312:	4809      	ldr	r0, [pc, #36]	; (8005338 <test_011_002_execute.lto_priv.160+0x108>)
 8005314:	f7fb fa54 	bl	80007c0 <chPoolAlloc>
  }
}
 8005318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800531c:	fab0 f080 	clz	r0, r0
 8005320:	4917      	ldr	r1, [pc, #92]	; (8005380 <test_011_002_execute.lto_priv.160+0x150>)
 8005322:	0940      	lsrs	r0, r0, #5
 8005324:	f7fb b99c 	b.w	8000660 <_test_assert>
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8005328:	4618      	mov	r0, r3
 800532a:	e7c9      	b.n	80052c0 <test_011_002_execute.lto_priv.160+0x90>
 800532c:	200011e4 	.word	0x200011e4
 8005330:	080072a8 	.word	0x080072a8
 8005334:	20000ae8 	.word	0x20000ae8
 8005338:	20001320 	.word	0x20001320
 800533c:	20001240 	.word	0x20001240
 8005340:	08007300 	.word	0x08007300
 8005344:	080061fc 	.word	0x080061fc
 8005348:	200011f4 	.word	0x200011f4
 800534c:	08006204 	.word	0x08006204
 8005350:	08007308 	.word	0x08007308
 8005354:	08006200 	.word	0x08006200
 8005358:	08007310 	.word	0x08007310
 800535c:	08006220 	.word	0x08006220
 8005360:	08007318 	.word	0x08007318
 8005364:	08006228 	.word	0x08006228
 8005368:	08007320 	.word	0x08007320
 800536c:	08007328 	.word	0x08007328
 8005370:	08007340 	.word	0x08007340
 8005374:	080061c0 	.word	0x080061c0
 8005378:	080061f4 	.word	0x080061f4
 800537c:	0800735c 	.word	0x0800735c
 8005380:	0800736c 	.word	0x0800736c
	...

08005390 <dyn_thread1.lto_priv.69>:
 8005390:	f7fd ba26 	b.w	80027e0 <thread.lto_priv.171>
	...

080053a0 <test_011_001_execute.lto_priv.158>:

static void test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}

static void test_011_001_execute(void) {
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80053a2:	4b40      	ldr	r3, [pc, #256]	; (80054a4 <test_011_001_execute.lto_priv.158+0x104>)
 80053a4:	b085      	sub	sp, #20
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80053a6:	699d      	ldr	r5, [r3, #24]
  {
    prio = chThdGetPriorityX();
  }

  /* [11.1.2] Getting heap info before the test.*/
  test_set_step(2);
 80053a8:	4c3f      	ldr	r4, [pc, #252]	; (80054a8 <test_011_001_execute.lto_priv.158+0x108>)
 80053aa:	2302      	movs	r3, #2
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80053ac:	a903      	add	r1, sp, #12
 80053ae:	aa02      	add	r2, sp, #8
 80053b0:	483e      	ldr	r0, [pc, #248]	; (80054ac <test_011_001_execute.lto_priv.158+0x10c>)
 80053b2:	68ae      	ldr	r6, [r5, #8]
  {
    prio = chThdGetPriorityX();
  }

  /* [11.1.2] Getting heap info before the test.*/
  test_set_step(2);
 80053b4:	6023      	str	r3, [r4, #0]
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80053b6:	f7fb fe03 	bl	8000fc0 <chHeapStatus>
 80053ba:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 80053bc:	f1a0 0001 	sub.w	r0, r0, #1
 80053c0:	fab0 f080 	clz	r0, r0
 80053c4:	493a      	ldr	r1, [pc, #232]	; (80054b0 <test_011_001_execute.lto_priv.158+0x110>)
 80053c6:	0940      	lsrs	r0, r0, #5
 80053c8:	f7fb f94a 	bl	8000660 <_test_assert>
 80053cc:	b108      	cbz	r0, 80053d2 <test_011_001_execute.lto_priv.158+0x32>
    n2 = chHeapStatus(&heap1, &total2, &largest2);
    test_assert(n1 == n2, "fragmentation changed");
    test_assert(total1 == total2, "total free space changed");
    test_assert(largest1 == largest2, "largest fragment size changed");
  }
}
 80053ce:	b005      	add	sp, #20
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    n1 = chHeapStatus(&heap1, &total1, &largest1);
    test_assert(n1 == 1, "heap fragmented");
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
 80053d2:	2703      	movs	r7, #3
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 80053d4:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <test_011_001_execute.lto_priv.158+0x114>)
 80053d6:	4938      	ldr	r1, [pc, #224]	; (80054b8 <test_011_001_execute.lto_priv.158+0x118>)
 80053d8:	1e72      	subs	r2, r6, #1
 80053da:	f44f 70a4 	mov.w	r0, #328	; 0x148
    n1 = chHeapStatus(&heap1, &total1, &largest1);
    test_assert(n1 == 1, "heap fragmented");
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
 80053de:	6027      	str	r7, [r4, #0]
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 80053e0:	f000 fcde 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4f35      	ldr	r7, [pc, #212]	; (80054bc <test_011_001_execute.lto_priv.158+0x11c>)
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn1",
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
 80053e8:	3000      	adds	r0, #0
 80053ea:	bf18      	it	ne
 80053ec:	2001      	movne	r0, #1
 80053ee:	4934      	ldr	r1, [pc, #208]	; (80054c0 <test_011_001_execute.lto_priv.158+0x120>)
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 80053f0:	603b      	str	r3, [r7, #0]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn1",
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
 80053f2:	f7fb f935 	bl	8000660 <_test_assert>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d1e9      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  }

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
 80053fa:	f04f 0e04 	mov.w	lr, #4
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <test_011_001_execute.lto_priv.158+0x124>)
 8005400:	4931      	ldr	r1, [pc, #196]	; (80054c8 <test_011_001_execute.lto_priv.158+0x128>)
 8005402:	1eb2      	subs	r2, r6, #2
 8005404:	f44f 70a4 	mov.w	r0, #328	; 0x148
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
  }

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
 8005408:	f8c4 e000 	str.w	lr, [r4]
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 800540c:	f000 fcc8 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 8005410:	4603      	mov	r3, r0
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn2",
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
 8005412:	3000      	adds	r0, #0
 8005414:	bf18      	it	ne
 8005416:	2001      	movne	r0, #1
 8005418:	4929      	ldr	r1, [pc, #164]	; (80054c0 <test_011_001_execute.lto_priv.158+0x120>)
  }

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 800541a:	607b      	str	r3, [r7, #4]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn2",
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
 800541c:	f7fb f920 	bl	8000660 <_test_assert>
 8005420:	2800      	cmp	r0, #0
 8005422:	d1d4      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  }

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 8005424:	1ef2      	subs	r2, r6, #3
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <test_011_001_execute.lto_priv.158+0x12c>)
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
  }

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
 8005428:	2605      	movs	r6, #5
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 800542a:	4929      	ldr	r1, [pc, #164]	; (80054d0 <test_011_001_execute.lto_priv.158+0x130>)
 800542c:	4829      	ldr	r0, [pc, #164]	; (80054d4 <test_011_001_execute.lto_priv.158+0x134>)
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
  }

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
 800542e:	6026      	str	r6, [r4, #0]
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 8005430:	f000 fcb6 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 8005434:	4603      	mov	r3, r0
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE * 1024),
                                     "dyn3",
                                     prio-3, dyn_thread1, "C");
    test_assert(threads[2] == NULL, "thread creation not failed");
 8005436:	fab0 f080 	clz	r0, r0
 800543a:	4927      	ldr	r1, [pc, #156]	; (80054d8 <test_011_001_execute.lto_priv.158+0x138>)
 800543c:	40f0      	lsrs	r0, r6
  }

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 800543e:	60bb      	str	r3, [r7, #8]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE * 1024),
                                     "dyn3",
                                     prio-3, dyn_thread1, "C");
    test_assert(threads[2] == NULL, "thread creation not failed");
 8005440:	f7fb f90e 	bl	8000660 <_test_assert>
 8005444:	2800      	cmp	r0, #0
 8005446:	d1c2      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  }

  /* [11.1.6] Letting threads execute then checking the start order and
     freeing memory.*/
  test_set_step(6);
 8005448:	2306      	movs	r3, #6
 800544a:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 800544c:	f7fb fea0 	bl	8001190 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8005450:	4922      	ldr	r1, [pc, #136]	; (80054dc <test_011_001_execute.lto_priv.158+0x13c>)
 8005452:	4823      	ldr	r0, [pc, #140]	; (80054e0 <test_011_001_execute.lto_priv.158+0x140>)
 8005454:	f7fb f8dc 	bl	8000610 <_test_assert_sequence>
 8005458:	2800      	cmp	r0, #0
 800545a:	d1b8      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  }

  /* [11.1.7] Getting heap info again for verification.*/
  test_set_step(7);
 800545c:	2307      	movs	r3, #7
  {
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800545e:	a901      	add	r1, sp, #4
 8005460:	466a      	mov	r2, sp
 8005462:	4812      	ldr	r0, [pc, #72]	; (80054ac <test_011_001_execute.lto_priv.158+0x10c>)
    test_wait_threads();
    test_assert_sequence("AB", "invalid sequence");
  }

  /* [11.1.7] Getting heap info again for verification.*/
  test_set_step(7);
 8005464:	6023      	str	r3, [r4, #0]
  {
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8005466:	f7fb fdab 	bl	8000fc0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 800546a:	1a28      	subs	r0, r5, r0
 800546c:	fab0 f080 	clz	r0, r0
 8005470:	491c      	ldr	r1, [pc, #112]	; (80054e4 <test_011_001_execute.lto_priv.158+0x144>)
 8005472:	0940      	lsrs	r0, r0, #5
 8005474:	f7fb f8f4 	bl	8000660 <_test_assert>
 8005478:	2800      	cmp	r0, #0
 800547a:	d1a8      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
    test_assert(total1 == total2, "total free space changed");
 800547c:	9803      	ldr	r0, [sp, #12]
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	4919      	ldr	r1, [pc, #100]	; (80054e8 <test_011_001_execute.lto_priv.158+0x148>)
 8005482:	1ac2      	subs	r2, r0, r3
 8005484:	4250      	negs	r0, r2
 8005486:	4150      	adcs	r0, r2
 8005488:	f7fb f8ea 	bl	8000660 <_test_assert>
 800548c:	2800      	cmp	r0, #0
 800548e:	d19e      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8005490:	9802      	ldr	r0, [sp, #8]
 8005492:	9b00      	ldr	r3, [sp, #0]
 8005494:	4915      	ldr	r1, [pc, #84]	; (80054ec <test_011_001_execute.lto_priv.158+0x14c>)
 8005496:	1ac3      	subs	r3, r0, r3
 8005498:	4258      	negs	r0, r3
 800549a:	4158      	adcs	r0, r3
 800549c:	f7fb f8e0 	bl	8000660 <_test_assert>
 80054a0:	e795      	b.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
 80054a2:	bf00      	nop
 80054a4:	20001240 	.word	0x20001240
 80054a8:	200011e4 	.word	0x200011e4
 80054ac:	200012c8 	.word	0x200012c8
 80054b0:	08007380 	.word	0x08007380
 80054b4:	080061fc 	.word	0x080061fc
 80054b8:	08007300 	.word	0x08007300
 80054bc:	200011f4 	.word	0x200011f4
 80054c0:	08007328 	.word	0x08007328
 80054c4:	08006204 	.word	0x08006204
 80054c8:	08007308 	.word	0x08007308
 80054cc:	08006200 	.word	0x08006200
 80054d0:	08007310 	.word	0x08007310
 80054d4:	000200c8 	.word	0x000200c8
 80054d8:	08007340 	.word	0x08007340
 80054dc:	080061c0 	.word	0x080061c0
 80054e0:	08007390 	.word	0x08007390
 80054e4:	08007394 	.word	0x08007394
 80054e8:	080073ac 	.word	0x080073ac
 80054ec:	080073c8 	.word	0x080073c8

080054f0 <test_010_002_execute.lto_priv.156>:
 *   block is freed using chHeapFree(), must not fail.
 * - [10.2.2] Testing allocation failure.
 * .
 */

static void test_010_002_execute(void) {
 80054f0:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 80054f2:	4c15      	ldr	r4, [pc, #84]	; (8005548 <test_010_002_execute.lto_priv.156+0x58>)
 *   block is freed using chHeapFree(), must not fail.
 * - [10.2.2] Testing allocation failure.
 * .
 */

static void test_010_002_execute(void) {
 80054f4:	b082      	sub	sp, #8
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 80054f6:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 80054f8:	466a      	mov	r2, sp
 80054fa:	a901      	add	r1, sp, #4
 80054fc:	2000      	movs	r0, #0
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 80054fe:	6023      	str	r3, [r4, #0]
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005500:	f7fb fd5e 	bl	8000fc0 <chHeapStatus>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8005504:	2110      	movs	r1, #16
 8005506:	4811      	ldr	r0, [pc, #68]	; (800554c <test_010_002_execute.lto_priv.156+0x5c>)
 8005508:	f000 fbca 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800550c:	4606      	mov	r6, r0
 800550e:	3000      	adds	r0, #0
 8005510:	bf18      	it	ne
 8005512:	2001      	movne	r0, #1
 8005514:	490e      	ldr	r1, [pc, #56]	; (8005550 <test_010_002_execute.lto_priv.156+0x60>)
 8005516:	f7fb f8a3 	bl	8000660 <_test_assert>
 800551a:	b108      	cbz	r0, 8005520 <test_010_002_execute.lto_priv.156+0x30>
  test_set_step(2);
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
}
 800551c:	b002      	add	sp, #8
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	4605      	mov	r5, r0
  test_set_step(1);
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8005522:	4630      	mov	r0, r6
 8005524:	f7fb fd84 	bl	8001030 <chHeapFree>
  }

  /* [10.2.2] Testing allocation failure.*/
  test_set_step(2);
 8005528:	2302      	movs	r3, #2
 800552a:	4628      	mov	r0, r5
 800552c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	f000 fbb5 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8005536:	fab0 f080 	clz	r0, r0
 800553a:	4906      	ldr	r1, [pc, #24]	; (8005554 <test_010_002_execute.lto_priv.156+0x64>)
 800553c:	0940      	lsrs	r0, r0, #5
 800553e:	f7fb f88f 	bl	8000660 <_test_assert>
  }
}
 8005542:	b002      	add	sp, #8
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	bf00      	nop
 8005548:	200011e4 	.word	0x200011e4
 800554c:	20001220 	.word	0x20001220
 8005550:	080073e8 	.word	0x080073e8
 8005554:	080073fc 	.word	0x080073fc
	...

08005560 <test_010_001_execute.lto_priv.155>:

static void test_010_001_setup(void) {
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}

static void test_010_001_execute(void) {
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [10.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8005564:	4cbe      	ldr	r4, [pc, #760]	; (8005860 <test_010_001_execute.lto_priv.155+0x300>)

static void test_010_001_setup(void) {
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}

static void test_010_001_execute(void) {
 8005566:	b084      	sub	sp, #16
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [10.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8005568:	2301      	movs	r3, #1
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800556a:	4669      	mov	r1, sp
 800556c:	2200      	movs	r2, #0
 800556e:	48bd      	ldr	r0, [pc, #756]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [10.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8005570:	6023      	str	r3, [r4, #0]
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005572:	f7fb fd25 	bl	8000fc0 <chHeapStatus>
 8005576:	f1a0 0001 	sub.w	r0, r0, #1
 800557a:	fab0 f080 	clz	r0, r0
 800557e:	49ba      	ldr	r1, [pc, #744]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 8005580:	0940      	lsrs	r0, r0, #5
 8005582:	f7fb f86d 	bl	8000660 <_test_assert>
 8005586:	b110      	cbz	r0, 800558e <test_010_001_execute.lto_priv.155+0x2e>
  test_set_step(10);
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
    test_assert(n == sz, "size changed");
  }
}
 8005588:	b004      	add	sp, #16
 800558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
  }

  /* [10.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 800558e:	2302      	movs	r3, #2
 8005590:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 8005594:	48b3      	ldr	r0, [pc, #716]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	f000 fb82 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_buffer * 2);
    test_assert(p1 == NULL, "allocation not failed");
 800559c:	fab0 f080 	clz	r0, r0
 80055a0:	49b2      	ldr	r1, [pc, #712]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80055a2:	0940      	lsrs	r0, r0, #5
 80055a4:	f7fb f85c 	bl	8000660 <_test_assert>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1ed      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.3] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(3);
 80055ac:	2303      	movs	r3, #3
 80055ae:	2110      	movs	r1, #16
 80055b0:	48ac      	ldr	r0, [pc, #688]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	f000 fb74 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 80055b8:	4605      	mov	r5, r0
 80055ba:	3000      	adds	r0, #0
 80055bc:	bf18      	it	ne
 80055be:	2001      	movne	r0, #1
 80055c0:	49ab      	ldr	r1, [pc, #684]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 80055c2:	f7fb f84d 	bl	8000660 <_test_assert>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d1de      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p1);
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7fb fd30 	bl	8001030 <chHeapFree>
  }

  /* [10.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 80055d0:	2304      	movs	r3, #4
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055d2:	a902      	add	r1, sp, #8
 80055d4:	aa03      	add	r2, sp, #12
 80055d6:	48a3      	ldr	r0, [pc, #652]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
    chHeapFree(p1);
  }

  /* [10.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 80055d8:	6023      	str	r3, [r4, #0]
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055da:	f7fb fcf1 	bl	8000fc0 <chHeapStatus>
 80055de:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 80055e0:	f1a0 0001 	sub.w	r0, r0, #1
 80055e4:	fab0 f080 	clz	r0, r0
 80055e8:	49a2      	ldr	r1, [pc, #648]	; (8005874 <test_010_001_execute.lto_priv.155+0x314>)
 80055ea:	0940      	lsrs	r0, r0, #5
     be at least one free block of sufficient size.*/
  test_set_step(4);
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055ec:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 80055ee:	f7fb f837 	bl	8000660 <_test_assert>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d1c8      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 80055f6:	9802      	ldr	r0, [sp, #8]
 80055f8:	499f      	ldr	r1, [pc, #636]	; (8005878 <test_010_001_execute.lto_priv.155+0x318>)
 80055fa:	280f      	cmp	r0, #15
 80055fc:	bf94      	ite	ls
 80055fe:	2000      	movls	r0, #0
 8005600:	2001      	movhi	r0, #1
 8005602:	f7fb f82d 	bl	8000660 <_test_assert>
 8005606:	2800      	cmp	r0, #0
 8005608:	d1be      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800560a:	9802      	ldr	r0, [sp, #8]
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	499a      	ldr	r1, [pc, #616]	; (8005878 <test_010_001_execute.lto_priv.155+0x318>)
 8005610:	1ac0      	subs	r0, r0, r3
 8005612:	fab0 f080 	clz	r0, r0
 8005616:	0940      	lsrs	r0, r0, #5
 8005618:	f7fb f822 	bl	8000660 <_test_assert>
 800561c:	4605      	mov	r5, r0
 800561e:	2800      	cmp	r0, #0
 8005620:	d1b2      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
 8005622:	2305      	movs	r3, #5
 8005624:	2110      	movs	r1, #16
 8005626:	488f      	ldr	r0, [pc, #572]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	f000 fb39 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 800562e:	2110      	movs	r1, #16
 8005630:	4680      	mov	r8, r0
 8005632:	488c      	ldr	r0, [pc, #560]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005634:	f000 fb34 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 8005638:	2110      	movs	r1, #16
 800563a:	4607      	mov	r7, r0
 800563c:	4889      	ldr	r0, [pc, #548]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 800563e:	f000 fb2f 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 8005642:	4606      	mov	r6, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);                                 /* Does not merge.*/
 8005644:	4640      	mov	r0, r8
 8005646:	f7fb fcf3 	bl	8001030 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800564a:	4638      	mov	r0, r7
 800564c:	f7fb fcf0 	bl	8001030 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8005650:	4630      	mov	r0, r6
 8005652:	f7fb fced 	bl	8001030 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005656:	462a      	mov	r2, r5
 8005658:	a901      	add	r1, sp, #4
 800565a:	4882      	ldr	r0, [pc, #520]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 800565c:	f7fb fcb0 	bl	8000fc0 <chHeapStatus>
 8005660:	1e42      	subs	r2, r0, #1
 8005662:	4250      	negs	r0, r2
 8005664:	4980      	ldr	r1, [pc, #512]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 8005666:	4150      	adcs	r0, r2
 8005668:	f7fa fffa 	bl	8000660 <_test_assert>
 800566c:	4605      	mov	r5, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d18a      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
 8005672:	2306      	movs	r3, #6
 8005674:	2110      	movs	r1, #16
 8005676:	487b      	ldr	r0, [pc, #492]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	f000 fb11 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 800567e:	2110      	movs	r1, #16
 8005680:	4606      	mov	r6, r0
 8005682:	4878      	ldr	r0, [pc, #480]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005684:	f000 fb0c 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 8005688:	4607      	mov	r7, r0
 800568a:	2110      	movs	r1, #16
 800568c:	4875      	ldr	r0, [pc, #468]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 800568e:	f000 fb07 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p3);                                 /* Merges forward.*/
 8005692:	f7fb fccd 	bl	8001030 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8005696:	4638      	mov	r0, r7
 8005698:	f7fb fcca 	bl	8001030 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800569c:	4630      	mov	r0, r6
 800569e:	f7fb fcc7 	bl	8001030 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80056a2:	462a      	mov	r2, r5
 80056a4:	a901      	add	r1, sp, #4
 80056a6:	486f      	ldr	r0, [pc, #444]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80056a8:	f7fb fc8a 	bl	8000fc0 <chHeapStatus>
 80056ac:	1e43      	subs	r3, r0, #1
 80056ae:	4258      	negs	r0, r3
 80056b0:	496d      	ldr	r1, [pc, #436]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 80056b2:	4158      	adcs	r0, r3
 80056b4:	f7fa ffd4 	bl	8000660 <_test_assert>
 80056b8:	4605      	mov	r5, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f47f af64 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
 80056c0:	2307      	movs	r3, #7
 80056c2:	2111      	movs	r1, #17
 80056c4:	4867      	ldr	r0, [pc, #412]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	f000 faea 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 80056cc:	2110      	movs	r1, #16
 80056ce:	4606      	mov	r6, r0
 80056d0:	4864      	ldr	r0, [pc, #400]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80056d2:	f000 fae5 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 80056d6:	4607      	mov	r7, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 80056d8:	4630      	mov	r0, r6
 80056da:	f7fb fca9 	bl	8001030 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80056de:	462a      	mov	r2, r5
 80056e0:	a901      	add	r1, sp, #4
 80056e2:	4860      	ldr	r0, [pc, #384]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80056e4:	f7fb fc6c 	bl	8000fc0 <chHeapStatus>
 80056e8:	f1a0 0802 	sub.w	r8, r0, #2
 80056ec:	f1d8 0000 	rsbs	r0, r8, #0
 80056f0:	4962      	ldr	r1, [pc, #392]	; (800587c <test_010_001_execute.lto_priv.155+0x31c>)
 80056f2:	eb40 0008 	adc.w	r0, r0, r8
 80056f6:	f7fa ffb3 	bl	8000660 <_test_assert>
 80056fa:	4605      	mov	r5, r0
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f47f af43 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
 8005702:	2110      	movs	r1, #16
 8005704:	4857      	ldr	r0, [pc, #348]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005706:	f000 facb 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800570a:	462a      	mov	r2, r5
 800570c:	4606      	mov	r6, r0
 800570e:	a901      	add	r1, sp, #4
 8005710:	4854      	ldr	r0, [pc, #336]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005712:	f7fb fc55 	bl	8000fc0 <chHeapStatus>
 8005716:	2801      	cmp	r0, #1
 8005718:	f000 80a0 	beq.w	800585c <test_010_001_execute.lto_priv.155+0x2fc>
 800571c:	2200      	movs	r2, #0
 800571e:	a901      	add	r1, sp, #4
 8005720:	4850      	ldr	r0, [pc, #320]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005722:	f7fb fc4d 	bl	8000fc0 <chHeapStatus>
 8005726:	f1a0 0c02 	sub.w	ip, r0, #2
 800572a:	f1dc 0000 	rsbs	r0, ip, #0
 800572e:	eb40 000c 	adc.w	r0, r0, ip
 8005732:	494d      	ldr	r1, [pc, #308]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 8005734:	f7fa ff94 	bl	8000660 <_test_assert>
 8005738:	4605      	mov	r5, r0
 800573a:	2800      	cmp	r0, #0
 800573c:	f47f af24 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 8005740:	4638      	mov	r0, r7
 8005742:	f7fb fc75 	bl	8001030 <chHeapFree>
    chHeapFree(p1);
 8005746:	4630      	mov	r0, r6
 8005748:	f7fb fc72 	bl	8001030 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800574c:	462a      	mov	r2, r5
 800574e:	a901      	add	r1, sp, #4
 8005750:	4844      	ldr	r0, [pc, #272]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005752:	f7fb fc35 	bl	8000fc0 <chHeapStatus>
 8005756:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 800575a:	f1de 0000 	rsbs	r0, lr, #0
 800575e:	4942      	ldr	r1, [pc, #264]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 8005760:	eb40 000e 	adc.w	r0, r0, lr
 8005764:	f7fa ff7c 	bl	8000660 <_test_assert>
 8005768:	4605      	mov	r5, r0
 800576a:	2800      	cmp	r0, #0
 800576c:	f47f af0c 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.8] Skipping a fragment, the first fragment in the list is
     too small so the allocator must pick the second one.*/
  test_set_step(8);
 8005770:	2308      	movs	r3, #8
 8005772:	2110      	movs	r1, #16
 8005774:	483b      	ldr	r0, [pc, #236]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	f000 fa92 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 800577c:	2110      	movs	r1, #16
 800577e:	4604      	mov	r4, r0
 8005780:	4838      	ldr	r0, [pc, #224]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005782:	f000 fa8d 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
 8005786:	4606      	mov	r6, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 8005788:	4620      	mov	r0, r4
 800578a:	f7fb fc51 	bl	8001030 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800578e:	462a      	mov	r2, r5
 8005790:	a901      	add	r1, sp, #4
 8005792:	4834      	ldr	r0, [pc, #208]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 8005794:	f7fb fc14 	bl	8000fc0 <chHeapStatus>
 8005798:	1e87      	subs	r7, r0, #2
 800579a:	4278      	negs	r0, r7
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <test_010_001_execute.lto_priv.155+0x31c>)
 800579e:	4178      	adcs	r0, r7
 80057a0:	f7fa ff5e 	bl	8000660 <_test_assert>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  }

  /* [10.1.8] Skipping a fragment, the first fragment in the list is
     too small so the allocator must pick the second one.*/
  test_set_step(8);
 80057a4:	4c2e      	ldr	r4, [pc, #184]	; (8005860 <test_010_001_execute.lto_priv.155+0x300>)
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80057a6:	4605      	mov	r5, r0
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f47f aeed 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
 80057ae:	2120      	movs	r1, #32
 80057b0:	482c      	ldr	r0, [pc, #176]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80057b2:	f000 fa75 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
    chHeapFree(p1);
 80057b6:	f7fb fc3b 	bl	8001030 <chHeapFree>
    chHeapFree(p2);
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fb fc38 	bl	8001030 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80057c0:	462a      	mov	r2, r5
 80057c2:	a901      	add	r1, sp, #4
 80057c4:	4827      	ldr	r0, [pc, #156]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80057c6:	f7fb fbfb 	bl	8000fc0 <chHeapStatus>
 80057ca:	1e45      	subs	r5, r0, #1
 80057cc:	4268      	negs	r0, r5
 80057ce:	4926      	ldr	r1, [pc, #152]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 80057d0:	4168      	adcs	r0, r5
 80057d2:	f7fa ff45 	bl	8000660 <_test_assert>
 80057d6:	4602      	mov	r2, r0
 80057d8:	2800      	cmp	r0, #0
 80057da:	f47f aed5 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  }

  /* [10.1.9] Allocating the whole available space.*/
  test_set_step(9);
 80057de:	2309      	movs	r3, #9
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 80057e0:	a901      	add	r1, sp, #4
 80057e2:	4820      	ldr	r0, [pc, #128]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
    chHeapFree(p2);
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  }

  /* [10.1.9] Allocating the whole available space.*/
  test_set_step(9);
 80057e4:	6023      	str	r3, [r4, #0]
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 80057e6:	f7fb fbeb 	bl	8000fc0 <chHeapStatus>
 80057ea:	9901      	ldr	r1, [sp, #4]
 80057ec:	481d      	ldr	r0, [pc, #116]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 80057ee:	f000 fa57 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
    p1 = chHeapAlloc(&test_heap, n);
    test_assert(p1 != NULL, "allocation failed");
 80057f2:	4606      	mov	r6, r0
 80057f4:	3000      	adds	r0, #0
 80057f6:	491e      	ldr	r1, [pc, #120]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 80057f8:	bf18      	it	ne
 80057fa:	2001      	movne	r0, #1
 80057fc:	f7fa ff30 	bl	8000660 <_test_assert>
 8005800:	4602      	mov	r2, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	f47f aec0 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8005808:	4601      	mov	r1, r0
 800580a:	4816      	ldr	r0, [pc, #88]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
 800580c:	f7fb fbd8 	bl	8000fc0 <chHeapStatus>
 8005810:	fab0 f080 	clz	r0, r0
 8005814:	491a      	ldr	r1, [pc, #104]	; (8005880 <test_010_001_execute.lto_priv.155+0x320>)
 8005816:	0940      	lsrs	r0, r0, #5
 8005818:	f7fa ff22 	bl	8000660 <_test_assert>
 800581c:	4605      	mov	r5, r0
 800581e:	2800      	cmp	r0, #0
 8005820:	f47f aeb2 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p1);
 8005824:	4630      	mov	r0, r6
 8005826:	f7fb fc03 	bl	8001030 <chHeapFree>

  /* [10.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800582a:	462a      	mov	r2, r5
 800582c:	a901      	add	r1, sp, #4
    chHeapFree(p1);
  }

  /* [10.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 800582e:	230a      	movs	r3, #10
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005830:	480c      	ldr	r0, [pc, #48]	; (8005864 <test_010_001_execute.lto_priv.155+0x304>)
    chHeapFree(p1);
  }

  /* [10.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 8005832:	6023      	str	r3, [r4, #0]
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005834:	f7fb fbc4 	bl	8000fc0 <chHeapStatus>
 8005838:	1e42      	subs	r2, r0, #1
 800583a:	4250      	negs	r0, r2
 800583c:	4150      	adcs	r0, r2
 800583e:	490a      	ldr	r1, [pc, #40]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
 8005840:	f7fa ff0e 	bl	8000660 <_test_assert>
 8005844:	2800      	cmp	r0, #0
 8005846:	f47f ae9f 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(n == sz, "size changed");
 800584a:	9801      	ldr	r0, [sp, #4]
 800584c:	9b00      	ldr	r3, [sp, #0]
 800584e:	490d      	ldr	r1, [pc, #52]	; (8005884 <test_010_001_execute.lto_priv.155+0x324>)
 8005850:	1ac3      	subs	r3, r0, r3
 8005852:	4258      	negs	r0, r3
 8005854:	4158      	adcs	r0, r3
 8005856:	f7fa ff03 	bl	8000660 <_test_assert>
 800585a:	e695      	b.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p1);
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800585c:	2001      	movs	r0, #1
 800585e:	e768      	b.n	8005732 <test_010_001_execute.lto_priv.155+0x1d2>
 8005860:	200011e4 	.word	0x200011e4
 8005864:	20001220 	.word	0x20001220
 8005868:	08007380 	.word	0x08007380
 800586c:	080073fc 	.word	0x080073fc
 8005870:	080073e8 	.word	0x080073e8
 8005874:	08007414 	.word	0x08007414
 8005878:	08007428 	.word	0x08007428
 800587c:	08007440 	.word	0x08007440
 8005880:	0800643c 	.word	0x0800643c
 8005884:	08007450 	.word	0x08007450
	...

08005890 <test_009_003_execute.lto_priv.153>:

static void test_009_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void test_009_003_execute(void) {
 8005890:	b508      	push	{r3, lr}

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <test_009_003_execute.lto_priv.153+0x20>)
 8005894:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 8005896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

static void test_009_003_execute(void) {

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 800589a:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 800589c:	f000 fb88 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
  }
}
 80058a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 80058a4:	fab0 f080 	clz	r0, r0
 80058a8:	4902      	ldr	r1, [pc, #8]	; (80058b4 <test_009_003_execute.lto_priv.153+0x24>)
 80058aa:	0940      	lsrs	r0, r0, #5
 80058ac:	f7fa bed8 	b.w	8000660 <_test_assert>
 80058b0:	200011e4 	.word	0x200011e4
 80058b4:	080072d4 	.word	0x080072d4
	...

080058c0 <test_009_002_execute.lto_priv.151>:

static void test_009_002_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void test_009_002_execute(void) {
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned i;

  /* [9.2.1] Adding the objects to the pool using
     chGuardedPoolLoadArray().*/
  test_set_step(1);
 80058c4:	4f35      	ldr	r7, [pc, #212]	; (800599c <test_009_002_execute.lto_priv.151+0xdc>)
 80058c6:	2301      	movs	r3, #1
 80058c8:	4c35      	ldr	r4, [pc, #212]	; (80059a0 <test_009_002_execute.lto_priv.151+0xe0>)
 80058ca:	4d36      	ldr	r5, [pc, #216]	; (80059a4 <test_009_002_execute.lto_priv.151+0xe4>)
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	2604      	movs	r6, #4
 80058d0:	f04f 0920 	mov.w	r9, #32
 80058d4:	f04f 0800 	mov.w	r8, #0
 80058d8:	f389 8811 	msr	BASEPRI, r9
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80058dc:	68eb      	ldr	r3, [r5, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 80058de:	4831      	ldr	r0, [pc, #196]	; (80059a4 <test_009_002_execute.lto_priv.151+0xe4>)
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80058e0:	6023      	str	r3, [r4, #0]
  mp->next = php;
 80058e2:	60ec      	str	r4, [r5, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 80058e4:	f7fb fc6c 	bl	80011c0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 80058e8:	f7fb f86a 	bl	80009c0 <chSchRescheduleS>
 80058ec:	f388 8811 	msr	BASEPRI, r8
  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80058f0:	692b      	ldr	r3, [r5, #16]
 */
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {

  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
 80058f2:	3e01      	subs	r6, #1
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80058f4:	441c      	add	r4, r3
 */
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {

  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
 80058f6:	d1ef      	bne.n	80058d8 <test_009_002_execute.lto_priv.151+0x18>
  {
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
  }

  /* [9.2.2] Emptying the pool using chGuardedPoolAllocTimeout().*/
  test_set_step(2);
 80058f8:	2302      	movs	r3, #2
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	2404      	movs	r4, #4
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80058fe:	2000      	movs	r0, #0
 8005900:	f000 fb56 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 8005904:	3000      	adds	r0, #0
 8005906:	bf18      	it	ne
 8005908:	2001      	movne	r0, #1
 800590a:	4927      	ldr	r1, [pc, #156]	; (80059a8 <test_009_002_execute.lto_priv.151+0xe8>)
 800590c:	f7fa fea8 	bl	8000660 <_test_assert>
 8005910:	2800      	cmp	r0, #0
 8005912:	d141      	bne.n	8005998 <test_009_002_execute.lto_priv.151+0xd8>
  }

  /* [9.2.2] Emptying the pool using chGuardedPoolAllocTimeout().*/
  test_set_step(2);
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005914:	3c01      	subs	r4, #1
 8005916:	d1f2      	bne.n	80058fe <test_009_002_execute.lto_priv.151+0x3e>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  }

  /* [9.2.3] Now must be empty.*/
  test_set_step(3);
 8005918:	2303      	movs	r3, #3
 800591a:	603b      	str	r3, [r7, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800591c:	f000 fb48 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 8005920:	fab0 f080 	clz	r0, r0
 8005924:	4921      	ldr	r1, [pc, #132]	; (80059ac <test_009_002_execute.lto_priv.151+0xec>)
 8005926:	0940      	lsrs	r0, r0, #5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  }

  /* [9.2.3] Now must be empty.*/
  test_set_step(3);
 8005928:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800599c <test_009_002_execute.lto_priv.151+0xdc>
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800592c:	f7fa fe98 	bl	8000660 <_test_assert>
 8005930:	bb90      	cbnz	r0, 8005998 <test_009_002_execute.lto_priv.151+0xd8>
 8005932:	4e1b      	ldr	r6, [pc, #108]	; (80059a0 <test_009_002_execute.lto_priv.151+0xe0>)
  }

  /* [9.2.4] Adding the objects to the pool using
     chGuardedPoolFree().*/
  test_set_step(4);
 8005934:	2304      	movs	r3, #4
 8005936:	f8c8 3000 	str.w	r3, [r8]
 800593a:	f106 0910 	add.w	r9, r6, #16
 800593e:	f04f 0820 	mov.w	r8, #32
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      chGuardedPoolFree(&gmp1, &objects[i]);
 8005942:	4633      	mov	r3, r6
 8005944:	f388 8811 	msr	BASEPRI, r8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005948:	68ea      	ldr	r2, [r5, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 800594a:	4816      	ldr	r0, [pc, #88]	; (80059a4 <test_009_002_execute.lto_priv.151+0xe4>)
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800594c:	f846 2b04 	str.w	r2, [r6], #4
  mp->next = php;
 8005950:	60eb      	str	r3, [r5, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8005952:	f7fb fc35 	bl	80011c0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8005956:	f7fb f833 	bl	80009c0 <chSchRescheduleS>
 800595a:	f384 8811 	msr	BASEPRI, r4

  /* [9.2.4] Adding the objects to the pool using
     chGuardedPoolFree().*/
  test_set_step(4);
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800595e:	45b1      	cmp	r9, r6
 8005960:	d1ef      	bne.n	8005942 <test_009_002_execute.lto_priv.151+0x82>
      chGuardedPoolFree(&gmp1, &objects[i]);
  }

  /* [9.2.5] Emptying the pool using chGuardedPoolAllocTimeout()
     again.*/
  test_set_step(5);
 8005962:	2305      	movs	r3, #5
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	2404      	movs	r4, #4
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005968:	2000      	movs	r0, #0
 800596a:	f000 fb21 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 800596e:	3000      	adds	r0, #0
 8005970:	bf18      	it	ne
 8005972:	2001      	movne	r0, #1
 8005974:	490c      	ldr	r1, [pc, #48]	; (80059a8 <test_009_002_execute.lto_priv.151+0xe8>)
 8005976:	f7fa fe73 	bl	8000660 <_test_assert>
 800597a:	b968      	cbnz	r0, 8005998 <test_009_002_execute.lto_priv.151+0xd8>

  /* [9.2.5] Emptying the pool using chGuardedPoolAllocTimeout()
     again.*/
  test_set_step(5);
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800597c:	3c01      	subs	r4, #1
 800597e:	d1f3      	bne.n	8005968 <test_009_002_execute.lto_priv.151+0xa8>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  }

  /* [9.2.6] Now must be empty again.*/
  test_set_step(6);
 8005980:	2306      	movs	r3, #6
 8005982:	603b      	str	r3, [r7, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005984:	f000 fb14 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
  }
}
 8005988:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  }

  /* [9.2.6] Now must be empty again.*/
  test_set_step(6);
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800598c:	fab0 f080 	clz	r0, r0
 8005990:	4906      	ldr	r1, [pc, #24]	; (80059ac <test_009_002_execute.lto_priv.151+0xec>)
 8005992:	0940      	lsrs	r0, r0, #5
 8005994:	f7fa be64 	b.w	8000660 <_test_assert>
 8005998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599c:	200011e4 	.word	0x200011e4
 80059a0:	2000120c 	.word	0x2000120c
 80059a4:	20000854 	.word	0x20000854
 80059a8:	080072c8 	.word	0x080072c8
 80059ac:	080072d4 	.word	0x080072d4

080059b0 <bmk_thread3.lto_priv.77>:
}
#endif

static THD_FUNCTION(bmk_thread3, p) {

  chThdExit((msg_t)p);
 80059b0:	f7fb bc46 	b.w	8001240 <chThdExit>
	...

080059c0 <chTMStartMeasurementX.constprop.66>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80059c0:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <chTMStartMeasurementX.constprop.66+0x8>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80059c4:	6083      	str	r3, [r0, #8]
 80059c6:	4770      	bx	lr
 80059c8:	e0001000 	.word	0xe0001000
 80059cc:	00000000 	.word	0x00000000

080059d0 <chThdCreateStatic.constprop.65>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	4604      	mov	r4, r0
 80059d4:	2020      	movs	r0, #32
 80059d6:	f380 8811 	msr	BASEPRI, r0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80059da:	4f1f      	ldr	r7, [pc, #124]	; (8005a58 <chThdCreateStatic.constprop.65+0x88>)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059dc:	4d1f      	ldr	r5, [pc, #124]	; (8005a5c <chThdCreateStatic.constprop.65+0x8c>)
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80059de:	6978      	ldr	r0, [r7, #20]
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059e0:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 80059e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80059e8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8005a60 <chThdCreateStatic.constprop.65+0x90>
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059ec:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80059f0:	2202      	movs	r2, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80059f2:	2301      	movs	r3, #1
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059f4:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80059f8:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80059fc:	f504 7680 	add.w	r6, r4, #256	; 0x100
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005a00:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8005a02:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8005a06:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8005a0a:	f504 7294 	add.w	r2, r4, #296	; 0x128
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8005a0e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8005a12:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8005a16:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005a1a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8005a1e:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8005a22:	f8c4 e118 	str.w	lr, [r4, #280]	; 0x118
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005a26:	f884 5121 	strb.w	r5, [r4, #289]	; 0x121
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8005a2a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8005a2e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005a32:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8005a36:	4629      	mov	r1, r5
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005a38:	6106      	str	r6, [r0, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8005a3a:	4630      	mov	r0, r6
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8005a3c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005a40:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8005a44:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8005a48:	617e      	str	r6, [r7, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8005a4a:	f7fa ffe1 	bl	8000a10 <chSchWakeupS>
 8005a4e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8005a52:	4630      	mov	r0, r6
 8005a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20001240 	.word	0x20001240
 8005a5c:	080002b1 	.word	0x080002b1
 8005a60:	08007460 	.word	0x08007460
	...

08005a70 <chSemWaitTimeout.constprop.61>:
 8005a70:	2320      	movs	r3, #32
 8005a72:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <chSemWaitTimeout.constprop.61+0x48>)
 8005a78:	6899      	ldr	r1, [r3, #8]
 8005a7a:	1e4a      	subs	r2, r1, #1
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	db04      	blt.n	8005a8c <chSemWaitTimeout.constprop.61+0x1c>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8005a82:	2000      	movs	r0, #0
 8005a84:	2300      	movs	r3, #0
 8005a86:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8005a8a:	4770      	bx	lr
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8005a8c:	b180      	cbz	r0, 8005ab0 <chSemWaitTimeout.constprop.61+0x40>
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 8005a8e:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <chSemWaitTimeout.constprop.61+0x4c>)
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8005a90:	b510      	push	{r4, lr}
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 8005a92:	6992      	ldr	r2, [r2, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8005a94:	685c      	ldr	r4, [r3, #4]
 8005a96:	6253      	str	r3, [r2, #36]	; 0x24
 8005a98:	e882 0018 	stmia.w	r2, {r3, r4}
 8005a9c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 8005a9e:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005aa0:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	f7fb fc6c 	bl	8001380 <chSchGoSleepTimeoutS>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8005aae:	bd10      	pop	{r4, pc}
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;
 8005ab0:	6099      	str	r1, [r3, #8]

      return MSG_TIMEOUT;
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab6:	e7e5      	b.n	8005a84 <chSemWaitTimeout.constprop.61+0x14>
 8005ab8:	200012f0 	.word	0x200012f0
 8005abc:	20001240 	.word	0x20001240

08005ac0 <chSemSignalWait.constprop.59>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
 8005ac8:	4c15      	ldr	r4, [pc, #84]	; (8005b20 <chSemSignalWait.constprop.59+0x60>)
 8005aca:	68a3      	ldr	r3, [r4, #8]
 8005acc:	3301      	adds	r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	dd1b      	ble.n	8005b0c <chSemSignalWait.constprop.59+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <chSemSignalWait.constprop.59+0x60>)
 8005adc:	db06      	blt.n	8005aec <chSemSignalWait.constprop.59+0x2c>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8005ade:	f7fa ff6f 	bl	80009c0 <chSchRescheduleS>
    msg = MSG_OK;
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8005aea:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8005aec:	490d      	ldr	r1, [pc, #52]	; (8005b24 <chSemSignalWait.constprop.59+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8005aee:	6853      	ldr	r3, [r2, #4]
 8005af0:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->queue);
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8005af2:	2005      	movs	r0, #5
 8005af4:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->queue.prev->queue.next = tp;
 8005af8:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->queue);
    ctp->u.wtsemp = spw;
 8005afa:	6262      	str	r2, [r4, #36]	; 0x24
  tqp->prev                  = tp;
 8005afc:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8005afe:	f7fa ffd7 	bl	8000ab0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8005b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b04:	2300      	movs	r3, #0
 8005b06:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8005b0a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8005b0c:	6820      	ldr	r0, [r4, #0]

  tqp->next             = tp->queue.next;
 8005b0e:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b10:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005b12:	6023      	str	r3, [r4, #0]
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8005b14:	f7fb f82c 	bl	8000b70 <chSchReadyI>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	6242      	str	r2, [r0, #36]	; 0x24
 8005b1e:	e7d9      	b.n	8005ad4 <chSemSignalWait.constprop.59+0x14>
 8005b20:	200012f0 	.word	0x200012f0
 8005b24:	20001240 	.word	0x20001240
	...

08005b30 <chMtxTryLock.constprop.57>:
 8005b30:	2320      	movs	r3, #32
 8005b32:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <chMtxTryLock.constprop.57+0x2c>)
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 8005b38:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	b11a      	cbz	r2, 8005b46 <chMtxTryLock.constprop.57+0x16>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8005b44:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8005b46:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <chMtxTryLock.constprop.57+0x30>)
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 8005b48:	2001      	movs	r0, #1

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8005b4a:	6992      	ldr	r2, [r2, #24]
  mp->next = currp->mtxlist;
 8005b4c:	6b91      	ldr	r1, [r2, #56]	; 0x38

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8005b4e:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 8005b50:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8005b52:	6393      	str	r3, [r2, #56]	; 0x38
 8005b54:	2300      	movs	r3, #0
 8005b56:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8005b5a:	4770      	bx	lr
 8005b5c:	2000086c 	.word	0x2000086c
 8005b60:	20001240 	.word	0x20001240
	...

08005b70 <chCondSignal.constprop.55>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8005b70:	b508      	push	{r3, lr}
 8005b72:	2320      	movs	r3, #32
 8005b74:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <chCondSignal.constprop.55+0x24>)
 8005b7a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 8005b7c:	4298      	cmp	r0, r3
 8005b7e:	d005      	beq.n	8005b8c <chCondSignal.constprop.55+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005b80:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8005b82:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b84:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f7fa ff42 	bl	8000a10 <chSchWakeupS>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	bd08      	pop	{r3, pc}
 8005b94:	2000084c 	.word	0x2000084c
	...

08005ba0 <chCondSignalI.constprop.54>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <chCondSignalI.constprop.54+0x20>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d009      	beq.n	8005bbc <chCondSignalI.constprop.54+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005ba8:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8005baa:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8005bac:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	6254      	str	r4, [r2, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005bb2:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005bb4:	6019      	str	r1, [r3, #0]
  }
}
 8005bb6:	bc10      	pop	{r4}
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8005bb8:	f7fa bfda 	b.w	8000b70 <chSchReadyI>
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	2000084c 	.word	0x2000084c
	...

08005bd0 <chEvtGetAndClearEvents.constprop.47>:
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->epending & events;
 8005bd6:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <chEvtGetAndClearEvents.constprop.47+0x18>)
  currp->epending &= ~events;
 8005bd8:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->epending & events;
 8005bda:	6992      	ldr	r2, [r2, #24]
 8005bdc:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 8005bde:	6353      	str	r3, [r2, #52]	; 0x34
 8005be0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20001240 	.word	0x20001240
 8005bec:	00000000 	.word	0x00000000

08005bf0 <chEvtWaitOne.constprop.43>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <chEvtWaitOne.constprop.43+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8005bf2:	b510      	push	{r4, lr}
 8005bf4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005bf6:	6994      	ldr	r4, [r2, #24]
 8005bf8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8005bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005bfe:	b933      	cbnz	r3, 8005c0e <chEvtWaitOne.constprop.43+0x1e>
    ctp->u.ewmask = events;
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c04:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c06:	200a      	movs	r0, #10
 8005c08:	f7fa ff52 	bl	8000ab0 <chSchGoSleepS>
    m = ctp->epending & events;
 8005c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8005c0e:	4258      	negs	r0, r3
 8005c10:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8005c12:	ea23 0300 	bic.w	r3, r3, r0
 8005c16:	6363      	str	r3, [r4, #52]	; 0x34
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005c1e:	bd10      	pop	{r4, pc}
 8005c20:	20001240 	.word	0x20001240
	...

08005c30 <chEvtWaitAny.constprop.42>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <chEvtWaitAny.constprop.42+0x28>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8005c32:	b510      	push	{r4, lr}
 8005c34:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005c36:	6994      	ldr	r4, [r2, #24]
 8005c38:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8005c3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005c3e:	b930      	cbnz	r0, 8005c4e <chEvtWaitAny.constprop.42+0x1e>
    ctp->u.ewmask = events;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c44:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
    ctp->u.ewmask = events;
 8005c46:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c48:	f7fa ff32 	bl	8000ab0 <chSchGoSleepS>
    m = ctp->epending & events;
 8005c4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6363      	str	r3, [r4, #52]	; 0x34
 8005c52:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	20001240 	.word	0x20001240
 8005c5c:	00000000 	.word	0x00000000

08005c60 <chEvtWaitAll.constprop.41>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8005c60:	4a0c      	ldr	r2, [pc, #48]	; (8005c94 <chEvtWaitAll.constprop.41+0x34>)
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8005c62:	b510      	push	{r4, lr}
 8005c64:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005c66:	6994      	ldr	r4, [r2, #24]
 8005c68:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 8005c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c6e:	f003 0205 	and.w	r2, r3, #5
 8005c72:	2a05      	cmp	r2, #5
 8005c74:	d005      	beq.n	8005c82 <chEvtWaitAll.constprop.41+0x22>
    ctp->u.ewmask = events;
 8005c76:	2305      	movs	r3, #5
 8005c78:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8005c7a:	200b      	movs	r0, #11
 8005c7c:	f7fa ff18 	bl	8000ab0 <chSchGoSleepS>
 8005c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8005c82:	f023 0305 	bic.w	r3, r3, #5
 8005c86:	6363      	str	r3, [r4, #52]	; 0x34
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 8005c8e:	2005      	movs	r0, #5
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	bf00      	nop
 8005c94:	20001240 	.word	0x20001240
	...

08005ca0 <chHeapAllocAligned.constprop.37>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8005ca4:	4f3a      	ldr	r7, [pc, #232]	; (8005d90 <chHeapAllocAligned.constprop.37+0xf0>)
 8005ca6:	f101 0907 	add.w	r9, r1, #7
 8005caa:	2800      	cmp	r0, #0
 8005cac:	bf18      	it	ne
 8005cae:	4607      	movne	r7, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005cb0:	f107 0810 	add.w	r8, r7, #16
 8005cb4:	4640      	mov	r0, r8
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	ea4f 09d9 	mov.w	r9, r9, lsr #3

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005cbc:	f7fb f970 	bl	8000fa0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8005cc0:	f107 0e08 	add.w	lr, r7, #8
  while (H_NEXT(qp) != NULL) {
 8005cc4:	f8de 3000 	ldr.w	r3, [lr]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005cc8:	f103 040f 	add.w	r4, r3, #15
 8005ccc:	f024 0407 	bic.w	r4, r4, #7
 8005cd0:	f1a4 0008 	sub.w	r0, r4, #8

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005cd4:	1a19      	subs	r1, r3, r0

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005cd6:	f103 0608 	add.w	r6, r3, #8
  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8005cda:	b183      	cbz	r3, 8005cfe <chHeapAllocAligned.constprop.37+0x5e>
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005cdc:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005ce0:	f10c 0201 	add.w	r2, ip, #1
 8005ce4:	00d2      	lsls	r2, r2, #3
 8005ce6:	f1a2 0a08 	sub.w	sl, r2, #8
 8005cea:	441a      	add	r2, r3
 8005cec:	4451      	add	r1, sl
 8005cee:	4290      	cmp	r0, r2
 8005cf0:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8005cf4:	d201      	bcs.n	8005cfa <chHeapAllocAligned.constprop.37+0x5a>
 8005cf6:	4549      	cmp	r1, r9
 8005cf8:	d213      	bcs.n	8005d22 <chHeapAllocAligned.constprop.37+0x82>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8005cfa:	469e      	mov	lr, r3
 8005cfc:	e7e2      	b.n	8005cc4 <chHeapAllocAligned.constprop.37+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f7fb f8ae 	bl	8000e60 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d03f      	beq.n	8005d8a <chHeapAllocAligned.constprop.37+0xea>
    hp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT, align);
 8005d0a:	f109 0001 	add.w	r0, r9, #1
 8005d0e:	00c0      	lsls	r0, r0, #3
 8005d10:	2108      	movs	r1, #8
 8005d12:	4798      	blx	r3
    if (hp != NULL) {
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d038      	beq.n	8005d8a <chHeapAllocAligned.constprop.37+0xea>
      H_HEAP(hp) = heapp;
 8005d18:	6007      	str	r7, [r0, #0]
      H_SIZE(hp) = size;
 8005d1a:	6045      	str	r5, [r0, #4]

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 8005d1c:	3008      	adds	r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 8005d22:	4283      	cmp	r3, r0
 8005d24:	d317      	bcc.n	8005d56 <chHeapAllocAligned.constprop.37+0xb6>
        hp = ahp;
      }
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
 8005d26:	45cc      	cmp	ip, r9
 8005d28:	d02a      	beq.n	8005d80 <chHeapAllocAligned.constprop.37+0xe0>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 8005d2a:	f109 0901 	add.w	r9, r9, #1
          H_NEXT(fp) = H_NEXT(hp);
 8005d2e:	681a      	ldr	r2, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005d30:	ebaa 01c9 	sub.w	r1, sl, r9, lsl #3
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
 8005d34:	f843 2039 	str.w	r2, [r3, r9, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8005d38:	4618      	mov	r0, r3
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005d3a:	10c9      	asrs	r1, r1, #3
 8005d3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005d40:	6059      	str	r1, [r3, #4]
          H_NEXT(qp) = fp;
 8005d42:	f8ce 3000 	str.w	r3, [lr]
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 8005d46:	6045      	str	r5, [r0, #4]
      H_HEAP(hp) = heapp;
 8005d48:	6007      	str	r7, [r0, #0]

      /* Releasing heap mutex/semaphore.*/
      H_UNLOCK(heapp);
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f7fb f888 	bl	8000e60 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 8005d50:	4630      	mov	r0, r6
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ahp > hp) {
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005d56:	1b82      	subs	r2, r0, r6
 8005d58:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8005d5a:	4549      	cmp	r1, r9
      if (ahp > hp) {
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005d5c:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 8005d5e:	d90d      	bls.n	8005d7c <chHeapAllocAligned.constprop.37+0xdc>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005d60:	ea6f 0209 	mvn.w	r2, r9
        if (bpages > pages) {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 8005d64:	f109 0901 	add.w	r9, r9, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005d68:	4411      	add	r1, r2
        if (bpages > pages) {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 8005d6a:	eb00 02c9 	add.w	r2, r0, r9, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005d6e:	6051      	str	r1, [r2, #4]

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	4626      	mov	r6, r4
 8005d74:	f840 1039 	str.w	r1, [r0, r9, lsl #3]
          H_NEXT(hp) = fp;
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e7e4      	b.n	8005d46 <chHeapAllocAligned.constprop.37+0xa6>
 8005d7c:	4626      	mov	r6, r4
 8005d7e:	e7e2      	b.n	8005d46 <chHeapAllocAligned.constprop.37+0xa6>
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
          /* Exact size, getting the whole block.*/
          H_NEXT(qp) = H_NEXT(hp);
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f8ce 2000 	str.w	r2, [lr]
 8005d88:	e7dd      	b.n	8005d46 <chHeapAllocAligned.constprop.37+0xa6>
      return (void *)H_BLOCK(hp);
      /*lint -restore*/
    }
  }

  return NULL;
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	20001300 	.word	0x20001300
	...

08005da0 <chThdCreateFromHeap.constprop.36>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	b087      	sub	sp, #28
 8005da6:	460f      	mov	r7, r1
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005da8:	4810      	ldr	r0, [pc, #64]	; (8005dec <chThdCreateFromHeap.constprop.36+0x4c>)
 8005daa:	4621      	mov	r1, r4
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005dac:	4616      	mov	r6, r2
 8005dae:	461d      	mov	r5, r3
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005db0:	f7ff ff76 	bl	8005ca0 <chHeapAllocAligned.constprop.37>
  if (wsp == NULL) {
 8005db4:	b1c0      	cbz	r0, 8005de8 <chThdCreateFromHeap.constprop.36+0x48>
    return NULL;
  }

  thread_descriptor_t td = {
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <chThdCreateFromHeap.constprop.36+0x50>)
 8005db8:	4404      	add	r4, r0
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	9402      	str	r4, [sp, #8]
 8005dbe:	9700      	str	r7, [sp, #0]
 8005dc0:	9001      	str	r0, [sp, #4]
 8005dc2:	9603      	str	r6, [sp, #12]
 8005dc4:	9505      	str	r5, [sp, #20]
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005dcc:	4668      	mov	r0, sp
 8005dce:	f7fa fd8f 	bl	80008f0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8005dd8:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005dda:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8005ddc:	f7fa fe18 	bl	8000a10 <chSchWakeupS>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	4620      	mov	r0, r4
  chSysUnlock();

  return tp;
}
 8005de8:	b007      	add	sp, #28
 8005dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dec:	200012c8 	.word	0x200012c8
 8005df0:	08005391 	.word	0x08005391
	...

08005e00 <chThdCreateFromMemoryPool.constprop.35>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e02:	4d13      	ldr	r5, [pc, #76]	; (8005e50 <chThdCreateFromMemoryPool.constprop.35+0x50>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e04:	b087      	sub	sp, #28
 8005e06:	4607      	mov	r7, r0
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e08:	4628      	mov	r0, r5
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	4614      	mov	r4, r2
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e0e:	f7fa fcd7 	bl	80007c0 <chPoolAlloc>
  if (wsp == NULL) {
 8005e12:	b1d0      	cbz	r0, 8005e4a <chThdCreateFromMemoryPool.constprop.35+0x4a>
    return NULL;
  }

  thread_descriptor_t td = {
 8005e14:	686b      	ldr	r3, [r5, #4]
 8005e16:	4a0f      	ldr	r2, [pc, #60]	; (8005e54 <chThdCreateFromMemoryPool.constprop.35+0x54>)
 8005e18:	4403      	add	r3, r0
 8005e1a:	9302      	str	r3, [sp, #8]
 8005e1c:	9700      	str	r7, [sp, #0]
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	9603      	str	r6, [sp, #12]
 8005e22:	9405      	str	r4, [sp, #20]
 8005e24:	9204      	str	r2, [sp, #16]
 8005e26:	2320      	movs	r3, #32
 8005e28:	f383 8811 	msr	BASEPRI, r3
                  CH_DBG_STACK_FILL_VALUE);
#endif


  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005e2c:	4668      	mov	r0, sp
 8005e2e:	f7fa fd5f 	bl	80008f0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8005e32:	2302      	movs	r3, #2
 8005e34:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8005e38:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8005e3a:	2100      	movs	r1, #0
                  CH_DBG_STACK_FILL_VALUE);
#endif


  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005e3c:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_MPOOL;
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8005e3e:	f7fa fde7 	bl	8000a10 <chSchWakeupS>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	4620      	mov	r0, r4
  chSysUnlock();

  return tp;
}
 8005e4a:	b007      	add	sp, #28
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20001320 	.word	0x20001320
 8005e54:	08005391 	.word	0x08005391
	...

08005e60 <chMBResetI.constprop.30>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 8005e60:	b510      	push	{r4, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 8005e62:	4c09      	ldr	r4, [pc, #36]	; (8005e88 <chMBResetI.constprop.30+0x28>)
 8005e64:	6823      	ldr	r3, [r4, #0]
  mbp->rdptr = mbp->buffer;
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 8005e66:	6861      	ldr	r1, [r4, #4]
 8005e68:	f104 001c 	add.w	r0, r4, #28
 8005e6c:	1ac9      	subs	r1, r1, r3
 8005e6e:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 8005e70:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
 8005e72:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 8005e74:	f7fb f9bc 	bl	80011f0 <chSemResetI>
  chSemResetI(&mbp->fullsem, (cnt_t)0);
 8005e78:	f104 0010 	add.w	r0, r4, #16
 8005e7c:	2100      	movs	r1, #0
}
 8005e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
  mbp->rdptr = mbp->buffer;
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
  chSemResetI(&mbp->fullsem, (cnt_t)0);
 8005e82:	f7fb b9b5 	b.w	80011f0 <chSemResetI>
 8005e86:	bf00      	nop
 8005e88:	20000824 	.word	0x20000824
 8005e8c:	00000000 	.word	0x00000000

08005e90 <chMBReset.constprop.29>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8005e90:	b508      	push	{r3, lr}
 8005e92:	2320      	movs	r3, #32
 8005e94:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMBResetI(mbp);
 8005e98:	f7ff ffe2 	bl	8005e60 <chMBResetI.constprop.30>
  chSchRescheduleS();
 8005e9c:	f7fa fd90 	bl	80009c0 <chSchRescheduleS>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	bd08      	pop	{r3, pc}
	...

08005eb0 <chMBPost.constprop.28>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <chMBPost.constprop.28+0x40>)
 8005ebc:	f104 001c 	add.w	r0, r4, #28
 8005ec0:	f7fb fa86 	bl	80013d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b970      	cbnz	r0, 8005ee6 <chMBPost.constprop.28+0x36>
    *mbp->wrptr++ = msg;
 8005ec8:	68a2      	ldr	r2, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 8005eca:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
 8005ecc:	1d13      	adds	r3, r2, #4
    if (mbp->wrptr >= mbp->top) {
 8005ece:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
 8005ed0:	60a3      	str	r3, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
 8005ed2:	bf28      	it	cs
 8005ed4:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
 8005ed6:	6016      	str	r6, [r2, #0]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
    }
    chSemSignalI(&mbp->fullsem);
 8005ed8:	4806      	ldr	r0, [pc, #24]	; (8005ef4 <chMBPost.constprop.28+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
 8005eda:	bf28      	it	cs
 8005edc:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->fullsem);
 8005ede:	f7fb f96f 	bl	80011c0 <chSemSignalI>
    chSchRescheduleS();
 8005ee2:	f7fa fd6d 	bl	80009c0 <chSchRescheduleS>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005eec:	4628      	mov	r0, r5
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	20000824 	.word	0x20000824
 8005ef4:	20000834 	.word	0x20000834
	...

08005f00 <chMBPostAhead.constprop.26>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	2320      	movs	r3, #32
 8005f04:	4606      	mov	r6, r0
 8005f06:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8005f0a:	4c10      	ldr	r4, [pc, #64]	; (8005f4c <chMBPostAhead.constprop.26+0x4c>)
 8005f0c:	f104 001c 	add.w	r0, r4, #28
 8005f10:	f7fb fa5e 	bl	80013d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f14:	4605      	mov	r5, r0
 8005f16:	b120      	cbz	r0, 8005f22 <chMBPostAhead.constprop.26+0x22>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005f1e:	4628      	mov	r0, r5
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->rdptr < mbp->buffer) {
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	60e3      	str	r3, [r4, #12]
 8005f2c:	d202      	bcs.n	8005f34 <chMBPostAhead.constprop.26+0x34>
      mbp->rdptr = mbp->top - 1;
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60e3      	str	r3, [r4, #12]
    }
    *mbp->rdptr = msg;
 8005f34:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->fullsem);
 8005f36:	4806      	ldr	r0, [pc, #24]	; (8005f50 <chMBPostAhead.constprop.26+0x50>)
 8005f38:	f7fb f942 	bl	80011c0 <chSemSignalI>
    chSchRescheduleS();
 8005f3c:	f7fa fd40 	bl	80009c0 <chSchRescheduleS>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005f46:	4628      	mov	r0, r5
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000824 	.word	0x20000824
 8005f50:	20000834 	.word	0x20000834
	...

08005f60 <chMBFetch.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	2320      	movs	r3, #32
 8005f64:	4606      	mov	r6, r0
 8005f66:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
 8005f6a:	4c0e      	ldr	r4, [pc, #56]	; (8005fa4 <chMBFetch.constprop.24+0x44>)
 8005f6c:	f104 0010 	add.w	r0, r4, #16
 8005f70:	f7fb fa2e 	bl	80013d0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f74:	4605      	mov	r5, r0
 8005f76:	b978      	cbnz	r0, 8005f98 <chMBFetch.constprop.24+0x38>
    *msgp = *mbp->rdptr++;
 8005f78:	68e3      	ldr	r3, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 8005f7a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 8005f80:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
 8005f82:	60e3      	str	r3, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
      mbp->rdptr = mbp->buffer;
 8005f84:	bf28      	it	cs
 8005f86:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
 8005f88:	6031      	str	r1, [r6, #0]
    if (mbp->rdptr >= mbp->top) {
      mbp->rdptr = mbp->buffer;
    }
    chSemSignalI(&mbp->emptysem);
 8005f8a:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <chMBFetch.constprop.24+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
    if (mbp->rdptr >= mbp->top) {
      mbp->rdptr = mbp->buffer;
 8005f8c:	bf28      	it	cs
 8005f8e:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->emptysem);
 8005f90:	f7fb f916 	bl	80011c0 <chSemSignalI>
    chSchRescheduleS();
 8005f94:	f7fa fd14 	bl	80009c0 <chSchRescheduleS>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000824 	.word	0x20000824
 8005fa8:	20000840 	.word	0x20000840
 8005fac:	00000000 	.word	0x00000000

08005fb0 <chGuardedPoolAllocTimeout.constprop.17>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 systime_t timeout) {
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8005fba:	4c0d      	ldr	r4, [pc, #52]	; (8005ff0 <chGuardedPoolAllocTimeout.constprop.17+0x40>)
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7fb fa07 	bl	80013d0 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 8005fc2:	b968      	cbnz	r0, 8005fe0 <chGuardedPoolAllocTimeout.constprop.17+0x30>
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 8005fc4:	68e0      	ldr	r0, [r4, #12]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8005fc6:	b128      	cbz	r0, 8005fd4 <chGuardedPoolAllocTimeout.constprop.17+0x24>
    mp->next = mp->next->next;
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	60e3      	str	r3, [r4, #12]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8005fd2:	bd10      	pop	{r4, pc}
  objp = mp->next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->next = mp->next->next;
  }
  else if (mp->provider != NULL) {
 8005fd4:	6963      	ldr	r3, [r4, #20]
 8005fd6:	b143      	cbz	r3, 8005fea <chGuardedPoolAllocTimeout.constprop.17+0x3a>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 8005fd8:	6920      	ldr	r0, [r4, #16]
 8005fda:	2104      	movs	r1, #4
 8005fdc:	4798      	blx	r3
 8005fde:	e7f5      	b.n	8005fcc <chGuardedPoolAllocTimeout.constprop.17+0x1c>
                                 systime_t timeout) {
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
  if (msg != MSG_OK) {
    return NULL;
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8005fe8:	bd10      	pop	{r4, pc}
                                 systime_t timeout) {
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
  if (msg != MSG_OK) {
    return NULL;
 8005fea:	4618      	mov	r0, r3
 8005fec:	e7ee      	b.n	8005fcc <chGuardedPoolAllocTimeout.constprop.17+0x1c>
 8005fee:	bf00      	nop
 8005ff0:	20000854 	.word	0x20000854
	...

08006000 <_pal_lld_setgroupmode.constprop.5>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8006000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006004:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <_pal_lld_setgroupmode.constprop.5+0xc4>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8006006:	2400      	movs	r4, #0
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8006008:	2502      	movs	r5, #2
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800600a:	f04f 0c07 	mov.w	ip, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800600e:	f04f 0e0f 	mov.w	lr, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006012:	2701      	movs	r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006014:	2603      	movs	r6, #3
 8006016:	e009      	b.n	800602c <_pal_lld_setgroupmode.constprop.5+0x2c>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8006018:	6a19      	ldr	r1, [r3, #32]
 800601a:	ea21 0202 	bic.w	r2, r1, r2
 800601e:	ea42 0208 	orr.w	r2, r2, r8
 8006022:	621a      	str	r2, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8006024:	0840      	lsrs	r0, r0, #1
 8006026:	d033      	beq.n	8006090 <_pal_lld_setgroupmode.constprop.5+0x90>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8006028:	00ad      	lsls	r5, r5, #2
    bit++;
 800602a:	3401      	adds	r4, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 800602c:	07c2      	lsls	r2, r0, #31
 800602e:	d5f9      	bpl.n	8006024 <_pal_lld_setgroupmode.constprop.5+0x24>
      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006030:	0061      	lsls	r1, r4, #1
 8006032:	fa06 f101 	lsl.w	r1, r6, r1
 8006036:	43c9      	mvns	r1, r1

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	fa07 f804 	lsl.w	r8, r7, r4
 800603e:	ea22 0208 	bic.w	r2, r2, r8
 8006042:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006044:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8006048:	f004 0207 	and.w	r2, r4, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800604c:	ea08 0801 	and.w	r8, r8, r1
 8006050:	f8c3 8008 	str.w	r8, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8006054:	f8d3 800c 	ldr.w	r8, [r3, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8006058:	0092      	lsls	r2, r2, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800605a:	ea01 0808 	and.w	r8, r1, r8
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800605e:	2d02      	cmp	r5, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8006060:	f8c3 800c 	str.w	r8, [r3, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8006064:	fa0c f802 	lsl.w	r8, ip, r2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8006068:	fa0e f202 	lsl.w	r2, lr, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800606c:	d012      	beq.n	8006094 <_pal_lld_setgroupmode.constprop.5+0x94>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800606e:	f8d3 9000 	ldr.w	r9, [r3]
        if (bit < 8)
 8006072:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8006074:	ea01 0109 	and.w	r1, r1, r9
 8006078:	ea41 0105 	orr.w	r1, r1, r5
 800607c:	6019      	str	r1, [r3, #0]
        if (bit < 8)
 800607e:	d9cb      	bls.n	8006018 <_pal_lld_setgroupmode.constprop.5+0x18>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006080:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8006082:	0840      	lsrs	r0, r0, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006084:	ea21 0202 	bic.w	r2, r1, r2
 8006088:	ea42 0208 	orr.w	r2, r2, r8
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 800608e:	d1cb      	bne.n	8006028 <_pal_lld_setgroupmode.constprop.5+0x28>
 8006090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8006094:	2c07      	cmp	r4, #7
 8006096:	d80c      	bhi.n	80060b2 <_pal_lld_setgroupmode.constprop.5+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8006098:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800609c:	ea29 0202 	bic.w	r2, r9, r2
 80060a0:	ea42 0208 	orr.w	r2, r2, r8
 80060a4:	621a      	str	r2, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	4011      	ands	r1, r2
 80060aa:	f041 0102 	orr.w	r1, r1, #2
 80060ae:	6019      	str	r1, [r3, #0]
 80060b0:	e7b8      	b.n	8006024 <_pal_lld_setgroupmode.constprop.5+0x24>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80060b2:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 80060b6:	ea29 0202 	bic.w	r2, r9, r2
 80060ba:	ea42 0208 	orr.w	r2, r2, r8
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
 80060c0:	e7f1      	b.n	80060a6 <_pal_lld_setgroupmode.constprop.5+0xa6>
 80060c2:	bf00      	nop
 80060c4:	40020000 	.word	0x40020000
	...

080060d0 <_test_assert_time_window.constprop.2>:
 80060d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 80060d6:	1a09      	subs	r1, r1, r0
 80060d8:	1a1b      	subs	r3, r3, r0
 80060da:	428b      	cmp	r3, r1
 80060dc:	d30a      	bcc.n	80060f4 <_test_assert_time_window.constprop.2+0x24>
  clear_tokens();

  return false;
}

bool _test_assert_time_window(systime_t start,
 80060de:	b410      	push	{r4}
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
  test_global_fail     = true;
 80060e0:	4905      	ldr	r1, [pc, #20]	; (80060f8 <_test_assert_time_window.constprop.2+0x28>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80060e2:	4c06      	ldr	r4, [pc, #24]	; (80060fc <_test_assert_time_window.constprop.2+0x2c>)
  test_global_fail     = true;
  test_failure_message = msg;
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <_test_assert_time_window.constprop.2+0x30>)
 80060e6:	4a07      	ldr	r2, [pc, #28]	; (8006104 <_test_assert_time_window.constprop.2+0x34>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80060e8:	2001      	movs	r0, #1
 80060ea:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80060ec:	7008      	strb	r0, [r1, #0]
  test_failure_message = msg;
 80060ee:	601a      	str	r2, [r3, #0]
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 80060f0:	bc10      	pop	{r4}
 80060f2:	4770      	bx	lr

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
 80060f4:	2000      	movs	r0, #0
 80060f6:	4770      	bx	lr
 80060f8:	200012ed 	.word	0x200012ed
 80060fc:	200012ec 	.word	0x200012ec
 8006100:	200012e8 	.word	0x200012e8
 8006104:	08007468 	.word	0x08007468
