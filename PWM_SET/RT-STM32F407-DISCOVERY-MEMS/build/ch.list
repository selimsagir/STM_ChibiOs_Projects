
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f004 fb25 	bl	8004820 <__early_init>
 80001d6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001da:	491c      	ldr	r1, [pc, #112]	; (800024c <endfiniloop+0xa>)
 80001dc:	4a1c      	ldr	r2, [pc, #112]	; (8000250 <endfiniloop+0xe>)

080001de <msloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <msloop>
 80001e8:	491a      	ldr	r1, [pc, #104]	; (8000254 <endfiniloop+0x12>)
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <endfiniloop+0x6>)

080001ec <psloop>:
 80001ec:	4291      	cmp	r1, r2
 80001ee:	bf3c      	itt	cc
 80001f0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f4:	e7fa      	bcc.n	80001ec <psloop>
 80001f6:	4918      	ldr	r1, [pc, #96]	; (8000258 <endfiniloop+0x16>)
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x1a>)
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <endfiniloop+0x1e>)

080001fc <dloop>:
 80001fc:	429a      	cmp	r2, r3
 80001fe:	bf3e      	ittt	cc
 8000200:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000204:	f842 0b04 	strcc.w	r0, [r2], #4
 8000208:	e7f8      	bcc.n	80001fc <dloop>
 800020a:	2000      	movs	r0, #0
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <endfiniloop+0x22>)
 800020e:	4a16      	ldr	r2, [pc, #88]	; (8000268 <endfiniloop+0x26>)

08000210 <bloop>:
 8000210:	4291      	cmp	r1, r2
 8000212:	bf3c      	itt	cc
 8000214:	f841 0b04 	strcc.w	r0, [r1], #4
 8000218:	e7fa      	bcc.n	8000210 <bloop>
 800021a:	f000 f849 	bl	80002b0 <__late_init>
 800021e:	4c13      	ldr	r4, [pc, #76]	; (800026c <endfiniloop+0x2a>)
 8000220:	4d13      	ldr	r5, [pc, #76]	; (8000270 <endfiniloop+0x2e>)

08000222 <initloop>:
 8000222:	42ac      	cmp	r4, r5
 8000224:	da03      	bge.n	800022e <endinitloop>
 8000226:	f854 1b04 	ldr.w	r1, [r4], #4
 800022a:	4788      	blx	r1
 800022c:	e7f9      	b.n	8000222 <initloop>

0800022e <endinitloop>:
 800022e:	f008 fcf7 	bl	8008c20 <main>
 8000232:	4c10      	ldr	r4, [pc, #64]	; (8000274 <endfiniloop+0x32>)
 8000234:	4d10      	ldr	r5, [pc, #64]	; (8000278 <endfiniloop+0x36>)

08000236 <finiloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endfiniloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <finiloop>

08000242 <endfiniloop>:
 8000242:	f000 b83d 	b.w	80002c0 <__default_exit>
 8000246:	0000      	.short	0x0000
 8000248:	20000800 	.word	0x20000800
 800024c:	20000000 	.word	0x20000000
 8000250:	20000400 	.word	0x20000400
 8000254:	20000400 	.word	0x20000400
 8000258:	0800a788 	.word	0x0800a788
 800025c:	20000800 	.word	0x20000800
 8000260:	20000d6c 	.word	0x20000d6c
 8000264:	20000d70 	.word	0x20000d70
 8000268:	20001e00 	.word	0x20001e00
 800026c:	080001c0 	.word	0x080001c0
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	00000000 	.word	0x00000000

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	2300      	movs	r3, #0
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	4628      	mov	r0, r5
 8000298:	47a0      	blx	r4
 800029a:	2000      	movs	r0, #0
 800029c:	f000 fc30 	bl	8000b00 <chThdExit>

080002a0 <_port_switch_from_isr>:
 80002a0:	f000 fb0e 	bl	80008c0 <chSchDoReschedule>

080002a4 <_port_exit_from_isr>:
 80002a4:	df00      	svc	0
 80002a6:	e7fe      	b.n	80002a6 <_port_exit_from_isr+0x2>
	...

080002b0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
	...

080002c0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80002c0:	e7fe      	b.n	80002c0 <__default_exit>
 80002c2:	bf00      	nop
	...

080002d0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80002d0:	e7fe      	b.n	80002d0 <_unhandled_exception>
 80002d2:	bf00      	nop
	...

080002e0 <_idle_thread>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <_idle_thread+0xc>)
 80002e2:	4a03      	ldr	r2, [pc, #12]	; (80002f0 <_idle_thread+0x10>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	619a      	str	r2, [r3, #24]
 80002e8:	e7fe      	b.n	80002e8 <_idle_thread+0x8>
 80002ea:	bf00      	nop
 80002ec:	20000d70 	.word	0x20000d70
 80002f0:	080090d0 	.word	0x080090d0
	...

08000300 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <chSysInit+0x7c>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <chSysInit+0x80>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000304:	481f      	ldr	r0, [pc, #124]	; (8000384 <chSysInit+0x84>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000306:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000308:	2400      	movs	r4, #0
 800030a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800030c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800030e:	4e1e      	ldr	r6, [pc, #120]	; (8000388 <chSysInit+0x88>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000310:	4d1e      	ldr	r5, [pc, #120]	; (800038c <chSysInit+0x8c>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000312:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000316:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000318:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	68f2      	ldr	r2, [r6, #12]
 800031e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000322:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000324:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000326:	2120      	movs	r1, #32
 8000328:	f042 0201 	orr.w	r2, r2, #1
 800032c:	2610      	movs	r6, #16
 800032e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000330:	b083      	sub	sp, #12
 8000332:	77de      	strb	r6, [r3, #31]
 8000334:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000338:	f000 f9ca 	bl	80006d0 <_scheduler_init>
  _vt_init();
 800033c:	f000 f908 	bl	8000550 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000340:	f000 fc96 	bl	8000c70 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000344:	f001 fcac 	bl	8001ca0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000348:	f001 fcf2 	bl	8001d30 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800034c:	4628      	mov	r0, r5
 800034e:	2140      	movs	r1, #64	; 0x40
 8000350:	f000 fabe 	bl	80008d0 <_thread_init>
 8000354:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000358:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800035a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800035c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800035e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000362:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	490a      	ldr	r1, [pc, #40]	; (8000390 <chSysInit+0x90>)
 8000368:	6199      	str	r1, [r3, #24]

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  (void) chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa),
 800036a:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800036e:	9400      	str	r4, [sp, #0]
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <chSysInit+0x94>)
 8000372:	21d8      	movs	r1, #216	; 0xd8
 8000374:	f000 fafc 	bl	8000970 <chThdCreateStatic>
                           IDLEPRIO, (tfunc_t)_idle_thread, NULL);
#endif
}
 8000378:	b003      	add	sp, #12
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037c:	e000ed00 	.word	0xe000ed00
 8000380:	05fa0300 	.word	0x05fa0300
 8000384:	e0001000 	.word	0xe0001000
 8000388:	e000edf0 	.word	0xe000edf0
 800038c:	20000da0 	.word	0x20000da0
 8000390:	080090e0 	.word	0x080090e0
 8000394:	080002e1 	.word	0x080002e1
	...

080003a0 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80003a2:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <chSysHalt+0x8>)
 80003a4:	62d8      	str	r0, [r3, #44]	; 0x2c
 80003a6:	e7fe      	b.n	80003a6 <chSysHalt+0x6>
 80003a8:	20000d70 	.word	0x20000d70
 80003ac:	00000000 	.word	0x00000000

080003b0 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80003b0:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 80003b2:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80003b4:	d512      	bpl.n	80003dc <chSysIntegrityCheckI+0x2c>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 80003b6:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <chSysIntegrityCheckI+0xb8>)
 80003b8:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003ba:	4291      	cmp	r1, r2
 80003bc:	d042      	beq.n	8000444 <chSysIntegrityCheckI+0x94>
 80003be:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 80003c0:	6809      	ldr	r1, [r1, #0]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003c2:	4291      	cmp	r1, r2
      n++;
 80003c4:	f103 0301 	add.w	r3, r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003c8:	d1fa      	bne.n	80003c0 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80003ca:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003cc:	428c      	cmp	r4, r1
 80003ce:	d036      	beq.n	800043e <chSysIntegrityCheckI+0x8e>
      n--;
      tp = tp->p_prev;
 80003d0:	6864      	ldr	r4, [r4, #4]
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003d2:	4294      	cmp	r4, r2
      n--;
 80003d4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80003d8:	d1fa      	bne.n	80003d0 <chSysIntegrityCheckI+0x20>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80003da:	bb83      	cbnz	r3, 800043e <chSysIntegrityCheckI+0x8e>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80003dc:	0783      	lsls	r3, r0, #30
 80003de:	d514      	bpl.n	800040a <chSysIntegrityCheckI+0x5a>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 80003e0:	4a21      	ldr	r2, [pc, #132]	; (8000468 <chSysIntegrityCheckI+0xb8>)
 80003e2:	4614      	mov	r4, r2
 80003e4:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80003e8:	42a1      	cmp	r1, r4
 80003ea:	d031      	beq.n	8000450 <chSysIntegrityCheckI+0xa0>
 80003ec:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 80003ee:	6809      	ldr	r1, [r1, #0]
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80003f0:	42a1      	cmp	r1, r4
      n++;
 80003f2:	f103 0301 	add.w	r3, r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80003f6:	d1fa      	bne.n	80003ee <chSysIntegrityCheckI+0x3e>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 80003f8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80003fa:	428a      	cmp	r2, r1
 80003fc:	d01f      	beq.n	800043e <chSysIntegrityCheckI+0x8e>
      n--;
      vtp = vtp->vt_prev;
 80003fe:	6852      	ldr	r2, [r2, #4]
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000400:	42a2      	cmp	r2, r4
      n--;
 8000402:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000406:	d1fa      	bne.n	80003fe <chSysIntegrityCheckI+0x4e>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000408:	b9cb      	cbnz	r3, 800043e <chSysIntegrityCheckI+0x8e>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800040a:	f010 0004 	ands.w	r0, r0, #4
 800040e:	d014      	beq.n	800043a <chSysIntegrityCheckI+0x8a>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8000410:	4a15      	ldr	r2, [pc, #84]	; (8000468 <chSysIntegrityCheckI+0xb8>)
 8000412:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000414:	4293      	cmp	r3, r2
 8000416:	d021      	beq.n	800045c <chSysIntegrityCheckI+0xac>
 8000418:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 800041a:	691b      	ldr	r3, [r3, #16]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 800041c:	4293      	cmp	r3, r2
      n++;
 800041e:	f100 0001 	add.w	r0, r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8000422:	d1fa      	bne.n	800041a <chSysIntegrityCheckI+0x6a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 8000424:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000426:	4299      	cmp	r1, r3
 8000428:	d009      	beq.n	800043e <chSysIntegrityCheckI+0x8e>
      n--;
      tp = tp->p_older;
 800042a:	6949      	ldr	r1, [r1, #20]
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 800042c:	4291      	cmp	r1, r2
      n--;
 800042e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000432:	d1fa      	bne.n	800042a <chSysIntegrityCheckI+0x7a>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000434:	3000      	adds	r0, #0
 8000436:	bf18      	it	ne
 8000438:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 800043a:	bc10      	pop	{r4}
 800043c:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 800043e:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8000440:	bc10      	pop	{r4}
 8000442:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8000444:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8000446:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8000448:	bf18      	it	ne
 800044a:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800044c:	d1c0      	bne.n	80003d0 <chSysIntegrityCheckI+0x20>
 800044e:	e7c5      	b.n	80003dc <chSysIntegrityCheckI+0x2c>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8000450:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000452:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8000454:	bf18      	it	ne
 8000456:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000458:	d1d1      	bne.n	80003fe <chSysIntegrityCheckI+0x4e>
 800045a:	e7d6      	b.n	800040a <chSysIntegrityCheckI+0x5a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 800045c:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800045e:	4299      	cmp	r1, r3
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8000460:	f04f 0000 	mov.w	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8000464:	d1e1      	bne.n	800042a <chSysIntegrityCheckI+0x7a>
 8000466:	e7e8      	b.n	800043a <chSysIntegrityCheckI+0x8a>
 8000468:	20000d70 	.word	0x20000d70
 800046c:	00000000 	.word	0x00000000

08000470 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000474:	4d1b      	ldr	r5, [pc, #108]	; (80004e4 <chSysTimerHandlerI+0x74>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000476:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800047a:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800047c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800047e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000480:	68a3      	ldr	r3, [r4, #8]
 8000482:	1a42      	subs	r2, r0, r1
 8000484:	429a      	cmp	r2, r3
 8000486:	f105 091c 	add.w	r9, r5, #28
 800048a:	d31a      	bcc.n	80004c2 <chSysTimerHandlerI+0x52>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800048c:	2600      	movs	r6, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800048e:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000492:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000494:	f8d4 a00c 	ldr.w	sl, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000498:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800049a:	454a      	cmp	r2, r9
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800049c:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800049e:	f8c2 9004 	str.w	r9, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80004a2:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004a4:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004a6:	d018      	beq.n	80004da <chSysTimerHandlerI+0x6a>
 80004a8:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80004ac:	6920      	ldr	r0, [r4, #16]
 80004ae:	47d0      	blx	sl
 80004b0:	f388 8811 	msr	BASEPRI, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80004b4:	69ec      	ldr	r4, [r5, #28]
 80004b6:	6a78      	ldr	r0, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80004ba:	68a3      	ldr	r3, [r4, #8]
 80004bc:	1a42      	subs	r2, r0, r1
 80004be:	4293      	cmp	r3, r2
 80004c0:	d9e7      	bls.n	8000492 <chSysTimerHandlerI+0x22>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004c2:	454c      	cmp	r4, r9
 80004c4:	d00c      	beq.n	80004e0 <chSysTimerHandlerI+0x70>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80004c6:	440b      	add	r3, r1
 80004c8:	1a1b      	subs	r3, r3, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	bf98      	it	ls
 80004ce:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80004d0:	4418      	add	r0, r3
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 80004d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d6:	f001 bdbb 	b.w	8002050 <stSetAlarm>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 80004da:	f001 fdb1 	bl	8002040 <stStopAlarm>
 80004de:	e7e3      	b.n	80004a8 <chSysTimerHandlerI+0x38>
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	20000d70 	.word	0x20000d70
	...

080004f0 <chSysGetStatusAndLockX>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80004f0:	f3ef 8012 	mrs	r0, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80004f4:	b920      	cbnz	r0, 8000500 <chSysGetStatusAndLockX+0x10>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80004f6:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004fa:	2320      	movs	r3, #32
 80004fc:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
	...

08000510 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 8000510:	b968      	cbnz	r0, 800052e <chSysRestoreStatusX+0x1e>
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8000512:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000514:	f3ef 8405 	mrs	r4, IPSR

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8000518:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800051c:	b114      	cbz	r4, 8000524 <chSysRestoreStatusX+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800051e:	f380 8811 	msr	BASEPRI, r0
 8000522:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8000524:	f000 f9bc 	bl	80008a0 <chSchRescheduleS>
 8000528:	f384 8811 	msr	BASEPRI, r4
 800052c:	bd10      	pop	{r4, pc}
 800052e:	4770      	bx	lr

08000530 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <chSysPolledDelayX+0x10>)
 8000532:	6851      	ldr	r1, [r2, #4]
 8000534:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000536:	1a5b      	subs	r3, r3, r1
 8000538:	4283      	cmp	r3, r0
 800053a:	d3fb      	bcc.n	8000534 <chSysPolledDelayX+0x4>
  }
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e0001000 	.word	0xe0001000
	...

08000550 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000556:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800055a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800055c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800055e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000560:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000562:	621a      	str	r2, [r3, #32]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000d70 	.word	0x20000d70
 800056c:	00000000 	.word	0x00000000

08000570 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000572:	4e1c      	ldr	r6, [pc, #112]	; (80005e4 <chVTDoSetI+0x74>)
 8000574:	4634      	mov	r4, r6
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000576:	2901      	cmp	r1, #1
 8000578:	bf98      	it	ls
 800057a:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800057c:	f854 7f1c 	ldr.w	r7, [r4, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000580:	6103      	str	r3, [r0, #16]
 8000582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000586:	42a7      	cmp	r7, r4
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000588:	4605      	mov	r5, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800058a:	60c2      	str	r2, [r0, #12]
 800058c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800058e:	d01e      	beq.n	80005ce <chVTDoSetI+0x5e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000590:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000592:	68bb      	ldr	r3, [r7, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000594:	4408      	add	r0, r1
 8000596:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000598:	429c      	cmp	r4, r3
 800059a:	d315      	bcc.n	80005c8 <chVTDoSetI+0x58>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800059c:	69f3      	ldr	r3, [r6, #28]
  while (p->vt_delta < delta) {
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	4294      	cmp	r4, r2
 80005a2:	d904      	bls.n	80005ae <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 80005a4:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80005a6:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	42a2      	cmp	r2, r4
 80005ac:	d3fa      	bcc.n	80005a4 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80005b2:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80005b4:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 80005b6:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 80005b8:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80005ba:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80005c0:	1b14      	subs	r4, r2, r4
 80005c2:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80005c4:	6271      	str	r1, [r6, #36]	; 0x24
 80005c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80005c8:	f001 fd42 	bl	8002050 <stSetAlarm>
 80005cc:	e7e6      	b.n	800059c <chVTDoSetI+0x2c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80005ce:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80005d0:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 80005d2:	6235      	str	r5, [r6, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 80005d4:	4408      	add	r0, r1
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80005d6:	602f      	str	r7, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80005d8:	606f      	str	r7, [r5, #4]
      vtp->vt_delta = delay;
 80005da:	60a9      	str	r1, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 80005dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80005e0:	f001 bd26 	b.w	8002030 <stStartAlarm>
 80005e4:	20000d70 	.word	0x20000d70
	...

080005f0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <chVTDoResetI+0x68>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80005f6:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80005f8:	d00f      	beq.n	800061a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80005fa:	6841      	ldr	r1, [r0, #4]
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000600:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000602:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000604:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000606:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000608:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800060a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800060c:	d003      	beq.n	8000616 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800060e:	6883      	ldr	r3, [r0, #8]
 8000610:	6891      	ldr	r1, [r2, #8]
 8000612:	440b      	add	r3, r1
 8000614:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000616:	bc10      	pop	{r4}
 8000618:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800061a:	4618      	mov	r0, r3
 800061c:	6811      	ldr	r1, [r2, #0]
 800061e:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000622:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000624:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000626:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 8000628:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800062a:	d012      	beq.n	8000652 <chVTDoResetI+0x62>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800062c:	6892      	ldr	r2, [r2, #8]
 800062e:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000630:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000632:	1883      	adds	r3, r0, r2
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	608b      	str	r3, [r1, #8]
 800063a:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800063c:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800063e:	4293      	cmp	r3, r2
 8000640:	d9e9      	bls.n	8000616 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000642:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000644:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000646:	bf98      	it	ls
 8000648:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800064a:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800064c:	bc10      	pop	{r4}
 800064e:	f001 bcff 	b.w	8002050 <stSetAlarm>
 8000652:	bc10      	pop	{r4}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000654:	f001 bcf4 	b.w	8002040 <stStopAlarm>
 8000658:	20000d70 	.word	0x20000d70
 800065c:	00000000 	.word	0x00000000

08000660 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000660:	b410      	push	{r4}
 8000662:	2320      	movs	r3, #32
 8000664:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000668:	7f03      	ldrb	r3, [r0, #28]
 800066a:	2b07      	cmp	r3, #7
 800066c:	d80e      	bhi.n	800068c <wakeup+0x2c>
 800066e:	e8df f003 	tbb	[pc, r3]
 8000672:	0d26      	.short	0x0d26
 8000674:	0408220d 	.word	0x0408220d
 8000678:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800067a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800067c:	6893      	ldr	r3, [r2, #8]
 800067e:	3301      	adds	r3, #1
 8000680:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000682:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000686:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000688:	6802      	ldr	r2, [r0, #0]
 800068a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800068c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000690:	2200      	movs	r2, #0
 8000692:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <wakeup+0x68>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000696:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000698:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800069a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	428a      	cmp	r2, r1
 80006a0:	d2fb      	bcs.n	800069a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80006a6:	6003      	str	r3, [r0, #0]
 80006a8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80006aa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80006ac:	6058      	str	r0, [r3, #4]
 80006ae:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80006b2:	bc10      	pop	{r4}
 80006b4:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80006b6:	6a03      	ldr	r3, [r0, #32]
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
    break;
 80006bc:	e7e6      	b.n	800068c <wakeup+0x2c>
 80006be:	2300      	movs	r3, #0
 80006c0:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80006c4:	bc10      	pop	{r4}
 80006c6:	4770      	bx	lr
 80006c8:	20000d70 	.word	0x20000d70
 80006cc:	00000000 	.word	0x00000000

080006d0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80006d2:	2200      	movs	r2, #0
 80006d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80006d6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80006d8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80006da:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	4770      	bx	lr
 80006e0:	20000d70 	.word	0x20000d70
	...

080006f0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006f0:	2200      	movs	r2, #0
 80006f2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <chSchReadyI+0x24>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80006f6:	b410      	push	{r4}
 80006f8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006fa:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80006fc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	428a      	cmp	r2, r1
 8000702:	d2fb      	bcs.n	80006fc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000708:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800070a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800070c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800070e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000710:	bc10      	pop	{r4}
 8000712:	4770      	bx	lr
 8000714:	20000d70 	.word	0x20000d70
	...

08000720 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <chSchGoSleepS+0x20>)
 8000722:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000724:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000726:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000728:	7708      	strb	r0, [r1, #28]

  tqp->p_next = tp->p_next;
 800072a:	6810      	ldr	r0, [r2, #0]
 800072c:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800072e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000730:	6043      	str	r3, [r0, #4]
 8000732:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000734:	4610      	mov	r0, r2
}
 8000736:	bc10      	pop	{r4}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000738:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800073a:	f7ff bda1 	b.w	8000280 <_port_switch>
 800073e:	bf00      	nop
 8000740:	20000d70 	.word	0x20000d70
	...

08000750 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000750:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000752:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000754:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000756:	d012      	beq.n	800077e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000758:	4c0c      	ldr	r4, [pc, #48]	; (800078c <chSchGoSleepTimeoutS+0x3c>)
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <chSchGoSleepTimeoutS+0x40>)
 800075c:	69a3      	ldr	r3, [r4, #24]
 800075e:	4605      	mov	r5, r0
 8000760:	a801      	add	r0, sp, #4
 8000762:	f7ff ff05 	bl	8000570 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000766:	4628      	mov	r0, r5
 8000768:	f7ff ffda 	bl	8000720 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800076c:	9b04      	ldr	r3, [sp, #16]
 800076e:	b113      	cbz	r3, 8000776 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8000770:	a801      	add	r0, sp, #4
 8000772:	f7ff ff3d 	bl	80005f0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000776:	69a3      	ldr	r3, [r4, #24]
}
 8000778:	6a18      	ldr	r0, [r3, #32]
 800077a:	b007      	add	sp, #28
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	4c03      	ldr	r4, [pc, #12]	; (800078c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000780:	f7ff ffce 	bl	8000720 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8000784:	69a3      	ldr	r3, [r4, #24]
}
 8000786:	6a18      	ldr	r0, [r3, #32]
 8000788:	b007      	add	sp, #28
 800078a:	bd30      	pop	{r4, r5, pc}
 800078c:	20000d70 	.word	0x20000d70
 8000790:	08000661 	.word	0x08000661
	...

080007a0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80007a2:	b470      	push	{r4, r5, r6}
 80007a4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007a6:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80007a8:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007aa:	68a8      	ldr	r0, [r5, #8]
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007b0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80007b4:	d80b      	bhi.n	80007ce <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007b6:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80007b8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	4291      	cmp	r1, r2
 80007be:	d9fb      	bls.n	80007b8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80007c4:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80007c6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80007c8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80007ca:	bc70      	pop	{r4, r5, r6}
 80007cc:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007ce:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80007d0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 80007d2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007d4:	6891      	ldr	r1, [r2, #8]
 80007d6:	4288      	cmp	r0, r1
 80007d8:	d9fb      	bls.n	80007d2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007da:	6850      	ldr	r0, [r2, #4]
 80007dc:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80007de:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80007e0:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80007e2:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 80007e4:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80007e6:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 80007e8:	4629      	mov	r1, r5
 80007ea:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80007ec:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80007ee:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80007f0:	f7ff bd46 	b.w	8000280 <_port_switch>
 80007f4:	20000d70 	.word	0x20000d70
	...

08000800 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <chSchIsPreemptionRequired+0x14>)
 8000802:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 8000804:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8000806:	6890      	ldr	r0, [r2, #8]
 8000808:	689b      	ldr	r3, [r3, #8]
#endif
}
 800080a:	4298      	cmp	r0, r3
 800080c:	bf94      	ite	ls
 800080e:	2000      	movls	r0, #0
 8000810:	2001      	movhi	r0, #1
 8000812:	4770      	bx	lr
 8000814:	20000d70 	.word	0x20000d70
	...

08000820 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <chSchDoRescheduleBehind+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000822:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000824:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8000826:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000828:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800082a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800082c:	605a      	str	r2, [r3, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800082e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000830:	7701      	strb	r1, [r0, #28]
 8000832:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000834:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000836:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000838:	7725      	strb	r5, [r4, #28]
 800083a:	e000      	b.n	800083e <chSchDoRescheduleBehind+0x1e>
 800083c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	428a      	cmp	r2, r1
 8000842:	d2fb      	bcs.n	800083c <chSchDoRescheduleBehind+0x1c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000848:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800084a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800084c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800084e:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 8000850:	bc30      	pop	{r4, r5}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000852:	f7ff bd15 	b.w	8000280 <_port_switch>
 8000856:	bf00      	nop
 8000858:	20000d70 	.word	0x20000d70
 800085c:	00000000 	.word	0x00000000

08000860 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000862:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8000864:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000866:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000868:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800086a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800086c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800086e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000870:	7701      	strb	r1, [r0, #28]
 8000872:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000874:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000876:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000878:	7725      	strb	r5, [r4, #28]
 800087a:	e000      	b.n	800087e <chSchDoRescheduleAhead+0x1e>
 800087c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	428a      	cmp	r2, r1
 8000882:	d8fb      	bhi.n	800087c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000888:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800088a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800088c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800088e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000890:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000892:	f7ff bcf5 	b.w	8000280 <_port_switch>
 8000896:	bf00      	nop
 8000898:	20000d70 	.word	0x20000d70
 800089c:	00000000 	.word	0x00000000

080008a0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <chSchRescheduleS+0x14>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80008a6:	6892      	ldr	r2, [r2, #8]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d800      	bhi.n	80008b0 <chSchRescheduleS+0x10>
 80008ae:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80008b0:	f7ff bfd6 	b.w	8000860 <chSchDoRescheduleAhead>
 80008b4:	20000d70 	.word	0x20000d70
	...

080008c0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80008c0:	f7ff bfce 	b.w	8000860 <chSchDoRescheduleAhead>
	...

080008d0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80008d2:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <_thread_init+0x38>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80008d4:	63c1      	str	r1, [r0, #60]	; 0x3c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80008d6:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80008d8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80008da:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80008dc:	f100 0128 	add.w	r1, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80008e0:	f04f 0e02 	mov.w	lr, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80008e4:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80008e6:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80008ea:	6145      	str	r5, [r0, #20]
 80008ec:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80008ee:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80008f2:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80008f4:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80008f6:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80008f8:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80008fa:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 80008fc:	6128      	str	r0, [r5, #16]
 80008fe:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000900:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000902:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000904:	62c1      	str	r1, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	20000d70 	.word	0x20000d70
 800090c:	00000000 	.word	0x00000000

08000910 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000912:	4d13      	ldr	r5, [pc, #76]	; (8000960 <chThdCreateI+0x50>)
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000914:	9f05      	ldr	r7, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000916:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
 800091a:	eb00 060e 	add.w	r6, r0, lr
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800091e:	6969      	ldr	r1, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000920:	60c6      	str	r6, [r0, #12]
 8000922:	f840 300e 	str.w	r3, [r0, lr]
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <chThdCreateI+0x54>)
 8000928:	6077      	str	r7, [r6, #4]
 800092a:	6233      	str	r3, [r6, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800092c:	f04f 0e02 	mov.w	lr, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000930:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000932:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000934:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000936:	2701      	movs	r7, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000938:	f100 0228 	add.w	r2, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800093c:	f100 0624 	add.w	r6, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000940:	6105      	str	r5, [r0, #16]
 8000942:	6141      	str	r1, [r0, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000944:	f880 e01c 	strb.w	lr, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000948:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800094a:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800094c:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800094e:	6343      	str	r3, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000950:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 8000952:	6108      	str	r0, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000954:	6246      	str	r6, [r0, #36]	; 0x24
 8000956:	6168      	str	r0, [r5, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000958:	6282      	str	r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800095a:	62c2      	str	r2, [r0, #44]	; 0x2c
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095e:	bf00      	nop
 8000960:	20000d70 	.word	0x20000d70
 8000964:	08000291 	.word	0x08000291
	...

08000970 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	4604      	mov	r4, r0
 8000974:	2520      	movs	r5, #32
 8000976:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800097a:	4e14      	ldr	r6, [pc, #80]	; (80009cc <chThdCreateStatic+0x5c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800097c:	3924      	subs	r1, #36	; 0x24
 800097e:	1845      	adds	r5, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000980:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000982:	60c5      	str	r5, [r0, #12]
 8000984:	5043      	str	r3, [r0, r1]
 8000986:	9b06      	ldr	r3, [sp, #24]
 8000988:	606b      	str	r3, [r5, #4]
 800098a:	4911      	ldr	r1, [pc, #68]	; (80009d0 <chThdCreateStatic+0x60>)
 800098c:	6229      	str	r1, [r5, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800098e:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000990:	2500      	movs	r5, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000992:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000994:	f100 0e24 	add.w	lr, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000998:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800099c:	2101      	movs	r1, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800099e:	6082      	str	r2, [r0, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80009a0:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80009a2:	6106      	str	r6, [r0, #16]
 80009a4:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80009a6:	63c2      	str	r2, [r0, #60]	; 0x3c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80009a8:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80009aa:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80009ac:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80009ae:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80009b0:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80009b2:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80009b4:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80009b8:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80009ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80009bc:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80009be:	f7ff feef 	bl	80007a0 <chSchWakeupS>
 80009c2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80009c6:	4620      	mov	r0, r4
 80009c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000d70 	.word	0x20000d70
 80009d0:	08000291 	.word	0x08000291
	...

080009e0 <chThdStart>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdStart(thread_t *tp) {
 80009e0:	b508      	push	{r3, lr}
 80009e2:	2320      	movs	r3, #32
 80009e4:	f383 8811 	msr	BASEPRI, r3
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 80009e8:	f7ff fe82 	bl	80006f0 <chSchReadyI>
 80009ec:	2300      	movs	r3, #0
 80009ee:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  tp = chThdStartI(tp);
  chSysUnlock();

  return tp;
}
 80009f2:	bd08      	pop	{r3, pc}
	...

08000a00 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8000a00:	b510      	push	{r4, lr}
 8000a02:	2320      	movs	r3, #32
 8000a04:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <chThdSetPriority+0x2c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 8000a0e:	6899      	ldr	r1, [r3, #8]
 8000a10:	428c      	cmp	r4, r1
 8000a12:	d001      	beq.n	8000a18 <chThdSetPriority+0x18>
 8000a14:	4281      	cmp	r1, r0
 8000a16:	d200      	bcs.n	8000a1a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8000a18:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 8000a1a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8000a1c:	f7ff ff40 	bl	80008a0 <chSchRescheduleS>
 8000a20:	2300      	movs	r3, #0
 8000a22:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8000a26:	4620      	mov	r0, r4
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000d70 	.word	0x20000d70

08000a30 <chThdTerminate>:
 8000a30:	2320      	movs	r3, #32
 8000a32:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8000a36:	7f43      	ldrb	r3, [r0, #29]
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	7743      	strb	r3, [r0, #29]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f383 8811 	msr	BASEPRI, r3
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
	...

08000a50 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000a50:	b508      	push	{r3, lr}
 8000a52:	4601      	mov	r1, r0
 8000a54:	2320      	movs	r3, #32
 8000a56:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff fe78 	bl	8000750 <chSchGoSleepTimeoutS>
 8000a60:	2300      	movs	r3, #0
 8000a62:	f383 8811 	msr	BASEPRI, r3
 8000a66:	bd08      	pop	{r3, pc}
	...

08000a70 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8000a70:	b508      	push	{r3, lr}
 8000a72:	2320      	movs	r3, #32
 8000a74:	f383 8811 	msr	BASEPRI, r3
 8000a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7c:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 8000a7e:	1a41      	subs	r1, r0, r1
 8000a80:	d002      	beq.n	8000a88 <chThdSleepUntil+0x18>
 8000a82:	2008      	movs	r0, #8
 8000a84:	f7ff fe64 	bl	8000750 <chSchGoSleepTimeoutS>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f383 8811 	msr	BASEPRI, r3
 8000a8e:	bd08      	pop	{r3, pc}

08000a90 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000a90:	b508      	push	{r3, lr}
 8000a92:	2320      	movs	r3, #32
 8000a94:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <chThdYield+0x24>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000a9e:	6892      	ldr	r2, [r2, #8]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d301      	bcc.n	8000aaa <chThdYield+0x1a>
    chSchDoRescheduleBehind();
 8000aa6:	f7ff febb 	bl	8000820 <chSchDoRescheduleBehind>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f383 8811 	msr	BASEPRI, r3
 8000ab0:	bd08      	pop	{r3, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000d70 	.word	0x20000d70
	...

08000ac0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000ac0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <chThdExitS+0x3c>)
 8000ac4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8000ac8:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000aca:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8000ace:	429d      	cmp	r5, r3
 8000ad0:	d007      	beq.n	8000ae2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fe0a 	bl	80006f0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	d1f7      	bne.n	8000ad2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000ae2:	7f63      	ldrb	r3, [r4, #29]
 8000ae4:	079b      	lsls	r3, r3, #30
 8000ae6:	d104      	bne.n	8000af2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8000ae8:	6963      	ldr	r3, [r4, #20]
 8000aea:	6922      	ldr	r2, [r4, #16]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	6922      	ldr	r2, [r4, #16]
 8000af0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000af2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000af8:	f7ff be12 	b.w	8000720 <chSchGoSleepS>
 8000afc:	20000d70 	.word	0x20000d70

08000b00 <chThdExit>:
 8000b00:	2320      	movs	r3, #32
 8000b02:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8000b06:	f7ff bfdb 	b.w	8000ac0 <chThdExitS>
 8000b0a:	bf00      	nop
 8000b0c:	0000      	movs	r0, r0
	...

08000b10 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4604      	mov	r4, r0
 8000b14:	2320      	movs	r3, #32
 8000b16:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8000b1a:	7f03      	ldrb	r3, [r0, #28]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d007      	beq.n	8000b30 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8000b22:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000b24:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8000b26:	2009      	movs	r0, #9
 8000b28:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8000b2a:	6263      	str	r3, [r4, #36]	; 0x24
 8000b2c:	f7ff fdf8 	bl	8000720 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8000b30:	6a25      	ldr	r5, [r4, #32]
 8000b32:	2300      	movs	r3, #0
 8000b34:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f000 f8c9 	bl	8000cd0 <chThdRelease>
#endif

  return msg;
}
 8000b3e:	4628      	mov	r0, r5
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
 8000b42:	bf00      	nop
 8000b44:	20000d70 	.word	0x20000d70
	...

08000b50 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8000b50:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000b52:	4c05      	ldr	r4, [pc, #20]	; (8000b68 <chThdSuspendS+0x18>)
 8000b54:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8000b56:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 8000b58:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8000b5a:	621a      	str	r2, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f7ff fddf 	bl	8000720 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 8000b62:	69a3      	ldr	r3, [r4, #24]
}
 8000b64:	6a18      	ldr	r0, [r3, #32]
 8000b66:	bd10      	pop	{r4, pc}
 8000b68:	20000d70 	.word	0x20000d70
 8000b6c:	00000000 	.word	0x00000000

08000b70 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000b70:	6803      	ldr	r3, [r0, #0]
 8000b72:	b12b      	cbz	r3, 8000b80 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000b74:	2200      	movs	r2, #0
 8000b76:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000b78:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000b7a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 8000b7c:	f7ff bdb8 	b.w	80006f0 <chSchReadyI>
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
	...

08000b90 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000b90:	b161      	cbz	r1, 8000bac <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000b94:	b410      	push	{r4}
 8000b96:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000b98:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000b9a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000ba2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000ba4:	6053      	str	r3, [r2, #4]
}
 8000ba6:	bc10      	pop	{r4}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000ba8:	f7ff bdd2 	b.w	8000750 <chSchGoSleepTimeoutS>
}
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000d70 	.word	0x20000d70
	...

08000bc0 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000bc0:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	d009      	beq.n	8000bda <chThdDequeueNextI+0x1a>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000bc6:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000bc8:	6814      	ldr	r4, [r2, #0]
 8000bca:	6004      	str	r4, [r0, #0]
 8000bcc:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000bce:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000bd0:	6211      	str	r1, [r2, #32]
  (void) chSchReadyI(tp);
 8000bd2:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000bd4:	bc10      	pop	{r4}
 8000bd6:	f7ff bd8b 	b.w	80006f0 <chSchReadyI>
 8000bda:	4770      	bx	lr
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000be0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000be2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8000be4:	4298      	cmp	r0, r3
 8000be6:	d00b      	beq.n	8000c00 <chThdDequeueAllI+0x20>
 8000be8:	4604      	mov	r4, r0
 8000bea:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	6022      	str	r2, [r4, #0]
 8000bf0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000bf2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000bf4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8000bf6:	f7ff fd7b 	bl	80006f0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	d1f5      	bne.n	8000bec <chThdDequeueAllI+0xc>
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
 8000c02:	bf00      	nop
	...

08000c10 <chTMStartMeasurementX>:
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <chTMStartMeasurementX+0x8>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000c14:	6083      	str	r3, [r0, #8]
 8000c16:	4770      	bx	lr
 8000c18:	e0001000 	.word	0xe0001000
 8000c1c:	00000000 	.word	0x00000000

08000c20 <chTMStopMeasurementX>:
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c22:	4910      	ldr	r1, [pc, #64]	; (8000c64 <chTMStopMeasurementX+0x44>)
 8000c24:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000c26:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c28:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c2a:	6f4f      	ldr	r7, [r1, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c2c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000c2e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000c30:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000c38:	18e4      	adds	r4, r4, r3
 8000c3a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c3e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000c40:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c42:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000c44:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c46:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000c4a:	d805      	bhi.n	8000c58 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000c50:	bf38      	it	cc
 8000c52:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000c54:	bcf0      	pop	{r4, r5, r6, r7}
 8000c56:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000c58:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000c5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e0001000 	.word	0xe0001000
 8000c64:	20000d70 	.word	0x20000d70
	...

08000c70 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000c70:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c72:	4c0c      	ldr	r4, [pc, #48]	; (8000ca4 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000c74:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c76:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000c7c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c7e:	2600      	movs	r6, #0
 8000c80:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000c82:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000c84:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000c86:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000c88:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c8a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000c90:	f7ff ffbe 	bl	8000c10 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f7ff ffc3 	bl	8000c20 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000c9a:	9b02      	ldr	r3, [sp, #8]
 8000c9c:	6763      	str	r3, [r4, #116]	; 0x74
}
 8000c9e:	b006      	add	sp, #24
 8000ca0:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000d70 	.word	0x20000d70
	...

08000cb0 <chThdAddRef>:
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 8000cb6:	7f83      	ldrb	r3, [r0, #30]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	7783      	strb	r3, [r0, #30]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000cc2:	4770      	bx	lr
	...

08000cd0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	f383 8811 	msr	BASEPRI, r3
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8000cd8:	7f83      	ldrb	r3, [r0, #30]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	7783      	strb	r3, [r0, #30]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8000ce6:	b913      	cbnz	r3, 8000cee <chThdRelease+0x1e>
 8000ce8:	7f03      	ldrb	r3, [r0, #28]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d000      	beq.n	8000cf0 <chThdRelease+0x20>
 8000cee:	4770      	bx	lr
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8000cf0:	7f43      	ldrb	r3, [r0, #29]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d002      	beq.n	8000d00 <chThdRelease+0x30>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d007      	beq.n	8000d0e <chThdRelease+0x3e>
 8000cfe:	4770      	bx	lr
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000d00:	6943      	ldr	r3, [r0, #20]
 8000d02:	6902      	ldr	r2, [r0, #16]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	6902      	ldr	r2, [r0, #16]
 8000d08:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 8000d0a:	f001 b879 	b.w	8001e00 <chHeapFree>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000d0e:	6943      	ldr	r3, [r0, #20]
 8000d10:	6902      	ldr	r2, [r0, #16]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	6902      	ldr	r2, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 8000d16:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000d18:	6153      	str	r3, [r2, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8000d1a:	f001 b921 	b.w	8001f60 <chPoolFree>
 8000d1e:	bf00      	nop

08000d20 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	4616      	mov	r6, r2
 8000d26:	461f      	mov	r7, r3
 8000d28:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8000d2a:	f001 f821 	bl	8001d70 <chHeapAlloc>
  if (wsp == NULL) {
 8000d2e:	b198      	cbz	r0, 8000d58 <chThdCreateFromHeap+0x38>
 8000d30:	2320      	movs	r3, #32
 8000d32:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000d36:	9b08      	ldr	r3, [sp, #32]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4632      	mov	r2, r6
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4629      	mov	r1, r5
 8000d40:	f7ff fde6 	bl	8000910 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	7743      	strb	r3, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8000d48:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000d4a:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8000d4c:	f7ff fd28 	bl	80007a0 <chSchWakeupS>
 8000d50:	2300      	movs	r3, #0
 8000d52:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 8000d56:	4620      	mov	r0, r4
}
 8000d58:	b003      	add	sp, #12
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
                                    tfunc_t pf, void *arg) {
 8000d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	460e      	mov	r6, r1
 8000d68:	4617      	mov	r7, r2
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4605      	mov	r5, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8000d6e:	f001 f8df 	bl	8001f30 <chPoolAlloc>
  if (wsp == NULL) {
 8000d72:	b1a0      	cbz	r0, 8000d9e <chThdCreateFromMemoryPool+0x3e>
 8000d74:	2320      	movs	r3, #32
 8000d76:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000d7a:	6869      	ldr	r1, [r5, #4]
 8000d7c:	f8cd 8000 	str.w	r8, [sp]
 8000d80:	463b      	mov	r3, r7
 8000d82:	4632      	mov	r2, r6
 8000d84:	f7ff fdc4 	bl	8000910 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	7743      	strb	r3, [r0, #29]
  tp->p_mpool = mp;
 8000d8c:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8000d8e:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000d90:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8000d92:	f7ff fd05 	bl	80007a0 <chSchWakeupS>
 8000d96:	2300      	movs	r3, #0
 8000d98:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
 8000d9c:	4620      	mov	r0, r4
}
 8000d9e:	b002      	add	sp, #8
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000db0 <chRegFirstThread>:
 8000db0:	2320      	movs	r3, #32
 8000db2:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <chRegFirstThread+0x18>)
 8000db8:	6918      	ldr	r0, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8000dba:	7f83      	ldrb	r3, [r0, #30]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	7783      	strb	r3, [r0, #30]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000d70 	.word	0x20000d70
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8000dda:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8000ddc:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8000dde:	bf1d      	ittte	ne
 8000de0:	7fa3      	ldrbne	r3, [r4, #30]
 8000de2:	3301      	addne	r3, #1
 8000de4:	77a3      	strbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8000de6:	2400      	moveq	r4, #0
 8000de8:	2300      	movs	r3, #0
 8000dea:	f383 8811 	msr	BASEPRI, r3
    ntp->p_refs++;
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8000dee:	f7ff ff6f 	bl	8000cd0 <chThdRelease>
#endif

  return ntp;
}
 8000df2:	4620      	mov	r0, r4
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	bf00      	nop
 8000df8:	20000d70 	.word	0x20000d70
 8000dfc:	00000000 	.word	0x00000000

08000e00 <chSemObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000e00:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000e02:	6040      	str	r0, [r0, #4]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000e04:	6081      	str	r1, [r0, #8]
 8000e06:	4770      	bx	lr
	...

08000e10 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8000e10:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8000e12:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8000e14:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8000e16:	3501      	adds	r5, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	dc0c      	bgt.n	8000e36 <chSemResetI+0x26>
 8000e1c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000e1e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8000e22:	6860      	ldr	r0, [r4, #4]

  tqp->p_prev = tp->p_prev;
 8000e24:	6843      	ldr	r3, [r0, #4]
 8000e26:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8000e28:	601c      	str	r4, [r3, #0]
 8000e2a:	f7ff fc61 	bl	80006f0 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000e2e:	3501      	adds	r5, #1
 8000e30:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000e32:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000e34:	d1f5      	bne.n	8000e22 <chSemResetI+0x12>
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e40 <chSemReset>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {
 8000e40:	b508      	push	{r3, lr}
 8000e42:	2320      	movs	r3, #32
 8000e44:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSemResetI(sp, n);
 8000e48:	f7ff ffe2 	bl	8000e10 <chSemResetI>
  chSchRescheduleS();
 8000e4c:	f7ff fd28 	bl	80008a0 <chSchRescheduleS>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f383 8811 	msr	BASEPRI, r3
 8000e56:	bd08      	pop	{r3, pc}
	...

08000e60 <chSemWait>:
 8000e60:	2320      	movs	r3, #32
 8000e62:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000e66:	6883      	ldr	r3, [r0, #8]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	6083      	str	r3, [r0, #8]
 8000e6e:	db04      	blt.n	8000e7a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8000e70:	2000      	movs	r0, #0
 8000e72:	2300      	movs	r3, #0
 8000e74:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000e78:	4770      	bx	lr
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8000e7a:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 8000e7c:	4c08      	ldr	r4, [pc, #32]	; (8000ea0 <chSemWait+0x40>)
 8000e7e:	69a2      	ldr	r2, [r4, #24]
 8000e80:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000e82:	6841      	ldr	r1, [r0, #4]
 8000e84:	6051      	str	r1, [r2, #4]
 8000e86:	4603      	mov	r3, r0
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8000e88:	6010      	str	r0, [r2, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 8000e8a:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000e8c:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	f7ff fc46 	bl	8000720 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8000e94:	69a3      	ldr	r3, [r4, #24]
 8000e96:	6a18      	ldr	r0, [r3, #32]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000e9e:	bd10      	pop	{r4, pc}
 8000ea0:	20000d70 	.word	0x20000d70
	...

08000eb0 <chSemWaitTimeout>:
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000eb6:	6882      	ldr	r2, [r0, #8]
 8000eb8:	1e53      	subs	r3, r2, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
 8000ebe:	db04      	blt.n	8000eca <chSemWaitTimeout+0x1a>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8000ec8:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8000eca:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8000ecc:	b179      	cbz	r1, 8000eee <chSemWaitTimeout+0x3e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <chSemWaitTimeout+0x48>)
 8000ed0:	6992      	ldr	r2, [r2, #24]
 8000ed2:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000ed4:	6844      	ldr	r4, [r0, #4]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e882 0018 	stmia.w	r2, {r3, r4}
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000edc:	2005      	movs	r0, #5
  tp->p_prev->p_next = tp;
 8000ede:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	f7ff fc35 	bl	8000750 <chSchGoSleepTimeoutS>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
  chSysUnlock();

  return msg;
}
 8000eec:	bd10      	pop	{r4, pc}
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8000eee:	6082      	str	r2, [r0, #8]

      return MSG_TIMEOUT;
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	e7f7      	b.n	8000ee6 <chSemWaitTimeout+0x36>
 8000ef6:	bf00      	nop
 8000ef8:	20000d70 	.word	0x20000d70
 8000efc:	00000000 	.word	0x00000000

08000f00 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000f00:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000f02:	6880      	ldr	r0, [r0, #8]
 8000f04:	1e42      	subs	r2, r0, #1
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	db01      	blt.n	8000f10 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000f10:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8000f12:	b159      	cbz	r1, 8000f2c <chSemWaitTimeoutS+0x2c>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <chSemWaitTimeoutS+0x38>)
 8000f16:	6992      	ldr	r2, [r2, #24]
 8000f18:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000f1a:	685c      	ldr	r4, [r3, #4]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8000f22:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8000f24:	605a      	str	r2, [r3, #4]
  }

  return MSG_OK;
}
 8000f26:	bc10      	pop	{r4}
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000f28:	f7ff bc12 	b.w	8000750 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8000f2c:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f2e:	bc10      	pop	{r4}

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000d70 	.word	0x20000d70
 8000f3c:	00000000 	.word	0x00000000

08000f40 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000f40:	b508      	push	{r3, lr}
 8000f42:	2320      	movs	r3, #32
 8000f44:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8000f48:	6883      	ldr	r3, [r0, #8]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	6083      	str	r3, [r0, #8]
 8000f50:	dd03      	ble.n	8000f5a <chSemSignal+0x1a>
 8000f52:	2300      	movs	r3, #0
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f5c:	6800      	ldr	r0, [r0, #0]

  tqp->p_next = tp->p_next;
 8000f5e:	6802      	ldr	r2, [r0, #0]
 8000f60:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8000f62:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f64:	6053      	str	r3, [r2, #4]
 8000f66:	f7ff fc1b 	bl	80007a0 <chSchWakeupS>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f383 8811 	msr	BASEPRI, r3
 8000f70:	bd08      	pop	{r3, pc}
 8000f72:	bf00      	nop
	...

08000f80 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000f80:	6883      	ldr	r3, [r0, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	6083      	str	r3, [r0, #8]
 8000f88:	dd00      	ble.n	8000f8c <chSemSignalI+0xc>
 8000f8a:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000f8c:	6803      	ldr	r3, [r0, #0]

  tqp->p_next = tp->p_next;
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000f92:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f94:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8000f96:	4618      	mov	r0, r3

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000f98:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 8000f9a:	f7ff bba9 	b.w	80006f0 <chSchReadyI>
 8000f9e:	bf00      	nop

08000fa0 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8000fa0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000fa2:	1e0c      	subs	r4, r1, #0
 8000fa4:	dd12      	ble.n	8000fcc <chSemAddCounterI+0x2c>
 8000fa6:	4605      	mov	r5, r0
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000fa8:	2600      	movs	r6, #0
 8000faa:	e001      	b.n	8000fb0 <chSemAddCounterI+0x10>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000fac:	3c01      	subs	r4, #1
 8000fae:	d00d      	beq.n	8000fcc <chSemAddCounterI+0x2c>
    if (++sp->s_cnt <= (cnt_t)0) {
 8000fb0:	68ab      	ldr	r3, [r5, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	60ab      	str	r3, [r5, #8]
 8000fb8:	dcf8      	bgt.n	8000fac <chSemAddCounterI+0xc>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000fba:	6828      	ldr	r0, [r5, #0]

  tqp->p_next = tp->p_next;
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	602b      	str	r3, [r5, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000fc0:	605d      	str	r5, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000fc2:	f7ff fb95 	bl	80006f0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000fc6:	3c01      	subs	r4, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8000fc8:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8000fca:	d1f1      	bne.n	8000fb0 <chSemAddCounterI+0x10>
 8000fcc:	bd70      	pop	{r4, r5, r6, pc}
 8000fce:	bf00      	nop

08000fd0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8000fda:	6883      	ldr	r3, [r0, #8]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	6083      	str	r3, [r0, #8]
 8000fe2:	dd1d      	ble.n	8001020 <chSemSignalWait+0x50>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8000fe4:	688b      	ldr	r3, [r1, #8]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	608b      	str	r3, [r1, #8]
 8000fec:	db07      	blt.n	8000ffe <chSemSignalWait+0x2e>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8000fee:	f7ff fc57 	bl	80008a0 <chSchRescheduleS>
    msg = MSG_OK;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <chSemSignalWait+0x68>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001000:	684b      	ldr	r3, [r1, #4]
 8001002:	6994      	ldr	r4, [r2, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8001004:	2005      	movs	r0, #5
 8001006:	e884 000a 	stmia.w	r4, {r1, r3}
  tp->p_prev->p_next = tp;
 800100a:	601c      	str	r4, [r3, #0]
  tqp->p_prev = tp;
 800100c:	604c      	str	r4, [r1, #4]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 800100e:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 8001010:	f7ff fb86 	bl	8000720 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8001014:	6a20      	ldr	r0, [r4, #32]
 8001016:	2300      	movs	r3, #0
 8001018:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800101c:	b002      	add	sp, #8
 800101e:	bd10      	pop	{r4, pc}
 8001020:	4602      	mov	r2, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001022:	6800      	ldr	r0, [r0, #0]
 8001024:	9101      	str	r1, [sp, #4]

  tqp->p_next = tp->p_next;
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	6013      	str	r3, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800102a:	605a      	str	r2, [r3, #4]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 800102c:	f7ff fb60 	bl	80006f0 <chSchReadyI>
 8001030:	2300      	movs	r3, #0
 8001032:	6203      	str	r3, [r0, #32]
 8001034:	9901      	ldr	r1, [sp, #4]
 8001036:	e7d5      	b.n	8000fe4 <chSemSignalWait+0x14>
 8001038:	20000d70 	.word	0x20000d70
 800103c:	00000000 	.word	0x00000000

08001040 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001040:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001042:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001044:	6040      	str	r0, [r0, #4]
 8001046:	6083      	str	r3, [r0, #8]
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	0000      	movs	r0, r0
	...

08001050 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001052:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001054:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001056:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001058:	2a00      	cmp	r2, #0
 800105a:	d055      	beq.n	8001108 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800105c:	68a1      	ldr	r1, [r4, #8]
 800105e:	6893      	ldr	r3, [r2, #8]
 8001060:	428b      	cmp	r3, r1
 8001062:	4605      	mov	r5, r0
 8001064:	d206      	bcs.n	8001074 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001066:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001068:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800106a:	2b06      	cmp	r3, #6
 800106c:	d033      	beq.n	80010d6 <chMtxLockS+0x86>
 800106e:	2b07      	cmp	r3, #7
 8001070:	d01d      	beq.n	80010ae <chMtxLockS+0x5e>
 8001072:	b19b      	cbz	r3, 800109c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001074:	462b      	mov	r3, r5
 8001076:	e003      	b.n	8001080 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001078:	6899      	ldr	r1, [r3, #8]
 800107a:	68a2      	ldr	r2, [r4, #8]
 800107c:	4291      	cmp	r1, r2
 800107e:	d302      	bcc.n	8001086 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001080:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001082:	429d      	cmp	r5, r3
 8001084:	d1f8      	bne.n	8001078 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800108a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800108c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800108e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001090:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8001092:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8001094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001098:	f7ff bb42 	b.w	8000720 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800109c:	e892 000a 	ldmia.w	r2, {r1, r3}
 80010a0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010a2:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80010a4:	4610      	mov	r0, r2
 80010a6:	604b      	str	r3, [r1, #4]
 80010a8:	f7ff fb22 	bl	80006f0 <chSchReadyI>
          break;
 80010ac:	e7e2      	b.n	8001074 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010ae:	e892 0009 	ldmia.w	r2, {r0, r3}
 80010b2:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010b4:	6810      	ldr	r0, [r2, #0]
 80010b6:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010b8:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010ba:	4633      	mov	r3, r6
 80010bc:	e002      	b.n	80010c4 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	4288      	cmp	r0, r1
 80010c2:	d302      	bcc.n	80010ca <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80010c4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010c6:	429e      	cmp	r6, r3
 80010c8:	d1f9      	bne.n	80010be <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010ce:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010d0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	e7ce      	b.n	8001074 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010d6:	e892 0009 	ldmia.w	r2, {r0, r3}
 80010da:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010dc:	6810      	ldr	r0, [r2, #0]
 80010de:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010e0:	6a16      	ldr	r6, [r2, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010e2:	4633      	mov	r3, r6
 80010e4:	e002      	b.n	80010ec <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	4288      	cmp	r0, r1
 80010ea:	d302      	bcc.n	80010f2 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80010ec:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010ee:	429e      	cmp	r6, r3
 80010f0:	d1f9      	bne.n	80010e6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010f6:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010f8:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80010fa:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80010fc:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80010fe:	68a1      	ldr	r1, [r4, #8]
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	428b      	cmp	r3, r1
 8001104:	d3af      	bcc.n	8001066 <chMtxLockS+0x16>
 8001106:	e7b5      	b.n	8001074 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800110a:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800110c:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800110e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001110:	bd70      	pop	{r4, r5, r6, pc}
 8001112:	bf00      	nop
 8001114:	20000d70 	.word	0x20000d70
	...

08001120 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001120:	b508      	push	{r3, lr}
 8001122:	2320      	movs	r3, #32
 8001124:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001128:	f7ff ff92 	bl	8001050 <chMtxLockS>
 800112c:	2300      	movs	r3, #0
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	bd08      	pop	{r3, pc}
	...

08001140 <chMtxTryLock>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @api
 */
bool chMtxTryLock(mutex_t *mp) {
 8001140:	4603      	mov	r3, r0
 8001142:	2220      	movs	r2, #32
 8001144:	f382 8811 	msr	BASEPRI, r2
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8001148:	6882      	ldr	r2, [r0, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 800114a:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 800114c:	b11a      	cbz	r2, 8001156 <chMtxTryLock+0x16>
 800114e:	2300      	movs	r3, #0
 8001150:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8001154:	4770      	bx	lr

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <chMtxTryLock+0x2c>)
 8001158:	6992      	ldr	r2, [r2, #24]
 800115a:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 800115c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800115e:	60d9      	str	r1, [r3, #12]
  currp->p_mtxlist = mp;
 8001160:	2001      	movs	r0, #1
 8001162:	6393      	str	r3, [r2, #56]	; 0x38
 8001164:	2300      	movs	r3, #0
 8001166:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 800116a:	4770      	bx	lr
 800116c:	20000d70 	.word	0x20000d70

08001170 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001172:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001174:	699d      	ldr	r5, [r3, #24]
 8001176:	2320      	movs	r3, #32
 8001178:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800117c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800117e:	68c3      	ldr	r3, [r0, #12]
 8001180:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001182:	4284      	cmp	r4, r0
 8001184:	d01c      	beq.n	80011c0 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001186:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001188:	b14b      	cbz	r3, 800119e <chMtxUnlock+0x2e>
 800118a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001190:	6892      	ldr	r2, [r2, #8]
 8001192:	4291      	cmp	r1, r2
 8001194:	bf38      	it	cc
 8001196:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001198:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f5      	bne.n	800118a <chMtxUnlock+0x1a>
 800119e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80011a0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80011a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80011a4:	60a9      	str	r1, [r5, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 80011a6:	4620      	mov	r0, r4
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80011ac:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80011ae:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 80011b0:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 80011b2:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 80011b4:	f7ff faf4 	bl	80007a0 <chSchWakeupS>
 80011b8:	2300      	movs	r3, #0
 80011ba:	f383 8811 	msr	BASEPRI, r3
 80011be:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60a3      	str	r3, [r4, #8]
 80011c4:	2300      	movs	r3, #0
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	20000d70 	.word	0x20000d70

080011d0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80011d2:	b430      	push	{r4, r5}
 80011d4:	4604      	mov	r4, r0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80011d6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 80011d8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80011da:	68e3      	ldr	r3, [r4, #12]
 80011dc:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80011de:	42a5      	cmp	r5, r4
 80011e0:	d017      	beq.n	8001212 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80011e2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011e4:	b14b      	cbz	r3, 80011fa <chMtxUnlockS+0x2a>
 80011e6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d003      	beq.n	80011f4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80011ec:	6892      	ldr	r2, [r2, #8]
 80011ee:	4291      	cmp	r1, r2
 80011f0:	bf38      	it	cc
 80011f2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80011f4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f5      	bne.n	80011e6 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80011fa:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80011fc:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80011fe:	6081      	str	r1, [r0, #8]
 8001200:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8001202:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001204:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001206:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8001208:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800120a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800120c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 800120e:	f7ff ba6f 	b.w	80006f0 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8001212:	2300      	movs	r3, #0
 8001214:	60ab      	str	r3, [r5, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001216:	bc30      	pop	{r4, r5}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000d70 	.word	0x20000d70

08001220 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001222:	b570      	push	{r4, r5, r6, lr}
 8001224:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8001226:	6994      	ldr	r4, [r2, #24]
 8001228:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800122c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800122e:	b1d3      	cbz	r3, 8001266 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001230:	2600      	movs	r6, #0
 8001232:	e00a      	b.n	800124a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001234:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001236:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8001238:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800123a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800123c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800123e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001240:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8001242:	f7ff fa55 	bl	80006f0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001248:	b14b      	cbz	r3, 800125e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800124a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800124c:	68d9      	ldr	r1, [r3, #12]
 800124e:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001250:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8001252:	4610      	mov	r0, r2
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 8001254:	d1ee      	bne.n	8001234 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8001256:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f5      	bne.n	800124a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 800125e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001260:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8001262:	f7ff fb1d 	bl	80008a0 <chSchRescheduleS>
 8001266:	2300      	movs	r3, #0
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	bd70      	pop	{r4, r5, r6, pc}
 800126e:	bf00      	nop
 8001270:	20000d70 	.word	0x20000d70
	...

08001280 <chCondObjectInit>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001280:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001282:	6040      	str	r0, [r0, #4]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
	...

08001290 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8001290:	b508      	push	{r3, lr}
 8001292:	2320      	movs	r3, #32
 8001294:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001298:	6802      	ldr	r2, [r0, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 800129a:	4290      	cmp	r0, r2
 800129c:	d007      	beq.n	80012ae <chCondSignal+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800129e:	6811      	ldr	r1, [r2, #0]
 80012a0:	6001      	str	r1, [r0, #0]
 80012a2:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012a4:	604b      	str	r3, [r1, #4]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 80012a6:	4610      	mov	r0, r2
 80012a8:	2100      	movs	r1, #0
 80012aa:	f7ff fa79 	bl	80007a0 <chSchWakeupS>
 80012ae:	2300      	movs	r3, #0
 80012b0:	f383 8811 	msr	BASEPRI, r3
 80012b4:	bd08      	pop	{r3, pc}
 80012b6:	bf00      	nop
	...

080012c0 <chCondSignalI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012c0:	6803      	ldr	r3, [r0, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d007      	beq.n	80012d6 <chCondSignalI+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	6002      	str	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80012ca:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012cc:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 80012ce:	4618      	mov	r0, r3
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80012d0:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 80012d2:	f7ff ba0d 	b.w	80006f0 <chSchReadyI>
 80012d6:	4770      	bx	lr
	...

080012e0 <chCondBroadcast>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondBroadcast(condition_variable_t *cp) {
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	2320      	movs	r3, #32
 80012e6:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012ea:	6800      	ldr	r0, [r0, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80012ec:	4284      	cmp	r4, r0
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80012ee:	bf18      	it	ne
 80012f0:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80012f4:	d008      	beq.n	8001308 <chCondBroadcast+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012f6:	6803      	ldr	r3, [r0, #0]
 80012f8:	6023      	str	r3, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012fa:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80012fc:	f7ff f9f8 	bl	80006f0 <chSchReadyI>
 8001300:	6205      	str	r5, [r0, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001302:	6820      	ldr	r0, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8001304:	42a0      	cmp	r0, r4
 8001306:	d1f6      	bne.n	80012f6 <chCondBroadcast+0x16>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8001308:	f7ff faca 	bl	80008a0 <chSchRescheduleS>
 800130c:	2300      	movs	r3, #0
 800130e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8001312:	bd38      	pop	{r3, r4, r5, pc}
	...

08001320 <chCondWaitS>:
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <chCondWaitS+0x40>)
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8001322:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001324:	699c      	ldr	r4, [r3, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8001326:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8001328:	4605      	mov	r5, r0
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff ff50 	bl	80011d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 8001330:	6225      	str	r5, [r4, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001332:	462b      	mov	r3, r5
 8001334:	e003      	b.n	800133e <chCondWaitS+0x1e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001336:	6899      	ldr	r1, [r3, #8]
 8001338:	68a2      	ldr	r2, [r4, #8]
 800133a:	4291      	cmp	r1, r2
 800133c:	d302      	bcc.n	8001344 <chCondWaitS+0x24>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800133e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001340:	429d      	cmp	r5, r3
 8001342:	d1f8      	bne.n	8001336 <chCondWaitS+0x16>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001348:	6023      	str	r3, [r4, #0]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 800134a:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800134c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800134e:	605c      	str	r4, [r3, #4]
 8001350:	f7ff f9e6 	bl	8000720 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8001354:	6a24      	ldr	r4, [r4, #32]
  chMtxLockS(mp);
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff fe7a 	bl	8001050 <chMtxLockS>

  return msg;
}
 800135c:	4620      	mov	r0, r4
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	20000d70 	.word	0x20000d70
	...

08001370 <chCondWait>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @api
 */
msg_t chCondWait(condition_variable_t *cp) {
 8001370:	b508      	push	{r3, lr}
 8001372:	2320      	movs	r3, #32
 8001374:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitS(cp);
 8001378:	f7ff ffd2 	bl	8001320 <chCondWaitS>
 800137c:	2300      	movs	r3, #0
 800137e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8001382:	bd08      	pop	{r3, pc}
	...

08001390 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001392:	4c12      	ldr	r4, [pc, #72]	; (80013dc <chCondWaitTimeoutS+0x4c>)
 8001394:	69a3      	ldr	r3, [r4, #24]
 8001396:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8001398:	4605      	mov	r5, r0
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800139a:	4630      	mov	r0, r6
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, systime_t time) {
 800139c:	460f      	mov	r7, r1
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800139e:	f7ff ff17 	bl	80011d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 80013a2:	69a4      	ldr	r4, [r4, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80013a4:	462b      	mov	r3, r5
 80013a6:	6225      	str	r5, [r4, #32]
 80013a8:	e003      	b.n	80013b2 <chCondWaitTimeoutS+0x22>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013aa:	6898      	ldr	r0, [r3, #8]
 80013ac:	68a2      	ldr	r2, [r4, #8]
 80013ae:	4290      	cmp	r0, r2
 80013b0:	d302      	bcc.n	80013b8 <chCondWaitTimeoutS+0x28>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80013b2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013b4:	429d      	cmp	r5, r3
 80013b6:	d1f8      	bne.n	80013aa <chCondWaitTimeoutS+0x1a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80013bc:	6023      	str	r3, [r4, #0]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 80013be:	4639      	mov	r1, r7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80013c0:	6014      	str	r4, [r2, #0]
 80013c2:	2007      	movs	r0, #7
  cp->p_prev = tp;
 80013c4:	605c      	str	r4, [r3, #4]
 80013c6:	f7ff f9c3 	bl	8000750 <chSchGoSleepTimeoutS>
  if (msg != MSG_TIMEOUT) {
 80013ca:	1c43      	adds	r3, r0, #1

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
 80013cc:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 80013ce:	d002      	beq.n	80013d6 <chCondWaitTimeoutS+0x46>
    chMtxLockS(mp);
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff fe3d 	bl	8001050 <chMtxLockS>
  }

  return msg;
}
 80013d6:	4620      	mov	r0, r4
 80013d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000d70 	.word	0x20000d70

080013e0 <chCondWaitTimeout>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chCondWaitTimeout(condition_variable_t *cp, systime_t time) {
 80013e0:	b508      	push	{r3, lr}
 80013e2:	2320      	movs	r3, #32
 80013e4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chCondWaitTimeoutS(cp, time);
 80013e8:	f7ff ffd2 	bl	8001390 <chCondWaitTimeoutS>
 80013ec:	2300      	movs	r3, #0
 80013ee:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80013f2:	bd08      	pop	{r3, pc}
	...

08001400 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8001400:	b430      	push	{r4, r5}
 8001402:	2420      	movs	r4, #32
 8001404:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001408:	4d06      	ldr	r5, [pc, #24]	; (8001424 <chEvtRegisterMaskWithFlags+0x24>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800140a:	6804      	ldr	r4, [r0, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 800140c:	69ad      	ldr	r5, [r5, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800140e:	600c      	str	r4, [r1, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8001410:	2400      	movs	r4, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001412:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 8001414:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 8001416:	608a      	str	r2, [r1, #8]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8001418:	610b      	str	r3, [r1, #16]
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800141a:	60cc      	str	r4, [r1, #12]
 800141c:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 8001420:	bc30      	pop	{r4, r5}
 8001422:	4770      	bx	lr
 8001424:	20000d70 	.word	0x20000d70
	...

08001430 <chEvtUnregister>:
 8001430:	2320      	movs	r3, #32
 8001432:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8001436:	4602      	mov	r2, r0
 8001438:	e002      	b.n	8001440 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800143a:	428b      	cmp	r3, r1
 800143c:	d007      	beq.n	800144e <chEvtUnregister+0x1e>
 800143e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	4298      	cmp	r0, r3
 8001444:	d1f9      	bne.n	800143a <chEvtUnregister+0xa>
 8001446:	2300      	movs	r3, #0
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 800144e:	680b      	ldr	r3, [r1, #0]
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	0000      	movs	r0, r0
	...

08001460 <chEvtGetAndClearEvents>:
 8001460:	2320      	movs	r3, #32
 8001462:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <chEvtGetAndClearEvents+0x1c>)
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800146c:	ea23 0100 	bic.w	r1, r3, r0
 8001470:	6351      	str	r1, [r2, #52]	; 0x34
 8001472:	2200      	movs	r2, #0
 8001474:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8001478:	4018      	ands	r0, r3
 800147a:	4770      	bx	lr
 800147c:	20000d70 	.word	0x20000d70

08001480 <chEvtAddEvents>:
 8001480:	2320      	movs	r3, #32
 8001482:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <chEvtAddEvents+0x18>)
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800148c:	4318      	orrs	r0, r3
 800148e:	6350      	str	r0, [r2, #52]	; 0x34
 8001490:	2300      	movs	r3, #0
 8001492:	f383 8811 	msr	BASEPRI, r3
  events = currp->p_epending;
  chSysUnlock();

  return events;
}
 8001496:	4770      	bx	lr
 8001498:	20000d70 	.word	0x20000d70
 800149c:	00000000 	.word	0x00000000

080014a0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80014a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80014a2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80014a4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80014a6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80014a8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80014aa:	d009      	beq.n	80014c0 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80014ac:	2a0b      	cmp	r2, #11
 80014ae:	d000      	beq.n	80014b2 <chEvtSignalI+0x12>
 80014b0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80014b2:	6a03      	ldr	r3, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80014b4:	438b      	bics	r3, r1
 80014b6:	d1fb      	bne.n	80014b0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 80014bc:	f7ff b918 	b.w	80006f0 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80014c0:	6a03      	ldr	r3, [r0, #32]
 80014c2:	4219      	tst	r1, r3
 80014c4:	d1f8      	bne.n	80014b8 <chEvtSignalI+0x18>
 80014c6:	4770      	bx	lr
	...

080014d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80014d0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80014d2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014d4:	42a0      	cmp	r0, r4
 80014d6:	d00f      	beq.n	80014f8 <chEvtBroadcastFlagsI+0x28>
 80014d8:	4606      	mov	r6, r0
 80014da:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 80014dc:	68e3      	ldr	r3, [r4, #12]
 80014de:	432b      	orrs	r3, r5
 80014e0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80014e2:	b115      	cbz	r5, 80014ea <chEvtBroadcastFlagsI+0x1a>
 80014e4:	6922      	ldr	r2, [r4, #16]
 80014e6:	4213      	tst	r3, r2
 80014e8:	d003      	beq.n	80014f2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 80014ea:	68a1      	ldr	r1, [r4, #8]
 80014ec:	6860      	ldr	r0, [r4, #4]
 80014ee:	f7ff ffd7 	bl	80014a0 <chEvtSignalI>
    }
    elp = elp->el_next;
 80014f2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014f4:	42a6      	cmp	r6, r4
 80014f6:	d1f1      	bne.n	80014dc <chEvtBroadcastFlagsI+0xc>
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
 80014fa:	bf00      	nop
 80014fc:	0000      	movs	r0, r0
	...

08001500 <chEvtSignal>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @api
 */
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8001500:	b508      	push	{r3, lr}
 8001502:	2320      	movs	r3, #32
 8001504:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8001508:	f7ff ffca 	bl	80014a0 <chEvtSignalI>
  chSchRescheduleS();
 800150c:	f7ff f9c8 	bl	80008a0 <chSchRescheduleS>
 8001510:	2300      	movs	r3, #0
 8001512:	f383 8811 	msr	BASEPRI, r3
 8001516:	bd08      	pop	{r3, pc}
	...

08001520 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8001520:	b508      	push	{r3, lr}
 8001522:	2320      	movs	r3, #32
 8001524:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8001528:	f7ff ffd2 	bl	80014d0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800152c:	f7ff f9b8 	bl	80008a0 <chSchRescheduleS>
 8001530:	2300      	movs	r3, #0
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	bd08      	pop	{r3, pc}
	...

08001540 <chEvtDispatch>:
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001540:	b1c9      	cbz	r1, 8001576 <chEvtDispatch+0x36>
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8001542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001544:	4606      	mov	r6, r0
 8001546:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001548:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800154a:	2701      	movs	r7, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800154c:	fa25 f304 	lsr.w	r3, r5, r4
 8001550:	07db      	lsls	r3, r3, #31
 8001552:	d404      	bmi.n	800155e <chEvtDispatch+0x1e>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001554:	3401      	adds	r4, #1

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001556:	fa25 f304 	lsr.w	r3, r5, r4
 800155a:	07db      	lsls	r3, r3, #31
 800155c:	d5fa      	bpl.n	8001554 <chEvtDispatch+0x14>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800155e:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8001562:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001564:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001568:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800156c:	4798      	blx	r3
    }
    eid++;
 800156e:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001570:	2d00      	cmp	r5, #0
 8001572:	d1eb      	bne.n	800154c <chEvtDispatch+0xc>
 8001574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001576:	4770      	bx	lr
	...

08001580 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8001580:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <chEvtWaitOne+0x38>)
 8001584:	699d      	ldr	r5, [r3, #24]
 8001586:	2320      	movs	r3, #32
 8001588:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800158c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800158e:	ea13 0400 	ands.w	r4, r3, r0
 8001592:	d106      	bne.n	80015a2 <chEvtWaitOne+0x22>
 8001594:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 8001596:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8001598:	200a      	movs	r0, #10
 800159a:	f7ff f8c1 	bl	8000720 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800159e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015a0:	401c      	ands	r4, r3
  }
  m ^= m & (m - (eventmask_t)1);
 80015a2:	4262      	negs	r2, r4
 80015a4:	ea04 0002 	and.w	r0, r4, r2
  ctp->p_epending &= ~m;
 80015a8:	ea23 0300 	bic.w	r3, r3, r0
 80015ac:	636b      	str	r3, [r5, #52]	; 0x34
 80015ae:	2300      	movs	r3, #0
 80015b0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	20000d70 	.word	0x20000d70
 80015bc:	00000000 	.word	0x00000000

080015c0 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 80015c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <chEvtWaitAny+0x34>)
 80015c4:	699d      	ldr	r5, [r3, #24]
 80015c6:	2320      	movs	r3, #32
 80015c8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80015cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80015ce:	ea13 0400 	ands.w	r4, r3, r0
 80015d2:	d106      	bne.n	80015e2 <chEvtWaitAny+0x22>
 80015d4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 80015d6:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80015d8:	200a      	movs	r0, #10
 80015da:	f7ff f8a1 	bl	8000720 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80015de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015e0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 80015e2:	ea23 0304 	bic.w	r3, r3, r4
 80015e6:	636b      	str	r3, [r5, #52]	; 0x34
 80015e8:	2300      	movs	r3, #0
 80015ea:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80015ee:	4620      	mov	r0, r4
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
 80015f2:	bf00      	nop
 80015f4:	20000d70 	.word	0x20000d70
	...

08001600 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001600:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <chEvtWaitAll+0x30>)
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8001604:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8001606:	699d      	ldr	r5, [r3, #24]
 8001608:	2320      	movs	r3, #32
 800160a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 800160e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001610:	ea30 0203 	bics.w	r2, r0, r3
 8001614:	d004      	beq.n	8001620 <chEvtWaitAll+0x20>
    ctp->p_u.ewmask = events;
 8001616:	6228      	str	r0, [r5, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8001618:	200b      	movs	r0, #11
 800161a:	f7ff f881 	bl	8000720 <chSchGoSleepS>
 800161e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8001620:	ea23 0304 	bic.w	r3, r3, r4
 8001624:	636b      	str	r3, [r5, #52]	; 0x34
 8001626:	2300      	movs	r3, #0
 8001628:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800162c:	4620      	mov	r0, r4
 800162e:	bd38      	pop	{r3, r4, r5, pc}
 8001630:	20000d70 	.word	0x20000d70
	...

08001640 <chEvtWaitOneTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <chEvtWaitOneTimeout+0x4c>)
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8001646:	699d      	ldr	r5, [r3, #24]
 8001648:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800164c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800164e:	ea12 0600 	ands.w	r6, r2, r0
 8001652:	d10e      	bne.n	8001672 <chEvtWaitOneTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 8001654:	b919      	cbnz	r1, 800165e <chEvtWaitOneTimeout+0x1e>
 8001656:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800165a:	4608      	mov	r0, r1
 800165c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800165e:	6228      	str	r0, [r5, #32]
 8001660:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001662:	200a      	movs	r0, #10
 8001664:	f7ff f874 	bl	8000750 <chSchGoSleepTimeoutS>
 8001668:	2800      	cmp	r0, #0
 800166a:	db0b      	blt.n	8001684 <chEvtWaitOneTimeout+0x44>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800166c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800166e:	ea04 0602 	and.w	r6, r4, r2
  }
  m ^= m & (m - (eventmask_t)1);
 8001672:	4270      	negs	r0, r6
 8001674:	4030      	ands	r0, r6
  ctp->p_epending &= ~m;
 8001676:	ea22 0200 	bic.w	r2, r2, r0
 800167a:	636a      	str	r2, [r5, #52]	; 0x34
 800167c:	2300      	movs	r3, #0
 800167e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8001682:	bd70      	pop	{r4, r5, r6, pc}
 8001684:	f386 8811 	msr	BASEPRI, r6
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 8001688:	4630      	mov	r0, r6
 800168a:	bd70      	pop	{r4, r5, r6, pc}
 800168c:	20000d70 	.word	0x20000d70

08001690 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <chEvtWaitAnyTimeout+0x4c>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 8001692:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001694:	699e      	ldr	r6, [r3, #24]
 8001696:	2320      	movs	r3, #32
 8001698:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800169c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800169e:	ea13 0400 	ands.w	r4, r3, r0
 80016a2:	d10e      	bne.n	80016c2 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 80016a4:	b919      	cbnz	r1, 80016ae <chEvtWaitAnyTimeout+0x1e>
 80016a6:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 80016aa:	4608      	mov	r0, r1
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 80016ae:	6230      	str	r0, [r6, #32]
 80016b0:	4605      	mov	r5, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80016b2:	200a      	movs	r0, #10
 80016b4:	f7ff f84c 	bl	8000750 <chSchGoSleepTimeoutS>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	db0a      	blt.n	80016d2 <chEvtWaitAnyTimeout+0x42>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80016bc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80016be:	ea05 0403 	and.w	r4, r5, r3
  }
  ctp->p_epending &= ~m;
 80016c2:	ea23 0304 	bic.w	r3, r3, r4
 80016c6:	6373      	str	r3, [r6, #52]	; 0x34
 80016c8:	2300      	movs	r3, #0
 80016ca:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
 80016ce:	4620      	mov	r0, r4
}
 80016d0:	bd70      	pop	{r4, r5, r6, pc}
 80016d2:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80016d6:	4620      	mov	r0, r4
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	bf00      	nop
 80016dc:	20000d70 	.word	0x20000d70

080016e0 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80016e0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <chEvtWaitAllTimeout+0x44>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
 80016e4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80016e6:	699d      	ldr	r5, [r3, #24]
 80016e8:	2320      	movs	r3, #32
 80016ea:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80016ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016f0:	ea30 0203 	bics.w	r2, r0, r3
 80016f4:	d00b      	beq.n	800170e <chEvtWaitAllTimeout+0x2e>
 80016f6:	4608      	mov	r0, r1
    if (TIME_IMMEDIATE == time) {
 80016f8:	b911      	cbnz	r1, 8001700 <chEvtWaitAllTimeout+0x20>
 80016fa:	f380 8811 	msr	BASEPRI, r0
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001700:	622c      	str	r4, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8001702:	200b      	movs	r0, #11
 8001704:	f7ff f824 	bl	8000750 <chSchGoSleepTimeoutS>
 8001708:	2800      	cmp	r0, #0
 800170a:	db08      	blt.n	800171e <chEvtWaitAllTimeout+0x3e>
 800170c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800170e:	ea23 0304 	bic.w	r3, r3, r4
 8001712:	636b      	str	r3, [r5, #52]	; 0x34
 8001714:	2300      	movs	r3, #0
 8001716:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 800171a:	4620      	mov	r0, r4
}
 800171c:	bd38      	pop	{r3, r4, r5, pc}
 800171e:	2000      	movs	r0, #0
 8001720:	e7eb      	b.n	80016fa <chEvtWaitAllTimeout+0x1a>
 8001722:	bf00      	nop
 8001724:	20000d70 	.word	0x20000d70
	...

08001730 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001730:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <chMsgSend+0x3c>)
 8001734:	2220      	movs	r2, #32
 8001736:	699c      	ldr	r4, [r3, #24]
 8001738:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800173c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8001740:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001742:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001744:	6062      	str	r2, [r4, #4]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8001746:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001748:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 800174a:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 800174c:	7f02      	ldrb	r2, [r0, #28]
  tqp->p_prev = tp;
 800174e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001750:	2a0e      	cmp	r2, #14
 8001752:	d007      	beq.n	8001764 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8001754:	200c      	movs	r0, #12
 8001756:	f7fe ffe3 	bl	8000720 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800175a:	6a20      	ldr	r0, [r4, #32]
 800175c:	2300      	movs	r3, #0
 800175e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8001762:	bd38      	pop	{r3, r4, r5, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8001764:	f7fe ffc4 	bl	80006f0 <chSchReadyI>
 8001768:	e7f4      	b.n	8001754 <chMsgSend+0x24>
 800176a:	bf00      	nop
 800176c:	20000d70 	.word	0x20000d70

08001770 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001770:	b510      	push	{r4, lr}
 8001772:	2320      	movs	r3, #32
 8001774:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <chMsgWait+0x38>)
 800177a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800177c:	4613      	mov	r3, r2
 800177e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001782:	4298      	cmp	r0, r3
 8001784:	d008      	beq.n	8001798 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001786:	6801      	ldr	r1, [r0, #0]
 8001788:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 800178a:	220d      	movs	r2, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	7702      	strb	r2, [r0, #28]
 8001792:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8001796:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8001798:	200e      	movs	r0, #14
 800179a:	f7fe ffc1 	bl	8000720 <chSchGoSleepS>
 800179e:	69a2      	ldr	r2, [r4, #24]
 80017a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80017a2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80017a6:	e7ee      	b.n	8001786 <chMsgWait+0x16>
 80017a8:	20000d70 	.word	0x20000d70
 80017ac:	00000000 	.word	0x00000000

080017b0 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 80017b0:	b508      	push	{r3, lr}
 80017b2:	2320      	movs	r3, #32
 80017b4:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80017b8:	f7fe fff2 	bl	80007a0 <chSchWakeupS>
 80017bc:	2300      	movs	r3, #0
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	bd08      	pop	{r3, pc}
	...

080017d0 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80017d0:	b510      	push	{r4, lr}
 80017d2:	460b      	mov	r3, r1
  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 80017d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80017d8:	6041      	str	r1, [r0, #4]
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
 80017da:	4604      	mov	r4, r0

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80017dc:	6003      	str	r3, [r0, #0]
  mbp->mb_rdptr = buf;
 80017de:	60c3      	str	r3, [r0, #12]
  mbp->mb_wrptr = buf;
 80017e0:	6083      	str	r3, [r0, #8]
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
 80017e2:	4611      	mov	r1, r2
 80017e4:	301c      	adds	r0, #28
 80017e6:	f7ff fb0b 	bl	8000e00 <chSemObjectInit>
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80017ea:	f104 0010 	add.w	r0, r4, #16
 80017ee:	2100      	movs	r1, #0
}
 80017f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
  chSemObjectInit(&mbp->mb_emptysem, n);
  chSemObjectInit(&mbp->mb_fullsem, (cnt_t)0);
 80017f4:	f7ff bb04 	b.w	8000e00 <chSemObjectInit>
	...

08001800 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 8001800:	b510      	push	{r4, lr}
 8001802:	4604      	mov	r4, r0
  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8001804:	301c      	adds	r0, #28
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8001806:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8001808:	6861      	ldr	r1, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 800180a:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 800180c:	1ac9      	subs	r1, r1, r3

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
 800180e:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8001810:	1089      	asrs	r1, r1, #2
 8001812:	f7ff fafd 	bl	8000e10 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8001816:	f104 0010 	add.w	r0, r4, #16
 800181a:	2100      	movs	r1, #0
}
 800181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8001820:	f7ff baf6 	b.w	8000e10 <chSemResetI>
	...

08001830 <chMBReset>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8001830:	b508      	push	{r3, lr}
 8001832:	2320      	movs	r3, #32
 8001834:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMBResetI(mbp);
 8001838:	f7ff ffe2 	bl	8001800 <chMBResetI>
  chSchRescheduleS();
 800183c:	f7ff f830 	bl	80008a0 <chSchRescheduleS>
 8001840:	2300      	movs	r3, #0
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	bd08      	pop	{r3, pc}
	...

08001850 <chMBPost>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	2320      	movs	r3, #32
 8001854:	4604      	mov	r4, r0
 8001856:	460e      	mov	r6, r1
 8001858:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 800185c:	4611      	mov	r1, r2
 800185e:	301c      	adds	r0, #28
 8001860:	f7ff fb4e 	bl	8000f00 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001864:	4605      	mov	r5, r0
 8001866:	b978      	cbnz	r0, 8001888 <chMBPost+0x38>
    *mbp->mb_wrptr++ = msg;
 8001868:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800186a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800186c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 800186e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001870:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8001872:	bf28      	it	cs
 8001874:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8001876:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8001878:	f104 0010 	add.w	r0, r4, #16

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 800187c:	bf28      	it	cs
 800187e:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8001880:	f7ff fb7e 	bl	8000f80 <chSemSignalI>
    chSchRescheduleS();
 8001884:	f7ff f80c 	bl	80008a0 <chSchRescheduleS>
 8001888:	2300      	movs	r3, #0
 800188a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 800188e:	4628      	mov	r0, r5
 8001890:	bd70      	pop	{r4, r5, r6, pc}
 8001892:	bf00      	nop
	...

080018a0 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	6a43      	ldr	r3, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dd12      	ble.n	80018ce <chMBPostI+0x2e>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80018a8:	6884      	ldr	r4, [r0, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 80018aa:	6845      	ldr	r5, [r0, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80018ac:	1d22      	adds	r2, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 80018ae:	3b01      	subs	r3, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 80018b0:	42aa      	cmp	r2, r5
 80018b2:	6243      	str	r3, [r0, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 80018b4:	bf28      	it	cs
 80018b6:	6803      	ldrcs	r3, [r0, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80018b8:	6082      	str	r2, [r0, #8]
 80018ba:	6021      	str	r1, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 80018bc:	f100 0010 	add.w	r0, r0, #16
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 80018c0:	bf28      	it	cs
 80018c2:	f840 3c08 	strcs.w	r3, [r0, #-8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 80018c6:	f7ff fb5b 	bl	8000f80 <chSemSignalI>

  return MSG_OK;
 80018ca:	2000      	movs	r0, #0
 80018cc:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
	...

080018e0 <chMBPostAhead>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	2320      	movs	r3, #32
 80018e4:	4604      	mov	r4, r0
 80018e6:	460e      	mov	r6, r1
 80018e8:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80018ec:	4611      	mov	r1, r2
 80018ee:	301c      	adds	r0, #28
 80018f0:	f7ff fb06 	bl	8000f00 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80018f4:	4605      	mov	r5, r0
 80018f6:	b120      	cbz	r0, 8001902 <chMBPostAhead+0x22>
 80018f8:	2300      	movs	r3, #0
 80018fa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 80018fe:	4628      	mov	r0, r5
 8001900:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8001902:	68e3      	ldr	r3, [r4, #12]
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	3b04      	subs	r3, #4
 8001908:	4293      	cmp	r3, r2
 800190a:	60e3      	str	r3, [r4, #12]
 800190c:	d202      	bcs.n	8001914 <chMBPostAhead+0x34>
      mbp->mb_rdptr = mbp->mb_top - 1;
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	3b04      	subs	r3, #4
 8001912:	60e3      	str	r3, [r4, #12]
    }
    *mbp->mb_rdptr = msg;
 8001914:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8001916:	f104 0010 	add.w	r0, r4, #16
 800191a:	f7ff fb31 	bl	8000f80 <chSemSignalI>
    chSchRescheduleS();
 800191e:	f7fe ffbf 	bl	80008a0 <chSchRescheduleS>
 8001922:	2300      	movs	r3, #0
 8001924:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8001928:	4628      	mov	r0, r5
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	0000      	movs	r0, r0
	...

08001930 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001930:	6a42      	ldr	r2, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001932:	2a00      	cmp	r2, #0
 8001934:	dd11      	ble.n	800195a <chMBPostAheadI+0x2a>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8001936:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001938:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800193a:	6804      	ldr	r4, [r0, #0]
 800193c:	3b04      	subs	r3, #4
 800193e:	3a01      	subs	r2, #1
 8001940:	42a3      	cmp	r3, r4
 8001942:	6242      	str	r2, [r0, #36]	; 0x24
 8001944:	60c3      	str	r3, [r0, #12]
 8001946:	d202      	bcs.n	800194e <chMBPostAheadI+0x1e>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8001948:	6843      	ldr	r3, [r0, #4]
 800194a:	3b04      	subs	r3, #4
 800194c:	60c3      	str	r3, [r0, #12]
  }
  *mbp->mb_rdptr = msg;
 800194e:	6019      	str	r1, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8001950:	3010      	adds	r0, #16
 8001952:	f7ff fb15 	bl	8000f80 <chSemSignalI>

  return MSG_OK;
 8001956:	2000      	movs	r0, #0
 8001958:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800195a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195e:	4770      	bx	lr

08001960 <chMBFetch>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	2320      	movs	r3, #32
 8001964:	4604      	mov	r4, r0
 8001966:	460e      	mov	r6, r1
 8001968:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 800196c:	4611      	mov	r1, r2
 800196e:	3010      	adds	r0, #16
 8001970:	f7ff fac6 	bl	8000f00 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001974:	4605      	mov	r5, r0
 8001976:	b980      	cbnz	r0, 800199a <chMBFetch+0x3a>
    *msgp = *mbp->mb_rdptr++;
 8001978:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 800197a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8001980:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001982:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8001984:	bf28      	it	cs
 8001986:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001988:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 800198a:	f104 001c 	add.w	r0, r4, #28

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 800198e:	bf28      	it	cs
 8001990:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8001992:	f7ff faf5 	bl	8000f80 <chSemSignalI>
    chSchRescheduleS();
 8001996:	f7fe ff83 	bl	80008a0 <chSchRescheduleS>
 800199a:	2300      	movs	r3, #0
 800199c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 80019a0:	4628      	mov	r0, r5
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
	...

080019b0 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80019b0:	6983      	ldr	r3, [r0, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dd14      	ble.n	80019e0 <chMBFetchI+0x30>
 80019b6:	1e5a      	subs	r2, r3, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80019b8:	68c3      	ldr	r3, [r0, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80019ba:	b510      	push	{r4, lr}
 80019bc:	6182      	str	r2, [r0, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80019be:	6842      	ldr	r2, [r0, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	3304      	adds	r3, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 80019c4:	4293      	cmp	r3, r2

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80019c6:	60c3      	str	r3, [r0, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80019c8:	bf28      	it	cs
 80019ca:	6803      	ldrcs	r3, [r0, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80019cc:	600c      	str	r4, [r1, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 80019ce:	f100 001c 	add.w	r0, r0, #28
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80019d2:	bf28      	it	cs
 80019d4:	f840 3c10 	strcs.w	r3, [r0, #-16]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80019d8:	f7ff fad2 	bl	8000f80 <chSemSignalI>

  return MSG_OK;
 80019dc:	2000      	movs	r0, #0
 80019de:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
	...

080019f0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 80019f0:	b430      	push	{r4, r5}
 80019f2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80019f4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80019f6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80019f8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80019fa:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80019fc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80019fe:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001a00:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001a02:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8001a04:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8001a06:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001a08:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 8001a0a:	bc30      	pop	{r4, r5}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001a10:	2100      	movs	r1, #0
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001a12:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001a14:	6081      	str	r1, [r0, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001a16:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8001a18:	6142      	str	r2, [r0, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001a1a:	f06f 0101 	mvn.w	r1, #1
 8001a1e:	f7ff b8df 	b.w	8000be0 <chThdDequeueAllI>
 8001a22:	bf00      	nop
	...

08001a30 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001a30:	6983      	ldr	r3, [r0, #24]
 8001a32:	6942      	ldr	r2, [r0, #20]
 8001a34:	429a      	cmp	r2, r3
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001a36:	b510      	push	{r4, lr}
 8001a38:	6883      	ldr	r3, [r0, #8]
 8001a3a:	d00f      	beq.n	8001a5c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001a3c:	3301      	adds	r3, #1
  *iqp->q_wrptr++ = b;
 8001a3e:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8001a40:	6083      	str	r3, [r0, #8]
  *iqp->q_wrptr++ = b;
 8001a42:	6144      	str	r4, [r0, #20]
 8001a44:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001a46:	6942      	ldr	r2, [r0, #20]
 8001a48:	6903      	ldr	r3, [r0, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d301      	bcc.n	8001a52 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 8001a4e:	68c3      	ldr	r3, [r0, #12]
 8001a50:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8001a52:	2100      	movs	r1, #0
 8001a54:	f7ff f8b4 	bl	8000bc0 <chThdDequeueNextI>

  return Q_OK;
 8001a58:	2000      	movs	r0, #0
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ed      	beq.n	8001a3c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8001a60:	f06f 0003 	mvn.w	r0, #3
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	bf00      	nop
	...

08001a70 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	2320      	movs	r3, #32
 8001a74:	460e      	mov	r6, r1
 8001a76:	4604      	mov	r4, r0
 8001a78:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8001a7c:	69c3      	ldr	r3, [r0, #28]
 8001a7e:	b12b      	cbz	r3, 8001a8c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001a80:	4798      	blx	r3
 8001a82:	e003      	b.n	8001a8c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a84:	f7ff f884 	bl	8000b90 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	db15      	blt.n	8001ab8 <chIQGetTimeout+0x48>
 8001a8c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a8e:	4631      	mov	r1, r6
 8001a90:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	d0f6      	beq.n	8001a84 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001a96:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a98:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001a9a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a9c:	428b      	cmp	r3, r1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001a9e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  b = *iqp->q_rdptr++;
 8001aa2:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001aa4:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001aa6:	bf28      	it	cs
 8001aa8:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001aaa:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001aac:	bf28      	it	cs
 8001aae:	61a3      	strcs	r3, [r4, #24]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
 8001abe:	bf00      	nop

08001ac0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	4689      	mov	r9, r1
 8001aca:	4693      	mov	fp, r2
 8001acc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001ace:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001ad2:	2720      	movs	r7, #32
 8001ad4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001ad8:	2600      	movs	r6, #0
 8001ada:	9701      	str	r7, [sp, #4]
 8001adc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8001ade:	f1b8 0f00 	cmp.w	r8, #0
 8001ae2:	d005      	beq.n	8001af0 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	47c0      	blx	r8
 8001ae8:	e002      	b.n	8001af0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001aea:	f7ff f851 	bl	8000b90 <chThdEnqueueTimeoutS>
 8001aee:	b9d8      	cbnz	r0, 8001b28 <chIQReadTimeout+0x68>
 8001af0:	68a7      	ldr	r7, [r4, #8]
 8001af2:	4629      	mov	r1, r5
 8001af4:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001af6:	2f00      	cmp	r7, #0
 8001af8:	d0f7      	beq.n	8001aea <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001afa:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001afc:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 8001afe:	1c51      	adds	r1, r2, #1
 8001b00:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001b02:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001b04:	7813      	ldrb	r3, [r2, #0]
 8001b06:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001b0a:	6923      	ldr	r3, [r4, #16]
 8001b0c:	69a2      	ldr	r2, [r4, #24]
 8001b0e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001b10:	bf24      	itt	cs
 8001b12:	68e3      	ldrcs	r3, [r4, #12]
 8001b14:	61a3      	strcs	r3, [r4, #24]
 8001b16:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8001b1a:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001b1c:	45b3      	cmp	fp, r6
 8001b1e:	d005      	beq.n	8001b2c <chIQReadTimeout+0x6c>
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	e7da      	b.n	8001ade <chIQReadTimeout+0x1e>
 8001b28:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	b003      	add	sp, #12
 8001b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001b40 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8001b40:	b430      	push	{r4, r5}
 8001b42:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001b44:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001b46:	188d      	adds	r5, r1, r2
 8001b48:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001b4a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001b4c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001b4e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8001b50:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8001b52:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8001b54:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001b56:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 8001b58:	bc30      	pop	{r4, r5}
 8001b5a:	4770      	bx	lr
 8001b5c:	0000      	movs	r0, r0
	...

08001b60 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 8001b60:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b62:	6902      	ldr	r2, [r0, #16]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001b64:	68c4      	ldr	r4, [r0, #12]
 8001b66:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b68:	1b12      	subs	r2, r2, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8001b6a:	6144      	str	r4, [r0, #20]
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8001b6c:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001b70:	6082      	str	r2, [r0, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
}
 8001b72:	bc10      	pop	{r4}
  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8001b74:	f7ff b834 	b.w	8000be0 <chThdDequeueAllI>
	...

08001b80 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	4604      	mov	r4, r0
 8001b84:	460f      	mov	r7, r1
 8001b86:	4616      	mov	r6, r2
 8001b88:	2320      	movs	r3, #32
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	e003      	b.n	8001b98 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001b90:	f7fe fffe 	bl	8000b90 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001b94:	2800      	cmp	r0, #0
 8001b96:	db18      	blt.n	8001bca <chOQPutTimeout+0x4a>
 8001b98:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001b9a:	4631      	mov	r1, r6
 8001b9c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	d0f6      	beq.n	8001b90 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001ba2:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001ba4:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001baa:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001bac:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001bae:	6923      	ldr	r3, [r4, #16]
 8001bb0:	6962      	ldr	r2, [r4, #20]
 8001bb2:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001bb4:	bf24      	itt	cs
 8001bb6:	68e3      	ldrcs	r3, [r4, #12]
 8001bb8:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8001bba:	69e3      	ldr	r3, [r4, #28]
 8001bbc:	b10b      	cbz	r3, 8001bc2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4798      	blx	r3
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bca:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 8001bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bd0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001bd2:	6982      	ldr	r2, [r0, #24]
 8001bd4:	6943      	ldr	r3, [r0, #20]
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	6883      	ldr	r3, [r0, #8]
 8001bda:	d00e      	beq.n	8001bfa <chOQGetI+0x2a>
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8001bdc:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001bde:	1c51      	adds	r1, r2, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001be0:	3301      	adds	r3, #1
 8001be2:	6083      	str	r3, [r0, #8]
  b = *oqp->q_rdptr++;
 8001be4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001be6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8001be8:	7814      	ldrb	r4, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001bea:	d301      	bcc.n	8001bf0 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 8001bec:	68c3      	ldr	r3, [r0, #12]
 8001bee:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f7fe ffe5 	bl	8000bc0 <chThdDequeueNextI>

  return (msg_t)b;
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0ee      	beq.n	8001bdc <chOQGetI+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8001bfe:	f06f 0002 	mvn.w	r0, #2
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
	...

08001c10 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c14:	b083      	sub	sp, #12
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
 8001c1a:	4616      	mov	r6, r2
 8001c1c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001c1e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001c22:	f04f 0920 	mov.w	r9, #32
 8001c26:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8001c2a:	2700      	movs	r7, #0
 8001c2c:	46ba      	mov	sl, r7
 8001c2e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c30:	f105 0b01 	add.w	fp, r5, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c34:	1e59      	subs	r1, r3, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001c36:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001c38:	b1fb      	cbz	r3, 8001c7a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c3a:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c3c:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	6161      	str	r1, [r4, #20]
 8001c42:	7829      	ldrb	r1, [r5, #0]
 8001c44:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001c46:	6923      	ldr	r3, [r4, #16]
 8001c48:	6961      	ldr	r1, [r4, #20]
 8001c4a:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001c4c:	bf24      	itt	cs
 8001c4e:	68e3      	ldrcs	r3, [r4, #12]
 8001c50:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001c52:	f1b8 0f00 	cmp.w	r8, #0
 8001c56:	d000      	beq.n	8001c5a <chOQWriteTimeout+0x4a>
      nfy(oqp);
 8001c58:	47c0      	blx	r8
 8001c5a:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001c5e:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8001c60:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001c64:	d013      	beq.n	8001c8e <chOQWriteTimeout+0x7e>
 8001c66:	f389 8811 	msr	BASEPRI, r9
 8001c6a:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001c6c:	465d      	mov	r5, fp
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001c6e:	1e59      	subs	r1, r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001c70:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001c74:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1df      	bne.n	8001c3a <chOQWriteTimeout+0x2a>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001c7a:	9901      	ldr	r1, [sp, #4]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f7fe ff86 	bl	8000b90 <chThdEnqueueTimeoutS>
 8001c84:	9b00      	ldr	r3, [sp, #0]
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0d1      	beq.n	8001c2e <chOQWriteTimeout+0x1e>
 8001c8a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001c8e:	4638      	mov	r0, r7
 8001c90:	b003      	add	sp, #12
 8001c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
	...

08001ca0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001ca4:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001ca6:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001ca8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001cac:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001cb0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20001e07 	.word	0x20001e07
 8001cbc:	20020000 	.word	0x20020000
 8001cc0:	20000ec4 	.word	0x20000ec4
 8001cc4:	20000ec0 	.word	0x20000ec0
	...

08001cd0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001cd0:	b410      	push	{r4}
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001cd8:	4c09      	ldr	r4, [pc, #36]	; (8001d00 <chCoreAlloc+0x30>)
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <chCoreAlloc+0x34>)
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001ce0:	1dc3      	adds	r3, r0, #7
 8001ce2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001ce6:	1a89      	subs	r1, r1, r2
 8001ce8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8001cea:	bf9d      	ittte	ls
 8001cec:	189b      	addls	r3, r3, r2
 8001cee:	6023      	strls	r3, [r4, #0]

  return p;
 8001cf0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001cf2:	2000      	movhi	r0, #0
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8001cfa:	bc10      	pop	{r4}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000ec4 	.word	0x20000ec4
 8001d04:	20000ec0 	.word	0x20000ec0
	...

08001d10 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 8001d10:	4a02      	ldr	r2, [pc, #8]	; (8001d1c <chCoreGetStatusX+0xc>)
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <chCoreGetStatusX+0x10>)
 8001d14:	6810      	ldr	r0, [r2, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 8001d18:	1ac0      	subs	r0, r0, r3
 8001d1a:	4770      	bx	lr
 8001d1c:	20000ec0 	.word	0x20000ec0
 8001d20:	20000ec4 	.word	0x20000ec4
	...

08001d30 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <_heap_init+0x14>)
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <_heap_init+0x18>)
 8001d34:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001d36:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8001d3e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001d40:	f7ff b97e 	b.w	8001040 <chMtxObjectInit>
 8001d44:	20000ec8 	.word	0x20000ec8
 8001d48:	08001cd1 	.word	0x08001cd1
 8001d4c:	00000000 	.word	0x00000000

08001d50 <chHeapObjectInit>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001d50:	2300      	movs	r3, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001d52:	3a08      	subs	r2, #8
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8001d54:	6081      	str	r1, [r0, #8]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001d56:	6003      	str	r3, [r0, #0]
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8001d58:	60c3      	str	r3, [r0, #12]
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 8001d5a:	3010      	adds	r0, #16

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001d5c:	604a      	str	r2, [r1, #4]
  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
 8001d5e:	600b      	str	r3, [r1, #0]
  hp->h.size = size - sizeof(union heap_header);
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->h_mtx);
 8001d60:	f7ff b96e 	b.w	8001040 <chMtxObjectInit>
	...

08001d70 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001d72:	4e21      	ldr	r6, [pc, #132]	; (8001df8 <chHeapAlloc+0x88>)
 8001d74:	2800      	cmp	r0, #0
 8001d76:	bf18      	it	ne
 8001d78:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001d7a:	f106 0710 	add.w	r7, r6, #16

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8001d7e:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001d80:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8001d82:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8001d86:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 8001d8a:	f7ff f9c9 	bl	8001120 <chMtxLock>
  while (qp->h.u.next != NULL) {
 8001d8e:	e003      	b.n	8001d98 <chHeapAlloc+0x28>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8001d90:	6843      	ldr	r3, [r0, #4]
 8001d92:	429d      	cmp	r5, r3
 8001d94:	d912      	bls.n	8001dbc <chHeapAlloc+0x4c>
 8001d96:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8001d98:	6820      	ldr	r0, [r4, #0]
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d1f8      	bne.n	8001d90 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8001d9e:	4638      	mov	r0, r7
 8001da0:	f7ff f9e6 	bl	8001170 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8001da4:	6833      	ldr	r3, [r6, #0]
 8001da6:	b32b      	cbz	r3, 8001df4 <chHeapAlloc+0x84>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8001da8:	f105 0008 	add.w	r0, r5, #8
 8001dac:	4798      	blx	r3
    if (hp != NULL) {
 8001dae:	b308      	cbz	r0, 8001df4 <chHeapAlloc+0x84>
      hp->h.u.heap = heapp;
 8001db0:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8001db2:	6045      	str	r5, [r0, #4]
      hp++;
 8001db4:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8001db8:	4620      	mov	r0, r4
 8001dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8001dbc:	f105 0208 	add.w	r2, r5, #8
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d209      	bcs.n	8001dd8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8001dc4:	6803      	ldr	r3, [r0, #0]
 8001dc6:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001dc8:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8001dca:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001dcc:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8001dd0:	f7ff f9ce 	bl	8001170 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001dd8:	f06f 0107 	mvn.w	r1, #7
 8001ddc:	1b49      	subs	r1, r1, r5
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8001dde:	eb00 0e02 	add.w	lr, r0, r2
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001de2:	440b      	add	r3, r1
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8001de4:	6801      	ldr	r1, [r0, #0]
 8001de6:	5081      	str	r1, [r0, r2]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001de8:	f8ce 3004 	str.w	r3, [lr, #4]
        qp->h.u.next = fp;
 8001dec:	f8c4 e000 	str.w	lr, [r4]
        hp->h.size = size;
 8001df0:	6045      	str	r5, [r0, #4]
 8001df2:	e7e9      	b.n	8001dc8 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8001df4:	2400      	movs	r4, #0
 8001df6:	e7df      	b.n	8001db8 <chHeapAlloc+0x48>
 8001df8:	20000ec8 	.word	0x20000ec8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8001e02:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001e06:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001e0a:	4606      	mov	r6, r0
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8001e0c:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001e10:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8001e12:	4638      	mov	r0, r7
 8001e14:	f7ff f984 	bl	8001120 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001e18:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001e1a:	42ab      	cmp	r3, r5
 8001e1c:	d004      	beq.n	8001e28 <chHeapFree+0x28>
 8001e1e:	42a3      	cmp	r3, r4
 8001e20:	d302      	bcc.n	8001e28 <chHeapFree+0x28>
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	42ab      	cmp	r3, r5
 8001e26:	d1fa      	bne.n	8001e1e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001e28:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001e2a:	b11a      	cbz	r2, 8001e34 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001e2c:	4294      	cmp	r4, r2
 8001e2e:	d301      	bcc.n	8001e34 <chHeapFree+0x34>
 8001e30:	4613      	mov	r3, r2
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
  }
 8001e32:	e7f2      	b.n	8001e1a <chHeapFree+0x1a>
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8001e34:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8001e38:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001e3a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8001e3e:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8001e42:	f101 0208 	add.w	r2, r1, #8
 8001e46:	18a0      	adds	r0, r4, r2
 8001e48:	42a8      	cmp	r0, r5
 8001e4a:	d00a      	beq.n	8001e62 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	f101 0208 	add.w	r2, r1, #8
 8001e52:	441a      	add	r2, r3
 8001e54:	4294      	cmp	r4, r2
 8001e56:	d012      	beq.n	8001e7e <chHeapFree+0x7e>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e58:	4638      	mov	r0, r7

  return;
}
 8001e5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e5e:	f7ff b987 	b.w	8001170 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001e62:	6840      	ldr	r0, [r0, #4]
 8001e64:	4401      	add	r1, r0
 8001e66:	3108      	adds	r1, #8
 8001e68:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001e6c:	58a2      	ldr	r2, [r4, r2]
 8001e6e:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	f101 0208 	add.w	r2, r1, #8
 8001e78:	441a      	add	r2, r3
 8001e7a:	4294      	cmp	r4, r2
 8001e7c:	d1ec      	bne.n	8001e58 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8001e7e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001e82:	440a      	add	r2, r1
 8001e84:	3208      	adds	r2, #8
 8001e86:	605a      	str	r2, [r3, #4]
        qp->h.u.next = hp->h.u.next;
 8001e88:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8001e8c:	601a      	str	r2, [r3, #0]
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e8e:	4638      	mov	r0, r7

  return;
}
 8001e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e94:	f7ff b96c 	b.w	8001170 <chMtxUnlock>
	...

08001ea0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001ea0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001ea2:	4c0f      	ldr	r4, [pc, #60]	; (8001ee0 <chHeapStatus+0x40>)
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	bf18      	it	ne
 8001ea8:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8001eaa:	f104 0510 	add.w	r5, r4, #16
 8001eae:	4628      	mov	r0, r5
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8001eb0:	460e      	mov	r6, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8001eb2:	f7ff f935 	bl	8001120 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001eb6:	68a3      	ldr	r3, [r4, #8]
 8001eb8:	b173      	cbz	r3, 8001ed8 <chHeapStatus+0x38>
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 8001ebe:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001ec0:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8001ec2:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8001ec4:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 8001eca:	b106      	cbz	r6, 8001ece <chHeapStatus+0x2e>
    *sizep = sz;
 8001ecc:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f7ff f94e 	bl	8001170 <chMtxUnlock>

  return n;
}
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8001ed8:	461a      	mov	r2, r3
  n = 0;
 8001eda:	461c      	mov	r4, r3
 8001edc:	e7f5      	b.n	8001eca <chHeapStatus+0x2a>
 8001ede:	bf00      	nop
 8001ee0:	20000ec8 	.word	0x20000ec8
	...

08001ef0 <chPoolObjectInit>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001ef0:	2300      	movs	r3, #0
  mp->mp_object_size = size;
 8001ef2:	6041      	str	r1, [r0, #4]
  mp->mp_provider = provider;
 8001ef4:	6082      	str	r2, [r0, #8]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001ef6:	6003      	str	r3, [r0, #0]
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	0000      	movs	r0, r0
	...

08001f00 <chPoolLoadArray>:
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001f00:	b172      	cbz	r2, 8001f20 <chPoolLoadArray+0x20>
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 8001f02:	b430      	push	{r4, r5}
 8001f04:	2520      	movs	r5, #32
 8001f06:	2400      	movs	r4, #0
 8001f08:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	600b      	str	r3, [r1, #0]
  mp->mp_next = php;
 8001f10:	6001      	str	r1, [r0, #0]
 8001f12:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001f16:	6843      	ldr	r3, [r0, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001f18:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001f1a:	4419      	add	r1, r3
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001f1c:	d1f4      	bne.n	8001f08 <chPoolLoadArray+0x8>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
    /*lint -restore*/
    n--;
  }
}
 8001f1e:	bc30      	pop	{r4, r5}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
	...

08001f30 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001f30:	b508      	push	{r3, lr}
 8001f32:	2220      	movs	r2, #32
 8001f34:	4603      	mov	r3, r0
 8001f36:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 8001f3a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8001f3c:	b128      	cbz	r0, 8001f4a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8001f3e:	6802      	ldr	r2, [r0, #0]
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001f48:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d0f8      	beq.n	8001f42 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001f50:	6858      	ldr	r0, [r3, #4]
 8001f52:	4790      	blx	r2
 8001f54:	2300      	movs	r3, #0
 8001f56:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001f5a:	bd08      	pop	{r3, pc}
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <chPoolFree>:
 8001f60:	2320      	movs	r3, #32
 8001f62:	f383 8811 	msr	BASEPRI, r3
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	2300      	movs	r3, #0
  mp->mp_next = php;
 8001f6c:	6001      	str	r1, [r0, #0]
 8001f6e:	f383 8811 	msr	BASEPRI, r3
 8001f72:	4770      	bx	lr
	...

08001f80 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001f80:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001f84:	3320      	adds	r3, #32
 8001f86:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f383 8811 	msr	BASEPRI, r3
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
	...

08001fa0 <_port_irq_epilogue>:
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <_port_irq_epilogue+0x44>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001fae:	d102      	bne.n	8001fb6 <_port_irq_epilogue+0x16>
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8001fb6:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001fb8:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc0:	f844 3c04 	str.w	r3, [r4, #-4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001fc4:	f1a4 0320 	sub.w	r3, r4, #32
 8001fc8:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001fcc:	f7fe fc18 	bl	8000800 <chSchIsPreemptionRequired>
 8001fd0:	b118      	cbz	r0, 8001fda <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <_port_irq_epilogue+0x48>)
 8001fd4:	f844 3c08 	str.w	r3, [r4, #-8]
 8001fd8:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <_port_irq_epilogue+0x4c>)
 8001fdc:	f844 3c08 	str.w	r3, [r4, #-8]
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	080002a1 	.word	0x080002a1
 8001fec:	080002a4 	.word	0x080002a4

08001ff0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001ff0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001ff2:	f001 f84d 	bl	8003090 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <halInit+0x2c>)
 8001ff8:	f001 f92a 	bl	8003250 <_pal_lld_init>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 8001ffc:	f000 f830 	bl	8002060 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8002000:	f000 f8a6 	bl	8002150 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8002004:	f000 fab4 	bl	8002570 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8002008:	f000 fb22 	bl	8002650 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800200c:	f000 f9a0 	bl	8002350 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8002010:	f002 fc0e 	bl	8004830 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8002014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8002018:	f000 b802 	b.w	8002020 <stInit>
 800201c:	080092a0 	.word	0x080092a0

08002020 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8002020:	f001 b8ee 	b.w	8003200 <st_lld_init>
	...

08002030 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8002034:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002036:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002038:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800203a:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	4770      	bx	lr

08002040 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	0000      	movs	r0, r0
	...

08002050 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002054:	6358      	str	r0, [r3, #52]	; 0x34
 8002056:	4770      	bx	lr
	...

08002060 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8002060:	f002 b9e6 	b.w	8004430 <pwm_lld_init>
	...

08002070 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8002070:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8002072:	2201      	movs	r2, #1
 8002074:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8002076:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8002078:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 800207a:	7403      	strb	r3, [r0, #16]
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8002080:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002082:	2320      	movs	r3, #32
 8002084:	4604      	mov	r4, r0
 8002086:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 800208a:	684b      	ldr	r3, [r1, #4]
 800208c:	6083      	str	r3, [r0, #8]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 800208e:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 8002090:	f002 fa06 	bl	80044a0 <pwm_lld_start>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8002094:	2202      	movs	r2, #2
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8002096:	2300      	movs	r3, #0
  pwmp->state = PWM_READY;
 8002098:	7022      	strb	r2, [r4, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 800209a:	60e3      	str	r3, [r4, #12]
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	bf00      	nop
	...

080020b0 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2420      	movs	r4, #32
 80020b4:	f384 8811 	msr	BASEPRI, r4

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 80020b8:	2401      	movs	r4, #1
 80020ba:	68c6      	ldr	r6, [r0, #12]
 80020bc:	fa04 f301 	lsl.w	r3, r4, r1
 80020c0:	4333      	orrs	r3, r6
 80020c2:	60c3      	str	r3, [r0, #12]
 80020c4:	f002 faac 	bl	8004620 <pwm_lld_enable_channel>
 80020c8:	2300      	movs	r3, #0
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	bd70      	pop	{r4, r5, r6, pc}

080020d0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80020d0:	300c      	adds	r0, #12
 80020d2:	f7ff bcf5 	b.w	8001ac0 <chIQReadTimeout>
 80020d6:	bf00      	nop
	...

080020e0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80020e0:	300c      	adds	r0, #12
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e6:	f7ff bceb 	b.w	8001ac0 <chIQReadTimeout>
 80020ea:	bf00      	nop
 80020ec:	0000      	movs	r0, r0
	...

080020f0 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80020f0:	3030      	adds	r0, #48	; 0x30
 80020f2:	f7ff bd8d 	b.w	8001c10 <chOQWriteTimeout>
 80020f6:	bf00      	nop
	...

08002100 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002100:	3030      	adds	r0, #48	; 0x30
 8002102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002106:	f7ff bd83 	b.w	8001c10 <chOQWriteTimeout>
 800210a:	bf00      	nop
 800210c:	0000      	movs	r0, r0
	...

08002110 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002110:	300c      	adds	r0, #12
 8002112:	f7ff bcad 	b.w	8001a70 <chIQGetTimeout>
 8002116:	bf00      	nop
	...

08002120 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002120:	300c      	adds	r0, #12
 8002122:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002126:	f7ff bca3 	b.w	8001a70 <chIQGetTimeout>
 800212a:	bf00      	nop
 800212c:	0000      	movs	r0, r0
	...

08002130 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002130:	3030      	adds	r0, #48	; 0x30
 8002132:	f7ff bd25 	b.w	8001b80 <chOQPutTimeout>
 8002136:	bf00      	nop
	...

08002140 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002140:	3030      	adds	r0, #48	; 0x30
 8002142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002146:	f7ff bd1b 	b.w	8001b80 <chOQPutTimeout>
 800214a:	bf00      	nop
 800214c:	0000      	movs	r0, r0
	...

08002150 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8002150:	f002 bb06 	b.w	8004760 <sd_lld_init>
	...

08002160 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002160:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002164:	4604      	mov	r4, r0
 8002166:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 8002168:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800216c:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800216e:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002170:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002172:	460b      	mov	r3, r1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002174:	6060      	str	r0, [r4, #4]
 8002176:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800217a:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800217e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002180:	2210      	movs	r2, #16
 8002182:	f7ff fc35 	bl	80019f0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	462b      	mov	r3, r5
 800218a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800218e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002192:	2210      	movs	r2, #16
 8002194:	f7ff fcd4 	bl	8001b40 <chOQObjectInit>
}
 8002198:	b002      	add	sp, #8
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	08009100 	.word	0x08009100

080021a0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80021a0:	b510      	push	{r4, lr}
 80021a2:	2320      	movs	r3, #32
 80021a4:	4604      	mov	r4, r0
 80021a6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 80021aa:	f002 fae9 	bl	8004780 <sd_lld_start>
  sdp->state = SD_READY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	7223      	strb	r3, [r4, #8]
 80021b2:	2300      	movs	r3, #0
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	bd10      	pop	{r4, pc}
 80021ba:	bf00      	nop
 80021bc:	0000      	movs	r0, r0
	...

080021c0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80021c0:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80021c2:	6943      	ldr	r3, [r0, #20]
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80021c8:	b13b      	cbz	r3, 80021da <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80021ca:	4629      	mov	r1, r5
 80021cc:	f104 000c 	add.w	r0, r4, #12
 80021d0:	f7ff fc2e 	bl	8001a30 <chIQPutI>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	db0b      	blt.n	80021f0 <sdIncomingDataI+0x30>
 80021d8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80021da:	2104      	movs	r1, #4
 80021dc:	4408      	add	r0, r1
 80021de:	f7ff f977 	bl	80014d0 <chEvtBroadcastFlagsI>
 80021e2:	4629      	mov	r1, r5
 80021e4:	f104 000c 	add.w	r0, r4, #12
 80021e8:	f7ff fc22 	bl	8001a30 <chIQPutI>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	daf3      	bge.n	80021d8 <sdIncomingDataI+0x18>
 80021f0:	1d20      	adds	r0, r4, #4
 80021f2:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f8:	f7ff b96a 	b.w	80014d0 <chEvtBroadcastFlagsI>
 80021fc:	0000      	movs	r0, r0
	...

08002200 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8002200:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002202:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002204:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002208:	6813      	ldr	r3, [r2, #0]
 800220a:	7819      	ldrb	r1, [r3, #0]
 800220c:	2904      	cmp	r1, #4
 800220e:	d000      	beq.n	8002212 <onotify+0x12>
 8002210:	bd10      	pop	{r4, pc}
 8002212:	7a21      	ldrb	r1, [r4, #8]
 8002214:	2902      	cmp	r1, #2
 8002216:	d1fb      	bne.n	8002210 <onotify+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8002218:	7910      	ldrb	r0, [r2, #4]
 800221a:	8919      	ldrh	r1, [r3, #8]
 800221c:	2201      	movs	r2, #1
 800221e:	fa02 f300 	lsl.w	r3, r2, r0
 8002222:	ea13 0201 	ands.w	r2, r3, r1
 8002226:	d1f3      	bne.n	8002210 <onotify+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8002228:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800222a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800222c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800222e:	1acb      	subs	r3, r1, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8002230:	1a1b      	subs	r3, r3, r0
 8002232:	d0ed      	beq.n	8002210 <onotify+0x10>
 8002234:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 8002238:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800223c:	7911      	ldrb	r1, [r2, #4]
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8002244:	f000 fa5c 	bl	8002700 <usbPrepareQueuedTransmit>
 8002248:	2320      	movs	r3, #32
 800224a:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800224e:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    }
  }
}
 8002252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8002256:	7919      	ldrb	r1, [r3, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	f000 ba71 	b.w	8002740 <usbStartTransmitI>
 800225e:	bf00      	nop

08002260 <inotify>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8002260:	b538      	push	{r3, r4, r5, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002262:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002264:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8002268:	6813      	ldr	r3, [r2, #0]
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	2904      	cmp	r1, #4
 800226e:	d000      	beq.n	8002272 <inotify+0x12>
 8002270:	bd38      	pop	{r3, r4, r5, pc}
 8002272:	7a21      	ldrb	r1, [r4, #8]
 8002274:	2902      	cmp	r1, #2
 8002276:	d1fb      	bne.n	8002270 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002278:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800227a:	8959      	ldrh	r1, [r3, #10]
 800227c:	2201      	movs	r2, #1
 800227e:	4082      	lsls	r2, r0
 8002280:	400a      	ands	r2, r1
 8002282:	d1f5      	bne.n	8002270 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002284:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8002288:	69a1      	ldr	r1, [r4, #24]
 800228a:	69e0      	ldr	r0, [r4, #28]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	6965      	ldr	r5, [r4, #20]
 8002290:	8a5b      	ldrh	r3, [r3, #18]
 8002292:	1a40      	subs	r0, r0, r1
 8002294:	1b41      	subs	r1, r0, r5
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8002296:	428b      	cmp	r3, r1
 8002298:	d8ea      	bhi.n	8002270 <inotify+0x10>
 800229a:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
      usbPrepareQueuedReceive(sdup->config->usbp,
 800229e:	fbb1 f1f3 	udiv	r1, r1, r3
 80022a2:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80022a6:	fb03 f301 	mul.w	r3, r3, r1
 80022aa:	6810      	ldr	r0, [r2, #0]
 80022ac:	7951      	ldrb	r1, [r2, #5]
 80022ae:	f104 020c 	add.w	r2, r4, #12
 80022b2:	f000 fa15 	bl	80026e0 <usbPrepareQueuedReceive>
 80022b6:	2320      	movs	r3, #32
 80022b8:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80022bc:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80022c0:	7959      	ldrb	r1, [r3, #5]
 80022c2:	6818      	ldr	r0, [r3, #0]
    }
  }
}
 80022c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80022c8:	f000 ba2a 	b.w	8002720 <usbStartReceiveI>
 80022cc:	0000      	movs	r0, r0
	...

080022d0 <readt>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 80022d0:	300c      	adds	r0, #12
 80022d2:	f7ff bbf5 	b.w	8001ac0 <chIQReadTimeout>
 80022d6:	bf00      	nop
	...

080022e0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 80022e0:	300c      	adds	r0, #12
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e6:	f7ff bbeb 	b.w	8001ac0 <chIQReadTimeout>
 80022ea:	bf00      	nop
 80022ec:	0000      	movs	r0, r0
	...

080022f0 <writet>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 80022f0:	3030      	adds	r0, #48	; 0x30
 80022f2:	f7ff bc8d 	b.w	8001c10 <chOQWriteTimeout>
 80022f6:	bf00      	nop
	...

08002300 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8002300:	3030      	adds	r0, #48	; 0x30
 8002302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002306:	f7ff bc83 	b.w	8001c10 <chOQWriteTimeout>
 800230a:	bf00      	nop
 800230c:	0000      	movs	r0, r0
	...

08002310 <gett>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8002310:	300c      	adds	r0, #12
 8002312:	f7ff bbad 	b.w	8001a70 <chIQGetTimeout>
 8002316:	bf00      	nop
	...

08002320 <get>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8002320:	300c      	adds	r0, #12
 8002322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002326:	f7ff bba3 	b.w	8001a70 <chIQGetTimeout>
 800232a:	bf00      	nop
 800232c:	0000      	movs	r0, r0
	...

08002330 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8002330:	3030      	adds	r0, #48	; 0x30
 8002332:	f7ff bc25 	b.w	8001b80 <chOQPutTimeout>
 8002336:	bf00      	nop
	...

08002340 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002340:	3030      	adds	r0, #48	; 0x30
 8002342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002346:	f7ff bc1b 	b.w	8001b80 <chOQPutTimeout>
 800234a:	bf00      	nop
 800234c:	0000      	movs	r0, r0
	...

08002350 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
	...

08002360 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8002360:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 8002362:	4603      	mov	r3, r0
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <sduObjectInit+0x40>)
 8002366:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800236a:	b082      	sub	sp, #8

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800236c:	2201      	movs	r2, #1
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800236e:	4604      	mov	r4, r0

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 8002370:	9000      	str	r0, [sp, #0]
 8002372:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8002376:	6043      	str	r3, [r0, #4]
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8002378:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <sduObjectInit+0x44>)
 800237c:	300c      	adds	r0, #12
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	f7ff fb35 	bl	80019f0 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 8002386:	9400      	str	r4, [sp, #0]
 8002388:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800238c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <sduObjectInit+0x48>)
 8002392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002396:	f7ff fbd3 	bl	8001b40 <chOQObjectInit>
}
 800239a:	b002      	add	sp, #8
 800239c:	bd10      	pop	{r4, pc}
 800239e:	bf00      	nop
 80023a0:	08009120 	.word	0x08009120
 80023a4:	08002261 	.word	0x08002261
 80023a8:	08002201 	.word	0x08002201
 80023ac:	00000000 	.word	0x00000000

080023b0 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 80023b0:	680b      	ldr	r3, [r1, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80023b8:	790a      	ldrb	r2, [r1, #4]
 80023ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80023be:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80023c0:	794a      	ldrb	r2, [r1, #5]
 80023c2:	3209      	adds	r2, #9
 80023c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 80023c8:	798a      	ldrb	r2, [r1, #6]
 80023ca:	b112      	cbz	r2, 80023d2 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 80023cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80023d0:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 80023d6:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 80023da:	2300      	movs	r3, #0
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
	...

080023f0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80023f0:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 80023f2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 80023f6:	f100 060c 	add.w	r6, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80023fa:	4604      	mov	r4, r0
  USBDriver *usbp = sdup->config->usbp;

  iqResetI(&sdup->iqueue);
 80023fc:	4630      	mov	r0, r6
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 80023fe:	681d      	ldr	r5, [r3, #0]

  iqResetI(&sdup->iqueue);
 8002400:	f7ff fb06 	bl	8001a10 <chIQResetI>
  oqResetI(&sdup->oqueue);
 8002404:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002408:	f7ff fbaa 	bl	8001b60 <chOQResetI>
 800240c:	1d20      	adds	r0, r4, #4
 800240e:	2101      	movs	r1, #1
 8002410:	f7ff f85e 	bl	80014d0 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8002414:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002418:	7959      	ldrb	r1, [r3, #5]
 800241a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800241e:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8002420:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8002422:	4632      	mov	r2, r6
 8002424:	8a5b      	ldrh	r3, [r3, #18]
 8002426:	f000 f95b 	bl	80026e0 <usbPrepareQueuedReceive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800242a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800242e:	4628      	mov	r0, r5
 8002430:	7959      	ldrb	r1, [r3, #5]
}
 8002432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8002436:	f000 b973 	b.w	8002720 <usbStartReceiveI>
 800243a:	bf00      	nop
 800243c:	0000      	movs	r0, r0
	...

08002440 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8002440:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002448:	2b20      	cmp	r3, #32
 800244a:	d001      	beq.n	8002450 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800244c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800244e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8002450:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002454:	2b21      	cmp	r3, #33	; 0x21
 8002456:	d003      	beq.n	8002460 <sduRequestsHook+0x20>
 8002458:	2b22      	cmp	r3, #34	; 0x22
 800245a:	d009      	beq.n	8002470 <sduRequestsHook+0x30>
 800245c:	2b20      	cmp	r3, #32
 800245e:	d1f5      	bne.n	800244c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <sduRequestsHook+0x3c>)
 8002462:	6383      	str	r3, [r0, #56]	; 0x38
 8002464:	2207      	movs	r2, #7
 8002466:	2300      	movs	r3, #0
 8002468:	63c2      	str	r2, [r0, #60]	; 0x3c
 800246a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800246c:	2001      	movs	r0, #1
 800246e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002470:	2300      	movs	r3, #0
 8002472:	6383      	str	r3, [r0, #56]	; 0x38
 8002474:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002476:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8002478:	2001      	movs	r0, #1
 800247a:	4770      	bx	lr
 800247c:	20000800 	.word	0x20000800

08002480 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002482:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002486:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 8002488:	b1bc      	cbz	r4, 80024ba <sduDataTransmitted+0x3a>
 800248a:	460e      	mov	r6, r1
 800248c:	4605      	mov	r5, r0
 800248e:	2720      	movs	r7, #32
 8002490:	f387 8811 	msr	BASEPRI, r7
 8002494:	2108      	movs	r1, #8
 8002496:	1d20      	adds	r0, r4, #4
 8002498:	f7ff f81a 	bl	80014d0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800249c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800249e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024a2:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80024a4:	1a5b      	subs	r3, r3, r1
 80024a6:	d110      	bne.n	80024ca <sduDataTransmitted+0x4a>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80024a8:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	b91a      	cbnz	r2, 80024bc <sduDataTransmitted+0x3c>
 80024b4:	2300      	movs	r3, #0
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024bc:	8a1b      	ldrh	r3, [r3, #16]
 80024be:	3b01      	subs	r3, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	d1f7      	bne.n	80024b4 <sduDataTransmitted+0x34>
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	e002      	b.n	80024d0 <sduDataTransmitted+0x50>
 80024ca:	2200      	movs	r2, #0
 80024cc:	f382 8811 	msr	BASEPRI, r2
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 80024d0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80024d4:	4631      	mov	r1, r6
 80024d6:	4628      	mov	r0, r5
 80024d8:	f000 f912 	bl	8002700 <usbPrepareQueuedTransmit>
 80024dc:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 f92c 	bl	8002740 <usbStartTransmitI>
 80024e8:	e7e4      	b.n	80024b4 <sduDataTransmitted+0x34>
 80024ea:	bf00      	nop
 80024ec:	0000      	movs	r0, r0
	...

080024f0 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80024f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80024f4:	f101 0309 	add.w	r3, r1, #9
 80024f8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]

  if (sdup == NULL) {
 80024fc:	b1be      	cbz	r6, 800252e <sduDataReceived+0x3e>
 80024fe:	4680      	mov	r8, r0
 8002500:	460f      	mov	r7, r1
 8002502:	f04f 0920 	mov.w	r9, #32
 8002506:	f389 8811 	msr	BASEPRI, r9
 800250a:	2104      	movs	r1, #4
 800250c:	1870      	adds	r0, r6, r1
 800250e:	f7fe ffdf 	bl	80014d0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8002512:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8002516:	69b4      	ldr	r4, [r6, #24]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69f5      	ldr	r5, [r6, #28]
 800251c:	6973      	ldr	r3, [r6, #20]
 800251e:	8a51      	ldrh	r1, [r2, #18]
 8002520:	1b2d      	subs	r5, r5, r4
 8002522:	1aec      	subs	r4, r5, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8002524:	42a1      	cmp	r1, r4
 8002526:	d904      	bls.n	8002532 <sduDataReceived+0x42>
 8002528:	2300      	movs	r3, #0
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002532:	2300      	movs	r3, #0
 8002534:	f383 8811 	msr	BASEPRI, r3
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8002538:	fbb4 f3f1 	udiv	r3, r4, r1
 800253c:	f106 020c 	add.w	r2, r6, #12
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4640      	mov	r0, r8
 8002546:	4639      	mov	r1, r7
 8002548:	f000 f8ca 	bl	80026e0 <usbPrepareQueuedReceive>
 800254c:	f389 8811 	msr	BASEPRI, r9

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8002550:	4639      	mov	r1, r7
 8002552:	4640      	mov	r0, r8
 8002554:	f000 f8e4 	bl	8002720 <usbStartReceiveI>
 8002558:	e7e6      	b.n	8002528 <sduDataReceived+0x38>
 800255a:	bf00      	nop
 800255c:	0000      	movs	r0, r0
	...

08002560 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
	...

08002570 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8002570:	f001 bdc6 	b.w	8004100 <spi_lld_init>
	...

08002580 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 8002580:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002582:	2201      	movs	r2, #1
 8002584:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 8002586:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002588:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800258a:	300c      	adds	r0, #12
 800258c:	f7fe bd58 	b.w	8001040 <chMtxObjectInit>

08002590 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002590:	b510      	push	{r4, lr}
 8002592:	2320      	movs	r3, #32
 8002594:	4604      	mov	r4, r0
 8002596:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800259a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800259c:	f001 fde8 	bl	8004170 <spi_lld_start>
  spip->state = SPI_READY;
 80025a0:	2302      	movs	r3, #2
 80025a2:	7023      	strb	r3, [r4, #0]
 80025a4:	2300      	movs	r3, #0
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	bd10      	pop	{r4, pc}
 80025ac:	0000      	movs	r0, r0
	...

080025b0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80025b0:	b508      	push	{r3, lr}
 80025b2:	2320      	movs	r3, #32
 80025b4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 80025b8:	f001 fe42 	bl	8004240 <spi_lld_select>
 80025bc:	2300      	movs	r3, #0
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	bd08      	pop	{r3, pc}
	...

080025d0 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 80025d0:	b508      	push	{r3, lr}
 80025d2:	2320      	movs	r3, #32
 80025d4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 80025d8:	f001 fe3a 	bl	8004250 <spi_lld_unselect>
 80025dc:	2300      	movs	r3, #0
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	bd08      	pop	{r3, pc}
	...

080025f0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4604      	mov	r4, r0
 80025f4:	2520      	movs	r5, #32
 80025f6:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80025fa:	2503      	movs	r5, #3
 80025fc:	f804 5b08 	strb.w	r5, [r4], #8
 8002600:	f001 fe2e 	bl	8004260 <spi_lld_exchange>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 8002604:	4620      	mov	r0, r4
 8002606:	f7fe faa3 	bl	8000b50 <chThdSuspendS>
 800260a:	2300      	movs	r3, #0
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	bd38      	pop	{r3, r4, r5, pc}
 8002612:	bf00      	nop
	...

08002620 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8002620:	b510      	push	{r4, lr}
 8002622:	2320      	movs	r3, #32
 8002624:	4604      	mov	r4, r0
 8002626:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 800262a:	2303      	movs	r3, #3
 800262c:	f804 3b08 	strb.w	r3, [r4], #8
 8002630:	f001 fe36 	bl	80042a0 <spi_lld_send>
 8002634:	4620      	mov	r0, r4
 8002636:	f7fe fa8b 	bl	8000b50 <chThdSuspendS>
 800263a:	2300      	movs	r3, #0
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	bd10      	pop	{r4, pc}
 8002642:	bf00      	nop
	...

08002650 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8002650:	f001 b916 	b.w	8003880 <usb_lld_init>
	...

08002660 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8002660:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002662:	2201      	movs	r2, #1
 8002664:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8002666:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002668:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800266a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800266c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800266e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002670:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8002672:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8002674:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 8002676:	8143      	strh	r3, [r0, #10]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	0000      	movs	r0, r0
	...

08002680 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	4604      	mov	r4, r0
 8002684:	2320      	movs	r3, #32
 8002686:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800268a:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800268c:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800268e:	60c5      	str	r5, [r0, #12]
 8002690:	6105      	str	r5, [r0, #16]
 8002692:	6145      	str	r5, [r0, #20]
 8002694:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 8002696:	f001 f90b 	bl	80038b0 <usb_lld_start>
  usbp->state = USB_READY;
 800269a:	2302      	movs	r3, #2
 800269c:	7023      	strb	r3, [r4, #0]
 800269e:	f385 8811 	msr	BASEPRI, r5
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
	...

080026b0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 80026b0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80026b2:	b410      	push	{r4}
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 80026b4:	b12b      	cbz	r3, 80026c2 <usbInitEndpointI+0x12>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80026b6:	2400      	movs	r4, #0
 80026b8:	601c      	str	r4, [r3, #0]
 80026ba:	605c      	str	r4, [r3, #4]
 80026bc:	609c      	str	r4, [r3, #8]
 80026be:	60dc      	str	r4, [r3, #12]
 80026c0:	611c      	str	r4, [r3, #16]
  }
  if (epcp->out_state != NULL) {
 80026c2:	6993      	ldr	r3, [r2, #24]
 80026c4:	b12b      	cbz	r3, 80026d2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80026c6:	2400      	movs	r4, #0
 80026c8:	601c      	str	r4, [r3, #0]
 80026ca:	605c      	str	r4, [r3, #4]
 80026cc:	609c      	str	r4, [r3, #8]
 80026ce:	60dc      	str	r4, [r3, #12]
 80026d0:	611c      	str	r4, [r3, #16]
  }

  usbp->epc[ep] = epcp;
 80026d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 80026d6:	bc10      	pop	{r4}
  }
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  usbp->epc[ep] = epcp;
 80026d8:	60da      	str	r2, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80026da:	f001 b9d9 	b.w	8003a90 <usb_lld_init_endpoint>
 80026de:	bf00      	nop

080026e0 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 80026e0:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80026e2:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 80026e6:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80026e8:	68e4      	ldr	r4, [r4, #12]
 80026ea:	69a4      	ldr	r4, [r4, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80026ec:	2500      	movs	r5, #0
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 80026ee:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
 80026f0:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 80026f2:	7026      	strb	r6, [r4, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80026f4:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 80026f6:	bc70      	pop	{r4, r5, r6}
  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80026f8:	f001 bab2 	b.w	8003c60 <usb_lld_prepare_receive>
 80026fc:	0000      	movs	r0, r0
	...

08002700 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 8002700:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002702:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 8002706:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002708:	68e4      	ldr	r4, [r4, #12]
 800270a:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800270c:	2500      	movs	r5, #0
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 800270e:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 8002710:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8002712:	7026      	strb	r6, [r4, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8002714:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 8002716:	bc70      	pop	{r4, r5, r6}
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002718:	f001 bb22 	b.w	8003d60 <usb_lld_prepare_transmit>
 800271c:	0000      	movs	r0, r0
	...

08002720 <usbStartReceiveI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8002720:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8002722:	2301      	movs	r3, #1
 8002724:	8944      	ldrh	r4, [r0, #10]
 8002726:	fa03 f201 	lsl.w	r2, r3, r1
 800272a:	ea14 0602 	ands.w	r6, r4, r2
 800272e:	d001      	beq.n	8002734 <usbStartReceiveI+0x14>
    return true;
 8002730:	4618      	mov	r0, r3
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8002732:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002734:	4322      	orrs	r2, r4
 8002736:	8142      	strh	r2, [r0, #10]
  usb_lld_start_out(usbp, ep);
 8002738:	f001 fc2a 	bl	8003f90 <usb_lld_start_out>
  return false;
 800273c:	4630      	mov	r0, r6
 800273e:	bd70      	pop	{r4, r5, r6, pc}

08002740 <usbStartTransmitI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8002740:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8002742:	2301      	movs	r3, #1
 8002744:	8904      	ldrh	r4, [r0, #8]
 8002746:	fa03 f201 	lsl.w	r2, r3, r1
 800274a:	ea14 0602 	ands.w	r6, r4, r2
 800274e:	d001      	beq.n	8002754 <usbStartTransmitI+0x14>
    return true;
 8002750:	4618      	mov	r0, r3
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002754:	4322      	orrs	r2, r4
 8002756:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8002758:	f001 fc2a 	bl	8003fb0 <usb_lld_start_in>
  return false;
 800275c:	4630      	mov	r0, r6
 800275e:	bd70      	pop	{r4, r5, r6, pc}

08002760 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002760:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002762:	2102      	movs	r1, #2
 8002764:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 8002766:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800276a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800276e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 8002772:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 8002774:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002776:	60c2      	str	r2, [r0, #12]
 8002778:	6102      	str	r2, [r0, #16]
 800277a:	6142      	str	r2, [r0, #20]
 800277c:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800277e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002782:	f001 b90d 	b.w	80039a0 <usb_lld_reset>
 8002786:	bf00      	nop
	...

08002790 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002792:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002794:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002796:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800279a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800279e:	f001 fa4f 	bl	8003c40 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80027a2:	6863      	ldr	r3, [r4, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d036      	beq.n	8002818 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 80027aa:	4620      	mov	r0, r4
 80027ac:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d032      	beq.n	8002818 <_usb_ep0setup+0x88>
 80027b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80027b8:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80027bc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 80027c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80027c4:	4282      	cmp	r2, r0
    usbp->ep0n = max;
 80027c6:	bf3c      	itt	cc
 80027c8:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 80027ca:	4610      	movcc	r0, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80027cc:	061a      	lsls	r2, r3, #24
 80027ce:	f100 80ab 	bmi.w	8002928 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80027d2:	2800      	cmp	r0, #0
 80027d4:	f000 808b 	beq.w	80028ee <_usb_ep0setup+0x15e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80027d8:	68e3      	ldr	r3, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 80027da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80027dc:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80027de:	2200      	movs	r2, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80027e0:	2104      	movs	r1, #4
 80027e2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80027e6:	4611      	mov	r1, r2
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 80027e8:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80027ea:	6058      	str	r0, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80027ec:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80027ee:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f001 fa35 	bl	8003c60 <usb_lld_prepare_receive>
 80027f6:	2320      	movs	r3, #32
 80027f8:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 80027fc:	8963      	ldrh	r3, [r4, #10]
 80027fe:	f013 0101 	ands.w	r1, r3, #1
 8002802:	d105      	bne.n	8002810 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800280a:	4620      	mov	r0, r4
 800280c:	f001 fbc0 	bl	8003f90 <usb_lld_start_out>
 8002810:	2300      	movs	r3, #0
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8002818:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800281c:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8002820:	461e      	mov	r6, r3
 8002822:	d011      	beq.n	8002848 <_usb_ep0setup+0xb8>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8002824:	2100      	movs	r1, #0
 8002826:	4620      	mov	r0, r4
 8002828:	f001 fbea 	bl	8004000 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800282c:	2100      	movs	r1, #0
 800282e:	4620      	mov	r0, r4
 8002830:	f001 fbd6 	bl	8003fe0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002834:	6863      	ldr	r3, [r4, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b113      	cbz	r3, 8002840 <_usb_ep0setup+0xb0>
 800283a:	2105      	movs	r1, #5
 800283c:	4620      	mov	r0, r4
 800283e:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8002840:	2306      	movs	r3, #6
 8002842:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8002846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002848:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800284c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002850:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 8002854:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8002858:	f000 80eb 	beq.w	8002a32 <_usb_ep0setup+0x2a2>
 800285c:	d916      	bls.n	800288c <_usb_ep0setup+0xfc>
 800285e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8002862:	f000 80ce 	beq.w	8002a02 <_usb_ep0setup+0x272>
 8002866:	d92f      	bls.n	80028c8 <_usb_ep0setup+0x138>
 8002868:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800286c:	d076      	beq.n	800295c <_usb_ep0setup+0x1cc>
 800286e:	f640 4202 	movw	r2, #3074	; 0xc02
 8002872:	4295      	cmp	r5, r2
 8002874:	f000 80ef 	beq.w	8002a56 <_usb_ep0setup+0x2c6>
 8002878:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800287c:	d1d2      	bne.n	8002824 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800287e:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8002882:	2001      	movs	r0, #1
 8002884:	6427      	str	r7, [r4, #64]	; 0x40
 8002886:	63a2      	str	r2, [r4, #56]	; 0x38
 8002888:	63e0      	str	r0, [r4, #60]	; 0x3c
 800288a:	e795      	b.n	80027b8 <_usb_ep0setup+0x28>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800288c:	2d02      	cmp	r5, #2
 800288e:	f000 80a2 	beq.w	80029d6 <_usb_ep0setup+0x246>
 8002892:	f240 8097 	bls.w	80029c4 <_usb_ep0setup+0x234>
 8002896:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800289a:	f000 8084 	beq.w	80029a6 <_usb_ep0setup+0x216>
 800289e:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 80028a2:	d1bf      	bne.n	8002824 <_usb_ep0setup+0x94>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80028a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1bb      	bne.n	8002824 <_usb_ep0setup+0x94>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80028ac:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80028b0:	f013 010f 	ands.w	r1, r3, #15
 80028b4:	d015      	beq.n	80028e2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80028b6:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80028b8:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80028ba:	f100 80f4 	bmi.w	8002aa6 <_usb_ep0setup+0x316>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80028be:	f001 fbaf 	bl	8004020 <usb_lld_clear_out>
 80028c2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80028c6:	e00c      	b.n	80028e2 <_usb_ep0setup+0x152>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80028c8:	f240 3302 	movw	r3, #770	; 0x302
 80028cc:	429d      	cmp	r5, r3
 80028ce:	d057      	beq.n	8002980 <_usb_ep0setup+0x1f0>
 80028d0:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80028d4:	d1a6      	bne.n	8002824 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80028d6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80028da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028de:	f000 80d0 	beq.w	8002a82 <_usb_ep0setup+0x2f2>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80028e2:	2300      	movs	r3, #0
 80028e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80028e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80028e8:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80028ea:	0633      	lsls	r3, r6, #24
 80028ec:	d42a      	bmi.n	8002944 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80028ee:	68e3      	ldr	r3, [r4, #12]
 80028f0:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80028f2:	2105      	movs	r1, #5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80028f4:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80028f6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80028fa:	4619      	mov	r1, r3
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80028fc:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 80028fe:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 8002900:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8002902:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002904:	4620      	mov	r0, r4
 8002906:	f001 fa2b 	bl	8003d60 <usb_lld_prepare_transmit>
 800290a:	2320      	movs	r3, #32
 800290c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8002910:	8923      	ldrh	r3, [r4, #8]
 8002912:	f013 0101 	ands.w	r1, r3, #1
 8002916:	f47f af7b 	bne.w	8002810 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8002920:	4620      	mov	r0, r4
 8002922:	f001 fb45 	bl	8003fb0 <usb_lld_start_in>
 8002926:	e773      	b.n	8002810 <_usb_ep0setup+0x80>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8002928:	b160      	cbz	r0, 8002944 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800292a:	68e3      	ldr	r3, [r4, #12]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800292c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800292e:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = false;
 8002930:	2200      	movs	r2, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8002932:	2101      	movs	r1, #1
 8002934:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002938:	4611      	mov	r1, r2
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800293a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800293c:	6058      	str	r0, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800293e:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	e7df      	b.n	8002904 <_usb_ep0setup+0x174>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002944:	68e3      	ldr	r3, [r4, #12]
 8002946:	699a      	ldr	r2, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8002948:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800294a:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800294c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002950:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8002952:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 8002954:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 8002956:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 8002958:	6093      	str	r3, [r2, #8]
 800295a:	e749      	b.n	80027f0 <_usb_ep0setup+0x60>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800295c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002960:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17d      	bne.n	8002a64 <_usb_ep0setup+0x2d4>
      usbp->state = USB_SELECTED;
 8002968:	2303      	movs	r3, #3
 800296a:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800296c:	6863      	ldr	r3, [r4, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0b6      	beq.n	80028e2 <_usb_ep0setup+0x152>
 8002974:	2102      	movs	r1, #2
 8002976:	4620      	mov	r0, r4
 8002978:	4798      	blx	r3
 800297a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800297e:	e7b0      	b.n	80028e2 <_usb_ep0setup+0x152>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002980:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af4d 	bne.w	8002824 <_usb_ep0setup+0x94>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800298a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800298e:	f013 010f 	ands.w	r1, r3, #15
 8002992:	d0a6      	beq.n	80028e2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002994:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8002996:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002998:	f100 808a 	bmi.w	8002ab0 <_usb_ep0setup+0x320>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800299c:	f001 fb20 	bl	8003fe0 <usb_lld_stall_out>
 80029a0:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80029a4:	e79d      	b.n	80028e2 <_usb_ep0setup+0x152>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80029a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f47f af3a 	bne.w	8002824 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 80029b0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80029b4:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80029b6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80029ba:	63e7      	str	r7, [r4, #60]	; 0x3c
 80029bc:	6427      	str	r7, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80029be:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80029c2:	e792      	b.n	80028ea <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d143      	bne.n	8002a50 <_usb_ep0setup+0x2c0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80029c8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80029cc:	2002      	movs	r0, #2
 80029ce:	6425      	str	r5, [r4, #64]	; 0x40
 80029d0:	63a2      	str	r2, [r4, #56]	; 0x38
 80029d2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80029d4:	e6f0      	b.n	80027b8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80029d6:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80029da:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80029de:	4620      	mov	r0, r4
 80029e0:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80029e4:	d141      	bne.n	8002a6a <_usb_ep0setup+0x2da>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80029e6:	f001 f90b 	bl	8003c00 <usb_lld_get_status_out>
 80029ea:	2801      	cmp	r0, #1
 80029ec:	d041      	beq.n	8002a72 <_usb_ep0setup+0x2e2>
 80029ee:	2802      	cmp	r0, #2
 80029f0:	f47f af18 	bne.w	8002824 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <_usb_ep0setup+0x32c>)
 80029f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80029f8:	63e0      	str	r0, [r4, #60]	; 0x3c
 80029fa:	6427      	str	r7, [r4, #64]	; 0x40
 80029fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a00:	e6da      	b.n	80027b8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002a02:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8002a06:	6861      	ldr	r1, [r4, #4]
 8002a08:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002a0c:	684d      	ldr	r5, [r1, #4]
 8002a0e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002a12:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8002a16:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	f43f af00 	beq.w	8002824 <_usb_ep0setup+0x94>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8002a24:	c809      	ldmia	r0, {r0, r3}
 8002a26:	6427      	str	r7, [r4, #64]	; 0x40
 8002a28:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a2a:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002a2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a30:	e6c2      	b.n	80027b8 <_usb_ep0setup+0x28>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002a32:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f47f aef4 	bne.w	8002824 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 8002a3c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002a40:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002a42:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002a46:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002a48:	6427      	str	r7, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002a4a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8002a4e:	e74c      	b.n	80028ea <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002a50:	2d01      	cmp	r5, #1
 8002a52:	f47f aee7 	bne.w	8002824 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <_usb_ep0setup+0x330>)
 8002a58:	63a2      	str	r2, [r4, #56]	; 0x38
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002a60:	6422      	str	r2, [r4, #64]	; 0x40
 8002a62:	e6a9      	b.n	80027b8 <_usb_ep0setup+0x28>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8002a64:	2304      	movs	r3, #4
 8002a66:	7023      	strb	r3, [r4, #0]
 8002a68:	e780      	b.n	800296c <_usb_ep0setup+0x1dc>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8002a6a:	f001 f8d9 	bl	8003c20 <usb_lld_get_status_in>
 8002a6e:	2801      	cmp	r0, #1
 8002a70:	d1bd      	bne.n	80029ee <_usb_ep0setup+0x25e>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <_usb_ep0setup+0x334>)
 8002a74:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a76:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002a78:	6427      	str	r7, [r4, #64]	; 0x40
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a80:	e69a      	b.n	80027b8 <_usb_ep0setup+0x28>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8002a82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002a86:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f000 fff0 	bl	8003a70 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002a90:	6863      	ldr	r3, [r4, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b113      	cbz	r3, 8002a9c <_usb_ep0setup+0x30c>
 8002a96:	2101      	movs	r1, #1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8002aa2:	7023      	strb	r3, [r4, #0]
 8002aa4:	e71d      	b.n	80028e2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8002aa6:	f001 facb 	bl	8004040 <usb_lld_clear_in>
 8002aaa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8002aae:	e718      	b.n	80028e2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8002ab0:	f001 faa6 	bl	8004000 <usb_lld_stall_in>
 8002ab4:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8002ab8:	e713      	b.n	80028e2 <_usb_ep0setup+0x152>
 8002aba:	bf00      	nop
 8002abc:	08009150 	.word	0x08009150
 8002ac0:	08009140 	.word	0x08009140
 8002ac4:	08009160 	.word	0x08009160
	...

08002ad0 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002ad0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d815      	bhi.n	8002b08 <_usb_ep0in+0x38>
 8002adc:	e8df f003 	tbb	[pc, r3]
 8002ae0:	041c3b04 	.word	0x041c3b04
 8002ae4:	1504      	.short	0x1504
 8002ae6:	04          	.byte	0x04
 8002ae7:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f001 fa89 	bl	8004000 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002aee:	2100      	movs	r1, #0
 8002af0:	4620      	mov	r0, r4
 8002af2:	f001 fa75 	bl	8003fe0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b113      	cbz	r3, 8002b02 <_usb_ep0in+0x32>
 8002afc:	2105      	movs	r1, #5
 8002afe:	4620      	mov	r0, r4
 8002b00:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002b02:	2306      	movs	r3, #6
 8002b04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002b08:	bd10      	pop	{r4, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8002b0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b0c:	b103      	cbz	r3, 8002b10 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 8002b0e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002b1a:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8002b1c:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8002b1e:	2300      	movs	r3, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8002b20:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002b24:	4620      	mov	r0, r4
 8002b26:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8002b28:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 8002b2a:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 8002b2c:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 8002b2e:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_receive(usbp, ep);
 8002b30:	f001 f896 	bl	8003c60 <usb_lld_prepare_receive>
 8002b34:	2320      	movs	r3, #32
 8002b36:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8002b3a:	8963      	ldrh	r3, [r4, #10]
 8002b3c:	f013 0101 	ands.w	r1, r3, #1
 8002b40:	d105      	bne.n	8002b4e <_usb_ep0in+0x7e>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f001 fa21 	bl	8003f90 <usb_lld_start_out>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	bd10      	pop	{r4, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002b56:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8002b5a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8002b5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002b60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b64:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8002b66:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002b68:	d9d7      	bls.n	8002b1a <_usb_ep0in+0x4a>
 8002b6a:	8a18      	ldrh	r0, [r3, #16]
 8002b6c:	fbb2 f1f0 	udiv	r1, r2, r0
 8002b70:	fb00 2211 	mls	r2, r0, r1, r2
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d1d0      	bne.n	8002b1a <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002b78:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002b7a:	4611      	mov	r1, r2
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8002b7c:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8002b7e:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8002b80:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8002b82:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002b84:	4620      	mov	r0, r4
 8002b86:	f001 f8eb 	bl	8003d60 <usb_lld_prepare_transmit>
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8002b90:	8923      	ldrh	r3, [r4, #8]
 8002b92:	f013 0101 	ands.w	r1, r3, #1
 8002b96:	d105      	bne.n	8002ba4 <_usb_ep0in+0xd4>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f001 fa06 	bl	8003fb0 <usb_lld_start_in>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f383 8811 	msr	BASEPRI, r3
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	bf00      	nop
	...

08002bc0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8002bc0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8002bc4:	2a06      	cmp	r2, #6
 8002bc6:	d80c      	bhi.n	8002be2 <_usb_ep0out+0x22>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4093      	lsls	r3, r2
 8002bcc:	f013 0f67 	tst.w	r3, #103	; 0x67
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	d112      	bne.n	8002bfc <_usb_ep0out+0x3c>
 8002bd6:	f013 0208 	ands.w	r2, r3, #8
 8002bda:	d103      	bne.n	8002be4 <_usb_ep0out+0x24>
 8002bdc:	06db      	lsls	r3, r3, #27
 8002bde:	d41e      	bmi.n	8002c1e <_usb_ep0out+0x5e>
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8002be4:	68c3      	ldr	r3, [r0, #12]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f8      	bne.n	8002be0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8002bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bf0:	b103      	cbz	r3, 8002bf4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8002bf2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002bfa:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f001 f9ff 	bl	8004000 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	4620      	mov	r0, r4
 8002c06:	f001 f9eb 	bl	8003fe0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b113      	cbz	r3, 8002c16 <_usb_ep0out+0x56>
 8002c10:	2105      	movs	r1, #5
 8002c12:	4620      	mov	r0, r4
 8002c14:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002c16:	2306      	movs	r3, #6
 8002c18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002c1c:	bd10      	pop	{r4, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002c1e:	68c3      	ldr	r3, [r0, #12]
 8002c20:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8002c22:	2105      	movs	r1, #5
 8002c24:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8002c28:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8002c2a:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8002c2c:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8002c2e:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002c30:	4611      	mov	r1, r2
 8002c32:	f001 f895 	bl	8003d60 <usb_lld_prepare_transmit>
 8002c36:	2320      	movs	r3, #32
 8002c38:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8002c3c:	8923      	ldrh	r3, [r4, #8]
 8002c3e:	f013 0101 	ands.w	r1, r3, #1
 8002c42:	d003      	beq.n	8002c4c <_usb_ep0out+0x8c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	bd10      	pop	{r4, pc}
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8002c52:	4620      	mov	r0, r4
 8002c54:	f001 f9ac 	bl	8003fb0 <usb_lld_start_in>
 8002c58:	e7f4      	b.n	8002c44 <_usb_ep0out+0x84>
 8002c5a:	bf00      	nop
 8002c5c:	0000      	movs	r0, r0
	...

08002c60 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002c60:	0943      	lsrs	r3, r0, #5
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	b410      	push	{r4}
 8002c66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002c6a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8002c6e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8002c72:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002c76:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002c78:	f000 001f 	and.w	r0, r0, #31
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002c82:	b2c9      	uxtb	r1, r1
 8002c84:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002c88:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002c8c:	6018      	str	r0, [r3, #0]
}
 8002c8e:	bc10      	pop	{r4}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
	...

08002ca0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8002ca0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 8002cac:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	b10b      	cbz	r3, 8002cb6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002cb2:	6850      	ldr	r0, [r2, #4]
 8002cb4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002cba:	f7ff b971 	b.w	8001fa0 <_port_irq_epilogue>
 8002cbe:	bf00      	nop
 8002cc0:	40026000 	.word	0x40026000
 8002cc4:	20000ee8 	.word	0x20000ee8
	...

08002cd0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8002cd2:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002cd4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8002cd6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002cd8:	0989      	lsrs	r1, r1, #6
 8002cda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8002cde:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 8002ce0:	018c      	lsls	r4, r1, #6
 8002ce2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002ce4:	b10a      	cbz	r2, 8002cea <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002ce6:	68c0      	ldr	r0, [r0, #12]
 8002ce8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002cee:	f7ff b957 	b.w	8001fa0 <_port_irq_epilogue>
 8002cf2:	bf00      	nop
 8002cf4:	40026000 	.word	0x40026000
 8002cf8:	20000ee8 	.word	0x20000ee8
 8002cfc:	00000000 	.word	0x00000000

08002d00 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002d04:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8002d06:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002d08:	0c09      	lsrs	r1, r1, #16
 8002d0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8002d0e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 8002d10:	040c      	lsls	r4, r1, #16
 8002d12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8002d14:	b10a      	cbz	r2, 8002d1a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002d16:	6940      	ldr	r0, [r0, #20]
 8002d18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d1e:	f7ff b93f 	b.w	8001fa0 <_port_irq_epilogue>
 8002d22:	bf00      	nop
 8002d24:	40026000 	.word	0x40026000
 8002d28:	20000ee8 	.word	0x20000ee8
 8002d2c:	00000000 	.word	0x00000000

08002d30 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8002d32:	4809      	ldr	r0, [pc, #36]	; (8002d58 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002d34:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8002d36:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002d38:	0d89      	lsrs	r1, r1, #22
 8002d3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8002d3e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 8002d40:	058c      	lsls	r4, r1, #22
 8002d42:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8002d44:	b10a      	cbz	r2, 8002d4a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002d46:	69c0      	ldr	r0, [r0, #28]
 8002d48:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d4e:	f7ff b927 	b.w	8001fa0 <_port_irq_epilogue>
 8002d52:	bf00      	nop
 8002d54:	40026000 	.word	0x40026000
 8002d58:	20000ee8 	.word	0x20000ee8
 8002d5c:	00000000 	.word	0x00000000

08002d60 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8002d60:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8002d64:	4807      	ldr	r0, [pc, #28]	; (8002d84 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002d66:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8002d68:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002d6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 8002d6e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002d70:	b10a      	cbz	r2, 8002d76 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002d72:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002d74:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d7a:	f7ff b911 	b.w	8001fa0 <_port_irq_epilogue>
 8002d7e:	bf00      	nop
 8002d80:	40026000 	.word	0x40026000
 8002d84:	20000ee8 	.word	0x20000ee8
	...

08002d90 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8002d92:	4809      	ldr	r0, [pc, #36]	; (8002db8 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002d94:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8002d96:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002d98:	0989      	lsrs	r1, r1, #6
 8002d9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8002d9e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 8002da0:	018c      	lsls	r4, r1, #6
 8002da2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002da4:	b10a      	cbz	r2, 8002daa <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002da6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002da8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dae:	f7ff b8f7 	b.w	8001fa0 <_port_irq_epilogue>
 8002db2:	bf00      	nop
 8002db4:	40026000 	.word	0x40026000
 8002db8:	20000ee8 	.word	0x20000ee8
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8002dc2:	4809      	ldr	r0, [pc, #36]	; (8002de8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002dc4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8002dc6:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002dc8:	0c09      	lsrs	r1, r1, #16
 8002dca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8002dce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 8002dd0:	040c      	lsls	r4, r1, #16
 8002dd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002dd4:	b10a      	cbz	r2, 8002dda <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002dd6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002dd8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dde:	f7ff b8df 	b.w	8001fa0 <_port_irq_epilogue>
 8002de2:	bf00      	nop
 8002de4:	40026000 	.word	0x40026000
 8002de8:	20000ee8 	.word	0x20000ee8
 8002dec:	00000000 	.word	0x00000000

08002df0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8002df2:	4809      	ldr	r0, [pc, #36]	; (8002e18 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002df4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8002df6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002df8:	0d89      	lsrs	r1, r1, #22
 8002dfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 8002dfe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 8002e00:	058c      	lsls	r4, r1, #22
 8002e02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002e04:	b10a      	cbz	r2, 8002e0a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002e06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002e08:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e0e:	f7ff b8c7 	b.w	8001fa0 <_port_irq_epilogue>
 8002e12:	bf00      	nop
 8002e14:	40026000 	.word	0x40026000
 8002e18:	20000ee8 	.word	0x20000ee8
 8002e1c:	00000000 	.word	0x00000000

08002e20 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 8002e20:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8002e26:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8002e28:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8002e2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 8002e2e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002e30:	b10a      	cbz	r2, 8002e36 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002e32:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002e34:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e3a:	f7ff b8b1 	b.w	8001fa0 <_port_irq_epilogue>
 8002e3e:	bf00      	nop
 8002e40:	40026400 	.word	0x40026400
 8002e44:	20000ee8 	.word	0x20000ee8
	...

08002e50 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8002e52:	4809      	ldr	r0, [pc, #36]	; (8002e78 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002e54:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8002e56:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8002e58:	0989      	lsrs	r1, r1, #6
 8002e5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 8002e5e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 8002e60:	018c      	lsls	r4, r1, #6
 8002e62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002e64:	b10a      	cbz	r2, 8002e6a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002e66:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002e68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e6e:	f7ff b897 	b.w	8001fa0 <_port_irq_epilogue>
 8002e72:	bf00      	nop
 8002e74:	40026400 	.word	0x40026400
 8002e78:	20000ee8 	.word	0x20000ee8
 8002e7c:	00000000 	.word	0x00000000

08002e80 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8002e82:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002e84:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8002e86:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8002e88:	0c09      	lsrs	r1, r1, #16
 8002e8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8002e8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 8002e90:	040c      	lsls	r4, r1, #16
 8002e92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002e94:	b10a      	cbz	r2, 8002e9a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002e96:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002e98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e9e:	f7ff b87f 	b.w	8001fa0 <_port_irq_epilogue>
 8002ea2:	bf00      	nop
 8002ea4:	40026400 	.word	0x40026400
 8002ea8:	20000ee8 	.word	0x20000ee8
 8002eac:	00000000 	.word	0x00000000

08002eb0 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8002eb2:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002eb4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8002eb6:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8002eb8:	0d89      	lsrs	r1, r1, #22
 8002eba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 8002ebe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 8002ec0:	058c      	lsls	r4, r1, #22
 8002ec2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002ec4:	b10a      	cbz	r2, 8002eca <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002ec6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002ec8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002ece:	f7ff b867 	b.w	8001fa0 <_port_irq_epilogue>
 8002ed2:	bf00      	nop
 8002ed4:	40026400 	.word	0x40026400
 8002ed8:	20000ee8 	.word	0x20000ee8
 8002edc:	00000000 	.word	0x00000000

08002ee0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 8002ee0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002ee6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8002ee8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8002eea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 8002eee:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002ef0:	b10a      	cbz	r2, 8002ef6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002ef2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002ef4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002efa:	f7ff b851 	b.w	8001fa0 <_port_irq_epilogue>
 8002efe:	bf00      	nop
 8002f00:	40026400 	.word	0x40026400
 8002f04:	20000ee8 	.word	0x20000ee8
	...

08002f10 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8002f12:	4809      	ldr	r0, [pc, #36]	; (8002f38 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002f14:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8002f16:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8002f18:	0989      	lsrs	r1, r1, #6
 8002f1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8002f1e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 8002f20:	018c      	lsls	r4, r1, #6
 8002f22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002f24:	b10a      	cbz	r2, 8002f2a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002f26:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002f28:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f2e:	f7ff b837 	b.w	8001fa0 <_port_irq_epilogue>
 8002f32:	bf00      	nop
 8002f34:	40026400 	.word	0x40026400
 8002f38:	20000ee8 	.word	0x20000ee8
 8002f3c:	00000000 	.word	0x00000000

08002f40 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8002f42:	4809      	ldr	r0, [pc, #36]	; (8002f68 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002f44:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8002f46:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8002f48:	0c09      	lsrs	r1, r1, #16
 8002f4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8002f4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 8002f50:	040c      	lsls	r4, r1, #16
 8002f52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8002f54:	b10a      	cbz	r2, 8002f5a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002f56:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002f58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f5e:	f7ff b81f 	b.w	8001fa0 <_port_irq_epilogue>
 8002f62:	bf00      	nop
 8002f64:	40026400 	.word	0x40026400
 8002f68:	20000ee8 	.word	0x20000ee8
 8002f6c:	00000000 	.word	0x00000000

08002f70 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8002f72:	4809      	ldr	r0, [pc, #36]	; (8002f98 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002f74:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 8002f76:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 8002f78:	0d89      	lsrs	r1, r1, #22
 8002f7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 8002f7e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 8002f80:	058c      	lsls	r4, r1, #22
 8002f82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002f84:	b10a      	cbz	r2, 8002f8a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002f86:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002f88:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f8e:	f7ff b807 	b.w	8001fa0 <_port_irq_epilogue>
 8002f92:	bf00      	nop
 8002f94:	40026400 	.word	0x40026400
 8002f98:	20000ee8 	.word	0x20000ee8
 8002f9c:	00000000 	.word	0x00000000

08002fa0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8002fa0:	490e      	ldr	r1, [pc, #56]	; (8002fdc <dmaInit+0x3c>)
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <dmaInit+0x40>)
 8002fa4:	480f      	ldr	r0, [pc, #60]	; (8002fe4 <dmaInit+0x44>)
 8002fa6:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8002fa8:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	4c0e      	ldr	r4, [pc, #56]	; (8002fe8 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 8002fae:	4619      	mov	r1, r3
 8002fb0:	e001      	b.n	8002fb6 <dmaInit+0x16>
 8002fb2:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8002fb6:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8002fb8:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	f102 020c 	add.w	r2, r2, #12
 8002fc4:	d1f5      	bne.n	8002fb2 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8002fc6:	4909      	ldr	r1, [pc, #36]	; (8002fec <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 8002fca:	bc10      	pop	{r4}
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fd0:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8002fd2:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8002fd4:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000f68 	.word	0x20000f68
 8002fe0:	0800917c 	.word	0x0800917c
 8002fe4:	40026010 	.word	0x40026010
 8002fe8:	20000ee8 	.word	0x20000ee8
 8002fec:	40026000 	.word	0x40026000
 8002ff0:	40026400 	.word	0x40026400
	...

08003000 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8003002:	4f1f      	ldr	r7, [pc, #124]	; (8003080 <dmaStreamAllocate+0x80>)
 8003004:	7a46      	ldrb	r6, [r0, #9]
 8003006:	683d      	ldr	r5, [r7, #0]
 8003008:	2401      	movs	r4, #1
 800300a:	fa04 fe06 	lsl.w	lr, r4, r6
 800300e:	ea1e 0f05 	tst.w	lr, r5
 8003012:	d131      	bne.n	8003078 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003014:	4c1b      	ldr	r4, [pc, #108]	; (8003084 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003016:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800301a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800301e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003022:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003024:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003028:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800302c:	d004      	beq.n	8003038 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800302e:	4c16      	ldr	r4, [pc, #88]	; (8003088 <dmaStreamAllocate+0x88>)
 8003030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003036:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 8003038:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800303c:	d116      	bne.n	800306c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800303e:	6805      	ldr	r5, [r0, #0]
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	f023 031f 	bic.w	r3, r3, #31
 8003046:	602b      	str	r3, [r5, #0]
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	f013 0401 	ands.w	r4, r3, #1
 800304e:	d1fb      	bne.n	8003048 <dmaStreamAllocate+0x48>
 8003050:	7a07      	ldrb	r7, [r0, #8]
 8003052:	6846      	ldr	r6, [r0, #4]
 8003054:	233d      	movs	r3, #61	; 0x3d
 8003056:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003058:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800305a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800305c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800305e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8003060:	b162      	cbz	r2, 800307c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8003062:	7a80      	ldrb	r0, [r0, #10]
 8003064:	f7ff fdfc 	bl	8002c60 <nvicEnableVector>

  return FALSE;
 8003068:	4620      	mov	r0, r4
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 800306c:	4c06      	ldr	r4, [pc, #24]	; (8003088 <dmaStreamAllocate+0x88>)
 800306e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003074:	6323      	str	r3, [r4, #48]	; 0x30
 8003076:	e7e2      	b.n	800303e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 8003078:	4620      	mov	r0, r4
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 800307c:	4610      	mov	r0, r2
}
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003080:	20000f68 	.word	0x20000f68
 8003084:	20000ee8 	.word	0x20000ee8
 8003088:	40023800 	.word	0x40023800
 800308c:	00000000 	.word	0x00000000

08003090 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <hal_lld_init+0x5c>)
 8003092:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800309a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800309c:	6119      	str	r1, [r3, #16]
 800309e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80030a0:	6958      	ldr	r0, [r3, #20]
 80030a2:	6159      	str	r1, [r3, #20]
 80030a4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80030a6:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80030a8:	4c11      	ldr	r4, [pc, #68]	; (80030f0 <hal_lld_init+0x60>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80030aa:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80030ae:	6218      	str	r0, [r3, #32]
 80030b0:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80030b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030b4:	6259      	str	r1, [r3, #36]	; 0x24
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80030b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030be:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80030c0:	6821      	ldr	r1, [r4, #0]
 80030c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80030c6:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80030c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80030ca:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80030ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80030d2:	d003      	beq.n	80030dc <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80030d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80030d8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80030da:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <hal_lld_init+0x60>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80030de:	bc10      	pop	{r4}

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80030e0:	6853      	ldr	r3, [r2, #4]
 80030e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e6:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 80030e8:	f7ff bf5a 	b.w	8002fa0 <dmaInit>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40007000 	.word	0x40007000
	...

08003100 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003100:	492c      	ldr	r1, [pc, #176]	; (80031b4 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003104:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003108:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800310c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800310e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003118:	680a      	ldr	r2, [r1, #0]
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <stm32_clock_init+0xb4>)
 800311c:	0790      	lsls	r0, r2, #30
 800311e:	d5fb      	bpl.n	8003118 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	f022 0203 	bic.w	r2, r2, #3
 8003126:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800312c:	4619      	mov	r1, r3
 800312e:	688b      	ldr	r3, [r1, #8]
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <stm32_clock_init+0xb4>)
 8003132:	f013 030c 	ands.w	r3, r3, #12
 8003136:	d1fa      	bne.n	800312e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800313e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003140:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <stm32_clock_init+0xb4>)
 800314e:	0389      	lsls	r1, r1, #14
 8003150:	d5fb      	bpl.n	800314a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003152:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800315a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800315c:	4915      	ldr	r1, [pc, #84]	; (80031b4 <stm32_clock_init+0xb4>)
 800315e:	0790      	lsls	r0, r2, #30
 8003160:	d5fb      	bpl.n	800315a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <stm32_clock_init+0xbc>)
 8003164:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003166:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003170:	6853      	ldr	r3, [r2, #4]
 8003172:	0459      	lsls	r1, r3, #17
 8003174:	d5fc      	bpl.n	8003170 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003176:	490f      	ldr	r1, [pc, #60]	; (80031b4 <stm32_clock_init+0xb4>)
 8003178:	680a      	ldr	r2, [r1, #0]
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <stm32_clock_init+0xb4>)
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	d5fb      	bpl.n	8003178 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003182:	4910      	ldr	r1, [pc, #64]	; (80031c4 <stm32_clock_init+0xc4>)
 8003184:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003186:	f240 7105 	movw	r1, #1797	; 0x705
 800318a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	f042 0202 	orr.w	r2, r2, #2
 8003192:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003194:	461a      	mov	r2, r3
 8003196:	6893      	ldr	r3, [r2, #8]
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <stm32_clock_init+0xb4>)
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d1f9      	bne.n	8003196 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80031a2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	644b      	str	r3, [r1, #68]	; 0x44
 80031aa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b0:	664b      	str	r3, [r1, #100]	; 0x64
 80031b2:	4770      	bx	lr
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
 80031bc:	07405408 	.word	0x07405408
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	38089400 	.word	0x38089400
	...

080031d0 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80031d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	0792      	lsls	r2, r2, #30
 80031d8:	d401      	bmi.n	80031de <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80031da:	f7fe bee1 	b.w	8001fa0 <_port_irq_epilogue>
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80031de:	b510      	push	{r4, lr}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80031e0:	2400      	movs	r4, #0
 80031e2:	611c      	str	r4, [r3, #16]
 80031e4:	2320      	movs	r3, #32
 80031e6:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 80031ea:	f7fd f941 	bl	8000470 <chSysTimerHandlerI>
 80031ee:	f384 8811 	msr	BASEPRI, r4
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80031f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80031f6:	f7fe bed3 	b.w	8001fa0 <_port_irq_epilogue>
 80031fa:	bf00      	nop
 80031fc:	0000      	movs	r0, r0
	...

08003200 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003200:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003202:	4810      	ldr	r0, [pc, #64]	; (8003244 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003204:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8003206:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800320e:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 8003214:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003216:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003218:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800321c:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003220:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003224:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003226:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8003228:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800322a:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800322c:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 800322e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8003232:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8003234:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003236:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003238:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800323a:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800323c:	f7ff bd10 	b.w	8002c60 <nvicEnableVector>
 8003240:	40023800 	.word	0x40023800
 8003244:	e0042000 	.word	0xe0042000
	...

08003250 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8003250:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003252:	4d65      	ldr	r5, [pc, #404]	; (80033e8 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003254:	4c65      	ldr	r4, [pc, #404]	; (80033ec <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003256:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003258:	4965      	ldr	r1, [pc, #404]	; (80033f0 <_pal_lld_init+0x1a0>)
 800325a:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <_pal_lld_init+0x1a4>)
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800325e:	f240 16ff 	movw	r6, #511	; 0x1ff
 8003262:	4337      	orrs	r7, r6
 8003264:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8003266:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003268:	433e      	orrs	r6, r7
 800326a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800326c:	6845      	ldr	r5, [r0, #4]
 800326e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003270:	6885      	ldr	r5, [r0, #8]
 8003272:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8003274:	68c5      	ldr	r5, [r0, #12]
 8003276:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8003278:	6905      	ldr	r5, [r0, #16]
 800327a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800327c:	6945      	ldr	r5, [r0, #20]
 800327e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8003280:	6985      	ldr	r5, [r0, #24]
 8003282:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003284:	6805      	ldr	r5, [r0, #0]
 8003286:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003288:	6a04      	ldr	r4, [r0, #32]
 800328a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800328c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800328e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8003290:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003292:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8003294:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003296:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8003298:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800329a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800329c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800329e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80032a0:	69c4      	ldr	r4, [r0, #28]
 80032a2:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80032a4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80032a6:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80032a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80032aa:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80032ac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80032ae:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 80032b0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80032b2:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80032b4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80032b6:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80032b8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80032ba:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80032bc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80032be:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80032c0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80032c2:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80032c4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80032c6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80032c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80032ca:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80032cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80032ce:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80032d0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80032d2:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80032d4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80032d8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80032da:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80032dc:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80032de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 80032e2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80032e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 80032e8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80032ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 80032ee:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80032f2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 80032f6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80032fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 80032fe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003302:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8003306:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003308:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800330c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003310:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8003314:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8003318:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800331c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8003320:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8003324:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8003328:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800332c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8003330:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8003334:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8003338:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800333c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003340:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003344:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003348:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800334c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800334e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8003352:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003354:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8003358:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800335a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800335e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8003360:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8003364:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8003366:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800336c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8003370:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003372:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8003376:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800337a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800337e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8003382:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8003386:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800338a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800338e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8003392:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 8003396:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800339a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800339e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80033a2:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80033a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80033aa:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 80033ae:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80033b2:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 80033b6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 80033ba:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 80033be:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 80033c2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 80033c6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 80033ca:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 80033ce:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 80033d2:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 80033d6:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 80033da:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80033de:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 80033e2:	bcf0      	pop	{r4, r5, r6, r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	00000000 	.word	0x00000000

08003400 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 8003404:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8003408:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800340c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8003410:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 8003414:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8003418:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800341a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800341e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003422:	f04f 0803 	mov.w	r8, #3
 8003426:	e030      	b.n	800348a <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8003428:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800342c:	ea2b 0303 	bic.w	r3, fp, r3
 8003430:	ea43 030a 	orr.w	r3, r3, sl
 8003434:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8003436:	6843      	ldr	r3, [r0, #4]
 8003438:	fa09 fa04 	lsl.w	sl, r9, r4
 800343c:	ea23 030a 	bic.w	r3, r3, sl
 8003440:	433b      	orrs	r3, r7
 8003442:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003444:	0063      	lsls	r3, r4, #1
 8003446:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800344a:	fa08 f303 	lsl.w	r3, r8, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	ea0a 0a03 	and.w	sl, sl, r3
 8003454:	ea4a 0a06 	orr.w	sl, sl, r6
 8003458:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800345c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8003460:	ea03 0a0a 	and.w	sl, r3, sl
 8003464:	ea4a 0a05 	orr.w	sl, sl, r5
 8003468:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800346c:	f8d0 a000 	ldr.w	sl, [r0]
 8003470:	ea03 030a 	and.w	r3, r3, sl
 8003474:	ea43 030e 	orr.w	r3, r3, lr
 8003478:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800347a:	0849      	lsrs	r1, r1, #1
 800347c:	d019      	beq.n	80034b2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800347e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 8003480:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 8003482:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 8003484:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8003488:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800348a:	f004 0307 	and.w	r3, r4, #7
 800348e:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8003490:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003494:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 8003498:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800349c:	d0ed      	beq.n	800347a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800349e:	2c07      	cmp	r4, #7
 80034a0:	d9c2      	bls.n	8003428 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 80034a2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80034a6:	ea2b 0303 	bic.w	r3, fp, r3
 80034aa:	ea43 030a 	orr.w	r3, r3, sl
 80034ae:	6243      	str	r3, [r0, #36]	; 0x24
 80034b0:	e7c1      	b.n	8003436 <_pal_lld_setgroupmode+0x36>
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
	...

080034c0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 80034c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;

#if defined(_CHIBIOS_RT_)
  chRegSetThreadName("usb_lld_pump");
 80034c4:	4bb4      	ldr	r3, [pc, #720]	; (8003798 <usb_lld_pump+0x2d8>)
 80034c6:	49b5      	ldr	r1, [pc, #724]	; (800379c <usb_lld_pump+0x2dc>)
 80034c8:	699a      	ldr	r2, [r3, #24]
 *
 * @special
 */
void usb_lld_pump(void *p) {
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 80034ca:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50

#if defined(_CHIBIOS_RT_)
  chRegSetThreadName("usb_lld_pump");
 80034ce:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 80034d0:	b087      	sub	sp, #28
 80034d2:	2320      	movs	r3, #32
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	f100 0360 	add.w	r3, r0, #96	; 0x60
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 80034de:	46ca      	mov	sl, r9
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	4681      	mov	r9, r0
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 80034e4:	f899 3000 	ldrb.w	r3, [r9]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d006      	beq.n	80034fa <usb_lld_pump+0x3a>
 80034ec:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80034f0:	b963      	cbnz	r3, 800350c <usb_lld_pump+0x4c>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 80034f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80034f6:	06db      	lsls	r3, r3, #27
 80034f8:	d408      	bmi.n	800350c <usb_lld_pump+0x4c>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 80034fa:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80034fe:	9805      	ldr	r0, [sp, #20]
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	f8ca 3018 	str.w	r3, [sl, #24]
 8003508:	f7fd fb22 	bl	8000b50 <chThdSuspendS>
 800350c:	2300      	movs	r3, #0
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	469b      	mov	fp, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8003514:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003518:	f013 0310 	ands.w	r3, r3, #16
 800351c:	d024      	beq.n	8003568 <usb_lld_pump+0xa8>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 800351e:	f8d9 6050 	ldr.w	r6, [r9, #80]	; 0x50
 8003522:	6a33      	ldr	r3, [r6, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003524:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
 8003528:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800352c:	d032      	beq.n	8003594 <usb_lld_pump+0xd4>
 800352e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8003532:	d1ef      	bne.n	8003514 <usb_lld_pump+0x54>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	eb09 0282 	add.w	r2, r9, r2, lsl #2
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800353c:	f3c3 130a 	ubfx	r3, r3, #4, #11
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003540:	68d2      	ldr	r2, [r2, #12]
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 8003542:	3303      	adds	r3, #3
  max = (max + 3) / 4;
  while (n) {
 8003544:	089b      	lsrs	r3, r3, #2
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003546:	6a10      	ldr	r0, [r2, #32]
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 8003548:	d0e4      	beq.n	8003514 <usb_lld_pump+0x54>
 800354a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800354e:	2202      	movs	r2, #2
    uint32_t w = *fifop;
 8003550:	6831      	ldr	r1, [r6, #0]
    if (max) {
 8003552:	b112      	cbz	r2, 800355a <usb_lld_pump+0x9a>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 8003554:	f840 1b04 	str.w	r1, [r0], #4
      buf += 4;
      max--;
 8003558:	3a01      	subs	r2, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800355a:	3b01      	subs	r3, #1
 800355c:	d1f8      	bne.n	8003550 <usb_lld_pump+0x90>

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800355e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003562:	f013 0310 	ands.w	r3, r3, #16
 8003566:	d1da      	bne.n	800351e <usb_lld_pump+0x5e>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 8003568:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f10b 	lsl.w	r1, r1, fp
      if (usbp->txpending & epmask) {
 8003572:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8003574:	9103      	str	r1, [sp, #12]
      if (usbp->txpending & epmask) {
 8003576:	d169      	bne.n	800364c <usb_lld_pump+0x18c>
 8003578:	f10b 0301 	add.w	r3, fp, #1
 800357c:	9302      	str	r3, [sp, #8]
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800357e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8003582:	f89d b008 	ldrb.w	fp, [sp, #8]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	459b      	cmp	fp, r3
 800358a:	d9c3      	bls.n	8003514 <usb_lld_pump+0x54>
 800358c:	9b01      	ldr	r3, [sp, #4]
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	e7a7      	b.n	80034e4 <usb_lld_pump+0x24>
 8003594:	f003 050f 	and.w	r5, r3, #15
 8003598:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800359c:	f3c3 140a 	ubfx	r4, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
 80035a0:	68eb      	ldr	r3, [r5, #12]
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	780b      	ldrb	r3, [r1, #0]
 80035a6:	b9db      	cbnz	r3, 80035e0 <usb_lld_pump+0x120>
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 80035a8:	684b      	ldr	r3, [r1, #4]
 80035aa:	688a      	ldr	r2, [r1, #8]
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
                             usbp->epc[ep]->out_state->mode.queue.rxqueue,
                             cnt);
    }
    else {
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80035ac:	68c8      	ldr	r0, [r1, #12]
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 80035ae:	3303      	adds	r3, #3
 80035b0:	1a9a      	subs	r2, r3, r2
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 80035b2:	1ce3      	adds	r3, r4, #3
  max = (max + 3) / 4;
  while (n) {
 80035b4:	089b      	lsrs	r3, r3, #2
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 80035b6:	ea4f 0292 	mov.w	r2, r2, lsr #2
  while (n) {
 80035ba:	d009      	beq.n	80035d0 <usb_lld_pump+0x110>
 80035bc:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80035c0:	4686      	mov	lr, r0
    uint32_t w = *fifop;
 80035c2:	6837      	ldr	r7, [r6, #0]
    if (max) {
 80035c4:	b112      	cbz	r2, 80035cc <usb_lld_pump+0x10c>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 80035c6:	f84e 7b04 	str.w	r7, [lr], #4
      buf += 4;
      max--;
 80035ca:	3a01      	subs	r2, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 80035cc:	3b01      	subs	r3, #1
 80035ce:	d1f8      	bne.n	80035c2 <usb_lld_pump+0x102>
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                              usbp->epc[ep]->out_state->mode.linear.rxbuf,
                              cnt,
                              usbp->epc[ep]->out_state->rxsize -
                              usbp->epc[ep]->out_state->rxcnt);
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 80035d0:	4420      	add	r0, r4
 80035d2:	60c8      	str	r0, [r1, #12]
    }
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80035d4:	68eb      	ldr	r3, [r5, #12]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	6893      	ldr	r3, [r2, #8]
 80035da:	4423      	add	r3, r4
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	e799      	b.n	8003514 <usb_lld_pump+0x54>
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
      /* Queue associated.*/
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
 80035e0:	68c8      	ldr	r0, [r1, #12]
                                   input_queue_t *iqp,
                                   size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 80035e2:	b324      	cbz	r4, 800362e <usb_lld_pump+0x16e>
 80035e4:	6942      	ldr	r2, [r0, #20]
 80035e6:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80035ea:	4627      	mov	r7, r4
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 80035ec:	2f03      	cmp	r7, #3
 80035ee:	d906      	bls.n	80035fe <usb_lld_pump+0x13e>
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
      if (iqp->q_wrptr >= iqp->q_top) {
 80035f0:	6903      	ldr	r3, [r0, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d303      	bcc.n	80035fe <usb_lld_pump+0x13e>
        iqp->q_wrptr = iqp->q_buffer;
 80035f6:	68c2      	ldr	r2, [r0, #12]
 80035f8:	6142      	str	r2, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 80035fa:	2f03      	cmp	r7, #3
 80035fc:	d8f8      	bhi.n	80035f0 <usb_lld_pump+0x130>
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
      break;

    /* One byte at time.*/
    w = *fifop;
 80035fe:	f8d6 e000 	ldr.w	lr, [r6]
 8003602:	2300      	movs	r3, #0
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 8003604:	fa2e f103 	lsr.w	r1, lr, r3
 8003608:	f102 0c01 	add.w	ip, r2, #1
 800360c:	f8c0 c014 	str.w	ip, [r0, #20]
 8003610:	7011      	strb	r1, [r2, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 8003612:	6902      	ldr	r2, [r0, #16]
 8003614:	6941      	ldr	r1, [r0, #20]
 8003616:	4291      	cmp	r1, r2
        iqp->q_wrptr = iqp->q_buffer;
 8003618:	bf24      	itt	cs
 800361a:	68c2      	ldrcs	r2, [r0, #12]
 800361c:	6142      	strcs	r2, [r0, #20]
      break;

    /* One byte at time.*/
    w = *fifop;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 800361e:	3f01      	subs	r7, #1
 8003620:	f103 0308 	add.w	r3, r3, #8
 8003624:	d003      	beq.n	800362e <usb_lld_pump+0x16e>
 8003626:	2b20      	cmp	r3, #32
 8003628:	6942      	ldr	r2, [r0, #20]
 800362a:	d1eb      	bne.n	8003604 <usb_lld_pump+0x144>
 800362c:	e7de      	b.n	80035ec <usb_lld_pump+0x12c>
 800362e:	9b01      	ldr	r3, [sp, #4]
 8003630:	f383 8811 	msr	BASEPRI, r3
    }
  }

  /* Updating queue.*/
  osalSysLock();
  iqp->q_counter += n;
 8003634:	6883      	ldr	r3, [r0, #8]
 8003636:	4423      	add	r3, r4
 8003638:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800363a:	2100      	movs	r1, #0
 800363c:	f7fd fad0 	bl	8000be0 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 8003640:	f7fd f92e 	bl	80008a0 <chSchRescheduleS>
 8003644:	2300      	movs	r3, #0
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	e7c3      	b.n	80035d4 <usb_lld_pump+0x114>
 800364c:	9a01      	ldr	r2, [sp, #4]
 800364e:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8003652:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8003656:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 800365a:	9803      	ldr	r0, [sp, #12]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800365c:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 8003660:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8003664:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8003668:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	eb09 078b 	add.w	r7, r9, fp, lsl #2
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8003674:	68fc      	ldr	r4, [r7, #12]
 8003676:	6962      	ldr	r2, [r4, #20]
 8003678:	6891      	ldr	r1, [r2, #8]
 800367a:	6853      	ldr	r3, [r2, #4]
 800367c:	4299      	cmp	r1, r3
 800367e:	f080 80b5 	bcs.w	80037ec <usb_lld_pump+0x32c>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003682:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 8003686:	8a26      	ldrh	r6, [r4, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003688:	ea4f 184b 	mov.w	r8, fp, lsl #5
 800368c:	eb00 0408 	add.w	r4, r0, r8
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003690:	1a5b      	subs	r3, r3, r1
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003692:	f8d4 1918 	ldr.w	r1, [r4, #2328]	; 0x918
 8003696:	429e      	cmp	r6, r3
 8003698:	bf28      	it	cs
 800369a:	461e      	movcs	r6, r3
 800369c:	b28b      	uxth	r3, r1
 800369e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 80036a2:	f10b 0301 	add.w	r3, fp, #1
 80036a6:	9302      	str	r3, [sp, #8]
 80036a8:	d82f      	bhi.n	800370a <usb_lld_pump+0x24a>
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80036aa:	031b      	lsls	r3, r3, #12
 80036ac:	f8cd a010 	str.w	sl, [sp, #16]
 80036b0:	469a      	mov	sl, r3

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
 80036b2:	7813      	ldrb	r3, [r2, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13d      	bne.n	8003734 <usb_lld_pump+0x274>
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 80036b8:	1cf3      	adds	r3, r6, #3
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80036ba:	68d4      	ldr	r4, [r2, #12]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80036bc:	089b      	lsrs	r3, r3, #2
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80036be:	eb00 0e0a 	add.w	lr, r0, sl
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80036c2:	bf18      	it	ne
 80036c4:	4621      	movne	r1, r4
 80036c6:	d005      	beq.n	80036d4 <usb_lld_pump+0x214>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 80036c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80036cc:	f8ce 0000 	str.w	r0, [lr]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80036d0:	3b01      	subs	r3, #1
 80036d2:	d1f9      	bne.n	80036c8 <usb_lld_pump+0x208>
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                                 usbp->epc[ep]->in_state->mode.linear.txbuf,
                                 n);
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 80036d4:	4434      	add	r4, r6
 80036d6:	60d4      	str	r4, [r2, #12]
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80036d8:	68fc      	ldr	r4, [r7, #12]
 80036da:	6962      	ldr	r2, [r4, #20]
 80036dc:	6893      	ldr	r3, [r2, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80036de:	6851      	ldr	r1, [r2, #4]
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80036e0:	4433      	add	r3, r6
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80036e2:	4299      	cmp	r1, r3
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80036e4:	6093      	str	r3, [r2, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80036e6:	d97d      	bls.n	80037e4 <usb_lld_pump+0x324>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80036e8:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 80036ec:	8a24      	ldrh	r4, [r4, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80036ee:	eb00 0508 	add.w	r5, r0, r8
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80036f2:	1ace      	subs	r6, r1, r3
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80036f4:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	bf28      	it	cs
 80036fc:	4626      	movcs	r6, r4
 80036fe:	b29b      	uxth	r3, r3
 8003700:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8003704:	d9d5      	bls.n	80036b2 <usb_lld_pump+0x1f2>
 8003706:	f8dd a010 	ldr.w	sl, [sp, #16]
      return FALSE;
 800370a:	2200      	movs	r2, #0
 800370c:	9b01      	ldr	r3, [sp, #4]
 800370e:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8003712:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 800371e:	b92a      	cbnz	r2, 800372c <usb_lld_pump+0x26c>
          otgp->DIEPEMPMSK |= epmask;
 8003720:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8003724:	9a03      	ldr	r2, [sp, #12]
 8003726:	431a      	orrs	r2, r3
 8003728:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 800372c:	2300      	movs	r3, #0
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	e724      	b.n	800357e <usb_lld_pump+0xbe>
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
      /* Queue associated.*/
      otg_fifo_write_from_queue(usbp->otg->FIFO[ep],
 8003734:	eb00 0e0a 	add.w	lr, r0, sl
 8003738:	68d0      	ldr	r0, [r2, #12]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800373a:	b1f6      	cbz	r6, 800377a <usb_lld_pump+0x2ba>
 800373c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8003740:	4632      	mov	r2, r6
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 8003742:	0891      	lsrs	r1, r2, #2
 8003744:	d12c      	bne.n	80037a0 <usb_lld_pump+0x2e0>
 8003746:	6983      	ldr	r3, [r0, #24]
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 8003748:	2100      	movs	r1, #0
 800374a:	460c      	mov	r4, r1

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800374c:	1c5d      	adds	r5, r3, #1
 800374e:	6185      	str	r5, [r0, #24]
 8003750:	781b      	ldrb	r3, [r3, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 8003752:	4565      	cmp	r5, ip

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 8003754:	fa03 f301 	lsl.w	r3, r3, r1
 8003758:	ea44 0403 	orr.w	r4, r4, r3
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
 800375c:	bf24      	itt	cs
 800375e:	68c3      	ldrcs	r3, [r0, #12]
 8003760:	6183      	strcs	r3, [r0, #24]
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 8003762:	3a01      	subs	r2, #1
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 8003764:	f101 0108 	add.w	r1, r1, #8
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 8003768:	d003      	beq.n	8003772 <usb_lld_pump+0x2b2>
 800376a:	2920      	cmp	r1, #32
 800376c:	d001      	beq.n	8003772 <usb_lld_pump+0x2b2>
 800376e:	6983      	ldr	r3, [r0, #24]
 8003770:	e7ec      	b.n	800374c <usb_lld_pump+0x28c>
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
      ntogo--;
      i++;
    }
    *fifop = w;
 8003772:	f8ce 4000 	str.w	r4, [lr]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 8003776:	2a00      	cmp	r2, #0
 8003778:	d1e3      	bne.n	8003742 <usb_lld_pump+0x282>
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	f383 8811 	msr	BASEPRI, r3
    *fifop = w;
  }

  /* Updating queue.*/
  osalSysLock();
  oqp->q_counter += n;
 8003780:	6883      	ldr	r3, [r0, #8]
 8003782:	4433      	add	r3, r6
 8003784:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003786:	2100      	movs	r1, #0
 8003788:	f7fd fa2a 	bl	8000be0 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800378c:	f7fd f888 	bl	80008a0 <chSchRescheduleS>
 8003790:	2300      	movs	r3, #0
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	e79f      	b.n	80036d8 <usb_lld_pump+0x218>
 8003798:	20000d70 	.word	0x20000d70
 800379c:	08009240 	.word	0x08009240
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 80037a0:	6984      	ldr	r4, [r0, #24]

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 80037a2:	ebbc 0304 	subs.w	r3, ip, r4
 80037a6:	bf48      	it	mi
 80037a8:	3303      	addmi	r3, #3
 80037aa:	109b      	asrs	r3, r3, #2
 80037ac:	428b      	cmp	r3, r1
 80037ae:	bf28      	it	cs
 80037b0:	460b      	movcs	r3, r1
 80037b2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80037b6:	ebcb 0202 	rsb	r2, fp, r2
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80037ba:	b13b      	cbz	r3, 80037cc <usb_lld_pump+0x30c>
 80037bc:	4621      	mov	r1, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 80037be:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c2:	f8ce 5000 	str.w	r5, [lr]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 80037c6:	3b01      	subs	r3, #1
 80037c8:	d1f9      	bne.n	80037be <usb_lld_pump+0x2fe>
 80037ca:	445c      	add	r4, fp
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
      if (oqp->q_rdptr >= oqp->q_top) {
 80037cc:	45a4      	cmp	ip, r4
    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 80037ce:	6184      	str	r4, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 80037d0:	d804      	bhi.n	80037dc <usb_lld_pump+0x31c>
        oqp->q_rdptr = oqp->q_buffer;
 80037d2:	68c3      	ldr	r3, [r0, #12]
 80037d4:	6183      	str	r3, [r0, #24]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 80037d6:	2a00      	cmp	r2, #0
 80037d8:	d1b3      	bne.n	8003742 <usb_lld_pump+0x282>
 80037da:	e7ce      	b.n	800377a <usb_lld_pump+0x2ba>
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 80037dc:	2a00      	cmp	r2, #0
 80037de:	d0cc      	beq.n	800377a <usb_lld_pump+0x2ba>
 80037e0:	4623      	mov	r3, r4
 80037e2:	e7b1      	b.n	8003748 <usb_lld_pump+0x288>
 80037e4:	f8dd a010 	ldr.w	sl, [sp, #16]
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;
 80037e8:	2201      	movs	r2, #1
 80037ea:	e78f      	b.n	800370c <usb_lld_pump+0x24c>
 80037ec:	f10b 0301 	add.w	r3, fp, #1
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	e7f9      	b.n	80037e8 <usb_lld_pump+0x328>
	...

08003800 <otg_disable_ep.isra.0>:
  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
    ;
}

static void otg_disable_ep(USBDriver *usbp) {
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003802:	2400      	movs	r4, #0
 8003804:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 8003808:	4625      	mov	r5, r4
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800380a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800380e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003812:	e014      	b.n	800383e <otg_disable_ep.isra.0+0x3e>
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 8003814:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8003818:	18c2      	adds	r2, r0, r3
 800381a:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800381e:	f8c2 7908 	str.w	r7, [r2, #2312]	; 0x908
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 8003822:	f8d1 6b00 	ldr.w	r6, [r1, #2816]	; 0xb00
 8003826:	2e00      	cmp	r6, #0
 8003828:	db17      	blt.n	800385a <otg_disable_ep.isra.0+0x5a>
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
 800382a:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800382e:	4403      	add	r3, r0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003830:	3401      	adds	r4, #1
 8003832:	4574      	cmp	r4, lr
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
 8003834:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003838:	f8c3 7b08 	str.w	r7, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800383c:	d814      	bhi.n	8003868 <otg_disable_ep.isra.0+0x68>
 800383e:	0163      	lsls	r3, r4, #5
 8003840:	18c1      	adds	r1, r0, r3
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 8003842:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8003846:	2a00      	cmp	r2, #0
 8003848:	dae4      	bge.n	8003814 <otg_disable_ep.isra.0+0x14>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800384a:	f8c1 c900 	str.w	ip, [r1, #2304]	; 0x900
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 800384e:	460e      	mov	r6, r1
 8003850:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 8003854:	0792      	lsls	r2, r2, #30
 8003856:	d5fb      	bpl.n	8003850 <otg_disable_ep.isra.0+0x50>
 8003858:	e7de      	b.n	8003818 <otg_disable_ep.isra.0+0x18>
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 800385a:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 800385e:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	; 0xb08
 8003862:	06c9      	lsls	r1, r1, #27
 8003864:	d5fb      	bpl.n	800385e <otg_disable_ep.isra.0+0x5e>
 8003866:	e7e2      	b.n	800382e <otg_disable_ep.isra.0+0x2e>
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003868:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800386c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003872:	bf00      	nop
	...

08003880 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8003880:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8003882:	4c06      	ldr	r4, [pc, #24]	; (800389c <usb_lld_init+0x1c>)
 8003884:	4620      	mov	r0, r4
 8003886:	f7fe feeb 	bl	8002660 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800388a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 8003890:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8003892:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 8003894:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8003896:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 8003898:	6663      	str	r3, [r4, #100]	; 0x64
 800389a:	bd10      	pop	{r4, pc}
 800389c:	20000f70 	.word	0x20000f70
 80038a0:	08009230 	.word	0x08009230
	...

080038b0 <usb_lld_start>:
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 80038b0:	7803      	ldrb	r3, [r0, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d000      	beq.n	80038b8 <usb_lld_start+0x8>
 80038b6:	4770      	bx	lr
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80038b8:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <usb_lld_start+0xd0>)
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80038bc:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80038be:	4298      	cmp	r0, r3
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80038c0:	b082      	sub	sp, #8
 80038c2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 80038c4:	bf18      	it	ne
 80038c6:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80038c8:	d03a      	beq.n	8003940 <usb_lld_start+0x90>
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 80038ca:	2300      	movs	r3, #0

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80038cc:	482d      	ldr	r0, [pc, #180]	; (8003984 <usb_lld_start+0xd4>)

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80038ce:	492e      	ldr	r1, [pc, #184]	; (8003988 <usb_lld_start+0xd8>)
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 80038d0:	65eb      	str	r3, [r5, #92]	; 0x5c
    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
                  GCCFG_PWRDWN;
#else
    otgp->GCCFG = GCCFG_VBUSASEN | GCCFG_VBUSBSEN | GCCFG_PWRDWN;
 80038d2:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
    usbp->txpending = 0;

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 80038d6:	60f0      	str	r0, [r6, #12]

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80038d8:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 80038dc:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 80038de:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
                  GCCFG_PWRDWN;
#else
    otgp->GCCFG = GCCFG_VBUSASEN | GCCFG_VBUSBSEN | GCCFG_PWRDWN;
 80038e2:	63b2      	str	r2, [r6, #56]	; 0x38
 80038e4:	f7fc fe24 	bl	8000530 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80038e8:	2301      	movs	r3, #1
 80038ea:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	07db      	lsls	r3, r3, #31
 80038f0:	d4fc      	bmi.n	80038ec <usb_lld_start+0x3c>
 80038f2:	200c      	movs	r0, #12
 80038f4:	f7fc fe1c 	bl	8000530 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(12);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80038f8:	6923      	ldr	r3, [r4, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	dafc      	bge.n	80038f8 <usb_lld_start+0x48>

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 80038fe:	2400      	movs	r4, #0
 8003900:	60b4      	str	r4, [r6, #8]

    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);
 8003902:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003904:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003906:	f7ff ff7b 	bl	8003800 <otg_disable_ep.isra.0>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800390a:	686b      	ldr	r3, [r5, #4]
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800390c:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 8003910:	68db      	ldr	r3, [r3, #12]
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
 8003912:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8003916:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800391a:	b16b      	cbz	r3, 8003938 <usb_lld_start+0x88>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800391c:	f243 0308 	movw	r3, #12296	; 0x3008
 8003920:	61b3      	str	r3, [r6, #24]
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8003922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 8003924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003928:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800392a:	b1d3      	cbz	r3, 8003962 <usb_lld_start+0xb2>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800392c:	68b3      	ldr	r3, [r6, #8]
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	60b3      	str	r3, [r6, #8]
  }
}
 8003934:	b002      	add	sp, #8
 8003936:	bd70      	pop	{r4, r5, r6, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 8003938:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800393c:	61b3      	str	r3, [r6, #24]
 800393e:	e7f0      	b.n	8003922 <usb_lld_start+0x72>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <usb_lld_start+0xdc>)
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003948:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	2000      	movs	r0, #0
 800394e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003952:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003954:	210e      	movs	r1, #14
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
      rccResetOTG_FS();
 8003956:	6158      	str	r0, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8003958:	2043      	movs	r0, #67	; 0x43
 800395a:	f7ff f981 	bl	8002c60 <nvicEnableVector>
 800395e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8003960:	e7b3      	b.n	80038ca <usb_lld_start+0x1a>
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <usb_lld_start+0xe0>)
 8003964:	9500      	str	r5, [sp, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800396c:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8003970:	f7fc ffce 	bl	8000910 <chThdCreateI>
 8003974:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8003976:	f7fc febb 	bl	80006f0 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 800397a:	f7fc ff91 	bl	80008a0 <chSchRescheduleS>
 800397e:	e7d5      	b.n	800392c <usb_lld_start+0x7c>
 8003980:	20000f70 	.word	0x20000f70
 8003984:	40001440 	.word	0x40001440
 8003988:	02200003 	.word	0x02200003
 800398c:	40023800 	.word	0x40023800
 8003990:	080034c1 	.word	0x080034c1
	...

080039a0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 80039a2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80039a4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80039a6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80039a8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80039aa:	692b      	ldr	r3, [r5, #16]
 80039ac:	f013 0420 	ands.w	r4, r3, #32
 80039b0:	d1fb      	bne.n	80039aa <usb_lld_reset+0xa>
 80039b2:	200c      	movs	r0, #12
 80039b4:	f7fc fdbc 	bl	8000530 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039b8:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 80039bc:	f8de 6008 	ldr.w	r6, [lr, #8]
 80039c0:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80039c2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 80039c6:	21ff      	movs	r1, #255	; 0xff
 80039c8:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039cc:	3301      	adds	r3, #1
 80039ce:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80039d0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80039d4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 80039d8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 80039dc:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80039e0:	d9f2      	bls.n	80039c8 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80039e2:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80039ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 80039ee:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 80039f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80039f4:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80039f8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80039fa:	f8de 3000 	ldr.w	r3, [lr]
 80039fe:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8003a00:	2310      	movs	r3, #16
 8003a02:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003a04:	6913      	ldr	r3, [r2, #16]
 8003a06:	f013 0410 	ands.w	r4, r3, #16
 8003a0a:	d1fb      	bne.n	8003a04 <usb_lld_reset+0x64>
 8003a0c:	200c      	movs	r0, #12
 8003a0e:	f7fc fd8f 	bl	8000530 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003a12:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8003a18:	4811      	ldr	r0, [pc, #68]	; (8003a60 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a1e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003a22:	69ab      	ldr	r3, [r5, #24]
 8003a24:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003a28:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003a2c:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003a2e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003a30:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8003a34:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8003a38:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 8003a3a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003a3e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8003a42:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8003a46:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 8003a4c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8003a54:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003a56:	62ab      	str	r3, [r5, #40]	; 0x28
 8003a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	10008040 	.word	0x10008040
 8003a60:	08009250 	.word	0x08009250
	...

08003a70 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8003a70:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8003a72:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8003a76:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003a7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a7e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003a82:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8003a86:	4770      	bx	lr
	...

08003a90 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8003a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a94:	fa0f f881 	sxth.w	r8, r1
 8003a98:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 8003a9c:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	2a02      	cmp	r2, #2
 8003aa8:	d05e      	beq.n	8003b68 <usb_lld_init_endpoint+0xd8>
 8003aaa:	2a03      	cmp	r2, #3
 8003aac:	d05e      	beq.n	8003b6c <usb_lld_init_endpoint+0xdc>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8003aae:	4e4c      	ldr	r6, [pc, #304]	; (8003be0 <usb_lld_init_endpoint+0x150>)
 8003ab0:	494c      	ldr	r1, [pc, #304]	; (8003be4 <usb_lld_init_endpoint+0x154>)
 8003ab2:	2a01      	cmp	r2, #1
 8003ab4:	bf18      	it	ne
 8003ab6:	460e      	movne	r6, r1
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 8003ab8:	6d04      	ldr	r4, [r0, #80]	; 0x50
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
  if (usbp->epc[ep]->out_cb != NULL) {
 8003aba:	68d9      	ldr	r1, [r3, #12]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 8003abc:	016a      	lsls	r2, r5, #5
 8003abe:	eb04 0e02 	add.w	lr, r4, r2
 8003ac2:	f04f 0c00 	mov.w	ip, #0
 8003ac6:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_cb != NULL) {
 8003aca:	2900      	cmp	r1, #0
 8003acc:	d073      	beq.n	8003bb6 <usb_lld_init_endpoint+0x126>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8003ace:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8003ad2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8003ad6:	0149      	lsls	r1, r1, #5
 8003ad8:	ea4e 0e06 	orr.w	lr, lr, r6
 8003adc:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8003ae0:	f105 0c10 	add.w	ip, r5, #16
 8003ae4:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003ae8:	f04f 0e01 	mov.w	lr, #1
 8003aec:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003af0:	ea4e 0101 	orr.w	r1, lr, r1
 8003af4:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8003af8:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_cb != NULL) {
 8003afa:	6899      	ldr	r1, [r3, #8]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8003afc:	f04f 0e00 	mov.w	lr, #0
 8003b00:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_cb != NULL) {
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d033      	beq.n	8003b70 <usb_lld_init_endpoint+0xe0>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 8003b08:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003b0a:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8003b0c:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8003b0e:	ea4f 0392 	mov.w	r3, r2, lsr #2
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003b12:	6d82      	ldr	r2, [r0, #88]	; 0x58
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 8003b14:	bf88      	it	hi
 8003b16:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003b18:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8003b1c:	eb03 0e02 	add.w	lr, r3, r2
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003b20:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003b24:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003b28:	01aa      	lsls	r2, r5, #6
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8003b2e:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003b32:	604b      	str	r3, [r1, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003b34:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	069a      	lsls	r2, r3, #26
 8003b3a:	d4fc      	bmi.n	8003b36 <usb_lld_init_endpoint+0xa6>
 8003b3c:	200c      	movs	r0, #12
 8003b3e:	f7fc fcf7 	bl	8000530 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8003b42:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8003b44:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8003b46:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8003b4a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8003b4e:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8003b50:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8003b52:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8003b54:	2101      	movs	r1, #1
 8003b56:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003b5a:	fa01 f505 	lsl.w	r5, r1, r5
 8003b5e:	431d      	orrs	r5, r3
 8003b60:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 8003b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8003b68:	4e1f      	ldr	r6, [pc, #124]	; (8003be8 <usb_lld_init_endpoint+0x158>)
    break;
 8003b6a:	e7a5      	b.n	8003ab8 <usb_lld_init_endpoint+0x28>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8003b6c:	4e1f      	ldr	r6, [pc, #124]	; (8003bec <usb_lld_init_endpoint+0x15c>)
    break;
 8003b6e:	e7a3      	b.n	8003ab8 <usb_lld_init_endpoint+0x28>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003b70:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 8003b74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003b78:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003b7a:	491d      	ldr	r1, [pc, #116]	; (8003bf0 <usb_lld_init_endpoint+0x160>)
 8003b7c:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	d4fc      	bmi.n	8003b84 <usb_lld_init_endpoint+0xf4>
 8003b8a:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 8003b8e:	200c      	movs	r0, #12
 8003b90:	f7fc fcce 	bl	8000530 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8003b94:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8003b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b9c:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8003ba0:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	fa02 f505 	lsl.w	r5, r2, r5
 8003baa:	ea23 0305 	bic.w	r3, r3, r5
 8003bae:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 8003bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb6:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003bba:	f105 0910 	add.w	r9, r5, #16
  if (usbp->epc[ep]->out_cb != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8003bbe:	f8d1 cb00 	ldr.w	ip, [r1, #2816]	; 0xb00
 8003bc2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003bc6:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003bca:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003bce:	f04f 0e01 	mov.w	lr, #1
 8003bd2:	fa0e fe09 	lsl.w	lr, lr, r9
 8003bd6:	ea21 010e 	bic.w	r1, r1, lr
 8003bda:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 8003bde:	e78b      	b.n	8003af8 <usb_lld_init_endpoint+0x68>
 8003be0:	10048000 	.word	0x10048000
 8003be4:	10008000 	.word	0x10008000
 8003be8:	10088000 	.word	0x10088000
 8003bec:	100c8000 	.word	0x100c8000
 8003bf0:	02000400 	.word	0x02000400
	...

08003c00 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 8003c00:	3158      	adds	r1, #88	; 0x58
 8003c02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c04:	0149      	lsls	r1, r1, #5
 8003c06:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8003c08:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003c0c:	d004      	beq.n	8003c18 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 8003c0e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8003c12:	bf14      	ite	ne
 8003c14:	2001      	movne	r0, #1
 8003c16:	2002      	moveq	r0, #2
}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	0000      	movs	r0, r0
	...

08003c20 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8003c20:	3148      	adds	r1, #72	; 0x48
 8003c22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c24:	0149      	lsls	r1, r1, #5
 8003c26:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8003c28:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003c2c:	d004      	beq.n	8003c38 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 8003c2e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8003c32:	bf14      	ite	ne
 8003c34:	2001      	movne	r0, #1
 8003c36:	2002      	moveq	r0, #2
}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	0000      	movs	r0, r0
	...

08003c40 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8003c40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003c44:	68cb      	ldr	r3, [r1, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	6011      	str	r1, [r2, #0]
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
	...

08003c60 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003c60:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 8003c64:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003c66:	68dd      	ldr	r5, [r3, #12]
 8003c68:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 8003c6a:	6863      	ldr	r3, [r4, #4]
 8003c6c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 8003c6e:	b931      	cbnz	r1, 8003c7e <usb_lld_prepare_receive+0x1e>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d904      	bls.n	8003c7e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <usb_lld_prepare_receive+0x40>)
 8003c7a:	243f      	movs	r4, #63	; 0x3f
 8003c7c:	e002      	b.n	8003c84 <usb_lld_prepare_receive+0x24>
 8003c7e:	1e5c      	subs	r4, r3, #1
 8003c80:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003c84:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8003c86:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8003c88:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003c8c:	192b      	adds	r3, r5, r4
 8003c8e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003c92:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8003c96:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 8003c9a:	bc30      	pop	{r4, r5}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	60000040 	.word	0x60000040
	...

08003cb0 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8003cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003cb4:	4e26      	ldr	r6, [pc, #152]	; (8003d50 <otg_epout_handler.constprop.7+0xa0>)
 8003cb6:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003cb8:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8003cbc:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8003cbe:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8003cc2:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8003cc6:	0720      	lsls	r0, r4, #28
 8003cc8:	d503      	bpl.n	8003cd2 <otg_epout_handler.constprop.7+0x22>
 8003cca:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003cce:	0719      	lsls	r1, r3, #28
 8003cd0:	d41d      	bmi.n	8003d0e <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8003cd2:	07e2      	lsls	r2, r4, #31
 8003cd4:	d519      	bpl.n	8003d0a <otg_epout_handler.constprop.7+0x5a>
 8003cd6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d515      	bpl.n	8003d0a <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003cde:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8003ce2:	4c1b      	ldr	r4, [pc, #108]	; (8003d50 <otg_epout_handler.constprop.7+0xa0>)
 8003ce4:	68f1      	ldr	r1, [r6, #12]
 8003ce6:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 8003ce8:	6858      	ldr	r0, [r3, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	4290      	cmp	r0, r2
 8003cee:	d316      	bcc.n	8003d1e <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003cf0:	8962      	ldrh	r2, [r4, #10]
 8003cf2:	68ce      	ldr	r6, [r1, #12]
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	40ab      	lsls	r3, r5
 8003cf8:	ea22 0303 	bic.w	r3, r2, r3
 8003cfc:	8163      	strh	r3, [r4, #10]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4620      	mov	r0, r4
 8003d02:	4633      	mov	r3, r6
    }
  }
}
 8003d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003d08:	4718      	bx	r3
 8003d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8003d0e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8003d12:	4629      	mov	r1, r5
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	4630      	mov	r0, r6
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e7d9      	b.n	8003cd2 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8003d1e:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 8003d20:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8003d22:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 8003d24:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 8003d26:	4629      	mov	r1, r5
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7ff ff99 	bl	8003c60 <usb_lld_prepare_receive>
 8003d2e:	2320      	movs	r3, #32
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d36:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8003d3a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8003d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d42:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8003d46:	f386 8811 	msr	BASEPRI, r6
 8003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000f70 	.word	0x20000f70
	...

08003d60 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003d60:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8003d64:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003d66:	68dc      	ldr	r4, [r3, #12]
 8003d68:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8003d6a:	6853      	ldr	r3, [r2, #4]
 8003d6c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 8003d6e:	b1a3      	cbz	r3, 8003d9a <usb_lld_prepare_transmit+0x3a>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8003d70:	b169      	cbz	r1, 8003d8e <usb_lld_prepare_transmit+0x2e>
 8003d72:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8003d74:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003d76:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 8003d78:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003d7c:	4422      	add	r2, r4
 8003d7e:	fbb2 f2f4 	udiv	r2, r2, r4
 8003d82:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8003d86:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8003d8a:	bc10      	pop	{r4}
 8003d8c:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d9ef      	bls.n	8003d72 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 8003d92:	2340      	movs	r3, #64	; 0x40
 8003d94:	6053      	str	r3, [r2, #4]
 8003d96:	223f      	movs	r2, #63	; 0x3f
 8003d98:	e7ec      	b.n	8003d74 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003d9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8003d9c:	bc10      	pop	{r4}

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003d9e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8003da2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003da6:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 8003daa:	4770      	bx	lr
 8003dac:	0000      	movs	r0, r0
	...

08003db0 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003db4:	4f31      	ldr	r7, [pc, #196]	; (8003e7c <otg_epin_handler.constprop.8+0xcc>)
 8003db6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003db8:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003dbc:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003dbe:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 8003dc2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003dc6:	07e1      	lsls	r1, r4, #31
 8003dc8:	d503      	bpl.n	8003dd2 <otg_epin_handler.constprop.8+0x22>
 8003dca:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8003dce:	07da      	lsls	r2, r3, #31
 8003dd0:	d40a      	bmi.n	8003de8 <otg_epin_handler.constprop.8+0x38>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8003dd2:	0623      	lsls	r3, r4, #24
 8003dd4:	d506      	bpl.n	8003de4 <otg_epin_handler.constprop.8+0x34>
 8003dd6:	2301      	movs	r3, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003dd8:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8003ddc:	fa03 f606 	lsl.w	r6, r3, r6
 8003de0:	4216      	tst	r6, r2
 8003de2:	d129      	bne.n	8003e38 <otg_epin_handler.constprop.8+0x88>
 8003de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003de8:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 8003df0:	6858      	ldr	r0, [r3, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	4290      	cmp	r0, r2
 8003df6:	d234      	bcs.n	8003e62 <otg_epin_handler.constprop.8+0xb2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8003df8:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8003dfa:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8003dfe:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 8003e00:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 8003e04:	4631      	mov	r1, r6
 8003e06:	4638      	mov	r0, r7
 8003e08:	f7ff ffaa 	bl	8003d60 <usb_lld_prepare_transmit>
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e14:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003e18:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003e1a:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8003e1e:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8003e22:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003e26:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8003e2a:	40b2      	lsls	r2, r6
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003e32:	f388 8811 	msr	BASEPRI, r8
 8003e36:	e7cc      	b.n	8003dd2 <otg_epin_handler.constprop.8+0x22>
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8003e3e:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8003e42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003e44:	480e      	ldr	r0, [pc, #56]	; (8003e80 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8003e46:	ea23 0306 	bic.w	r3, r3, r6
 8003e4a:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8003e4e:	4316      	orrs	r6, r2
 8003e50:	2100      	movs	r1, #0
 8003e52:	65fe      	str	r6, [r7, #92]	; 0x5c
 8003e54:	f7fc fe8c 	bl	8000b70 <chThdResumeI>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8003e62:	893a      	ldrh	r2, [r7, #8]
 8003e64:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	40b3      	lsls	r3, r6
 8003e6c:	ea22 0303 	bic.w	r3, r2, r3
 8003e70:	813b      	strh	r3, [r7, #8]
 8003e72:	4631      	mov	r1, r6
 8003e74:	4638      	mov	r0, r7
 8003e76:	47c0      	blx	r8
 8003e78:	e7ab      	b.n	8003dd2 <otg_epin_handler.constprop.8+0x22>
 8003e7a:	bf00      	nop
 8003e7c:	20000f70 	.word	0x20000f70
 8003e80:	20000fd0 	.word	0x20000fd0
	...

08003e90 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8003e90:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8003e92:	4d3a      	ldr	r5, [pc, #232]	; (8003f7c <Vector14C+0xec>)
 8003e94:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8003e96:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 8003e98:	69b3      	ldr	r3, [r6, #24]
 8003e9a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8003e9c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 8003e9e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8003ea0:	d42d      	bmi.n	8003efe <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8003ea2:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 8003ea4:	bf48      	it	mi
 8003ea6:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8003eaa:	0723      	lsls	r3, r4, #28
 8003eac:	d504      	bpl.n	8003eb8 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 8003eae:	686b      	ldr	r3, [r5, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	b10b      	cbz	r3, 8003eb8 <Vector14C+0x28>
 8003eb4:	4831      	ldr	r0, [pc, #196]	; (8003f7c <Vector14C+0xec>)
 8003eb6:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 8003eb8:	06e5      	lsls	r5, r4, #27
 8003eba:	d42b      	bmi.n	8003f14 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 8003ebc:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 8003ebe:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 8003ec2:	d507      	bpl.n	8003ed4 <Vector14C+0x44>
    if (src & (1 << 0))
 8003ec4:	07e9      	lsls	r1, r5, #31
 8003ec6:	d445      	bmi.n	8003f54 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 8003ec8:	07aa      	lsls	r2, r5, #30
 8003eca:	d448      	bmi.n	8003f5e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 8003ecc:	076b      	lsls	r3, r5, #29
 8003ece:	d44b      	bmi.n	8003f68 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 8003ed0:	072e      	lsls	r6, r5, #28
 8003ed2:	d44e      	bmi.n	8003f72 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8003ed4:	0324      	lsls	r4, r4, #12
 8003ed6:	d507      	bpl.n	8003ee8 <Vector14C+0x58>
    if (src & (1 << 16))
 8003ed8:	03e8      	lsls	r0, r5, #15
 8003eda:	d430      	bmi.n	8003f3e <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 8003edc:	03a9      	lsls	r1, r5, #14
 8003ede:	d433      	bmi.n	8003f48 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 8003ee0:	036a      	lsls	r2, r5, #13
 8003ee2:	d426      	bmi.n	8003f32 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 8003ee4:	032b      	lsls	r3, r5, #12
 8003ee6:	d403      	bmi.n	8003ef0 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8003ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8003eec:	f7fe b858 	b.w	8001fa0 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f7ff fedd 	bl	8003cb0 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8003ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8003efa:	f7fe b851 	b.w	8001fa0 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fe fc2e 	bl	8002760 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8003f04:	686b      	ldr	r3, [r5, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ca      	beq.n	8003ea2 <Vector14C+0x12>
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	4798      	blx	r3
 8003f12:	e7c6      	b.n	8003ea2 <Vector14C+0x12>
 8003f14:	2320      	movs	r3, #32
 8003f16:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8003f1a:	69b3      	ldr	r3, [r6, #24]
 8003f1c:	4818      	ldr	r0, [pc, #96]	; (8003f80 <Vector14C+0xf0>)
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	61b3      	str	r3, [r6, #24]
 8003f24:	2100      	movs	r1, #0
 8003f26:	f7fc fe23 	bl	8000b70 <chThdResumeI>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	e7c4      	b.n	8003ebc <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 8003f32:	2002      	movs	r0, #2
 8003f34:	f7ff febc 	bl	8003cb0 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 8003f38:	032b      	lsls	r3, r5, #12
 8003f3a:	d5d5      	bpl.n	8003ee8 <Vector14C+0x58>
 8003f3c:	e7d8      	b.n	8003ef0 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7ff feb6 	bl	8003cb0 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 8003f44:	03a9      	lsls	r1, r5, #14
 8003f46:	d5cb      	bpl.n	8003ee0 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f7ff feb1 	bl	8003cb0 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 8003f4e:	036a      	lsls	r2, r5, #13
 8003f50:	d5c8      	bpl.n	8003ee4 <Vector14C+0x54>
 8003f52:	e7ee      	b.n	8003f32 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7ff ff2b 	bl	8003db0 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 8003f5a:	07aa      	lsls	r2, r5, #30
 8003f5c:	d5b6      	bpl.n	8003ecc <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f7ff ff26 	bl	8003db0 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 8003f64:	076b      	lsls	r3, r5, #29
 8003f66:	d5b3      	bpl.n	8003ed0 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f7ff ff21 	bl	8003db0 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 8003f6e:	072e      	lsls	r6, r5, #28
 8003f70:	d5b0      	bpl.n	8003ed4 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 8003f72:	2003      	movs	r0, #3
 8003f74:	f7ff ff1c 	bl	8003db0 <otg_epin_handler.constprop.8>
 8003f78:	e7ac      	b.n	8003ed4 <Vector14C+0x44>
 8003f7a:	bf00      	nop
 8003f7c:	20000f70 	.word	0x20000f70
 8003f80:	20000fd0 	.word	0x20000fd0
	...

08003f90 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8003f90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003f92:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8003f96:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f9e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8003fa2:	4770      	bx	lr
	...

08003fb0 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003fb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8003fb2:	b410      	push	{r4}
 8003fb4:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003fb8:	2001      	movs	r0, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003fba:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 8003fbe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003fc2:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003fc6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
}
 8003fca:	bc10      	pop	{r4}
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003fcc:	fa00 f101 	lsl.w	r1, r0, r1
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
}
 8003fd6:	4770      	bx	lr
	...

08003fe0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8003fe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003fe2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8003fe6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8003fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fee:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8003ff2:	4770      	bx	lr
	...

08004000 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8004000:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004002:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8004006:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800400a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800400e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004012:	4770      	bx	lr
	...

08004020 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8004020:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004022:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004026:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800402a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800402e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004032:	4770      	bx	lr
	...

08004040 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004040:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004042:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004046:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800404a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800404e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004052:	4770      	bx	lr
	...

08004060 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004060:	f011 0f0c 	tst.w	r1, #12
 8004064:	d100      	bne.n	8004068 <spi_lld_serve_tx_interrupt+0x8>
 8004066:	4770      	bx	lr
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <spi_lld_serve_tx_interrupt+0x10>)
 800406a:	f7fc b999 	b.w	80003a0 <chSysHalt>
 800406e:	bf00      	nop
 8004070:	08009280 	.word	0x08009280
	...

08004080 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004080:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004088:	d134      	bne.n	80040f4 <spi_lld_serve_rx_interrupt+0x74>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800408a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	f023 031f 	bic.w	r3, r3, #31
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	07d9      	lsls	r1, r3, #31
 800409a:	d4fc      	bmi.n	8004096 <spi_lld_serve_rx_interrupt+0x16>
 800409c:	7a05      	ldrb	r5, [r0, #8]
  dmaStreamDisable(spip->dmarx);
 800409e:	6a21      	ldr	r1, [r4, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80040a0:	6840      	ldr	r0, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 80040a2:	680a      	ldr	r2, [r1, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80040a4:	233d      	movs	r3, #61	; 0x3d
 80040a6:	40ab      	lsls	r3, r5
 80040a8:	6003      	str	r3, [r0, #0]
  dmaStreamDisable(spip->dmarx);
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	f023 031f 	bic.w	r3, r3, #31
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	07db      	lsls	r3, r3, #31
 80040b6:	d4fc      	bmi.n	80040b2 <spi_lld_serve_rx_interrupt+0x32>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80040b8:	6863      	ldr	r3, [r4, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80040ba:	7a08      	ldrb	r0, [r1, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80040bc:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80040be:	6849      	ldr	r1, [r1, #4]
 80040c0:	233d      	movs	r3, #61	; 0x3d
 80040c2:	4083      	lsls	r3, r0
 80040c4:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80040c6:	b192      	cbz	r2, 80040ee <spi_lld_serve_rx_interrupt+0x6e>
 80040c8:	2304      	movs	r3, #4
 80040ca:	7023      	strb	r3, [r4, #0]
 80040cc:	4620      	mov	r0, r4
 80040ce:	4790      	blx	r2
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d00b      	beq.n	80040ee <spi_lld_serve_rx_interrupt+0x6e>
 80040d6:	2320      	movs	r3, #32
 80040d8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80040dc:	2100      	movs	r1, #0
 80040de:	f104 0008 	add.w	r0, r4, #8
 80040e2:	f7fc fd45 	bl	8000b70 <chThdResumeI>
 80040e6:	2300      	movs	r3, #0
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	bd38      	pop	{r3, r4, r5, pc}
 80040ee:	2302      	movs	r3, #2
 80040f0:	7023      	strb	r3, [r4, #0]
 80040f2:	e7f0      	b.n	80040d6 <spi_lld_serve_rx_interrupt+0x56>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <spi_lld_serve_rx_interrupt+0x7c>)
 80040f6:	f7fc f953 	bl	80003a0 <chSysHalt>
 80040fa:	e7c6      	b.n	800408a <spi_lld_serve_rx_interrupt+0xa>
 80040fc:	08009280 	.word	0x08009280

08004100 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004100:	b570      	push	{r4, r5, r6, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004102:	4e11      	ldr	r6, [pc, #68]	; (8004148 <spi_lld_init+0x48>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <spi_lld_init+0x4c>)
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8004106:	4c12      	ldr	r4, [pc, #72]	; (8004150 <spi_lld_init+0x50>)
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004108:	4d12      	ldr	r5, [pc, #72]	; (8004154 <spi_lld_init+0x54>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800410a:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 800410e:	4630      	mov	r0, r6
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004110:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004112:	f7fe fa35 	bl	8002580 <spiObjectInit>
  SPID1.spi       = SPI1;
 8004116:	4910      	ldr	r1, [pc, #64]	; (8004158 <spi_lld_init+0x58>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004118:	4a10      	ldr	r2, [pc, #64]	; (800415c <spi_lld_init+0x5c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <spi_lld_init+0x60>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800411c:	61f1      	str	r1, [r6, #28]
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 800411e:	4620      	mov	r0, r4

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004120:	f105 0124 	add.w	r1, r5, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004124:	6235      	str	r5, [r6, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004126:	6271      	str	r1, [r6, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004128:	62b2      	str	r2, [r6, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800412a:	62f3      	str	r3, [r6, #44]	; 0x2c
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 800412c:	f7fe fa28 	bl	8002580 <spiObjectInit>
  SPID2.spi       = SPI2;
 8004130:	490c      	ldr	r1, [pc, #48]	; (8004164 <spi_lld_init+0x64>)
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8004132:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <spi_lld_init+0x68>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <spi_lld_init+0x6c>)
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8004136:	61e1      	str	r1, [r4, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8004138:	f1a5 013c 	sub.w	r1, r5, #60	; 0x3c
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 800413c:	3d30      	subs	r5, #48	; 0x30
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 800413e:	6221      	str	r1, [r4, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8004140:	6265      	str	r5, [r4, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8004142:	62a2      	str	r2, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8004144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	20001140 	.word	0x20001140
 800414c:	2000113c 	.word	0x2000113c
 8004150:	20001170 	.word	0x20001170
 8004154:	080091d0 	.word	0x080091d0
 8004158:	40013000 	.word	0x40013000
 800415c:	06010016 	.word	0x06010016
 8004160:	06010046 	.word	0x06010046
 8004164:	40003800 	.word	0x40003800
 8004168:	00010016 	.word	0x00010016
 800416c:	00010046 	.word	0x00010046

08004170 <spi_lld_start>:
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004170:	7803      	ldrb	r3, [r0, #0]
 8004172:	2b01      	cmp	r3, #1
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004178:	d01d      	beq.n	80041b6 <spi_lld_start+0x46>
 800417a:	69c3      	ldr	r3, [r0, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800417c:	6862      	ldr	r2, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800417e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004180:	8952      	ldrh	r2, [r2, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004182:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004184:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004188:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800418c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004190:	bf1c      	itt	ne
 8004192:	f440 5020 	orrne.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004196:	f441 5120 	orrne.w	r1, r1, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800419a:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800419c:	62e1      	str	r1, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800419e:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80041a2:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80041a4:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80041a6:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80041a8:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80041aa:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	bd10      	pop	{r4, pc}
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <spi_lld_start+0xb0>)
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d00c      	beq.n	80041d6 <spi_lld_start+0x66>
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <spi_lld_start+0xb4>)
 80041be:	4298      	cmp	r0, r3
 80041c0:	d01b      	beq.n	80041fa <spi_lld_start+0x8a>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80041c2:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80041c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80041c6:	69e3      	ldr	r3, [r4, #28]
 80041c8:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80041ca:	6811      	ldr	r1, [r2, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80041cc:	f103 020c 	add.w	r2, r3, #12
 80041d0:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80041d2:	608a      	str	r2, [r1, #8]
 80041d4:	e7d2      	b.n	800417c <spi_lld_start+0xc>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a13      	ldr	r2, [pc, #76]	; (8004228 <spi_lld_start+0xb8>)
 80041da:	6a00      	ldr	r0, [r0, #32]
 80041dc:	210a      	movs	r1, #10
 80041de:	f7fe ff0f 	bl	8003000 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 80041e2:	4623      	mov	r3, r4
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <spi_lld_start+0xbc>)
 80041e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80041e8:	210a      	movs	r1, #10
 80041ea:	f7fe ff09 	bl	8003000 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <spi_lld_start+0xc0>)
 80041f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80041f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041f6:	6453      	str	r3, [r2, #68]	; 0x44
 80041f8:	e7e3      	b.n	80041c2 <spi_lld_start+0x52>
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <spi_lld_start+0xb8>)
 80041fe:	6a00      	ldr	r0, [r0, #32]
 8004200:	210a      	movs	r1, #10
 8004202:	f7fe fefd 	bl	8003000 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8004206:	4623      	mov	r3, r4
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <spi_lld_start+0xbc>)
 800420a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800420c:	210a      	movs	r1, #10
 800420e:	f7fe fef7 	bl	8003000 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <spi_lld_start+0xc0>)
 8004214:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421a:	6413      	str	r3, [r2, #64]	; 0x40
 800421c:	e7d1      	b.n	80041c2 <spi_lld_start+0x52>
 800421e:	bf00      	nop
 8004220:	20001140 	.word	0x20001140
 8004224:	20001170 	.word	0x20001170
 8004228:	08004081 	.word	0x08004081
 800422c:	08004061 	.word	0x08004061
 8004230:	40023800 	.word	0x40023800
	...

08004240 <spi_lld_select>:
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8004240:	6842      	ldr	r2, [r0, #4]
 8004242:	8911      	ldrh	r1, [r2, #8]
 8004244:	6852      	ldr	r2, [r2, #4]
 8004246:	2301      	movs	r3, #1
 8004248:	408b      	lsls	r3, r1
 800424a:	b29b      	uxth	r3, r3
 800424c:	8353      	strh	r3, [r2, #26]
 800424e:	4770      	bx	lr

08004250 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8004250:	6842      	ldr	r2, [r0, #4]
 8004252:	8911      	ldrh	r1, [r2, #8]
 8004254:	6852      	ldr	r2, [r2, #4]
 8004256:	2301      	movs	r3, #1
 8004258:	408b      	lsls	r3, r1
 800425a:	b29b      	uxth	r3, r3
 800425c:	8313      	strh	r3, [r2, #24]
 800425e:	4770      	bx	lr

08004260 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8004260:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004262:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004264:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004266:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004268:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800426a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800426c:	6838      	ldr	r0, [r7, #0]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800426e:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004270:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004274:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004278:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800427a:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800427c:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800427e:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004280:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800428a:	6803      	ldr	r3, [r0, #0]
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6003      	str	r3, [r0, #0]
}
 8004292:	bcf0      	pop	{r4, r5, r6, r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
	...

080042a0 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 80042a0:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80042a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80042a4:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80042a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80042a8:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80042aa:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80042ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80042ae:	4e09      	ldr	r6, [pc, #36]	; (80042d4 <spi_lld_send+0x34>)
 80042b0:	60e6      	str	r6, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80042b2:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80042b6:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80042b8:	6020      	str	r0, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80042ba:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80042bc:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80042be:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80042c0:	6822      	ldr	r2, [r4, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
}
 80042d0:	bc70      	pop	{r4, r5, r6}
 80042d2:	4770      	bx	lr
 80042d4:	200011a0 	.word	0x200011a0
	...

080042e0 <pwm_lld_serve_interrupt>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 */
static void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80042e0:	6983      	ldr	r3, [r0, #24]
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 */
static void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80042e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80042e4:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	4014      	ands	r4, r2
  pwmp->tim->SR = ~sr;
 80042ea:	b2e2      	uxtb	r2, r4
 80042ec:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80042ee:	07a6      	lsls	r6, r4, #30
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 */
static void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80042f0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 80042f2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80042f4:	d503      	bpl.n	80042fe <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80042f6:	6843      	ldr	r3, [r0, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80042fa:	b103      	cbz	r3, 80042fe <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80042fc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80042fe:	0760      	lsls	r0, r4, #29
 8004300:	d504      	bpl.n	800430c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8004302:	686b      	ldr	r3, [r5, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004306:	b10b      	cbz	r3, 800430c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8004308:	4628      	mov	r0, r5
 800430a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800430c:	0721      	lsls	r1, r4, #28
 800430e:	d504      	bpl.n	800431a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8004310:	686b      	ldr	r3, [r5, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004314:	b10b      	cbz	r3, 800431a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8004316:	4628      	mov	r0, r5
 8004318:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800431a:	06e2      	lsls	r2, r4, #27
 800431c:	d504      	bpl.n	8004328 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800431e:	686b      	ldr	r3, [r5, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004322:	b10b      	cbz	r3, 8004328 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8004324:	4628      	mov	r0, r5
 8004326:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004328:	07e3      	lsls	r3, r4, #31
 800432a:	d506      	bpl.n	800433a <pwm_lld_serve_interrupt+0x5a>
 800432c:	686b      	ldr	r3, [r5, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	b11b      	cbz	r3, 800433a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8004332:	4628      	mov	r0, r5
}
 8004334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8004338:	4718      	bx	r3
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	0000      	movs	r0, r0
	...

08004340 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  STM32_TIM1->SR = ~STM32_TIM_SR_UIF;
  if (PWMD1.config->callback != NULL)
 8004340:	4806      	ldr	r0, [pc, #24]	; (800435c <VectorA4+0x1c>)
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  STM32_TIM1->SR = ~STM32_TIM_SR_UIF;
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <VectorA4+0x20>)
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8004344:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_TIM1->SR = ~STM32_TIM_SR_UIF;
  if (PWMD1.config->callback != NULL)
 8004346:	6843      	ldr	r3, [r0, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  STM32_TIM1->SR = ~STM32_TIM_SR_UIF;
 800434a:	f06f 0101 	mvn.w	r1, #1
 800434e:	6111      	str	r1, [r2, #16]
  if (PWMD1.config->callback != NULL)
 8004350:	b103      	cbz	r3, 8004354 <VectorA4+0x14>
    PWMD1.config->callback(&PWMD1);
 8004352:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8004354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  STM32_TIM1->SR = ~STM32_TIM_SR_UIF;
  if (PWMD1.config->callback != NULL)
    PWMD1.config->callback(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8004358:	f7fd be22 	b.w	8001fa0 <_port_irq_epilogue>
 800435c:	200011a4 	.word	0x200011a4
 8004360:	40010000 	.word	0x40010000
	...

08004370 <VectorAC>:
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

  sr = STM32_TIM1->SR & STM32_TIM1->DIER & (STM32_TIM_DIER_CC1IE |
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <VectorAC+0x54>)
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8004372:	b510      	push	{r4, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

  sr = STM32_TIM1->SR & STM32_TIM1->DIER & (STM32_TIM_DIER_CC1IE |
 8004374:	691c      	ldr	r4, [r3, #16]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	4014      	ands	r4, r2
                                            STM32_TIM_DIER_CC2IE |
                                            STM32_TIM_DIER_CC3IE |
                                            STM32_TIM_DIER_CC4IE);
  STM32_TIM1->SR = ~sr;
 800437a:	f004 021e 	and.w	r2, r4, #30
 800437e:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004380:	07a0      	lsls	r0, r4, #30

  sr = STM32_TIM1->SR & STM32_TIM1->DIER & (STM32_TIM_DIER_CC1IE |
                                            STM32_TIM_DIER_CC2IE |
                                            STM32_TIM_DIER_CC3IE |
                                            STM32_TIM_DIER_CC4IE);
  STM32_TIM1->SR = ~sr;
 8004382:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004384:	d504      	bpl.n	8004390 <VectorAC+0x20>
      (PWMD1.config->channels[0].callback != NULL))
 8004386:	4810      	ldr	r0, [pc, #64]	; (80043c8 <VectorAC+0x58>)
 8004388:	6843      	ldr	r3, [r0, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
  sr = STM32_TIM1->SR & STM32_TIM1->DIER & (STM32_TIM_DIER_CC1IE |
                                            STM32_TIM_DIER_CC2IE |
                                            STM32_TIM_DIER_CC3IE |
                                            STM32_TIM_DIER_CC4IE);
  STM32_TIM1->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800438c:	b103      	cbz	r3, 8004390 <VectorAC+0x20>
      (PWMD1.config->channels[0].callback != NULL))
    PWMD1.config->channels[0].callback(&PWMD1);
 800438e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004390:	0761      	lsls	r1, r4, #29
 8004392:	d504      	bpl.n	800439e <VectorAC+0x2e>
      (PWMD1.config->channels[1].callback != NULL))
 8004394:	480c      	ldr	r0, [pc, #48]	; (80043c8 <VectorAC+0x58>)
 8004396:	6843      	ldr	r3, [r0, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
                                            STM32_TIM_DIER_CC4IE);
  STM32_TIM1->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (PWMD1.config->channels[0].callback != NULL))
    PWMD1.config->channels[0].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800439a:	b103      	cbz	r3, 800439e <VectorAC+0x2e>
      (PWMD1.config->channels[1].callback != NULL))
    PWMD1.config->channels[1].callback(&PWMD1);
 800439c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800439e:	0722      	lsls	r2, r4, #28
 80043a0:	d504      	bpl.n	80043ac <VectorAC+0x3c>
      (PWMD1.config->channels[2].callback != NULL))
 80043a2:	4809      	ldr	r0, [pc, #36]	; (80043c8 <VectorAC+0x58>)
 80043a4:	6843      	ldr	r3, [r0, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
      (PWMD1.config->channels[0].callback != NULL))
    PWMD1.config->channels[0].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (PWMD1.config->channels[1].callback != NULL))
    PWMD1.config->channels[1].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80043a8:	b103      	cbz	r3, 80043ac <VectorAC+0x3c>
      (PWMD1.config->channels[2].callback != NULL))
    PWMD1.config->channels[2].callback(&PWMD1);
 80043aa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80043ac:	06e3      	lsls	r3, r4, #27
 80043ae:	d504      	bpl.n	80043ba <VectorAC+0x4a>
      (PWMD1.config->channels[3].callback != NULL))
 80043b0:	4805      	ldr	r0, [pc, #20]	; (80043c8 <VectorAC+0x58>)
 80043b2:	6843      	ldr	r3, [r0, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (PWMD1.config->channels[1].callback != NULL))
    PWMD1.config->channels[1].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (PWMD1.config->channels[2].callback != NULL))
    PWMD1.config->channels[2].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80043b6:	b103      	cbz	r3, 80043ba <VectorAC+0x4a>
      (PWMD1.config->channels[3].callback != NULL))
    PWMD1.config->channels[3].callback(&PWMD1);
 80043b8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80043ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PWMD1.config->channels[2].callback(&PWMD1);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (PWMD1.config->channels[3].callback != NULL))
    PWMD1.config->channels[3].callback(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 80043be:	f7fd bdef 	b.w	8001fa0 <_port_irq_epilogue>
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	200011a4 	.word	0x200011a4
 80043cc:	00000000 	.word	0x00000000

080043d0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80043d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);
 80043d2:	4803      	ldr	r0, [pc, #12]	; (80043e0 <VectorB4+0x10>)
 80043d4:	f7ff ff84 	bl	80042e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80043d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD3);

  OSAL_IRQ_EPILOGUE();
 80043dc:	f7fd bde0 	b.w	8001fa0 <_port_irq_epilogue>
 80043e0:	200011c0 	.word	0x200011c0
	...

080043f0 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80043f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);
 80043f2:	4803      	ldr	r0, [pc, #12]	; (8004400 <Vector108+0x10>)
 80043f4:	f7ff ff74 	bl	80042e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 80043f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);

  OSAL_IRQ_EPILOGUE();
 80043fc:	f7fd bdd0 	b.w	8001fa0 <_port_irq_epilogue>
 8004400:	200011dc 	.word	0x200011dc
	...

08004410 <VectorA0>:
/**
 * @brief   TIM9 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
 8004410:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD9);
 8004412:	4803      	ldr	r0, [pc, #12]	; (8004420 <VectorA0+0x10>)
 8004414:	f7ff ff64 	bl	80042e0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8004418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD9);

  OSAL_IRQ_EPILOGUE();
 800441c:	f7fd bdc0 	b.w	8001fa0 <_port_irq_epilogue>
 8004420:	200011f8 	.word	0x200011f8
	...

08004430 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
 8004434:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004498 <pwm_lld_init+0x68>
  PWMD2.tim = STM32_TIM2;
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
 8004438:	4f10      	ldr	r7, [pc, #64]	; (800447c <pwm_lld_init+0x4c>)
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 800443a:	4d11      	ldr	r5, [pc, #68]	; (8004480 <pwm_lld_init+0x50>)
  PWMD8.tim = STM32_TIM8;
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
 800443c:	4c11      	ldr	r4, [pc, #68]	; (8004484 <pwm_lld_init+0x54>)
 */
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
 800443e:	4640      	mov	r0, r8
 8004440:	f7fd fe16 	bl	8002070 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8004444:	2604      	movs	r6, #4
  PWMD1.tim = STM32_TIM1;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <pwm_lld_init+0x58>)
 8004448:	f8c8 3018 	str.w	r3, [r8, #24]
  PWMD2.tim = STM32_TIM2;
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
 800444c:	4638      	mov	r0, r7
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 800444e:	f888 6010 	strb.w	r6, [r8, #16]
  PWMD2.tim = STM32_TIM2;
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
 8004452:	f7fd fe0d 	bl	8002070 <pwmObjectInit>
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <pwm_lld_init+0x5c>)
 8004458:	61bb      	str	r3, [r7, #24]
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 800445a:	4628      	mov	r0, r5
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
 800445c:	743e      	strb	r6, [r7, #16]
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 800445e:	f7fd fe07 	bl	8002070 <pwmObjectInit>
  PWMD5.channels = STM32_TIM5_CHANNELS;
  PWMD5.tim = STM32_TIM5;
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <pwm_lld_init+0x60>)
 8004464:	61ab      	str	r3, [r5, #24]
  PWMD8.tim = STM32_TIM8;
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
 8004466:	4620      	mov	r0, r4
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8004468:	742e      	strb	r6, [r5, #16]
  PWMD8.tim = STM32_TIM8;
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
 800446a:	f7fd fe01 	bl	8002070 <pwmObjectInit>
  PWMD9.channels = STM32_TIM9_CHANNELS;
 800446e:	2202      	movs	r2, #2
  PWMD9.tim = STM32_TIM9;
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <pwm_lld_init+0x64>)
#endif

#if STM32_PWM_USE_TIM9
  /* Driver initialization.*/
  pwmObjectInit(&PWMD9);
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8004472:	7422      	strb	r2, [r4, #16]
  PWMD9.tim = STM32_TIM9;
 8004474:	61a3      	str	r3, [r4, #24]
 8004476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800447a:	bf00      	nop
 800447c:	200011c0 	.word	0x200011c0
 8004480:	200011dc 	.word	0x200011dc
 8004484:	200011f8 	.word	0x200011f8
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40014000 	.word	0x40014000
 8004498:	200011a4 	.word	0x200011a4
 800449c:	00000000 	.word	0x00000000

080044a0 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 80044a2:	7803      	ldrb	r3, [r0, #0]
 80044a4:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 80044a6:	4604      	mov	r4, r0
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 80044a8:	d04e      	beq.n	8004548 <pwm_lld_start+0xa8>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80044aa:	6983      	ldr	r3, [r0, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80044ba:	6861      	ldr	r1, [r4, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 80044bc:	68a5      	ldr	r5, [r4, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80044be:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80044c0:	6960      	ldr	r0, [r4, #20]
 80044c2:	680f      	ldr	r7, [r1, #0]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 80044c4:	6ace      	ldr	r6, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80044c6:	fbb0 f0f7 	udiv	r0, r0, r7
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80044ca:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 80044ce:	1e6c      	subs	r4, r5, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80044d0:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80044d2:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 80044d4:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80044d6:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 80044d8:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80044da:	d003      	beq.n	80044e4 <pwm_lld_start+0x44>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 80044dc:	2a02      	cmp	r2, #2
 80044de:	bf0c      	ite	eq
 80044e0:	2203      	moveq	r2, #3
 80044e2:	2200      	movne	r2, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80044e4:	6948      	ldr	r0, [r1, #20]
 80044e6:	f000 000f 	and.w	r0, r0, #15
 80044ea:	2801      	cmp	r0, #1
 80044ec:	d029      	beq.n	8004542 <pwm_lld_start+0xa2>
 80044ee:	2802      	cmp	r0, #2
 80044f0:	d025      	beq.n	800453e <pwm_lld_start+0x9e>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80044f2:	69c8      	ldr	r0, [r1, #28]
 80044f4:	f000 000f 	and.w	r0, r0, #15
 80044f8:	2801      	cmp	r0, #1
 80044fa:	d01d      	beq.n	8004538 <pwm_lld_start+0x98>
 80044fc:	2802      	cmp	r0, #2
 80044fe:	d019      	beq.n	8004534 <pwm_lld_start+0x94>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8004500:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004502:	f000 000f 	and.w	r0, r0, #15
 8004506:	2801      	cmp	r0, #1
 8004508:	d003      	beq.n	8004512 <pwm_lld_start+0x72>
 800450a:	2802      	cmp	r0, #2
 800450c:	d103      	bne.n	8004516 <pwm_lld_start+0x76>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 800450e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8004512:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004516:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004518:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 800451a:	2501      	movs	r5, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800451c:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004520:	2400      	movs	r4, #0
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8004522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004526:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004528:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800452a:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800452c:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 800452e:	6458      	str	r0, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004530:	6019      	str	r1, [r3, #0]
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8004538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453c:	e7e0      	b.n	8004500 <pwm_lld_start+0x60>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 800453e:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8004542:	f042 0210 	orr.w	r2, r2, #16
 8004546:	e7d4      	b.n	80044f2 <pwm_lld_start+0x52>
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 8004548:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <pwm_lld_start+0x164>)
 800454a:	4298      	cmp	r0, r3
 800454c:	d00e      	beq.n	800456c <pwm_lld_start+0xcc>
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_PWM_TIM2_IRQ_PRIORITY);
      pwmp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <pwm_lld_start+0x168>)
 8004550:	4298      	cmp	r0, r3
 8004552:	d021      	beq.n	8004598 <pwm_lld_start+0xf8>
      pwmp->clock = STM32_TIMCLK1;
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
 8004554:	4b2d      	ldr	r3, [pc, #180]	; (800460c <pwm_lld_start+0x16c>)
 8004556:	4298      	cmp	r0, r3
 8004558:	d030      	beq.n	80045bc <pwm_lld_start+0x11c>
      pwmp->clock = STM32_TIMCLK2;
#endif
    }
#endif
#if STM32_PWM_USE_TIM9
    if (&PWMD9 == pwmp) {
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <pwm_lld_start+0x170>)
 800455c:	4298      	cmp	r0, r3
 800455e:	d03f      	beq.n	80045e0 <pwm_lld_start+0x140>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004560:	69a3      	ldr	r3, [r4, #24]
 8004562:	f646 0268 	movw	r2, #26728	; 0x6868
 8004566:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8004568:	61da      	str	r2, [r3, #28]
 800456a:	e7a6      	b.n	80044ba <pwm_lld_start+0x1a>

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <pwm_lld_start+0x174>)
 800456e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
      rccResetTIM1();
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	2000      	movs	r0, #0
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8004580:	2107      	movs	r1, #7
  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
      rccResetTIM1();
 8004582:	6258      	str	r0, [r3, #36]	; 0x24
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8004584:	2019      	movs	r0, #25
 8004586:	f7fe fb6b 	bl	8002c60 <nvicEnableVector>
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 800458a:	2107      	movs	r1, #7
 800458c:	201b      	movs	r0, #27
 800458e:	f7fe fb67 	bl	8002c60 <nvicEnableVector>
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <pwm_lld_start+0x178>)
 8004594:	6163      	str	r3, [r4, #20]
 8004596:	e7e3      	b.n	8004560 <pwm_lld_start+0xc0>
      pwmp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <pwm_lld_start+0x174>)
 800459a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459c:	f042 0202 	orr.w	r2, r2, #2
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	2000      	movs	r0, #0
 80045a6:	f042 0202 	orr.w	r2, r2, #2
 80045aa:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 80045ac:	2107      	movs	r1, #7
    }
#endif
#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 80045ae:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 80045b0:	201d      	movs	r0, #29
 80045b2:	f7fe fb55 	bl	8002c60 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK1;
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <pwm_lld_start+0x17c>)
 80045b8:	6163      	str	r3, [r4, #20]
 80045ba:	e7d1      	b.n	8004560 <pwm_lld_start+0xc0>
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <pwm_lld_start+0x174>)
 80045be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c0:	f042 0208 	orr.w	r2, r2, #8
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM5();
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	2000      	movs	r0, #0
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 80045d0:	2107      	movs	r1, #7
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
      rccResetTIM5();
 80045d2:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 80045d4:	2032      	movs	r0, #50	; 0x32
 80045d6:	f7fe fb43 	bl	8002c60 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK1;
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <pwm_lld_start+0x17c>)
 80045dc:	6163      	str	r3, [r4, #20]
 80045de:	e7bf      	b.n	8004560 <pwm_lld_start+0xc0>
#endif
    }
#endif
#if STM32_PWM_USE_TIM9
    if (&PWMD9 == pwmp) {
      rccEnableTIM9(FALSE);
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <pwm_lld_start+0x174>)
 80045e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
      rccResetTIM9();
 80045ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ec:	2000      	movs	r0, #0
 80045ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
      nvicEnableVector(STM32_TIM9_NUMBER, STM32_PWM_TIM9_IRQ_PRIORITY);
 80045f4:	2107      	movs	r1, #7
    }
#endif
#if STM32_PWM_USE_TIM9
    if (&PWMD9 == pwmp) {
      rccEnableTIM9(FALSE);
      rccResetTIM9();
 80045f6:	6258      	str	r0, [r3, #36]	; 0x24
      nvicEnableVector(STM32_TIM9_NUMBER, STM32_PWM_TIM9_IRQ_PRIORITY);
 80045f8:	2018      	movs	r0, #24
 80045fa:	f7fe fb31 	bl	8002c60 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK2;
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <pwm_lld_start+0x178>)
 8004600:	6163      	str	r3, [r4, #20]
 8004602:	e7ad      	b.n	8004560 <pwm_lld_start+0xc0>
 8004604:	200011a4 	.word	0x200011a4
 8004608:	200011c0 	.word	0x200011c0
 800460c:	200011dc 	.word	0x200011dc
 8004610:	200011f8 	.word	0x200011f8
 8004614:	40023800 	.word	0x40023800
 8004618:	0a037a00 	.word	0x0a037a00
 800461c:	0501bd00 	.word	0x0501bd00

08004620 <pwm_lld_enable_channel>:
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8004620:	6983      	ldr	r3, [r0, #24]
 8004622:	310c      	adds	r1, #12
 8004624:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	4770      	bx	lr
 800462c:	0000      	movs	r0, r0
	...

08004630 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8004630:	4a02      	ldr	r2, [pc, #8]	; (800463c <notify2+0xc>)
 8004632:	68d3      	ldr	r3, [r2, #12]
 8004634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004638:	60d3      	str	r3, [r2, #12]
 800463a:	4770      	bx	lr
 800463c:	40004400 	.word	0x40004400

08004640 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8004642:	4e43      	ldr	r6, [pc, #268]	; (8004750 <VectorD8+0x110>)
 8004644:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8004646:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 8004648:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800464a:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800464c:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800464e:	d44f      	bmi.n	80046f0 <VectorD8+0xb0>
 8004650:	2320      	movs	r3, #32
 8004652:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004656:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800465a:	d108      	bne.n	800466e <VectorD8+0x2e>
 800465c:	e029      	b.n	80046b2 <VectorD8+0x72>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800465e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8004660:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8004662:	d41d      	bmi.n	80046a0 <VectorD8+0x60>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8004664:	682c      	ldr	r4, [r5, #0]
 8004666:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004668:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800466c:	d021      	beq.n	80046b2 <VectorD8+0x72>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800466e:	0723      	lsls	r3, r4, #28
 8004670:	d0f5      	beq.n	800465e <VectorD8+0x1e>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8004672:	f014 0f08 	tst.w	r4, #8
 8004676:	bf0c      	ite	eq
 8004678:	2100      	moveq	r1, #0
 800467a:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800467c:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800467e:	bf48      	it	mi
 8004680:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8004684:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8004686:	bf48      	it	mi
 8004688:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800468c:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800468e:	bf48      	it	mi
 8004690:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8004694:	482f      	ldr	r0, [pc, #188]	; (8004754 <VectorD8+0x114>)
 8004696:	f7fc ff1b 	bl	80014d0 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800469a:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800469c:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800469e:	d5e1      	bpl.n	8004664 <VectorD8+0x24>
      sdIncomingDataI(sdp, b);
 80046a0:	b2c9      	uxtb	r1, r1
 80046a2:	482b      	ldr	r0, [pc, #172]	; (8004750 <VectorD8+0x110>)
 80046a4:	f7fd fd8c 	bl	80021c0 <sdIncomingDataI>
    sr = u->SR;
 80046a8:	682c      	ldr	r4, [r5, #0]
 80046aa:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80046ac:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80046b0:	d1dd      	bne.n	800466e <VectorD8+0x2e>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80046b8:	0639      	lsls	r1, r7, #24
 80046ba:	d501      	bpl.n	80046c0 <VectorD8+0x80>
 80046bc:	0622      	lsls	r2, r4, #24
 80046be:	d426      	bmi.n	800470e <VectorD8+0xce>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80046c0:	0663      	lsls	r3, r4, #25
 80046c2:	d511      	bpl.n	80046e8 <VectorD8+0xa8>
 80046c4:	2320      	movs	r3, #32
 80046c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80046ca:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80046cc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80046ce:	4820      	ldr	r0, [pc, #128]	; (8004750 <VectorD8+0x110>)
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d029      	beq.n	8004728 <VectorD8+0xe8>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80046d4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80046d8:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 80046da:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80046de:	60eb      	str	r3, [r5, #12]
 80046e0:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80046e2:	602a      	str	r2, [r5, #0]
 80046e4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 80046e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80046ec:	f7fd bc58 	b.w	8001fa0 <_port_irq_epilogue>
 80046f0:	2320      	movs	r3, #32
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046fa:	1d30      	adds	r0, r6, #4
 80046fc:	f7fc fee8 	bl	80014d0 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8004700:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	e7a0      	b.n	8004650 <VectorD8+0x10>
 800470e:	2320      	movs	r3, #32
 8004710:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8004714:	4810      	ldr	r0, [pc, #64]	; (8004758 <VectorD8+0x118>)
 8004716:	f7fd fa5b 	bl	8001bd0 <chOQGetI>
    if (b < Q_OK) {
 800471a:	2800      	cmp	r0, #0
 800471c:	db0c      	blt.n	8004738 <VectorD8+0xf8>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800471e:	6068      	str	r0, [r5, #4]
 8004720:	2300      	movs	r3, #0
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	e7cb      	b.n	80046c0 <VectorD8+0x80>
 8004728:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0d2      	beq.n	80046d4 <VectorD8+0x94>
 800472e:	3004      	adds	r0, #4
 8004730:	2110      	movs	r1, #16
 8004732:	f7fc fecd 	bl	80014d0 <chEvtBroadcastFlagsI>
 8004736:	e7cd      	b.n	80046d4 <VectorD8+0x94>
 8004738:	2108      	movs	r1, #8
 800473a:	4806      	ldr	r0, [pc, #24]	; (8004754 <VectorD8+0x114>)
 800473c:	f7fc fec8 	bl	80014d0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004740:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8004744:	403b      	ands	r3, r7
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	60eb      	str	r3, [r5, #12]
 800474c:	e7e8      	b.n	8004720 <VectorD8+0xe0>
 800474e:	bf00      	nop
 8004750:	20001214 	.word	0x20001214
 8004754:	20001218 	.word	0x20001218
 8004758:	20001244 	.word	0x20001244
 800475c:	00000000 	.word	0x00000000

08004760 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8004760:	b510      	push	{r4, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8004762:	4c04      	ldr	r4, [pc, #16]	; (8004774 <sd_lld_init+0x14>)
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <sd_lld_init+0x18>)
 8004766:	4620      	mov	r0, r4
 8004768:	2100      	movs	r1, #0
 800476a:	f7fd fcf9 	bl	8002160 <sdObjectInit>
  SD2.usart = USART2;
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <sd_lld_init+0x1c>)
 8004770:	6763      	str	r3, [r4, #116]	; 0x74
 8004772:	bd10      	pop	{r4, pc}
 8004774:	20001214 	.word	0x20001214
 8004778:	08004631 	.word	0x08004631
 800477c:	40004400 	.word	0x40004400

08004780 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8004780:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 8004782:	4c1f      	ldr	r4, [pc, #124]	; (8004800 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 8004784:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8004786:	2900      	cmp	r1, #0
 8004788:	bf18      	it	ne
 800478a:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800478c:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800478e:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004790:	d022      	beq.n	80047d8 <sd_lld_start+0x58>
 8004792:	6f6b      	ldr	r3, [r5, #116]	; 0x74
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004794:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <sd_lld_start+0x84>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <sd_lld_start+0x72>
 800479a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800479e:	4293      	cmp	r3, r2
 80047a0:	d027      	beq.n	80047f2 <sd_lld_start+0x72>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <sd_lld_start+0x88>)
 80047a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80047aa:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80047ac:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047ae:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047b0:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80047b2:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047b6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80047ba:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047be:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80047c2:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047c4:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047c6:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80047c8:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80047ca:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80047cc:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80047ce:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 80047d0:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80047d2:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <sd_lld_start+0x8c>)
 80047da:	4298      	cmp	r0, r3
 80047dc:	d1d9      	bne.n	8004792 <sd_lld_start+0x12>
      rccEnableUSART2(FALSE);
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <sd_lld_start+0x90>)
 80047e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 80047e8:	210c      	movs	r1, #12
 80047ea:	2026      	movs	r0, #38	; 0x26
 80047ec:	f7fe fa38 	bl	8002c60 <nvicEnableVector>
 80047f0:	e7cf      	b.n	8004792 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80047f2:	6821      	ldr	r1, [r4, #0]
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <sd_lld_start+0x94>)
 80047f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	e7d6      	b.n	80047ac <sd_lld_start+0x2c>
 80047fe:	bf00      	nop
 8004800:	08009290 	.word	0x08009290
 8004804:	40011000 	.word	0x40011000
 8004808:	0280de80 	.word	0x0280de80
 800480c:	20001214 	.word	0x20001214
 8004810:	40023800 	.word	0x40023800
 8004814:	0501bd00 	.word	0x0501bd00
	...

08004820 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8004820:	f7fe bc6e 	b.w	8003100 <stm32_clock_init>
	...

08004830 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
	...

08004840 <tmr>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8004840:	4b01      	ldr	r3, [pc, #4]	; (8004848 <tmr+0x8>)
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	4770      	bx	lr
 8004848:	200018fd 	.word	0x200018fd
 800484c:	00000000 	.word	0x00000000

08004850 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4e09      	ldr	r6, [pc, #36]	; (8004878 <print_line+0x28>)
 8004854:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8004856:	6830      	ldr	r0, [r6, #0]
 8004858:	4d07      	ldr	r5, [pc, #28]	; (8004878 <print_line+0x28>)
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	212d      	movs	r1, #45	; 0x2d
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8004862:	3c01      	subs	r4, #1
 8004864:	d1f7      	bne.n	8004856 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8004866:	6828      	ldr	r0, [r5, #0]
 8004868:	4904      	ldr	r1, [pc, #16]	; (800487c <print_line+0x2c>)
 800486a:	6803      	ldr	r3, [r0, #0]
 800486c:	2202      	movs	r2, #2
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8004874:	4718      	bx	r3
 8004876:	bf00      	nop
 8004878:	2000192c 	.word	0x2000192c
 800487c:	0800a0dc 	.word	0x0800a0dc

08004880 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8004880:	b310      	cbz	r0, 80048c8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8004882:	b570      	push	{r4, r5, r6, lr}
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8004884:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <test_printn+0x54>)
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8004886:	b084      	sub	sp, #16
 8004888:	466d      	mov	r5, sp
 800488a:	466c      	mov	r4, sp
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800488c:	fba2 1300 	umull	r1, r3, r2, r0
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004896:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800489a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800489e:	b2c9      	uxtb	r1, r1
 80048a0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80048a4:	4618      	mov	r0, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80048aa:	42ac      	cmp	r4, r5
 80048ac:	d90a      	bls.n	80048c4 <test_printn+0x44>
 80048ae:	4e0a      	ldr	r6, [pc, #40]	; (80048d8 <test_printn+0x58>)
 80048b0:	3c01      	subs	r4, #1
 80048b2:	e001      	b.n	80048b8 <test_printn+0x38>
 80048b4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 80048b8:	6830      	ldr	r0, [r6, #0]
 80048ba:	6803      	ldr	r3, [r0, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80048c0:	42ac      	cmp	r4, r5
 80048c2:	d1f7      	bne.n	80048b4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 80048c4:	b004      	add	sp, #16
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <test_printn+0x58>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	6803      	ldr	r3, [r0, #0]
 80048ce:	2130      	movs	r1, #48	; 0x30
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4718      	bx	r3
 80048d4:	cccccccd 	.word	0xcccccccd
 80048d8:	2000192c 	.word	0x2000192c
 80048dc:	00000000 	.word	0x00000000

080048e0 <test_print>:
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80048e0:	7801      	ldrb	r1, [r0, #0]
 80048e2:	b159      	cbz	r1, 80048fc <test_print+0x1c>
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	; (8004900 <test_print+0x20>)
 80048e8:	4604      	mov	r4, r0

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80048ea:	6828      	ldr	r0, [r5, #0]
 80048ec:	6803      	ldr	r3, [r0, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80048f2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80048f6:	2900      	cmp	r1, #0
 80048f8:	d1f7      	bne.n	80048ea <test_print+0xa>
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	2000192c 	.word	0x2000192c
	...

08004910 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8004910:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004912:	7801      	ldrb	r1, [r0, #0]
 8004914:	b189      	cbz	r1, 800493a <test_println+0x2a>
 8004916:	4d0a      	ldr	r5, [pc, #40]	; (8004940 <test_println+0x30>)
 8004918:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800491a:	6828      	ldr	r0, [r5, #0]
 800491c:	6803      	ldr	r3, [r0, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004922:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004926:	2900      	cmp	r1, #0
 8004928:	d1f7      	bne.n	800491a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800492a:	6828      	ldr	r0, [r5, #0]
 800492c:	4905      	ldr	r1, [pc, #20]	; (8004944 <test_println+0x34>)
 800492e:	6803      	ldr	r3, [r0, #0]
 8004930:	2202      	movs	r2, #2
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8004938:	4718      	bx	r3
 800493a:	4d01      	ldr	r5, [pc, #4]	; (8004940 <test_println+0x30>)
 800493c:	e7f5      	b.n	800492a <test_println+0x1a>
 800493e:	bf00      	nop
 8004940:	2000192c 	.word	0x2000192c
 8004944:	0800a0dc 	.word	0x0800a0dc
	...

08004950 <test_emit_token>:
 8004950:	2320      	movs	r3, #32
 8004952:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8004956:	4b04      	ldr	r3, [pc, #16]	; (8004968 <test_emit_token+0x18>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	1c51      	adds	r1, r2, #1
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	7010      	strb	r0, [r2, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	4770      	bx	lr
 8004968:	20001900 	.word	0x20001900
 800496c:	00000000 	.word	0x00000000

08004970 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8004970:	b951      	cbnz	r1, 8004988 <_test_assert+0x18>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8004972:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8004976:	4c07      	ldr	r4, [pc, #28]	; (8004994 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800497e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8004980:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8004982:	4618      	mov	r0, r3
 8004984:	bc10      	pop	{r4}
 8004986:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	200018fc 	.word	0x200018fc
 8004994:	20001940 	.word	0x20001940
 8004998:	200018f8 	.word	0x200018f8
 800499c:	00000000 	.word	0x00000000

080049a0 <_test_assert_sequence>:

bool _test_assert_sequence(unsigned point, char *expected) {
 80049a0:	b4f0      	push	{r4, r5, r6, r7}
 80049a2:	4e0e      	ldr	r6, [pc, #56]	; (80049dc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80049a4:	4f0e      	ldr	r7, [pc, #56]	; (80049e0 <_test_assert_sequence+0x40>)
 80049a6:	6835      	ldr	r5, [r6, #0]
 80049a8:	463b      	mov	r3, r7
  while (cp < tokp) {
 80049aa:	e005      	b.n	80049b8 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 80049ac:	f813 4b01 	ldrb.w	r4, [r3], #1
 80049b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b4:	4294      	cmp	r4, r2
 80049b6:	d107      	bne.n	80049c8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	d3f7      	bcc.n	80049ac <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80049bc:	780b      	ldrb	r3, [r1, #0]
 80049be:	b91b      	cbnz	r3, 80049c8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80049c0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	bcf0      	pop	{r4, r5, r6, r7}
 80049c6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80049c8:	4c06      	ldr	r4, [pc, #24]	; (80049e4 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 80049ca:	4907      	ldr	r1, [pc, #28]	; (80049e8 <_test_assert_sequence+0x48>)
  failpoint = point;
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80049d2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80049d4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	bcf0      	pop	{r4, r5, r6, r7}
 80049da:	4770      	bx	lr
 80049dc:	20001900 	.word	0x20001900
 80049e0:	20001930 	.word	0x20001930
 80049e4:	20001940 	.word	0x20001940
 80049e8:	200018fc 	.word	0x200018fc
 80049ec:	200018f8 	.word	0x200018f8

080049f0 <_test_assert_time_window>:

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80049f0:	b410      	push	{r4}
 80049f2:	2320      	movs	r3, #32
 80049f4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80049f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80049fc:	2300      	movs	r3, #0
 80049fe:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8004a00:	f383 8811 	msr	BASEPRI, r3
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8004a04:	1a64      	subs	r4, r4, r1
 8004a06:	1a52      	subs	r2, r2, r1
 8004a08:	4294      	cmp	r4, r2
 8004a0a:	d306      	bcc.n	8004a1a <_test_assert_time_window+0x2a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8004a0c:	4c04      	ldr	r4, [pc, #16]	; (8004a20 <_test_assert_time_window+0x30>)
  local_fail = TRUE;
 8004a0e:	4905      	ldr	r1, [pc, #20]	; (8004a24 <_test_assert_time_window+0x34>)
  failpoint = point;
 8004a10:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <_test_assert_time_window+0x38>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 8004a16:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8004a18:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	bc10      	pop	{r4}
 8004a1e:	4770      	bx	lr
 8004a20:	20001940 	.word	0x20001940
 8004a24:	200018fc 	.word	0x200018fc
 8004a28:	200018f8 	.word	0x200018f8
 8004a2c:	00000000 	.word	0x00000000

08004a30 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4c06      	ldr	r4, [pc, #24]	; (8004a4c <test_terminate_threads+0x1c>)
 8004a34:	f104 0514 	add.w	r5, r4, #20
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8004a38:	f854 3b04 	ldr.w	r3, [r4], #4
      chThdTerminate(threads[i]);
 8004a3c:	4618      	mov	r0, r3
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8004a3e:	b10b      	cbz	r3, 8004a44 <test_terminate_threads+0x14>
      chThdTerminate(threads[i]);
 8004a40:	f7fb fff6 	bl	8000a30 <chThdTerminate>
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8004a44:	42ac      	cmp	r4, r5
 8004a46:	d1f7      	bne.n	8004a38 <test_terminate_threads+0x8>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001918 	.word	0x20001918

08004a50 <test_wait_threads>:

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	4c07      	ldr	r4, [pc, #28]	; (8004a70 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8004a54:	2600      	movs	r6, #0
 8004a56:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8004a5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8004a5e:	b118      	cbz	r0, 8004a68 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8004a60:	f7fc f856 	bl	8000b10 <chThdWait>
      threads[i] = NULL;
 8004a64:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8004a68:	42ac      	cmp	r4, r5
 8004a6a:	d1f6      	bne.n	8004a5a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	bf00      	nop
 8004a70:	20001918 	.word	0x20001918
	...

08004a80 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8004a80:	b508      	push	{r3, lr}

  chThdSleep(1);
 8004a82:	2001      	movs	r0, #1
 8004a84:	f7fb ffe4 	bl	8000a50 <chThdSleep>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a92:	2300      	movs	r3, #0
 8004a94:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004a96:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8004a9a:	bd08      	pop	{r3, pc}
 8004a9c:	0000      	movs	r0, r0
	...

08004aa0 <test_start_timer>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8004aa0:	b510      	push	{r4, lr}

  systime_t duration = MS2ST(ms);
 8004aa2:	f242 7410 	movw	r4, #10000	; 0x2710
 8004aa6:	fb04 f000 	mul.w	r0, r4, r0
 8004aaa:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <test_start_timer+0x40>)
  test_timer_done = FALSE;
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <test_start_timer+0x44>)
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 8004aae:	f200 34e7 	addw	r4, r0, #999	; 0x3e7
 8004ab2:	fba1 2404 	umull	r2, r4, r1, r4
  test_timer_done = FALSE;
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {

  systime_t duration = MS2ST(ms);
 8004aba:	09a4      	lsrs	r4, r4, #6
 8004abc:	2320      	movs	r3, #32
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	4809      	ldr	r0, [pc, #36]	; (8004ae8 <test_start_timer+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8004ac4:	68c3      	ldr	r3, [r0, #12]
 8004ac6:	b10b      	cbz	r3, 8004acc <test_start_timer+0x2c>
    chVTDoResetI(vtp);
 8004ac8:	f7fb fd92 	bl	80005f0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8004acc:	4621      	mov	r1, r4
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <test_start_timer+0x4c>)
 8004ad2:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <test_start_timer+0x48>)
 8004ad4:	f7fb fd4c 	bl	8000570 <chVTDoSetI>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	bd10      	pop	{r4, pc}
 8004ae0:	10624dd3 	.word	0x10624dd3
 8004ae4:	200018fd 	.word	0x200018fd
 8004ae8:	20001904 	.word	0x20001904
 8004aec:	08004841 	.word	0x08004841

08004af0 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8004af4:	4c9f      	ldr	r4, [pc, #636]	; (8004d74 <TestThread+0x284>)
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
 8004af6:	4da0      	ldr	r5, [pc, #640]	; (8004d78 <TestThread+0x288>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8004af8:	6020      	str	r0, [r4, #0]
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8004afa:	b085      	sub	sp, #20
  int i, j;

  chp = p;
  test_println("");
 8004afc:	489f      	ldr	r0, [pc, #636]	; (8004d7c <TestThread+0x28c>)
 8004afe:	f7ff ff07 	bl	8004910 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8004b02:	489f      	ldr	r0, [pc, #636]	; (8004d80 <TestThread+0x290>)
 8004b04:	f7ff ff04 	bl	8004910 <test_println>
  test_println("***");
 8004b08:	489e      	ldr	r0, [pc, #632]	; (8004d84 <TestThread+0x294>)
 8004b0a:	f7ff ff01 	bl	8004910 <test_println>
 8004b0e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	6803      	ldr	r3, [r0, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b18:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d1f7      	bne.n	8004b10 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8004b20:	4899      	ldr	r0, [pc, #612]	; (8004d88 <TestThread+0x298>)
 8004b22:	4d9a      	ldr	r5, [pc, #616]	; (8004d8c <TestThread+0x29c>)
 8004b24:	f7ff fef4 	bl	8004910 <test_println>
 8004b28:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	6803      	ldr	r3, [r0, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b32:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d1f7      	bne.n	8004b2a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8004b3a:	4895      	ldr	r0, [pc, #596]	; (8004d90 <TestThread+0x2a0>)
 8004b3c:	4d95      	ldr	r5, [pc, #596]	; (8004d94 <TestThread+0x2a4>)
 8004b3e:	f7ff fee7 	bl	8004910 <test_println>
 8004b42:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	6803      	ldr	r3, [r0, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b4c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b50:	2900      	cmp	r1, #0
 8004b52:	d1f7      	bne.n	8004b44 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8004b54:	4890      	ldr	r0, [pc, #576]	; (8004d98 <TestThread+0x2a8>)
 8004b56:	4d91      	ldr	r5, [pc, #580]	; (8004d9c <TestThread+0x2ac>)
 8004b58:	f7ff feda 	bl	8004910 <test_println>
 8004b5c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	6803      	ldr	r3, [r0, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d1f7      	bne.n	8004b5e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8004b6e:	488c      	ldr	r0, [pc, #560]	; (8004da0 <TestThread+0x2b0>)
 8004b70:	4d8c      	ldr	r5, [pc, #560]	; (8004da4 <TestThread+0x2b4>)
 8004b72:	f7ff fecd 	bl	8004910 <test_println>
 8004b76:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b78:	6820      	ldr	r0, [r4, #0]
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b84:	2900      	cmp	r1, #0
 8004b86:	d1f7      	bne.n	8004b78 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8004b88:	4887      	ldr	r0, [pc, #540]	; (8004da8 <TestThread+0x2b8>)
 8004b8a:	4d88      	ldr	r5, [pc, #544]	; (8004dac <TestThread+0x2bc>)
 8004b8c:	f7ff fec0 	bl	8004910 <test_println>
 8004b90:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	6803      	ldr	r3, [r0, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004b9a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d1f7      	bne.n	8004b92 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8004ba2:	4883      	ldr	r0, [pc, #524]	; (8004db0 <TestThread+0x2c0>)
 8004ba4:	4d83      	ldr	r5, [pc, #524]	; (8004db4 <TestThread+0x2c4>)
 8004ba6:	f7ff feb3 	bl	8004910 <test_println>
 8004baa:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	6803      	ldr	r3, [r0, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004bb4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d1f7      	bne.n	8004bac <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8004bbc:	487e      	ldr	r0, [pc, #504]	; (8004db8 <TestThread+0x2c8>)
 8004bbe:	4d7f      	ldr	r5, [pc, #508]	; (8004dbc <TestThread+0x2cc>)
 8004bc0:	f7ff fea6 	bl	8004910 <test_println>
 8004bc4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	6803      	ldr	r3, [r0, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004bce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d1f7      	bne.n	8004bc6 <TestThread+0xd6>
 8004bd6:	4b7a      	ldr	r3, [pc, #488]	; (8004dc0 <TestThread+0x2d0>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8004bd8:	487a      	ldr	r0, [pc, #488]	; (8004dc4 <TestThread+0x2d4>)
 8004bda:	9302      	str	r3, [sp, #8]
#endif
  test_println("");

  test_global_fail = FALSE;
 8004bdc:	4b7a      	ldr	r3, [pc, #488]	; (8004dc8 <TestThread+0x2d8>)
 8004bde:	9101      	str	r1, [sp, #4]
 8004be0:	9303      	str	r3, [sp, #12]
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8004be2:	f7ff fe95 	bl	8004910 <test_println>
#endif
  test_println("");
 8004be6:	4865      	ldr	r0, [pc, #404]	; (8004d7c <TestThread+0x28c>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004be8:	f8df b188 	ldr.w	fp, [pc, #392]	; 8004d74 <TestThread+0x284>
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  test_global_fail = FALSE;
 8004bec:	4f77      	ldr	r7, [pc, #476]	; (8004dcc <TestThread+0x2dc>)
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");
 8004bee:	f7ff fe8f 	bl	8004910 <test_println>

  test_global_fail = FALSE;
 8004bf2:	4b77      	ldr	r3, [pc, #476]	; (8004dd0 <TestThread+0x2e0>)
 8004bf4:	9901      	ldr	r1, [sp, #4]
 8004bf6:	7019      	strb	r1, [r3, #0]
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	3f04      	subs	r7, #4
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8004c00:	f04f 0800 	mov.w	r8, #0

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8004c04:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8087 	beq.w	8004d1c <TestThread+0x22c>
      print_line();
 8004c0e:	4d71      	ldr	r5, [pc, #452]	; (8004dd4 <TestThread+0x2e4>)
 8004c10:	f7ff fe1e 	bl	8004850 <print_line>
 8004c14:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	6803      	ldr	r3, [r0, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c1e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d1f7      	bne.n	8004c16 <TestThread+0x126>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8004c26:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(j + 1);
 8004c28:	4d6b      	ldr	r5, [pc, #428]	; (8004dd8 <TestThread+0x2e8>)
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8004c2a:	f7ff fe29 	bl	8004880 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004c2e:	f8db 0000 	ldr.w	r0, [fp]
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	212e      	movs	r1, #46	; 0x2e
 8004c36:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8004c38:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004c3c:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fe1e 	bl	8004880 <test_printn>
 8004c44:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d1f7      	bne.n	8004c46 <TestThread+0x156>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c5a:	7829      	ldrb	r1, [r5, #0]
 8004c5c:	b139      	cbz	r1, 8004c6e <TestThread+0x17e>
    chSequentialStreamPut(chp, *msgp++);
 8004c5e:	6820      	ldr	r0, [r4, #0]
 8004c60:	6803      	ldr	r3, [r0, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004c66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	d1f7      	bne.n	8004c5e <TestThread+0x16e>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8004c6e:	485b      	ldr	r0, [pc, #364]	; (8004ddc <TestThread+0x2ec>)
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8004c70:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8004e04 <TestThread+0x314>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8004c74:	4e5a      	ldr	r6, [pc, #360]	; (8004de0 <TestThread+0x2f0>)
 8004c76:	4d5b      	ldr	r5, [pc, #364]	; (8004de4 <TestThread+0x2f4>)
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8004c78:	f7ff fe4a 	bl	8004910 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8004c7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c80:	f7fb fee6 	bl	8000a50 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <TestThread+0x2f8>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8004c86:	f8d7 a000 	ldr.w	sl, [r7]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8004c8a:	6035      	str	r5, [r6, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8004c8c:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	60d3      	str	r3, [r2, #12]
 8004c96:	6113      	str	r3, [r2, #16]

  if (tcp->setup != NULL)
 8004c98:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8004c9c:	f889 3000 	strb.w	r3, [r9]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8004ca0:	b102      	cbz	r2, 8004ca4 <TestThread+0x1b4>
    tcp->setup();
 8004ca2:	4790      	blx	r2
  tcp->execute();
 8004ca4:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004ca8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8004caa:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004cae:	b103      	cbz	r3, 8004cb2 <TestThread+0x1c2>
    tcp->teardown();
 8004cb0:	4798      	blx	r3

  test_wait_threads();
 8004cb2:	f7ff fecd 	bl	8004a50 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8004cb6:	f899 3000 	ldrb.w	r3, [r9]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d038      	beq.n	8004d30 <TestThread+0x240>
 8004cbe:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004e08 <TestThread+0x318>
 8004cc2:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	6803      	ldr	r3, [r0, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004ccc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d1f7      	bne.n	8004cc4 <TestThread+0x1d4>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <TestThread+0x2fc>)
 8004cd6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004e0c <TestThread+0x31c>
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	f7ff fdd0 	bl	8004880 <test_printn>
 8004ce0:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	6803      	ldr	r3, [r0, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004cea:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d1f7      	bne.n	8004ce2 <TestThread+0x1f2>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8004cf2:	6833      	ldr	r3, [r6, #0]
 8004cf4:	42ab      	cmp	r3, r5
 8004cf6:	d909      	bls.n	8004d0c <TestThread+0x21c>
 8004cf8:	4d3a      	ldr	r5, [pc, #232]	; (8004de4 <TestThread+0x2f4>)
    chSequentialStreamPut(chp, *cp++);
 8004cfa:	6820      	ldr	r0, [r4, #0]
 8004cfc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004d00:	6803      	ldr	r3, [r0, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	429d      	cmp	r5, r3
 8004d0a:	d3f6      	bcc.n	8004cfa <TestThread+0x20a>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8004d0c:	4838      	ldr	r0, [pc, #224]	; (8004df0 <TestThread+0x300>)
 8004d0e:	f7ff fdff 	bl	8004910 <test_println>

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8004d12:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f af79 	bne.w	8004c0e <TestThread+0x11e>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	b15b      	cbz	r3, 8004d38 <TestThread+0x248>
 8004d20:	461f      	mov	r7, r3
 8004d22:	9b02      	ldr	r3, [sp, #8]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004d2a:	9303      	str	r3, [sp, #12]
 8004d2c:	9202      	str	r2, [sp, #8]
 8004d2e:	e763      	b.n	8004bf8 <TestThread+0x108>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8004d30:	4830      	ldr	r0, [pc, #192]	; (8004df4 <TestThread+0x304>)
 8004d32:	f7ff fded 	bl	8004910 <test_println>
 8004d36:	e765      	b.n	8004c04 <TestThread+0x114>
      j++;
    }
    i++;
  }
  print_line();
 8004d38:	f7ff fd8a 	bl	8004850 <print_line>
  test_println("");
 8004d3c:	4d2e      	ldr	r5, [pc, #184]	; (8004df8 <TestThread+0x308>)
 8004d3e:	480f      	ldr	r0, [pc, #60]	; (8004d7c <TestThread+0x28c>)
 8004d40:	f7ff fde6 	bl	8004910 <test_println>
 8004d44:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	6803      	ldr	r3, [r0, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8004d4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004d52:	2900      	cmp	r1, #0
 8004d54:	d1f7      	bne.n	8004d46 <TestThread+0x256>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8004d56:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <TestThread+0x2e0>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b92b      	cbnz	r3, 8004d68 <TestThread+0x278>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004d5c:	4827      	ldr	r0, [pc, #156]	; (8004dfc <TestThread+0x30c>)
}
 8004d5e:	b005      	add	sp, #20
 8004d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004d64:	f7ff bdd4 	b.w	8004910 <test_println>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8004d68:	4825      	ldr	r0, [pc, #148]	; (8004e00 <TestThread+0x310>)
  else
    test_println("SUCCESS");
}
 8004d6a:	b005      	add	sp, #20
 8004d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004d70:	f7ff bdce 	b.w	8004910 <test_println>
 8004d74:	2000192c 	.word	0x2000192c
 8004d78:	08009400 	.word	0x08009400
 8004d7c:	0800a19c 	.word	0x0800a19c
 8004d80:	080094e0 	.word	0x080094e0
 8004d84:	080094fc 	.word	0x080094fc
 8004d88:	08009524 	.word	0x08009524
 8004d8c:	08009414 	.word	0x08009414
 8004d90:	0800952c 	.word	0x0800952c
 8004d94:	08009428 	.word	0x08009428
 8004d98:	08009544 	.word	0x08009544
 8004d9c:	0800943c 	.word	0x0800943c
 8004da0:	0800958c 	.word	0x0800958c
 8004da4:	08009450 	.word	0x08009450
 8004da8:	08009598 	.word	0x08009598
 8004dac:	08009464 	.word	0x08009464
 8004db0:	080095a4 	.word	0x080095a4
 8004db4:	08009478 	.word	0x08009478
 8004db8:	080095bc 	.word	0x080095bc
 8004dbc:	0800948c 	.word	0x0800948c
 8004dc0:	080093c4 	.word	0x080093c4
 8004dc4:	080095e8 	.word	0x080095e8
 8004dc8:	08009650 	.word	0x08009650
 8004dcc:	08009c40 	.word	0x08009c40
 8004dd0:	20001940 	.word	0x20001940
 8004dd4:	080094a0 	.word	0x080094a0
 8004dd8:	080094b0 	.word	0x080094b0
 8004ddc:	08009500 	.word	0x08009500
 8004de0:	20001900 	.word	0x20001900
 8004de4:	20001930 	.word	0x20001930
 8004de8:	20001918 	.word	0x20001918
 8004dec:	200018f8 	.word	0x200018f8
 8004df0:	08009504 	.word	0x08009504
 8004df4:	08009508 	.word	0x08009508
 8004df8:	080094d0 	.word	0x080094d0
 8004dfc:	08009514 	.word	0x08009514
 8004e00:	0800951c 	.word	0x0800951c
 8004e04:	200018fc 	.word	0x200018fc
 8004e08:	080094b4 	.word	0x080094b4
 8004e0c:	080094cc 	.word	0x080094cc

08004e10 <thd1_execute>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8004e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004e12:	4f27      	ldr	r7, [pc, #156]	; (8004eb0 <thd1_execute+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004e14:	4e27      	ldr	r6, [pc, #156]	; (8004eb4 <thd1_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4d27      	ldr	r5, [pc, #156]	; (8004eb8 <thd1_execute+0xa8>)
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <thd1_execute+0xac>)
 8004e1e:	6830      	ldr	r0, [r6, #0]
 8004e20:	4c27      	ldr	r4, [pc, #156]	; (8004ec0 <thd1_execute+0xb0>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8004e22:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004e24:	3a05      	subs	r2, #5
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	f7fb fd9f 	bl	8000970 <chThdCreateStatic>
 8004e32:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004e34:	4923      	ldr	r1, [pc, #140]	; (8004ec4 <thd1_execute+0xb4>)
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	6873      	ldr	r3, [r6, #4]
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004e3a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004e3c:	9100      	str	r1, [sp, #0]
 8004e3e:	3a04      	subs	r2, #4
 8004e40:	4618      	mov	r0, r3
 8004e42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e46:	462b      	mov	r3, r5
 8004e48:	f7fb fd92 	bl	8000970 <chThdCreateStatic>
 8004e4c:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004e4e:	68b3      	ldr	r3, [r6, #8]
 8004e50:	6892      	ldr	r2, [r2, #8]
 8004e52:	491d      	ldr	r1, [pc, #116]	; (8004ec8 <thd1_execute+0xb8>)
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004e54:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004e56:	9100      	str	r1, [sp, #0]
 8004e58:	3a03      	subs	r2, #3
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e60:	462b      	mov	r3, r5
 8004e62:	f7fb fd85 	bl	8000970 <chThdCreateStatic>
 8004e66:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004e68:	68f3      	ldr	r3, [r6, #12]
 8004e6a:	6892      	ldr	r2, [r2, #8]
 8004e6c:	4917      	ldr	r1, [pc, #92]	; (8004ecc <thd1_execute+0xbc>)

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004e6e:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004e70:	9100      	str	r1, [sp, #0]
 8004e72:	3a02      	subs	r2, #2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	f7fb fd78 	bl	8000970 <chThdCreateStatic>
 8004e80:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004e82:	6933      	ldr	r3, [r6, #16]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	4912      	ldr	r1, [pc, #72]	; (8004ed0 <thd1_execute+0xc0>)
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004e88:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	9100      	str	r1, [sp, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e94:	462b      	mov	r3, r5
 8004e96:	f7fb fd6b 	bl	8000970 <chThdCreateStatic>
 8004e9a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8004e9c:	f7ff fdd8 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004ea0:	490c      	ldr	r1, [pc, #48]	; (8004ed4 <thd1_execute+0xc4>)
 8004ea2:	2001      	movs	r0, #1
}
 8004ea4:	b003      	add	sp, #12
 8004ea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004eaa:	f7ff bd79 	b.w	80049a0 <_test_assert_sequence>
 8004eae:	bf00      	nop
 8004eb0:	20000d70 	.word	0x20000d70
 8004eb4:	080093a0 	.word	0x080093a0
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08009680 	.word	0x08009680
 8004ec0:	20001918 	.word	0x20001918
 8004ec4:	0800a5a8 	.word	0x0800a5a8
 8004ec8:	08009670 	.word	0x08009670
 8004ecc:	08009674 	.word	0x08009674
 8004ed0:	08009678 	.word	0x08009678
 8004ed4:	0800967c 	.word	0x0800967c
	...

08004ee0 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8004ee0:	7800      	ldrb	r0, [r0, #0]
 8004ee2:	f7ff bd35 	b.w	8004950 <test_emit_token>
 8004ee6:	bf00      	nop
	...

08004ef0 <thd2_execute>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004ef2:	4f2b      	ldr	r7, [pc, #172]	; (8004fa0 <thd2_execute+0xb0>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004ef4:	4e2b      	ldr	r6, [pc, #172]	; (8004fa4 <thd2_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	4d2b      	ldr	r5, [pc, #172]	; (8004fa8 <thd2_execute+0xb8>)
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <thd2_execute+0xbc>)
 8004efe:	6870      	ldr	r0, [r6, #4]
 8004f00:	4c2b      	ldr	r4, [pc, #172]	; (8004fb0 <thd2_execute+0xc0>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8004f02:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004f04:	3a04      	subs	r2, #4
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	f7fb fd2f 	bl	8000970 <chThdCreateStatic>
 8004f12:	69bb      	ldr	r3, [r7, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004f14:	4927      	ldr	r1, [pc, #156]	; (8004fb4 <thd2_execute+0xc4>)
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	6833      	ldr	r3, [r6, #0]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004f1a:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004f1c:	9100      	str	r1, [sp, #0]
 8004f1e:	3a05      	subs	r2, #5
 8004f20:	4618      	mov	r0, r3
 8004f22:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f26:	462b      	mov	r3, r5
 8004f28:	f7fb fd22 	bl	8000970 <chThdCreateStatic>
 8004f2c:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004f2e:	6933      	ldr	r3, [r6, #16]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	4921      	ldr	r1, [pc, #132]	; (8004fb8 <thd2_execute+0xc8>)
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004f34:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004f36:	9100      	str	r1, [sp, #0]
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f40:	462b      	mov	r3, r5
 8004f42:	f7fb fd15 	bl	8000970 <chThdCreateStatic>
 8004f46:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004f48:	68f3      	ldr	r3, [r6, #12]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	491b      	ldr	r1, [pc, #108]	; (8004fbc <thd2_execute+0xcc>)

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004f4e:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004f50:	9100      	str	r1, [sp, #0]
 8004f52:	3a02      	subs	r2, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	f7fb fd08 	bl	8000970 <chThdCreateStatic>
 8004f60:	2320      	movs	r3, #32
 8004f62:	60e0      	str	r0, [r4, #12]
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	69bb      	ldr	r3, [r7, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004f6a:	68b0      	ldr	r0, [r6, #8]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <thd2_execute+0xd0>)
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	3a03      	subs	r2, #3
 8004f74:	462b      	mov	r3, r5
 8004f76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f7a:	f7fb fcc9 	bl	8000910 <chThdCreateI>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60a0      	str	r0, [r4, #8]
 8004f82:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  chThdStart(threads[2]);
 8004f86:	68a0      	ldr	r0, [r4, #8]
 8004f88:	f7fb fd2a 	bl	80009e0 <chThdStart>
  test_wait_threads();
 8004f8c:	f7ff fd60 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <thd2_execute+0xd4>)
 8004f92:	2001      	movs	r0, #1
}
 8004f94:	b003      	add	sp, #12
 8004f96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004f9a:	f7ff bd01 	b.w	80049a0 <_test_assert_sequence>
 8004f9e:	bf00      	nop
 8004fa0:	20000d70 	.word	0x20000d70
 8004fa4:	080093a0 	.word	0x080093a0
 8004fa8:	08004ee1 	.word	0x08004ee1
 8004fac:	0800a5a8 	.word	0x0800a5a8
 8004fb0:	20001918 	.word	0x20001918
 8004fb4:	08009680 	.word	0x08009680
 8004fb8:	08009678 	.word	0x08009678
 8004fbc:	08009674 	.word	0x08009674
 8004fc0:	08009670 	.word	0x08009670
 8004fc4:	0800967c 	.word	0x0800967c
	...

08004fd0 <thd3_execute>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004fd2:	4e49      	ldr	r6, [pc, #292]	; (80050f8 <thd3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004fd4:	69b3      	ldr	r3, [r6, #24]
 8004fd6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8004fd8:	1c65      	adds	r5, r4, #1
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7fb fd10 	bl	8000a00 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8004fe0:	1b01      	subs	r1, r0, r4
 8004fe2:	fab1 f181 	clz	r1, r1

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8004fe6:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8004fe8:	0949      	lsrs	r1, r1, #5
 8004fea:	2001      	movs	r0, #1
 8004fec:	f7ff fcc0 	bl	8004970 <_test_assert>
 8004ff0:	b100      	cbz	r0, 8004ff4 <thd3_execute+0x24>
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff4:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	1b49      	subs	r1, r1, r5
 8004ffa:	fab1 f181 	clz	r1, r1
 8004ffe:	2002      	movs	r0, #2
 8005000:	0949      	lsrs	r1, r1, #5
 8005002:	f7ff fcb5 	bl	8004970 <_test_assert>
 8005006:	2800      	cmp	r0, #0
 8005008:	d1f3      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 800500a:	4638      	mov	r0, r7
 800500c:	f7fb fcf8 	bl	8000a00 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8005010:	1a29      	subs	r1, r5, r0
 8005012:	fab1 f181 	clz	r1, r1
 8005016:	0949      	lsrs	r1, r1, #5
 8005018:	2003      	movs	r0, #3
 800501a:	f7ff fca9 	bl	8004970 <_test_assert>
 800501e:	2800      	cmp	r0, #0
 8005020:	d1e7      	bne.n	8004ff2 <thd3_execute+0x22>
 8005022:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	1b09      	subs	r1, r1, r4
 8005028:	fab1 f181 	clz	r1, r1
 800502c:	2004      	movs	r0, #4
 800502e:	0949      	lsrs	r1, r1, #5
 8005030:	f7ff fc9e 	bl	8004970 <_test_assert>
 8005034:	2800      	cmp	r0, #0
 8005036:	d1dc      	bne.n	8004ff2 <thd3_execute+0x22>
 8005038:	2320      	movs	r3, #32
 800503a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800503e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8005040:	6893      	ldr	r3, [r2, #8]
 8005042:	3302      	adds	r3, #2
 8005044:	6093      	str	r3, [r2, #8]
 8005046:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800504a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 800504c:	6899      	ldr	r1, [r3, #8]
 800504e:	1ca7      	adds	r7, r4, #2
 8005050:	1bc9      	subs	r1, r1, r7
 8005052:	fab1 f181 	clz	r1, r1
 8005056:	0949      	lsrs	r1, r1, #5
 8005058:	2005      	movs	r0, #5
 800505a:	f7ff fc89 	bl	8004970 <_test_assert>
 800505e:	2800      	cmp	r0, #0
 8005060:	d1c7      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8005062:	4628      	mov	r0, r5
 8005064:	f7fb fccc 	bl	8000a00 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8005068:	1b01      	subs	r1, r0, r4
 800506a:	fab1 f181 	clz	r1, r1
 800506e:	0949      	lsrs	r1, r1, #5
 8005070:	2006      	movs	r0, #6
 8005072:	f7ff fc7d 	bl	8004970 <_test_assert>
 8005076:	2800      	cmp	r0, #0
 8005078:	d1bb      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 800507a:	69b3      	ldr	r3, [r6, #24]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	1bc9      	subs	r1, r1, r7
 8005080:	fab1 f181 	clz	r1, r1
 8005084:	2007      	movs	r0, #7
 8005086:	0949      	lsrs	r1, r1, #5
 8005088:	f7ff fc72 	bl	8004970 <_test_assert>
 800508c:	2800      	cmp	r0, #0
 800508e:	d1b0      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8005090:	69b3      	ldr	r3, [r6, #24]
 8005092:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005094:	1b49      	subs	r1, r1, r5
 8005096:	fab1 f181 	clz	r1, r1
 800509a:	2008      	movs	r0, #8
 800509c:	0949      	lsrs	r1, r1, #5
 800509e:	f7ff fc67 	bl	8004970 <_test_assert>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d1a5      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 80050a6:	1ce7      	adds	r7, r4, #3
 80050a8:	4638      	mov	r0, r7
 80050aa:	f7fb fca9 	bl	8000a00 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 80050ae:	1a28      	subs	r0, r5, r0
 80050b0:	4241      	negs	r1, r0
 80050b2:	4141      	adcs	r1, r0
 80050b4:	2009      	movs	r0, #9
 80050b6:	f7ff fc5b 	bl	8004970 <_test_assert>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d199      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 80050be:	69b3      	ldr	r3, [r6, #24]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	1bca      	subs	r2, r1, r7
 80050c4:	4251      	negs	r1, r2
 80050c6:	4151      	adcs	r1, r2
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7ff fc51 	bl	8004970 <_test_assert>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d18f      	bne.n	8004ff2 <thd3_execute+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 80050d2:	69b3      	ldr	r3, [r6, #24]
 80050d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80050d6:	1bcb      	subs	r3, r1, r7
 80050d8:	4259      	negs	r1, r3
 80050da:	4159      	adcs	r1, r3
 80050dc:	200b      	movs	r0, #11
 80050de:	f7ff fc47 	bl	8004970 <_test_assert>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d185      	bne.n	8004ff2 <thd3_execute+0x22>
 80050e6:	2320      	movs	r3, #32
 80050e8:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80050ec:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 80050ee:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 80050f0:	63dc      	str	r4, [r3, #60]	; 0x3c
 80050f2:	f380 8811 	msr	BASEPRI, r0
 80050f6:	e77c      	b.n	8004ff2 <thd3_execute+0x22>
 80050f8:	20000d70 	.word	0x20000d70
 80050fc:	00000000 	.word	0x00000000

08005100 <thd4_execute>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8005100:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8005102:	f7ff fcbd 	bl	8004a80 <test_wait_tick>
 8005106:	2620      	movs	r6, #32
 8005108:	f386 8811 	msr	BASEPRI, r6
 800510c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8005110:	2300      	movs	r3, #0
 8005112:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005114:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8005118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800511c:	f7fb fc98 	bl	8000a50 <chThdSleep>
  test_assert_time_window(1,
 8005120:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005124:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8005128:	2001      	movs	r0, #1
 800512a:	f7ff fc61 	bl	80049f0 <_test_assert_time_window>
 800512e:	b100      	cbz	r0, 8005132 <thd4_execute+0x32>
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	f386 8811 	msr	BASEPRI, r6
 8005136:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005138:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 800513c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005140:	f7fb fc86 	bl	8000a50 <chThdSleep>
  test_assert_time_window(2,
 8005144:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005148:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 800514c:	2002      	movs	r0, #2
 800514e:	f7ff fc4f 	bl	80049f0 <_test_assert_time_window>
 8005152:	2800      	cmp	r0, #0
 8005154:	d1ec      	bne.n	8005130 <thd4_execute+0x30>
 8005156:	f386 8811 	msr	BASEPRI, r6
 800515a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800515c:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8005160:	f242 7010 	movw	r0, #10000	; 0x2710
 8005164:	f7fb fc74 	bl	8000a50 <chThdSleep>
  test_assert_time_window(3,
 8005168:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
 800516c:	4611      	mov	r1, r2
 800516e:	3110      	adds	r1, #16
 8005170:	3213      	adds	r2, #19
 8005172:	2003      	movs	r0, #3
 8005174:	f7ff fc3c 	bl	80049f0 <_test_assert_time_window>
 8005178:	2800      	cmp	r0, #0
 800517a:	d1d9      	bne.n	8005130 <thd4_execute+0x30>
 800517c:	f386 8811 	msr	BASEPRI, r6
 8005180:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005182:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8005186:	f504 757a 	add.w	r5, r4, #1000	; 0x3e8
  chThdSleepUntil(time);
 800518a:	4628      	mov	r0, r5
 800518c:	f7fb fc70 	bl	8000a70 <chThdSleepUntil>
  test_assert_time_window(4,
 8005190:	4629      	mov	r1, r5
 8005192:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 8005196:	2004      	movs	r0, #4
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8005198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800519c:	f7ff bc28 	b.w	80049f0 <_test_assert_time_window>

080051a0 <sem1_execute>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80051a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4e48      	ldr	r6, [pc, #288]	; (80052c8 <sem1_execute+0x128>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80051a6:	4f49      	ldr	r7, [pc, #292]	; (80052cc <sem1_execute+0x12c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80051a8:	69b3      	ldr	r3, [r6, #24]
 80051aa:	f8d7 8000 	ldr.w	r8, [r7]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80052f0 <sem1_execute+0x150>
 80051b4:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <sem1_execute+0x130>)
 80051b6:	4d47      	ldr	r5, [pc, #284]	; (80052d4 <sem1_execute+0x134>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  chSemSignal(&sem1);
 80051b8:	4c47      	ldr	r4, [pc, #284]	; (80052d8 <sem1_execute+0x138>)

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80051ba:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80051bc:	3205      	adds	r2, #5
 80051be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051c2:	f8cd 9000 	str.w	r9, [sp]
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7fb fbd2 	bl	8000970 <chThdCreateStatic>
 80051cc:	69b3      	ldr	r3, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	4b42      	ldr	r3, [pc, #264]	; (80052dc <sem1_execute+0x13c>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80051d4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80051d6:	3201      	adds	r2, #1
 80051d8:	4608      	mov	r0, r1
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051e0:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <sem1_execute+0x130>)
 80051e2:	f7fb fbc5 	bl	8000970 <chThdCreateStatic>
 80051e6:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <sem1_execute+0x140>)
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80051ee:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80051f0:	3203      	adds	r2, #3
 80051f2:	4608      	mov	r0, r1
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051fa:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <sem1_execute+0x130>)
 80051fc:	f7fb fbb8 	bl	8000970 <chThdCreateStatic>
 8005200:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <sem1_execute+0x144>)

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005208:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800520a:	3204      	adds	r2, #4
 800520c:	4608      	mov	r0, r1
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005214:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <sem1_execute+0x130>)
 8005216:	f7fb fbab 	bl	8000970 <chThdCreateStatic>
 800521a:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800521c:	6939      	ldr	r1, [r7, #16]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <sem1_execute+0x148>)
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005222:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005224:	3202      	adds	r2, #2
 8005226:	4608      	mov	r0, r1
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <sem1_execute+0x130>)
 8005230:	f7fb fb9e 	bl	8000970 <chThdCreateStatic>
 8005234:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8005236:	4620      	mov	r0, r4
 8005238:	f7fb fe82 	bl	8000f40 <chSemSignal>
  chSemSignal(&sem1);
 800523c:	4620      	mov	r0, r4
 800523e:	f7fb fe7f 	bl	8000f40 <chSemSignal>
  chSemSignal(&sem1);
 8005242:	4620      	mov	r0, r4
 8005244:	f7fb fe7c 	bl	8000f40 <chSemSignal>
  chSemSignal(&sem1);
 8005248:	4620      	mov	r0, r4
 800524a:	f7fb fe79 	bl	8000f40 <chSemSignal>
  chSemSignal(&sem1);
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fe76 	bl	8000f40 <chSemSignal>
  test_wait_threads();
 8005254:	f7ff fbfc 	bl	8004a50 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8005258:	4924      	ldr	r1, [pc, #144]	; (80052ec <sem1_execute+0x14c>)
 800525a:	2001      	movs	r0, #1
 800525c:	f7ff fba0 	bl	80049a0 <_test_assert_sequence>
 8005260:	b110      	cbz	r0, 8005268 <sem1_execute+0xc8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005268:	69b2      	ldr	r2, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <sem1_execute+0x130>)
 800526c:	6892      	ldr	r2, [r2, #8]
 800526e:	f8cd 9000 	str.w	r9, [sp]
 8005272:	4607      	mov	r7, r0
 8005274:	3205      	adds	r2, #5
 8005276:	4640      	mov	r0, r8
 8005278:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800527c:	f7fb fb78 	bl	8000970 <chThdCreateStatic>
 8005280:	2620      	movs	r6, #32
 8005282:	6028      	str	r0, [r5, #0]
 8005284:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  chSemAddCounterI(&sem1, 2);
 8005288:	2102      	movs	r1, #2
 800528a:	4620      	mov	r0, r4
 800528c:	f7fb fe88 	bl	8000fa0 <chSemAddCounterI>
  chSchRescheduleS();
 8005290:	f7fb fb06 	bl	80008a0 <chSchRescheduleS>
 8005294:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_wait_threads();
 8005298:	f7ff fbda 	bl	8004a50 <test_wait_threads>
 800529c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 80052a0:	68a1      	ldr	r1, [r4, #8]
 80052a2:	f1a1 0101 	sub.w	r1, r1, #1
 80052a6:	fab1 f181 	clz	r1, r1
 80052aa:	2002      	movs	r0, #2
 80052ac:	0949      	lsrs	r1, r1, #5
 80052ae:	f7ff fb5f 	bl	8004970 <_test_assert>
 80052b2:	b920      	cbnz	r0, 80052be <sem1_execute+0x11e>
 80052b4:	f380 8811 	msr	BASEPRI, r0
}
 80052b8:	b003      	add	sp, #12
 80052ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052be:	f387 8811 	msr	BASEPRI, r7
 80052c2:	b003      	add	sp, #12
 80052c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052c8:	20000d70 	.word	0x20000d70
 80052cc:	080093a0 	.word	0x080093a0
 80052d0:	08005321 	.word	0x08005321
 80052d4:	20001918 	.word	0x20001918
 80052d8:	20000808 	.word	0x20000808
 80052dc:	08009674 	.word	0x08009674
 80052e0:	08009670 	.word	0x08009670
 80052e4:	0800a5a8 	.word	0x0800a5a8
 80052e8:	08009680 	.word	0x08009680
 80052ec:	0800967c 	.word	0x0800967c
 80052f0:	08009678 	.word	0x08009678
	...

08005300 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8005300:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8005302:	4c04      	ldr	r4, [pc, #16]	; (8005314 <thread3+0x14>)
 8005304:	4620      	mov	r0, r4
 8005306:	f7fb fdab 	bl	8000e60 <chSemWait>
  chSemSignal(&sem1);
 800530a:	4620      	mov	r0, r4
}
 800530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8005310:	f7fb be16 	b.w	8000f40 <chSemSignal>
 8005314:	20000808 	.word	0x20000808
	...

08005320 <thread1>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8005320:	b510      	push	{r4, lr}
 8005322:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8005324:	4803      	ldr	r0, [pc, #12]	; (8005334 <thread1+0x14>)
 8005326:	f7fb fd9b 	bl	8000e60 <chSemWait>
  test_emit_token(*(char *)p);
 800532a:	7820      	ldrb	r0, [r4, #0]
}
 800532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8005330:	f7ff bb0e 	b.w	8004950 <test_emit_token>
 8005334:	20000808 	.word	0x20000808
	...

08005340 <sem3_setup>:
 * correct after each operation.
 */

static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
 8005340:	2100      	movs	r1, #0
 8005342:	4801      	ldr	r0, [pc, #4]	; (8005348 <sem3_setup+0x8>)
 8005344:	f7fb bd5c 	b.w	8000e00 <chSemObjectInit>
 8005348:	20000808 	.word	0x20000808
 800534c:	00000000 	.word	0x00000000

08005350 <sem2_setup>:
 8005350:	f7ff bff6 	b.w	8005340 <sem3_setup>
	...

08005360 <sem1_setup>:
 8005360:	f7ff bfee 	b.w	8005340 <sem3_setup>
	...

08005370 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8005370:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8005372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005376:	f7fb fb6b 	bl	8000a50 <chThdSleep>
 800537a:	2320      	movs	r3, #32
 800537c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8005380:	4804      	ldr	r0, [pc, #16]	; (8005394 <thread2+0x24>)
 8005382:	f7fb fdfd 	bl	8000f80 <chSemSignalI>
  chSchRescheduleS();
 8005386:	f7fb fa8b 	bl	80008a0 <chSchRescheduleS>
 800538a:	2300      	movs	r3, #0
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	bd08      	pop	{r3, pc}
 8005392:	bf00      	nop
 8005394:	20000808 	.word	0x20000808
	...

080053a0 <sem2_execute>:
  chSysUnlock();
}

static void sem2_execute(void) {
 80053a0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80053a2:	4c4e      	ldr	r4, [pc, #312]	; (80054dc <sem2_execute+0x13c>)
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 80053a4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80053a6:	2100      	movs	r1, #0
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fb fd81 	bl	8000eb0 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80053ae:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 80053b2:	fab1 f181 	clz	r1, r1
 80053b6:	0949      	lsrs	r1, r1, #5
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7ff fad9 	bl	8004970 <_test_assert>
 80053be:	b108      	cbz	r0, 80053c4 <sem2_execute+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80053c0:	b002      	add	sp, #8
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80053c4:	6821      	ldr	r1, [r4, #0]
 80053c6:	1b09      	subs	r1, r1, r4
 80053c8:	fab1 f181 	clz	r1, r1
 80053cc:	2002      	movs	r0, #2
 80053ce:	0949      	lsrs	r1, r1, #5
 80053d0:	f7ff face 	bl	8004970 <_test_assert>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1f3      	bne.n	80053c0 <sem2_execute+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 80053d8:	68a1      	ldr	r1, [r4, #8]
 80053da:	fab1 f181 	clz	r1, r1
 80053de:	0949      	lsrs	r1, r1, #5
 80053e0:	2003      	movs	r0, #3
 80053e2:	f7ff fac5 	bl	8004970 <_test_assert>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d1ea      	bne.n	80053c0 <sem2_execute+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80053ea:	4b3d      	ldr	r3, [pc, #244]	; (80054e0 <sem2_execute+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80053ec:	4a3d      	ldr	r2, [pc, #244]	; (80054e4 <sem2_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	6811      	ldr	r1, [r2, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <sem2_execute+0x148>)
 80053f6:	9000      	str	r0, [sp, #0]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	4608      	mov	r0, r1
 80053fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005400:	f7fb fab6 	bl	8000970 <chThdCreateStatic>
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <sem2_execute+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8005406:	f241 3188 	movw	r1, #5000	; 0x1388
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800540a:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800540c:	4620      	mov	r0, r4
 800540e:	f7fb fd4f 	bl	8000eb0 <chSemWaitTimeout>
 8005412:	4605      	mov	r5, r0
  test_wait_threads();
 8005414:	f7ff fb1c 	bl	8004a50 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8005418:	fab5 f185 	clz	r1, r5
 800541c:	0949      	lsrs	r1, r1, #5
 800541e:	2004      	movs	r0, #4
 8005420:	f7ff faa6 	bl	8004970 <_test_assert>
 8005424:	2800      	cmp	r0, #0
 8005426:	d1cb      	bne.n	80053c0 <sem2_execute+0x20>
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	1b09      	subs	r1, r1, r4
 800542c:	fab1 f181 	clz	r1, r1
 8005430:	2005      	movs	r0, #5
 8005432:	0949      	lsrs	r1, r1, #5
 8005434:	f7ff fa9c 	bl	8004970 <_test_assert>
 8005438:	2800      	cmp	r0, #0
 800543a:	d1c1      	bne.n	80053c0 <sem2_execute+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 800543c:	68a1      	ldr	r1, [r4, #8]
 800543e:	fab1 f181 	clz	r1, r1
 8005442:	0949      	lsrs	r1, r1, #5
 8005444:	2006      	movs	r0, #6
 8005446:	f7ff fa93 	bl	8004970 <_test_assert>
 800544a:	4605      	mov	r5, r0
 800544c:	2800      	cmp	r0, #0
 800544e:	d1b7      	bne.n	80053c0 <sem2_execute+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8005450:	f7ff fb16 	bl	8004a80 <test_wait_tick>
 8005454:	2320      	movs	r3, #32
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800545e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8005460:	f385 8811 	msr	BASEPRI, r5
 8005464:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8005466:	4628      	mov	r0, r5
 8005468:	f7ff fa72 	bl	8004950 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 800546c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005470:	481a      	ldr	r0, [pc, #104]	; (80054dc <sem2_execute+0x13c>)
 8005472:	f7fb fd1d 	bl	8000eb0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8005476:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 800547a:	fab1 f181 	clz	r1, r1
 800547e:	0949      	lsrs	r1, r1, #5
 8005480:	2007      	movs	r0, #7
 8005482:	f7ff fa75 	bl	8004970 <_test_assert>
 8005486:	2800      	cmp	r0, #0
 8005488:	d19a      	bne.n	80053c0 <sem2_execute+0x20>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 800548a:	6821      	ldr	r1, [r4, #0]
 800548c:	1b09      	subs	r1, r1, r4
 800548e:	fab1 f181 	clz	r1, r1
 8005492:	2008      	movs	r0, #8
 8005494:	0949      	lsrs	r1, r1, #5
 8005496:	f7ff fa6b 	bl	8004970 <_test_assert>
 800549a:	2800      	cmp	r0, #0
 800549c:	d190      	bne.n	80053c0 <sem2_execute+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 800549e:	68a1      	ldr	r1, [r4, #8]
 80054a0:	fab1 f181 	clz	r1, r1
 80054a4:	0949      	lsrs	r1, r1, #5
 80054a6:	2009      	movs	r0, #9
 80054a8:	f7ff fa62 	bl	8004970 <_test_assert>
 80054ac:	3501      	adds	r5, #1
 80054ae:	b2ed      	uxtb	r5, r5
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d185      	bne.n	80053c0 <sem2_execute+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80054b4:	2d46      	cmp	r5, #70	; 0x46
 80054b6:	d1d6      	bne.n	8005466 <sem2_execute+0xc6>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80054b8:	490d      	ldr	r1, [pc, #52]	; (80054f0 <sem2_execute+0x150>)
 80054ba:	200a      	movs	r0, #10
 80054bc:	f7ff fa70 	bl	80049a0 <_test_assert_sequence>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f47f af7d 	bne.w	80053c0 <sem2_execute+0x20>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80054c6:	f606 12d8 	addw	r2, r6, #2520	; 0x9d8
 80054ca:	f606 11c4 	addw	r1, r6, #2500	; 0x9c4
 80054ce:	200b      	movs	r0, #11
}
 80054d0:	b002      	add	sp, #8
 80054d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80054d6:	f7ff ba8b 	b.w	80049f0 <_test_assert_time_window>
 80054da:	bf00      	nop
 80054dc:	20000808 	.word	0x20000808
 80054e0:	20000d70 	.word	0x20000d70
 80054e4:	080093a0 	.word	0x080093a0
 80054e8:	08005371 	.word	0x08005371
 80054ec:	20001918 	.word	0x20001918
 80054f0:	0800967c 	.word	0x0800967c
	...

08005500 <sem3_execute>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8005500:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <sem3_execute+0x84>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005504:	4a20      	ldr	r2, [pc, #128]	; (8005588 <sem3_execute+0x88>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	6810      	ldr	r0, [r2, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b1f      	ldr	r3, [pc, #124]	; (800558c <sem3_execute+0x8c>)
  chSemSignalWait(&sem1, &sem1);
 800550e:	4c20      	ldr	r4, [pc, #128]	; (8005590 <sem3_execute+0x90>)
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8005510:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005512:	2100      	movs	r1, #0
 8005514:	3201      	adds	r2, #1
 8005516:	9100      	str	r1, [sp, #0]
 8005518:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800551c:	f7fb fa28 	bl	8000970 <chThdCreateStatic>
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <sem3_execute+0x94>)
  chSemSignalWait(&sem1, &sem1);
 8005522:	4621      	mov	r1, r4
  chSemSignal(&sem1);
}

static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005524:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8005526:	4620      	mov	r0, r4
 8005528:	f7fb fd52 	bl	8000fd0 <chSemSignalWait>
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	1b09      	subs	r1, r1, r4
 8005530:	fab1 f181 	clz	r1, r1
 8005534:	2001      	movs	r0, #1
 8005536:	0949      	lsrs	r1, r1, #5
 8005538:	f7ff fa1a 	bl	8004970 <_test_assert>
 800553c:	b108      	cbz	r0, 8005542 <sem3_execute+0x42>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 800553e:	b002      	add	sp, #8
 8005540:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8005542:	68a1      	ldr	r1, [r4, #8]
 8005544:	fab1 f181 	clz	r1, r1
 8005548:	0949      	lsrs	r1, r1, #5
 800554a:	2002      	movs	r0, #2
 800554c:	f7ff fa10 	bl	8004970 <_test_assert>
 8005550:	2800      	cmp	r0, #0
 8005552:	d1f4      	bne.n	800553e <sem3_execute+0x3e>

  chSemSignalWait(&sem1, &sem1);
 8005554:	4621      	mov	r1, r4
 8005556:	4620      	mov	r0, r4
 8005558:	f7fb fd3a 	bl	8000fd0 <chSemSignalWait>
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 800555c:	6821      	ldr	r1, [r4, #0]
 800555e:	1b09      	subs	r1, r1, r4
 8005560:	fab1 f181 	clz	r1, r1
 8005564:	2003      	movs	r0, #3
 8005566:	0949      	lsrs	r1, r1, #5
 8005568:	f7ff fa02 	bl	8004970 <_test_assert>
 800556c:	2800      	cmp	r0, #0
 800556e:	d1e6      	bne.n	800553e <sem3_execute+0x3e>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	fab1 f181 	clz	r1, r1
 8005576:	0949      	lsrs	r1, r1, #5
 8005578:	2004      	movs	r0, #4
}
 800557a:	b002      	add	sp, #8
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8005580:	f7ff b9f6 	b.w	8004970 <_test_assert>
 8005584:	20000d70 	.word	0x20000d70
 8005588:	080093a0 	.word	0x080093a0
 800558c:	08005301 	.word	0x08005301
 8005590:	20000808 	.word	0x20000808
 8005594:	20001918 	.word	0x20001918
	...

080055a0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 80055a0:	b508      	push	{r3, lr}
 80055a2:	2220      	movs	r2, #32
 80055a4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80055a8:	6883      	ldr	r3, [r0, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd05      	ble.n	80055ba <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80055ae:	f7fb f977 	bl	80008a0 <chSchRescheduleS>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80055ba:	f7fb fce1 	bl	8000f80 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80055be:	f7fb f96f 	bl	80008a0 <chSchRescheduleS>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	bd08      	pop	{r3, pc}
 80055ca:	bf00      	nop
 80055cc:	0000      	movs	r0, r0
	...

080055d0 <sem4_execute>:

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	b086      	sub	sp, #24
 *
 * @init
 */
static inline void chBSemObjectInit(binary_semaphore_t *bsp, bool taken) {

  chSemObjectInit(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80055d4:	a803      	add	r0, sp, #12
 80055d6:	2100      	movs	r1, #0
 80055d8:	f7fb fc12 	bl	8000e00 <chSemObjectInit>
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {

  chSemReset(&bsp->bs_sem, taken ? (cnt_t)0 : (cnt_t)1);
 80055dc:	a803      	add	r0, sp, #12
 80055de:	2100      	movs	r1, #0
 80055e0:	f7fb fc2e 	bl	8000e40 <chSemReset>
 80055e4:	2520      	movs	r5, #32
 80055e6:	f385 8811 	msr	BASEPRI, r5
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80055ea:	9905      	ldr	r1, [sp, #20]
 80055ec:	2900      	cmp	r1, #0
 80055ee:	bfcc      	ite	gt
 80055f0:	2100      	movgt	r1, #0
 80055f2:	2101      	movle	r1, #1
 80055f4:	2001      	movs	r0, #1
 80055f6:	f7ff f9bb 	bl	8004970 <_test_assert>
 80055fa:	b120      	cbz	r0, 8005606 <sem4_execute+0x36>
 80055fc:	2300      	movs	r3, #0
 80055fe:	f383 8811 	msr	BASEPRI, r3

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8005602:	b006      	add	sp, #24
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	4604      	mov	r4, r0
 8005608:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <sem4_execute+0x140>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800560e:	4a41      	ldr	r2, [pc, #260]	; (8005714 <sem4_execute+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	6810      	ldr	r0, [r2, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	4b40      	ldr	r3, [pc, #256]	; (8005718 <sem4_execute+0x148>)
 8005618:	a903      	add	r1, sp, #12
 800561a:	9100      	str	r1, [sp, #0]
 800561c:	3a01      	subs	r2, #1
 800561e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005622:	f7fb f9a5 	bl	8000970 <chThdCreateStatic>
 8005626:	4b3d      	ldr	r3, [pc, #244]	; (800571c <sem4_execute+0x14c>)
 8005628:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 800562a:	a803      	add	r0, sp, #12
 800562c:	f7fb fc18 	bl	8000e60 <chSemWait>
 8005630:	f385 8811 	msr	BASEPRI, r5
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8005634:	9905      	ldr	r1, [sp, #20]
 8005636:	2900      	cmp	r1, #0
 8005638:	bfcc      	ite	gt
 800563a:	2100      	movgt	r1, #0
 800563c:	2101      	movle	r1, #1
 800563e:	2002      	movs	r0, #2
 8005640:	f7ff f996 	bl	8004970 <_test_assert>
 8005644:	b118      	cbz	r0, 800564e <sem4_execute+0x7e>
 8005646:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 800564a:	b006      	add	sp, #24
 800564c:	bd70      	pop	{r4, r5, r6, pc}
 800564e:	f380 8811 	msr	BASEPRI, r0
 8005652:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dd24      	ble.n	80056a6 <sem4_execute+0xd6>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800565c:	f7fb f920 	bl	80008a0 <chSchRescheduleS>
 8005660:	2400      	movs	r4, #0
 8005662:	f384 8811 	msr	BASEPRI, r4
 8005666:	2620      	movs	r6, #32
 8005668:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 800566c:	9905      	ldr	r1, [sp, #20]
 800566e:	42a1      	cmp	r1, r4
 8005670:	f04f 0003 	mov.w	r0, #3
 8005674:	bfd4      	ite	le
 8005676:	2100      	movle	r1, #0
 8005678:	2101      	movgt	r1, #1
 800567a:	f7ff f979 	bl	8004970 <_test_assert>
 800567e:	4605      	mov	r5, r0
 8005680:	2800      	cmp	r0, #0
 8005682:	d1e0      	bne.n	8005646 <sem4_execute+0x76>
 8005684:	f380 8811 	msr	BASEPRI, r0
 8005688:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 800568c:	9905      	ldr	r1, [sp, #20]
 800568e:	f1a1 0101 	sub.w	r1, r1, #1
 8005692:	fab1 f181 	clz	r1, r1
 8005696:	2004      	movs	r0, #4
 8005698:	0949      	lsrs	r1, r1, #5
 800569a:	f7ff f969 	bl	8004970 <_test_assert>
 800569e:	b130      	cbz	r0, 80056ae <sem4_execute+0xde>
 80056a0:	f385 8811 	msr	BASEPRI, r5
 80056a4:	e7ad      	b.n	8005602 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80056a6:	a803      	add	r0, sp, #12
 80056a8:	f7fb fc6a 	bl	8000f80 <chSemSignalI>
 80056ac:	e7d6      	b.n	800565c <sem4_execute+0x8c>
 80056ae:	f380 8811 	msr	BASEPRI, r0
 80056b2:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dd25      	ble.n	8005708 <sem4_execute+0x138>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80056bc:	f7fb f8f0 	bl	80008a0 <chSchRescheduleS>
 80056c0:	2400      	movs	r4, #0
 80056c2:	f384 8811 	msr	BASEPRI, r4
 80056c6:	2620      	movs	r6, #32
 80056c8:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80056cc:	9905      	ldr	r1, [sp, #20]
 80056ce:	42a1      	cmp	r1, r4
 80056d0:	f04f 0003 	mov.w	r0, #3
 80056d4:	bfd4      	ite	le
 80056d6:	2100      	movle	r1, #0
 80056d8:	2101      	movgt	r1, #1
 80056da:	f7ff f949 	bl	8004970 <_test_assert>
 80056de:	4605      	mov	r5, r0
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1b0      	bne.n	8005646 <sem4_execute+0x76>
 80056e4:	f380 8811 	msr	BASEPRI, r0
 80056e8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80056ec:	9905      	ldr	r1, [sp, #20]
 80056ee:	f1a1 0101 	sub.w	r1, r1, #1
 80056f2:	fab1 f181 	clz	r1, r1
 80056f6:	2005      	movs	r0, #5
 80056f8:	0949      	lsrs	r1, r1, #5
 80056fa:	f7ff f939 	bl	8004970 <_test_assert>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d1ce      	bne.n	80056a0 <sem4_execute+0xd0>
 8005702:	f380 8811 	msr	BASEPRI, r0
 8005706:	e77c      	b.n	8005602 <sem4_execute+0x32>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8005708:	a803      	add	r0, sp, #12
 800570a:	f7fb fc39 	bl	8000f80 <chSemSignalI>
 800570e:	e7d5      	b.n	80056bc <sem4_execute+0xec>
 8005710:	20000d70 	.word	0x20000d70
 8005714:	080093a0 	.word	0x080093a0
 8005718:	080055a1 	.word	0x080055a1
 800571c:	20001918 	.word	0x20001918

08005720 <mtx1_execute>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8005720:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005722:	4f2b      	ldr	r7, [pc, #172]	; (80057d0 <mtx1_execute+0xb0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005724:	4e2b      	ldr	r6, [pc, #172]	; (80057d4 <mtx1_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005726:	69bb      	ldr	r3, [r7, #24]
}

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8005728:	482b      	ldr	r0, [pc, #172]	; (80057d8 <mtx1_execute+0xb8>)
 800572a:	689c      	ldr	r4, [r3, #8]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800572c:	4d2b      	ldr	r5, [pc, #172]	; (80057dc <mtx1_execute+0xbc>)
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 800572e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8005730:	f7fb fcf6 	bl	8001120 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <mtx1_execute+0xc0>)
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	1c62      	adds	r2, r4, #1
 800573a:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <mtx1_execute+0xc4>)
 800573c:	6830      	ldr	r0, [r6, #0]
 800573e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005742:	f7fb f915 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005746:	6871      	ldr	r1, [r6, #4]
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <mtx1_execute+0xc8>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800574a:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800574c:	1ca2      	adds	r2, r4, #2
 800574e:	4608      	mov	r0, r1
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <mtx1_execute+0xc4>)
 8005758:	f7fb f90a 	bl	8000970 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800575c:	68b1      	ldr	r1, [r6, #8]
 800575e:	4b23      	ldr	r3, [pc, #140]	; (80057ec <mtx1_execute+0xcc>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005760:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005762:	1ce2      	adds	r2, r4, #3
 8005764:	4608      	mov	r0, r1
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <mtx1_execute+0xc4>)
 800576e:	f7fb f8ff 	bl	8000970 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005772:	68f1      	ldr	r1, [r6, #12]
 8005774:	4b1e      	ldr	r3, [pc, #120]	; (80057f0 <mtx1_execute+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005776:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005778:	1d22      	adds	r2, r4, #4
 800577a:	4608      	mov	r0, r1
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005782:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <mtx1_execute+0xc4>)
 8005784:	f7fb f8f4 	bl	8000970 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005788:	6931      	ldr	r1, [r6, #16]
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <mtx1_execute+0xd4>)
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800578c:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800578e:	1d62      	adds	r2, r4, #5
 8005790:	4608      	mov	r0, r1
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <mtx1_execute+0xc4>)
 800579a:	f7fb f8e9 	bl	8000970 <chThdCreateStatic>
 800579e:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 80057a0:	480d      	ldr	r0, [pc, #52]	; (80057d8 <mtx1_execute+0xb8>)
 80057a2:	f7fb fce5 	bl	8001170 <chMtxUnlock>
  test_wait_threads();
 80057a6:	f7ff f953 	bl	8004a50 <test_wait_threads>
 80057aa:	69bb      	ldr	r3, [r7, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	1b09      	subs	r1, r1, r4
 80057b0:	fab1 f181 	clz	r1, r1
 80057b4:	2001      	movs	r0, #1
 80057b6:	0949      	lsrs	r1, r1, #5
 80057b8:	f7ff f8da 	bl	8004970 <_test_assert>
 80057bc:	b108      	cbz	r0, 80057c2 <mtx1_execute+0xa2>
  test_assert_sequence(2, "ABCDE");
}
 80057be:	b003      	add	sp, #12
 80057c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80057c2:	490d      	ldr	r1, [pc, #52]	; (80057f8 <mtx1_execute+0xd8>)
 80057c4:	2002      	movs	r0, #2
}
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80057cc:	f7ff b8e8 	b.w	80049a0 <_test_assert_sequence>
 80057d0:	20000d70 	.word	0x20000d70
 80057d4:	080093a0 	.word	0x080093a0
 80057d8:	20000814 	.word	0x20000814
 80057dc:	20001918 	.word	0x20001918
 80057e0:	08009680 	.word	0x08009680
 80057e4:	08005801 	.word	0x08005801
 80057e8:	0800a5a8 	.word	0x0800a5a8
 80057ec:	08009670 	.word	0x08009670
 80057f0:	08009674 	.word	0x08009674
 80057f4:	08009678 	.word	0x08009678
 80057f8:	0800967c 	.word	0x0800967c
 80057fc:	00000000 	.word	0x00000000

08005800 <thread1>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8005800:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8005802:	4c06      	ldr	r4, [pc, #24]	; (800581c <thread1+0x1c>)
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8005804:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8005806:	4620      	mov	r0, r4
 8005808:	f7fb fc8a 	bl	8001120 <chMtxLock>
  test_emit_token(*(char *)p);
 800580c:	7828      	ldrb	r0, [r5, #0]
 800580e:	f7ff f89f 	bl	8004950 <test_emit_token>
  chMtxUnlock(&m1);
 8005812:	4620      	mov	r0, r4
}
 8005814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8005818:	f7fb bcaa 	b.w	8001170 <chMtxUnlock>
 800581c:	20000814 	.word	0x20000814

08005820 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8005820:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8005822:	4c06      	ldr	r4, [pc, #24]	; (800583c <thread12+0x1c>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8005824:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005826:	4620      	mov	r0, r4
 8005828:	f7fb fc7a 	bl	8001120 <chMtxLock>
  test_emit_token(*(char *)p);
 800582c:	7828      	ldrb	r0, [r5, #0]
 800582e:	f7ff f88f 	bl	8004950 <test_emit_token>
  chMtxUnlock(&m2);
 8005832:	4620      	mov	r0, r4
}
 8005834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8005838:	f7fb bc9a 	b.w	8001170 <chMtxUnlock>
 800583c:	20000824 	.word	0x20000824

08005840 <mtx4_setup>:
 * thread with precise timing.<br>
 * The test expects that the priority changes caused by the priority
 * inheritance algorithm happen at the right moment and with the right values.
 */

static void mtx4_setup(void) {
 8005840:	b508      	push	{r3, lr}

  chMtxObjectInit(&m1);
 8005842:	4804      	ldr	r0, [pc, #16]	; (8005854 <mtx4_setup+0x14>)
 8005844:	f7fb fbfc 	bl	8001040 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8005848:	4803      	ldr	r0, [pc, #12]	; (8005858 <mtx4_setup+0x18>)
}
 800584a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx4_setup(void) {

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 800584e:	f7fb bbf7 	b.w	8001040 <chMtxObjectInit>
 8005852:	bf00      	nop
 8005854:	20000814 	.word	0x20000814
 8005858:	20000824 	.word	0x20000824
 800585c:	00000000 	.word	0x00000000

08005860 <mtx5_setup>:
 * operation.
 */

static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <mtx5_setup+0x8>)
 8005862:	f7fb bbed 	b.w	8001040 <chMtxObjectInit>
 8005866:	bf00      	nop
 8005868:	20000814 	.word	0x20000814
 800586c:	00000000 	.word	0x00000000

08005870 <mtx1_setup>:
 8005870:	f7ff bff6 	b.w	8005860 <mtx5_setup>
	...

08005880 <thread4b>:
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread4b, p) {
 8005880:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8005882:	4c06      	ldr	r4, [pc, #24]	; (800589c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8005884:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005888:	f7fb f8e2 	bl	8000a50 <chThdSleep>
  chMtxLock(&m1);
 800588c:	4620      	mov	r0, r4
 800588e:	f7fb fc47 	bl	8001120 <chMtxLock>
  chMtxUnlock(&m1);
 8005892:	4620      	mov	r0, r4
}
 8005894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8005898:	f7fb bc6a 	b.w	8001170 <chMtxUnlock>
 800589c:	20000814 	.word	0x20000814

080058a0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 80058a0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80058a2:	4c06      	ldr	r4, [pc, #24]	; (80058bc <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80058a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058a8:	f7fb f8d2 	bl	8000a50 <chThdSleep>
  chMtxLock(&m2);
 80058ac:	4620      	mov	r0, r4
 80058ae:	f7fb fc37 	bl	8001120 <chMtxLock>
  chMtxUnlock(&m2);
 80058b2:	4620      	mov	r0, r4
}
 80058b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 80058b8:	f7fb bc5a 	b.w	8001170 <chMtxUnlock>
 80058bc:	20000824 	.word	0x20000824

080058c0 <mtx4_execute>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80058c0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80058c4:	4d8e      	ldr	r5, [pc, #568]	; (8005b00 <mtx4_execute+0x240>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80058c6:	4e8f      	ldr	r6, [pc, #572]	; (8005b04 <mtx4_execute+0x244>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80058c8:	69ab      	ldr	r3, [r5, #24]
 80058ca:	6832      	ldr	r2, [r6, #0]
 80058cc:	689c      	ldr	r4, [r3, #8]
 80058ce:	4b8e      	ldr	r3, [pc, #568]	; (8005b08 <mtx4_execute+0x248>)
 80058d0:	4f8e      	ldr	r7, [pc, #568]	; (8005b0c <mtx4_execute+0x24c>)
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80058d2:	b085      	sub	sp, #20
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80058d4:	f104 0901 	add.w	r9, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80058d8:	4610      	mov	r0, r2
 80058da:	9203      	str	r2, [sp, #12]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	464a      	mov	r2, r9
 80058e0:	4b8b      	ldr	r3, [pc, #556]	; (8005b10 <mtx4_execute+0x250>)
 80058e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058e6:	f7fb f843 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80058ea:	6876      	ldr	r6, [r6, #4]
 80058ec:	4b89      	ldr	r3, [pc, #548]	; (8005b14 <mtx4_execute+0x254>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80058ee:	6038      	str	r0, [r7, #0]
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80058f0:	f104 0a02 	add.w	sl, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80058f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058f8:	4652      	mov	r2, sl
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4630      	mov	r0, r6
 80058fe:	4b86      	ldr	r3, [pc, #536]	; (8005b18 <mtx4_execute+0x258>)
 8005900:	f7fb f836 	bl	8000970 <chThdCreateStatic>
 8005904:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8005906:	4885      	ldr	r0, [pc, #532]	; (8005b1c <mtx4_execute+0x25c>)
 8005908:	f7fb fc0a 	bl	8001120 <chMtxLock>
 800590c:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	1b09      	subs	r1, r1, r4
 8005912:	fab1 f181 	clz	r1, r1
 8005916:	2001      	movs	r0, #1
 8005918:	0949      	lsrs	r1, r1, #5
 800591a:	f7ff f829 	bl	8004970 <_test_assert>
 800591e:	b110      	cbz	r0, 8005926 <mtx4_execute+0x66>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8005920:	b005      	add	sp, #20
 8005922:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8005926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592a:	f7fb f891 	bl	8000a50 <chThdSleep>
 800592e:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8005930:	6899      	ldr	r1, [r3, #8]
 8005932:	ebc9 0101 	rsb	r1, r9, r1
 8005936:	fab1 f181 	clz	r1, r1
 800593a:	2002      	movs	r0, #2
 800593c:	0949      	lsrs	r1, r1, #5
 800593e:	f7ff f817 	bl	8004970 <_test_assert>
 8005942:	2800      	cmp	r0, #0
 8005944:	d1ec      	bne.n	8005920 <mtx4_execute+0x60>
  chMtxLock(&m1);
 8005946:	4876      	ldr	r0, [pc, #472]	; (8005b20 <mtx4_execute+0x260>)
 8005948:	f7fb fbea 	bl	8001120 <chMtxLock>
 800594c:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	ebc9 0101 	rsb	r1, r9, r1
 8005954:	fab1 f181 	clz	r1, r1
 8005958:	2003      	movs	r0, #3
 800595a:	0949      	lsrs	r1, r1, #5
 800595c:	f7ff f808 	bl	8004970 <_test_assert>
 8005960:	2800      	cmp	r0, #0
 8005962:	d1dd      	bne.n	8005920 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8005964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005968:	f7fb f872 	bl	8000a50 <chThdSleep>
 800596c:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800596e:	6899      	ldr	r1, [r3, #8]
 8005970:	ebca 0101 	rsb	r1, sl, r1
 8005974:	fab1 f181 	clz	r1, r1
 8005978:	2004      	movs	r0, #4
 800597a:	0949      	lsrs	r1, r1, #5
 800597c:	f7fe fff8 	bl	8004970 <_test_assert>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1cd      	bne.n	8005920 <mtx4_execute+0x60>
  chMtxUnlock(&m1);
 8005984:	4866      	ldr	r0, [pc, #408]	; (8005b20 <mtx4_execute+0x260>)
 8005986:	f7fb fbf3 	bl	8001170 <chMtxUnlock>
 800598a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	ebc9 0101 	rsb	r1, r9, r1
 8005992:	fab1 f181 	clz	r1, r1
 8005996:	2005      	movs	r0, #5
 8005998:	0949      	lsrs	r1, r1, #5
 800599a:	f7fe ffe9 	bl	8004970 <_test_assert>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1be      	bne.n	8005920 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 80059a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a6:	f7fb f853 	bl	8000a50 <chThdSleep>
 80059aa:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80059ac:	6899      	ldr	r1, [r3, #8]
 80059ae:	ebc9 0101 	rsb	r1, r9, r1
 80059b2:	fab1 f181 	clz	r1, r1
 80059b6:	2006      	movs	r0, #6
 80059b8:	0949      	lsrs	r1, r1, #5
 80059ba:	f7fe ffd9 	bl	8004970 <_test_assert>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d1ae      	bne.n	8005920 <mtx4_execute+0x60>
  chMtxUnlockAll();
 80059c2:	f7fb fc2d 	bl	8001220 <chMtxUnlockAll>
 80059c6:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	1b09      	subs	r1, r1, r4
 80059cc:	fab1 f181 	clz	r1, r1
 80059d0:	2007      	movs	r0, #7
 80059d2:	0949      	lsrs	r1, r1, #5
 80059d4:	f7fe ffcc 	bl	8004970 <_test_assert>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d1a1      	bne.n	8005920 <mtx4_execute+0x60>
  test_wait_threads();
 80059dc:	f7ff f838 	bl	8004a50 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80059e0:	4b50      	ldr	r3, [pc, #320]	; (8005b24 <mtx4_execute+0x264>)
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	464a      	mov	r2, r9
 80059e6:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <mtx4_execute+0x250>)
 80059e8:	9803      	ldr	r0, [sp, #12]
 80059ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059ee:	f7fa ffbf 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80059f2:	4b4d      	ldr	r3, [pc, #308]	; (8005b28 <mtx4_execute+0x268>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80059f4:	6038      	str	r0, [r7, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80059f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	4652      	mov	r2, sl
 80059fe:	4b46      	ldr	r3, [pc, #280]	; (8005b18 <mtx4_execute+0x258>)
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7fa ffb5 	bl	8000970 <chThdCreateStatic>
 8005a06:	6078      	str	r0, [r7, #4]
  chMtxLock(&m2);
 8005a08:	4844      	ldr	r0, [pc, #272]	; (8005b1c <mtx4_execute+0x25c>)
 8005a0a:	f7fb fb89 	bl	8001120 <chMtxLock>
 8005a0e:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	1b09      	subs	r1, r1, r4
 8005a14:	fab1 f181 	clz	r1, r1
 8005a18:	2008      	movs	r0, #8
 8005a1a:	0949      	lsrs	r1, r1, #5
 8005a1c:	f7fe ffa8 	bl	8004970 <_test_assert>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f47f af7d 	bne.w	8005920 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8005a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a2a:	f7fb f811 	bl	8000a50 <chThdSleep>
 8005a2e:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	ebc9 0c01 	rsb	ip, r9, r1
 8005a36:	f1dc 0100 	rsbs	r1, ip, #0
 8005a3a:	eb41 010c 	adc.w	r1, r1, ip
 8005a3e:	2009      	movs	r0, #9
 8005a40:	f7fe ff96 	bl	8004970 <_test_assert>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f47f af6b 	bne.w	8005920 <mtx4_execute+0x60>
  chMtxLock(&m1);
 8005a4a:	4835      	ldr	r0, [pc, #212]	; (8005b20 <mtx4_execute+0x260>)
 8005a4c:	f7fb fb68 	bl	8001120 <chMtxLock>
 8005a50:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8005a52:	6899      	ldr	r1, [r3, #8]
 8005a54:	ebc9 0e01 	rsb	lr, r9, r1
 8005a58:	f1de 0100 	rsbs	r1, lr, #0
 8005a5c:	eb41 010e 	adc.w	r1, r1, lr
 8005a60:	200a      	movs	r0, #10
 8005a62:	f7fe ff85 	bl	8004970 <_test_assert>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f47f af5a 	bne.w	8005920 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8005a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a70:	f7fa ffee 	bl	8000a50 <chThdSleep>
 8005a74:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	ebca 0701 	rsb	r7, sl, r1
 8005a7c:	4279      	negs	r1, r7
 8005a7e:	f04f 000b 	mov.w	r0, #11
 8005a82:	4179      	adcs	r1, r7
 8005a84:	f7fe ff74 	bl	8004970 <_test_assert>
 8005a88:	4606      	mov	r6, r0
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f47f af48 	bne.w	8005920 <mtx4_execute+0x60>
 8005a90:	2320      	movs	r3, #32
 8005a92:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8005a96:	4822      	ldr	r0, [pc, #136]	; (8005b20 <mtx4_execute+0x260>)
 8005a98:	f7fb fb9a 	bl	80011d0 <chMtxUnlockS>
  chSchRescheduleS();
 8005a9c:	f7fa ff00 	bl	80008a0 <chSchRescheduleS>
 8005aa0:	f386 8811 	msr	BASEPRI, r6
 8005aa4:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8005aa6:	6899      	ldr	r1, [r3, #8]
 8005aa8:	ebc9 0601 	rsb	r6, r9, r1
 8005aac:	4271      	negs	r1, r6
 8005aae:	4171      	adcs	r1, r6
 8005ab0:	200c      	movs	r0, #12
 8005ab2:	f7fe ff5d 	bl	8004970 <_test_assert>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f47f af32 	bne.w	8005920 <mtx4_execute+0x60>
  chThdSleepMilliseconds(100);
 8005abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ac0:	f7fa ffc6 	bl	8000a50 <chThdSleep>
 8005ac4:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8005ac6:	6899      	ldr	r1, [r3, #8]
 8005ac8:	ebc9 0201 	rsb	r2, r9, r1
 8005acc:	4251      	negs	r1, r2
 8005ace:	4151      	adcs	r1, r2
 8005ad0:	200d      	movs	r0, #13
 8005ad2:	f7fe ff4d 	bl	8004970 <_test_assert>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f47f af22 	bne.w	8005920 <mtx4_execute+0x60>
  chMtxUnlockAll();
 8005adc:	f7fb fba0 	bl	8001220 <chMtxUnlockAll>
 8005ae0:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	1b0b      	subs	r3, r1, r4
 8005ae6:	4259      	negs	r1, r3
 8005ae8:	4159      	adcs	r1, r3
 8005aea:	200e      	movs	r0, #14
 8005aec:	f7fe ff40 	bl	8004970 <_test_assert>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f47f af15 	bne.w	8005920 <mtx4_execute+0x60>
  test_wait_threads();
}
 8005af6:	b005      	add	sp, #20
 8005af8:	e8bd 46f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8005afc:	f7fe bfa8 	b.w	8004a50 <test_wait_threads>
 8005b00:	20000d70 	.word	0x20000d70
 8005b04:	080093a0 	.word	0x080093a0
 8005b08:	08009674 	.word	0x08009674
 8005b0c:	20001918 	.word	0x20001918
 8005b10:	080058a1 	.word	0x080058a1
 8005b14:	08009678 	.word	0x08009678
 8005b18:	08005881 	.word	0x08005881
 8005b1c:	20000824 	.word	0x20000824
 8005b20:	20000814 	.word	0x20000814
 8005b24:	0800a5a8 	.word	0x0800a5a8
 8005b28:	08009670 	.word	0x08009670
 8005b2c:	00000000 	.word	0x00000000

08005b30 <mtx5_execute>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b32:	4d2b      	ldr	r5, [pc, #172]	; (8005be0 <mtx5_execute+0xb0>)

#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
 8005b34:	4c2b      	ldr	r4, [pc, #172]	; (8005be4 <mtx5_execute+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b36:	69ab      	ldr	r3, [r5, #24]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	689e      	ldr	r6, [r3, #8]
 8005b3c:	f7fb fb00 	bl	8001140 <chMtxTryLock>
  test_assert(1, b, "already locked");
 8005b40:	4601      	mov	r1, r0
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7fe ff14 	bl	8004970 <_test_assert>
 8005b48:	b100      	cbz	r0, 8005b4c <mtx5_execute+0x1c>
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  b = chMtxTryLock(&m1);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7fb faf7 	bl	8001140 <chMtxTryLock>
  test_assert(2, !b, "not locked");
 8005b52:	f080 0101 	eor.w	r1, r0, #1
 8005b56:	b2c9      	uxtb	r1, r1
 8005b58:	2002      	movs	r0, #2
 8005b5a:	f7fe ff09 	bl	8004970 <_test_assert>
 8005b5e:	4607      	mov	r7, r0
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d1f2      	bne.n	8005b4a <mtx5_execute+0x1a>
 8005b64:	2320      	movs	r3, #32
 8005b66:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fb fb30 	bl	80011d0 <chMtxUnlockS>
 8005b70:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1b09      	subs	r1, r1, r4
 8005b78:	fab1 f181 	clz	r1, r1
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	0949      	lsrs	r1, r1, #5
 8005b80:	f7fe fef6 	bl	8004970 <_test_assert>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d1e0      	bne.n	8005b4a <mtx5_execute+0x1a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8005b88:	68a1      	ldr	r1, [r4, #8]
 8005b8a:	fab1 f181 	clz	r1, r1
 8005b8e:	0949      	lsrs	r1, r1, #5
 8005b90:	2004      	movs	r0, #4
 8005b92:	f7fe feed 	bl	8004970 <_test_assert>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d1d7      	bne.n	8005b4a <mtx5_execute+0x1a>
 8005b9a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8005b9c:	6899      	ldr	r1, [r3, #8]
 8005b9e:	1b89      	subs	r1, r1, r6
 8005ba0:	fab1 f181 	clz	r1, r1
 8005ba4:	2005      	movs	r0, #5
 8005ba6:	0949      	lsrs	r1, r1, #5
 8005ba8:	f7fe fee2 	bl	8004970 <_test_assert>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d1cc      	bne.n	8005b4a <mtx5_execute+0x1a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7fb fab5 	bl	8001120 <chMtxLock>
  chMtxUnlockAll();
 8005bb6:	f7fb fb33 	bl	8001220 <chMtxUnlockAll>
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8005bba:	6821      	ldr	r1, [r4, #0]
 8005bbc:	1b09      	subs	r1, r1, r4
 8005bbe:	fab1 f181 	clz	r1, r1
 8005bc2:	2006      	movs	r0, #6
 8005bc4:	0949      	lsrs	r1, r1, #5
 8005bc6:	f7fe fed3 	bl	8004970 <_test_assert>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d1bd      	bne.n	8005b4a <mtx5_execute+0x1a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005bce:	68a1      	ldr	r1, [r4, #8]
 8005bd0:	fab1 f181 	clz	r1, r1
 8005bd4:	0949      	lsrs	r1, r1, #5
 8005bd6:	2007      	movs	r0, #7
}
 8005bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005bdc:	f7fe bec8 	b.w	8004970 <_test_assert>
 8005be0:	20000d70 	.word	0x20000d70
 8005be4:	20000814 	.word	0x20000814
	...

08005bf0 <mtx6_execute>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005bf2:	4b2f      	ldr	r3, [pc, #188]	; (8005cb0 <mtx6_execute+0xc0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005bf4:	4f2f      	ldr	r7, [pc, #188]	; (8005cb4 <mtx6_execute+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4d2f      	ldr	r5, [pc, #188]	; (8005cb8 <mtx6_execute+0xc8>)
 8005bfa:	689e      	ldr	r6, [r3, #8]
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <mtx6_execute+0xcc>)
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	4c2f      	ldr	r4, [pc, #188]	; (8005cc0 <mtx6_execute+0xd0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8005c02:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005c04:	1c72      	adds	r2, r6, #1
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f7fa feaf 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	492b      	ldr	r1, [pc, #172]	; (8005cc4 <mtx6_execute+0xd4>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005c16:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005c18:	1cb2      	adds	r2, r6, #2
 8005c1a:	9100      	str	r1, [sp, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c22:	462b      	mov	r3, r5
 8005c24:	f7fa fea4 	bl	8000970 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4927      	ldr	r1, [pc, #156]	; (8005cc8 <mtx6_execute+0xd8>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005c2c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005c2e:	1cf2      	adds	r2, r6, #3
 8005c30:	9100      	str	r1, [sp, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c38:	462b      	mov	r3, r5
 8005c3a:	f7fa fe99 	bl	8000970 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4922      	ldr	r1, [pc, #136]	; (8005ccc <mtx6_execute+0xdc>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005c42:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005c44:	1d32      	adds	r2, r6, #4
 8005c46:	9100      	str	r1, [sp, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c4e:	462b      	mov	r3, r5
 8005c50:	f7fa fe8e 	bl	8000970 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	491e      	ldr	r1, [pc, #120]	; (8005cd0 <mtx6_execute+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005c58:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005c5a:	1d72      	adds	r2, r6, #5
 8005c5c:	9100      	str	r1, [sp, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c64:	462b      	mov	r3, r5
 8005c66:	f7fa fe83 	bl	8000970 <chThdCreateStatic>
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	6120      	str	r0, [r4, #16]
 8005c6e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005c72:	4c18      	ldr	r4, [pc, #96]	; (8005cd4 <mtx6_execute+0xe4>)
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7fb fb23 	bl	80012c0 <chCondSignalI>
  chCondSignalI(&c1);
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7fb fb20 	bl	80012c0 <chCondSignalI>
  chCondSignalI(&c1);
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7fb fb1d 	bl	80012c0 <chCondSignalI>
  chCondSignalI(&c1);
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7fb fb1a 	bl	80012c0 <chCondSignalI>
  chCondSignalI(&c1);
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f7fb fb17 	bl	80012c0 <chCondSignalI>
  chSchRescheduleS();
 8005c92:	f7fa fe05 	bl	80008a0 <chSchRescheduleS>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8005c9c:	f7fe fed8 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005ca0:	490d      	ldr	r1, [pc, #52]	; (8005cd8 <mtx6_execute+0xe8>)
 8005ca2:	2001      	movs	r0, #1
}
 8005ca4:	b003      	add	sp, #12
 8005ca6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005caa:	f7fe be79 	b.w	80049a0 <_test_assert_sequence>
 8005cae:	bf00      	nop
 8005cb0:	20000d70 	.word	0x20000d70
 8005cb4:	080093a0 	.word	0x080093a0
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08009680 	.word	0x08009680
 8005cc0:	20001918 	.word	0x20001918
 8005cc4:	0800a5a8 	.word	0x0800a5a8
 8005cc8:	08009670 	.word	0x08009670
 8005ccc:	08009674 	.word	0x08009674
 8005cd0:	08009678 	.word	0x08009678
 8005cd4:	20000834 	.word	0x20000834
 8005cd8:	0800967c 	.word	0x0800967c
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8005ce0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8005ce2:	4c08      	ldr	r4, [pc, #32]	; (8005d04 <thread10+0x24>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8005ce4:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7fb fa1a 	bl	8001120 <chMtxLock>
  chCondWait(&c1);
 8005cec:	4806      	ldr	r0, [pc, #24]	; (8005d08 <thread10+0x28>)
 8005cee:	f7fb fb3f 	bl	8001370 <chCondWait>
  test_emit_token(*(char *)p);
 8005cf2:	7828      	ldrb	r0, [r5, #0]
 8005cf4:	f7fe fe2c 	bl	8004950 <test_emit_token>
  chMtxUnlock(&m1);
 8005cf8:	4620      	mov	r0, r4
}
 8005cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8005cfe:	f7fb ba37 	b.w	8001170 <chMtxUnlock>
 8005d02:	bf00      	nop
 8005d04:	20000814 	.word	0x20000814
 8005d08:	20000834 	.word	0x20000834
 8005d0c:	00000000 	.word	0x00000000

08005d10 <mtx7_setup>:
 * tester thread then proceeds to broadcast the conditional variable.<br>
 * The test expects the threads to reach their goal in increasing priority
 * order regardless of the initial order.
 */

static void mtx7_setup(void) {
 8005d10:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8005d12:	4804      	ldr	r0, [pc, #16]	; (8005d24 <mtx7_setup+0x14>)
 8005d14:	f7fb fab4 	bl	8001280 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8005d18:	4803      	ldr	r0, [pc, #12]	; (8005d28 <mtx7_setup+0x18>)
}
 8005d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

static void mtx7_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
 8005d1e:	f7fb b98f 	b.w	8001040 <chMtxObjectInit>
 8005d22:	bf00      	nop
 8005d24:	20000834 	.word	0x20000834
 8005d28:	20000814 	.word	0x20000814
 8005d2c:	00000000 	.word	0x00000000

08005d30 <mtx6_setup>:
 8005d30:	f7ff bfee 	b.w	8005d10 <mtx7_setup>
	...

08005d40 <mtx8_setup>:
 * This test case verifies the priority boost of a thread waiting on a
 * conditional variable queue. It tests this very specific situation in order
 * to complete the code coverage.
 */

static void mtx8_setup(void) {
 8005d40:	b508      	push	{r3, lr}

  chCondObjectInit(&c1);
 8005d42:	4805      	ldr	r0, [pc, #20]	; (8005d58 <mtx8_setup+0x18>)
 8005d44:	f7fb fa9c 	bl	8001280 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8005d48:	4804      	ldr	r0, [pc, #16]	; (8005d5c <mtx8_setup+0x1c>)
 8005d4a:	f7fb f979 	bl	8001040 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8005d4e:	4804      	ldr	r0, [pc, #16]	; (8005d60 <mtx8_setup+0x20>)
}
 8005d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

static void mtx8_setup(void) {

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
 8005d54:	f7fb b974 	b.w	8001040 <chMtxObjectInit>
 8005d58:	20000834 	.word	0x20000834
 8005d5c:	20000814 	.word	0x20000814
 8005d60:	20000824 	.word	0x20000824
	...

08005d70 <mtx7_execute>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <mtx7_execute+0x94>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d74:	4f24      	ldr	r7, [pc, #144]	; (8005e08 <mtx7_execute+0x98>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	4d24      	ldr	r5, [pc, #144]	; (8005e0c <mtx7_execute+0x9c>)
 8005d7a:	689e      	ldr	r6, [r3, #8]
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <mtx7_execute+0xa0>)
 8005d7e:	6838      	ldr	r0, [r7, #0]
 8005d80:	4c24      	ldr	r4, [pc, #144]	; (8005e14 <mtx7_execute+0xa4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005d82:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d84:	1c72      	adds	r2, r6, #1
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	f7fa fdef 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4920      	ldr	r1, [pc, #128]	; (8005e18 <mtx7_execute+0xa8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d96:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005d98:	1cb2      	adds	r2, r6, #2
 8005d9a:	9100      	str	r1, [sp, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005da2:	462b      	mov	r3, r5
 8005da4:	f7fa fde4 	bl	8000970 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	491c      	ldr	r1, [pc, #112]	; (8005e1c <mtx7_execute+0xac>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005dac:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005dae:	1cf2      	adds	r2, r6, #3
 8005db0:	9100      	str	r1, [sp, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fdd9 	bl	8000970 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4917      	ldr	r1, [pc, #92]	; (8005e20 <mtx7_execute+0xb0>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005dc2:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005dc4:	1d32      	adds	r2, r6, #4
 8005dc6:	9100      	str	r1, [sp, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005dce:	462b      	mov	r3, r5
 8005dd0:	f7fa fdce 	bl	8000970 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4913      	ldr	r1, [pc, #76]	; (8005e24 <mtx7_execute+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005dd8:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005dda:	1d72      	adds	r2, r6, #5
 8005ddc:	9100      	str	r1, [sp, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005de4:	462b      	mov	r3, r5
 8005de6:	f7fa fdc3 	bl	8000970 <chThdCreateStatic>
 8005dea:	6120      	str	r0, [r4, #16]
  chCondBroadcast(&c1);
 8005dec:	480e      	ldr	r0, [pc, #56]	; (8005e28 <mtx7_execute+0xb8>)
 8005dee:	f7fb fa77 	bl	80012e0 <chCondBroadcast>
  test_wait_threads();
 8005df2:	f7fe fe2d 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005df6:	490d      	ldr	r1, [pc, #52]	; (8005e2c <mtx7_execute+0xbc>)
 8005df8:	2001      	movs	r0, #1
}
 8005dfa:	b003      	add	sp, #12
 8005dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005e00:	f7fe bdce 	b.w	80049a0 <_test_assert_sequence>
 8005e04:	20000d70 	.word	0x20000d70
 8005e08:	080093a0 	.word	0x080093a0
 8005e0c:	08005ce1 	.word	0x08005ce1
 8005e10:	08009680 	.word	0x08009680
 8005e14:	20001918 	.word	0x20001918
 8005e18:	0800a5a8 	.word	0x0800a5a8
 8005e1c:	08009670 	.word	0x08009670
 8005e20:	08009674 	.word	0x08009674
 8005e24:	08009678 	.word	0x08009678
 8005e28:	20000834 	.word	0x20000834
 8005e2c:	0800967c 	.word	0x0800967c

08005e30 <mtx8_execute>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e32:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <mtx8_execute+0x70>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005e34:	4e1b      	ldr	r6, [pc, #108]	; (8005ea4 <mtx8_execute+0x74>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	6830      	ldr	r0, [r6, #0]
 8005e3a:	689d      	ldr	r5, [r3, #8]
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <mtx8_execute+0x78>)
 8005e3e:	4c1b      	ldr	r4, [pc, #108]	; (8005eac <mtx8_execute+0x7c>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
 8005e40:	4f1b      	ldr	r7, [pc, #108]	; (8005eb0 <mtx8_execute+0x80>)
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8005e42:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005e44:	1c6a      	adds	r2, r5, #1
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <mtx8_execute+0x84>)
 8005e4e:	f7fa fd8f 	bl	8000970 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005e52:	6871      	ldr	r1, [r6, #4]
 8005e54:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <mtx8_execute+0x88>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005e56:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005e58:	1caa      	adds	r2, r5, #2
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <mtx8_execute+0x8c>)
 8005e60:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e64:	f7fa fd84 	bl	8000970 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005e68:	68b1      	ldr	r1, [r6, #8]
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <mtx8_execute+0x90>)

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005e6c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005e6e:	1cea      	adds	r2, r5, #3
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4608      	mov	r0, r1
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <mtx8_execute+0x94>)
 8005e76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e7a:	f7fa fd79 	bl	8000970 <chThdCreateStatic>
 8005e7e:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7fb fa05 	bl	8001290 <chCondSignal>
  chCondSignal(&c1);
 8005e86:	4638      	mov	r0, r7
 8005e88:	f7fb fa02 	bl	8001290 <chCondSignal>
  test_wait_threads();
 8005e8c:	f7fe fde0 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8005e90:	490d      	ldr	r1, [pc, #52]	; (8005ec8 <mtx8_execute+0x98>)
 8005e92:	2001      	movs	r0, #1
}
 8005e94:	b003      	add	sp, #12
 8005e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8005e9a:	f7fe bd81 	b.w	80049a0 <_test_assert_sequence>
 8005e9e:	bf00      	nop
 8005ea0:	20000d70 	.word	0x20000d70
 8005ea4:	080093a0 	.word	0x080093a0
 8005ea8:	08009678 	.word	0x08009678
 8005eac:	20001918 	.word	0x20001918
 8005eb0:	20000834 	.word	0x20000834
 8005eb4:	08005ed1 	.word	0x08005ed1
 8005eb8:	08009670 	.word	0x08009670
 8005ebc:	08005ce1 	.word	0x08005ce1
 8005ec0:	08009674 	.word	0x08009674
 8005ec4:	08005821 	.word	0x08005821
 8005ec8:	08009800 	.word	0x08009800
 8005ecc:	00000000 	.word	0x00000000

08005ed0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8005ed0:	b570      	push	{r4, r5, r6, lr}

  chMtxLock(&m2);
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	; (8005f04 <thread11+0x34>)
  chMtxLock(&m1);
 8005ed4:	4d0c      	ldr	r5, [pc, #48]	; (8005f08 <thread11+0x38>)
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8005ed6:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7fb f921 	bl	8001120 <chMtxLock>
  chMtxLock(&m1);
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f7fb f91e 	bl	8001120 <chMtxLock>
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
 8005ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ee8:	4808      	ldr	r0, [pc, #32]	; (8005f0c <thread11+0x3c>)
 8005eea:	f7fb fa79 	bl	80013e0 <chCondWaitTimeout>
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8005eee:	7830      	ldrb	r0, [r6, #0]
 8005ef0:	f7fe fd2e 	bl	8004950 <test_emit_token>
  chMtxUnlock(&m1);
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7fb f93b 	bl	8001170 <chMtxUnlock>
  chMtxUnlock(&m2);
 8005efa:	4620      	mov	r0, r4
}
 8005efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8005f00:	f7fb b936 	b.w	8001170 <chMtxUnlock>
 8005f04:	20000824 	.word	0x20000824
 8005f08:	20000814 	.word	0x20000814
 8005f0c:	20000834 	.word	0x20000834

08005f10 <msg1_execute>:
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8005f10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <msg1_execute+0x64>)
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8005f14:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <msg1_execute+0x68>)
 8005f16:	6991      	ldr	r1, [r2, #24]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	688a      	ldr	r2, [r1, #8]
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <msg1_execute+0x6c>)
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8005f1e:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8005f20:	3201      	adds	r2, #1
 8005f22:	9100      	str	r1, [sp, #0]
 8005f24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f28:	f7fa fd22 	bl	8000970 <chThdCreateStatic>
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <msg1_execute+0x70>)
 8005f2e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8005f30:	f7fb fc1e 	bl	8001770 <chMsgWait>
 8005f34:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8005f36:	4621      	mov	r1, r4
 8005f38:	f7fb fc3a 	bl	80017b0 <chMsgRelease>
  test_emit_token(msg);
 8005f3c:	b2e0      	uxtb	r0, r4
 8005f3e:	f7fe fd07 	bl	8004950 <test_emit_token>
  tp = chMsgWait();
 8005f42:	f7fb fc15 	bl	8001770 <chMsgWait>
 8005f46:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7fb fc31 	bl	80017b0 <chMsgRelease>
  test_emit_token(msg);
 8005f4e:	b2e0      	uxtb	r0, r4
 8005f50:	f7fe fcfe 	bl	8004950 <test_emit_token>
  tp = chMsgWait();
 8005f54:	f7fb fc0c 	bl	8001770 <chMsgWait>
 8005f58:	6b04      	ldr	r4, [r0, #48]	; 0x30
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	f7fb fc28 	bl	80017b0 <chMsgRelease>
  test_emit_token(msg);
 8005f60:	b2e0      	uxtb	r0, r4
 8005f62:	f7fe fcf5 	bl	8004950 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8005f66:	4907      	ldr	r1, [pc, #28]	; (8005f84 <msg1_execute+0x74>)
 8005f68:	2001      	movs	r0, #1
}
 8005f6a:	b002      	add	sp, #8
 8005f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8005f70:	f7fe bd16 	b.w	80049a0 <_test_assert_sequence>
 8005f74:	20000d70 	.word	0x20000d70
 8005f78:	080093a0 	.word	0x080093a0
 8005f7c:	08005f91 	.word	0x08005f91
 8005f80:	20001918 	.word	0x20001918
 8005f84:	08009800 	.word	0x08009800
	...

08005f90 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8005f90:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8005f92:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8005f94:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8005f96:	f7fb fbcb 	bl	8001730 <chMsgSend>
  chMsgSend(p, 'B');
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	2142      	movs	r1, #66	; 0x42
 8005f9e:	f7fb fbc7 	bl	8001730 <chMsgSend>
  chMsgSend(p, 'C');
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	2143      	movs	r1, #67	; 0x43
}
 8005fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8005faa:	f7fb bbc1 	b.w	8001730 <chMsgSend>
 8005fae:	bf00      	nop

08005fb0 <mbox1_execute>:
static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}

static void mbox1_execute(void) {
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	4ecb      	ldr	r6, [pc, #812]	; (80062ec <mbox1_execute+0x33c>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005fbe:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8005fc0:	f1a1 0105 	sub.w	r1, r1, #5
 8005fc4:	fab1 f181 	clz	r1, r1
 8005fc8:	2001      	movs	r0, #1
 8005fca:	0949      	lsrs	r1, r1, #5
 8005fcc:	f7fe fcd0 	bl	8004970 <_test_assert>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f040 8118 	bne.w	8006206 <mbox1_execute+0x256>
 8005fd6:	f380 8811 	msr	BASEPRI, r0
 8005fda:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8005fdc:	4dc3      	ldr	r5, [pc, #780]	; (80062ec <mbox1_execute+0x33c>)
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f7fb fc33 	bl	8001850 <chMBPost>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8005fea:	fab0 f180 	clz	r1, r0
 8005fee:	0949      	lsrs	r1, r1, #5
 8005ff0:	2002      	movs	r0, #2
 8005ff2:	f7fe fcbd 	bl	8004970 <_test_assert>
 8005ff6:	3401      	adds	r4, #1
 8005ff8:	b980      	cbnz	r0, 800601c <mbox1_execute+0x6c>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8005ffa:	2c46      	cmp	r4, #70	; 0x46
 8005ffc:	d1ee      	bne.n	8005fdc <mbox1_execute+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8005ffe:	2141      	movs	r1, #65	; 0x41
 8006000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006004:	4628      	mov	r0, r5
 8006006:	f7fb fc6b 	bl	80018e0 <chMBPostAhead>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 800600a:	fab0 f180 	clz	r1, r0
 800600e:	0949      	lsrs	r1, r1, #5
 8006010:	2003      	movs	r0, #3
 8006012:	f7fe fcad 	bl	8004970 <_test_assert>
 8006016:	2800      	cmp	r0, #0
 8006018:	f000 80fb 	beq.w	8006212 <mbox1_execute+0x262>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 800601c:	b002      	add	sp, #8
 800601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006022:	f385 8811 	msr	BASEPRI, r5
 8006026:	f387 8811 	msr	BASEPRI, r7
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 800602a:	69a1      	ldr	r1, [r4, #24]
 800602c:	fab1 f181 	clz	r1, r1
 8006030:	0949      	lsrs	r1, r1, #5
 8006032:	201f      	movs	r0, #31
 8006034:	f7fe fc9c 	bl	8004970 <_test_assert>
 8006038:	2800      	cmp	r0, #0
 800603a:	f040 829c 	bne.w	8006576 <mbox1_execute+0x5c6>
 800603e:	f385 8811 	msr	BASEPRI, r5
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006042:	68e1      	ldr	r1, [r4, #12]
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	1acb      	subs	r3, r1, r3
 8006048:	4259      	negs	r1, r3
 800604a:	4159      	adcs	r1, r3
 800604c:	4638      	mov	r0, r7
 800604e:	f7fe fc8f 	bl	8004970 <_test_assert>
 8006052:	2800      	cmp	r0, #0
 8006054:	d1e2      	bne.n	800601c <mbox1_execute+0x6c>
 8006056:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 800605a:	2145      	movs	r1, #69	; 0x45
 800605c:	4620      	mov	r0, r4
 800605e:	f7fb fc67 	bl	8001930 <chMBPostAheadI>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8006062:	fab0 f180 	clz	r1, r0
 8006066:	0949      	lsrs	r1, r1, #5
 8006068:	2021      	movs	r0, #33	; 0x21
 800606a:	f7fe fc81 	bl	8004970 <_test_assert>
 800606e:	2800      	cmp	r0, #0
 8006070:	d1d4      	bne.n	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8006072:	2144      	movs	r1, #68	; 0x44
 8006074:	4620      	mov	r0, r4
 8006076:	f7fb fc5b 	bl	8001930 <chMBPostAheadI>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 800607a:	fab0 f180 	clz	r1, r0
 800607e:	0949      	lsrs	r1, r1, #5
 8006080:	2022      	movs	r0, #34	; 0x22
 8006082:	f7fe fc75 	bl	8004970 <_test_assert>
 8006086:	2800      	cmp	r0, #0
 8006088:	d1c8      	bne.n	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'C');
 800608a:	2143      	movs	r1, #67	; 0x43
 800608c:	4620      	mov	r0, r4
 800608e:	f7fb fc4f 	bl	8001930 <chMBPostAheadI>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8006092:	fab0 f180 	clz	r1, r0
 8006096:	0949      	lsrs	r1, r1, #5
 8006098:	2023      	movs	r0, #35	; 0x23
 800609a:	f7fe fc69 	bl	8004970 <_test_assert>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d1bc      	bne.n	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'B');
 80060a2:	2142      	movs	r1, #66	; 0x42
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7fb fc43 	bl	8001930 <chMBPostAheadI>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 80060aa:	fab0 f180 	clz	r1, r0
 80060ae:	0949      	lsrs	r1, r1, #5
 80060b0:	2024      	movs	r0, #36	; 0x24
 80060b2:	f7fe fc5d 	bl	8004970 <_test_assert>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d1b0      	bne.n	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostAheadI(&mb1, 'A');
 80060ba:	4c8c      	ldr	r4, [pc, #560]	; (80062ec <mbox1_execute+0x33c>)
 80060bc:	2141      	movs	r1, #65	; 0x41
 80060be:	4620      	mov	r0, r4
 80060c0:	f7fb fc36 	bl	8001930 <chMBPostAheadI>
 80060c4:	2300      	movs	r3, #0
 80060c6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 80060ca:	fab0 f180 	clz	r1, r0
 80060ce:	0949      	lsrs	r1, r1, #5
 80060d0:	2025      	movs	r0, #37	; 0x25
 80060d2:	f7fe fc4d 	bl	8004970 <_test_assert>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d1a0      	bne.n	800601c <mbox1_execute+0x6c>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80060da:	68e1      	ldr	r1, [r4, #12]
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	ebc3 0801 	rsb	r8, r3, r1
 80060e2:	f1d8 0100 	rsbs	r1, r8, #0
 80060e6:	eb41 0108 	adc.w	r1, r1, r8
 80060ea:	2026      	movs	r0, #38	; 0x26
 80060ec:	f7fe fc40 	bl	8004970 <_test_assert>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d193      	bne.n	800601c <mbox1_execute+0x6c>
 80060f4:	4607      	mov	r7, r0
 80060f6:	2405      	movs	r4, #5
 80060f8:	f04f 0820 	mov.w	r8, #32
 80060fc:	2620      	movs	r6, #32
 80060fe:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006102:	4d7a      	ldr	r5, [pc, #488]	; (80062ec <mbox1_execute+0x33c>)
 8006104:	a901      	add	r1, sp, #4
 8006106:	4628      	mov	r0, r5
 8006108:	f7fb fc52 	bl	80019b0 <chMBFetchI>
 800610c:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8006110:	fab0 f180 	clz	r1, r0
 8006114:	0949      	lsrs	r1, r1, #5
 8006116:	2027      	movs	r0, #39	; 0x27
 8006118:	f7fe fc2a 	bl	8004970 <_test_assert>
 800611c:	2800      	cmp	r0, #0
 800611e:	f47f af7d 	bne.w	800601c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8006122:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006126:	f7fe fc13 	bl	8004950 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800612a:	3c01      	subs	r4, #1
 800612c:	d1e6      	bne.n	80060fc <mbox1_execute+0x14c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 800612e:	4970      	ldr	r1, [pc, #448]	; (80062f0 <mbox1_execute+0x340>)
 8006130:	2028      	movs	r0, #40	; 0x28
 8006132:	f7fe fc35 	bl	80049a0 <_test_assert_sequence>
 8006136:	2800      	cmp	r0, #0
 8006138:	f47f af70 	bne.w	800601c <mbox1_execute+0x6c>
 800613c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006140:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006142:	f1a1 0c05 	sub.w	ip, r1, #5
 8006146:	f1dc 0100 	rsbs	r1, ip, #0
 800614a:	eb41 010c 	adc.w	r1, r1, ip
 800614e:	2029      	movs	r0, #41	; 0x29
 8006150:	f7fe fc0e 	bl	8004970 <_test_assert>
 8006154:	2800      	cmp	r0, #0
 8006156:	f040 80c5 	bne.w	80062e4 <mbox1_execute+0x334>
 800615a:	f384 8811 	msr	BASEPRI, r4
 800615e:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006162:	69a9      	ldr	r1, [r5, #24]
 8006164:	fab1 f181 	clz	r1, r1
 8006168:	0949      	lsrs	r1, r1, #5
 800616a:	202a      	movs	r0, #42	; 0x2a
 800616c:	f7fe fc00 	bl	8004970 <_test_assert>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 80b7 	bne.w	80062e4 <mbox1_execute+0x334>
 8006176:	f384 8811 	msr	BASEPRI, r4
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800617a:	68e9      	ldr	r1, [r5, #12]
 800617c:	68ab      	ldr	r3, [r5, #8]
 800617e:	ebc3 0e01 	rsb	lr, r3, r1
 8006182:	f1de 0100 	rsbs	r1, lr, #0
 8006186:	eb41 010e 	adc.w	r1, r1, lr
 800618a:	202b      	movs	r0, #43	; 0x2b
 800618c:	f7fe fbf0 	bl	8004970 <_test_assert>
 8006190:	2800      	cmp	r0, #0
 8006192:	f47f af43 	bne.w	800601c <mbox1_execute+0x6c>

  /*
   * Testing reset.
   */
  chMBReset(&mb1);
 8006196:	4628      	mov	r0, r5
 8006198:	f7fb fb4a 	bl	8001830 <chMBReset>
 800619c:	f386 8811 	msr	BASEPRI, r6

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80061a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80061a2:	1f4f      	subs	r7, r1, #5
 80061a4:	4279      	negs	r1, r7
 80061a6:	4179      	adcs	r1, r7
 80061a8:	202c      	movs	r0, #44	; 0x2c
 80061aa:	f7fe fbe1 	bl	8004970 <_test_assert>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f040 8098 	bne.w	80062e4 <mbox1_execute+0x334>
 80061b4:	f384 8811 	msr	BASEPRI, r4
 80061b8:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80061bc:	69a9      	ldr	r1, [r5, #24]
 80061be:	fab1 f181 	clz	r1, r1
 80061c2:	0949      	lsrs	r1, r1, #5
 80061c4:	202d      	movs	r0, #45	; 0x2d
 80061c6:	f7fe fbd3 	bl	8004970 <_test_assert>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f040 808a 	bne.w	80062e4 <mbox1_execute+0x334>
 80061d0:	f384 8811 	msr	BASEPRI, r4
 80061d4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80061d8:	6829      	ldr	r1, [r5, #0]
 80061da:	68ab      	ldr	r3, [r5, #8]
 80061dc:	1aca      	subs	r2, r1, r3
 80061de:	4251      	negs	r1, r2
 80061e0:	4151      	adcs	r1, r2
 80061e2:	202e      	movs	r0, #46	; 0x2e
 80061e4:	f7fe fbc4 	bl	8004970 <_test_assert>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d17b      	bne.n	80062e4 <mbox1_execute+0x334>
 80061ec:	f384 8811 	msr	BASEPRI, r4
 80061f0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80061f4:	6829      	ldr	r1, [r5, #0]
 80061f6:	68eb      	ldr	r3, [r5, #12]
 80061f8:	1acb      	subs	r3, r1, r3
 80061fa:	4259      	negs	r1, r3
 80061fc:	f04f 002f 	mov.w	r0, #47	; 0x2f
 8006200:	4159      	adcs	r1, r3
 8006202:	f7fe fbb5 	bl	8004970 <_test_assert>
 8006206:	2300      	movs	r3, #0
 8006208:	f383 8811 	msr	BASEPRI, r3
}
 800620c:	b002      	add	sp, #8
 800620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8006212:	2201      	movs	r2, #1
 8006214:	2158      	movs	r1, #88	; 0x58
 8006216:	4628      	mov	r0, r5
 8006218:	f7fb fb1a 	bl	8001850 <chMBPost>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800621c:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 8006220:	fab1 f181 	clz	r1, r1
 8006224:	0949      	lsrs	r1, r1, #5
 8006226:	2004      	movs	r0, #4
 8006228:	f7fe fba2 	bl	8004970 <_test_assert>
 800622c:	4604      	mov	r4, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	f47f aef4 	bne.w	800601c <mbox1_execute+0x6c>
 8006234:	2720      	movs	r7, #32
 8006236:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 800623a:	2158      	movs	r1, #88	; 0x58
 800623c:	4628      	mov	r0, r5
 800623e:	f7fb fb2f 	bl	80018a0 <chMBPostI>
 8006242:	4601      	mov	r1, r0
 8006244:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006248:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 800624c:	fab1 f181 	clz	r1, r1
 8006250:	2005      	movs	r0, #5
 8006252:	0949      	lsrs	r1, r1, #5
 8006254:	f7fe fb8c 	bl	8004970 <_test_assert>
 8006258:	2800      	cmp	r0, #0
 800625a:	f47f aedf 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 800625e:	2201      	movs	r2, #1
 8006260:	2158      	movs	r1, #88	; 0x58
 8006262:	4628      	mov	r0, r5
 8006264:	f7fb fb3c 	bl	80018e0 <chMBPostAhead>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006268:	f1a0 31ff 	sub.w	r1, r0, #4294967295	; 0xffffffff
 800626c:	fab1 f181 	clz	r1, r1
 8006270:	0949      	lsrs	r1, r1, #5
 8006272:	2006      	movs	r0, #6
 8006274:	f7fe fb7c 	bl	8004970 <_test_assert>
 8006278:	4604      	mov	r4, r0
 800627a:	2800      	cmp	r0, #0
 800627c:	f47f aece 	bne.w	800601c <mbox1_execute+0x6c>
 8006280:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8006284:	2158      	movs	r1, #88	; 0x58
 8006286:	4628      	mov	r0, r5
 8006288:	f7fb fb52 	bl	8001930 <chMBPostAheadI>
 800628c:	4601      	mov	r1, r0
 800628e:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006292:	f1a1 31ff 	sub.w	r1, r1, #4294967295	; 0xffffffff
 8006296:	fab1 f181 	clz	r1, r1
 800629a:	2007      	movs	r0, #7
 800629c:	0949      	lsrs	r1, r1, #5
 800629e:	f7fe fb67 	bl	8004970 <_test_assert>
 80062a2:	4680      	mov	r8, r0
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f47f aeb9 	bne.w	800601c <mbox1_execute+0x6c>
 80062aa:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 80062ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80062b0:	fab1 f181 	clz	r1, r1
 80062b4:	0949      	lsrs	r1, r1, #5
 80062b6:	2008      	movs	r0, #8
 80062b8:	f7fe fb5a 	bl	8004970 <_test_assert>
 80062bc:	4604      	mov	r4, r0
 80062be:	b110      	cbz	r0, 80062c6 <mbox1_execute+0x316>
 80062c0:	f388 8811 	msr	BASEPRI, r8
 80062c4:	e6aa      	b.n	800601c <mbox1_execute+0x6c>
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80062ce:	69a9      	ldr	r1, [r5, #24]
 80062d0:	f1a1 0e05 	sub.w	lr, r1, #5
 80062d4:	f1de 0100 	rsbs	r1, lr, #0
 80062d8:	eb41 010e 	adc.w	r1, r1, lr
 80062dc:	2009      	movs	r0, #9
 80062de:	f7fe fb47 	bl	8004970 <_test_assert>
 80062e2:	b138      	cbz	r0, 80062f4 <mbox1_execute+0x344>
 80062e4:	f384 8811 	msr	BASEPRI, r4
 80062e8:	e698      	b.n	800601c <mbox1_execute+0x6c>
 80062ea:	bf00      	nop
 80062ec:	2000083c 	.word	0x2000083c
 80062f0:	0800967c 	.word	0x0800967c
 80062f4:	f380 8811 	msr	BASEPRI, r0
 80062f8:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80062fc:	68e9      	ldr	r1, [r5, #12]
 80062fe:	68ab      	ldr	r3, [r5, #8]
 8006300:	1acc      	subs	r4, r1, r3
 8006302:	4261      	negs	r1, r4
 8006304:	f04f 000a 	mov.w	r0, #10
 8006308:	4161      	adcs	r1, r4
 800630a:	f7fe fb31 	bl	8004970 <_test_assert>
 800630e:	2300      	movs	r3, #0
 8006310:	2800      	cmp	r0, #0
 8006312:	f47f af79 	bne.w	8006208 <mbox1_execute+0x258>
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	2505      	movs	r5, #5
 800631c:	e005      	b.n	800632a <mbox1_execute+0x37a>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800631e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006322:	f7fe fb15 	bl	8004950 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8006326:	3d01      	subs	r5, #1
 8006328:	d00f      	beq.n	800634a <mbox1_execute+0x39a>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 800632a:	4c94      	ldr	r4, [pc, #592]	; (800657c <mbox1_execute+0x5cc>)
 800632c:	a901      	add	r1, sp, #4
 800632e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006332:	4620      	mov	r0, r4
 8006334:	f7fb fb14 	bl	8001960 <chMBFetch>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8006338:	fab0 f180 	clz	r1, r0
 800633c:	0949      	lsrs	r1, r1, #5
 800633e:	200b      	movs	r0, #11
 8006340:	f7fe fb16 	bl	8004970 <_test_assert>
 8006344:	2800      	cmp	r0, #0
 8006346:	d0ea      	beq.n	800631e <mbox1_execute+0x36e>
 8006348:	e668      	b.n	800601c <mbox1_execute+0x6c>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 800634a:	498d      	ldr	r1, [pc, #564]	; (8006580 <mbox1_execute+0x5d0>)
 800634c:	200c      	movs	r0, #12
 800634e:	f7fe fb27 	bl	80049a0 <_test_assert_sequence>
 8006352:	2800      	cmp	r0, #0
 8006354:	f47f ae62 	bne.w	800601c <mbox1_execute+0x6c>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8006358:	2147      	movs	r1, #71	; 0x47
 800635a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635e:	4620      	mov	r0, r4
 8006360:	f7fb fa76 	bl	8001850 <chMBPost>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8006364:	fab0 f180 	clz	r1, r0
 8006368:	0949      	lsrs	r1, r1, #5
 800636a:	200d      	movs	r0, #13
 800636c:	f7fe fb00 	bl	8004970 <_test_assert>
 8006370:	2800      	cmp	r0, #0
 8006372:	f47f ae53 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8006376:	a901      	add	r1, sp, #4
 8006378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800637c:	4620      	mov	r0, r4
 800637e:	f7fb faef 	bl	8001960 <chMBFetch>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8006382:	fab0 f180 	clz	r1, r0
 8006386:	0949      	lsrs	r1, r1, #5
 8006388:	200e      	movs	r0, #14
 800638a:	f7fe faf1 	bl	8004970 <_test_assert>
 800638e:	2800      	cmp	r0, #0
 8006390:	f47f ae44 	bne.w	800601c <mbox1_execute+0x6c>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8006394:	6821      	ldr	r1, [r4, #0]
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	1aca      	subs	r2, r1, r3
 800639a:	4251      	negs	r1, r2
 800639c:	4151      	adcs	r1, r2
 800639e:	200f      	movs	r0, #15
 80063a0:	f7fe fae6 	bl	8004970 <_test_assert>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f47f ae39 	bne.w	800601c <mbox1_execute+0x6c>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	68e3      	ldr	r3, [r4, #12]
 80063ae:	1acb      	subs	r3, r1, r3
 80063b0:	4259      	negs	r1, r3
 80063b2:	4159      	adcs	r1, r3
 80063b4:	2010      	movs	r0, #16
 80063b6:	f7fe fadb 	bl	8004970 <_test_assert>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f47f ae2e 	bne.w	800601c <mbox1_execute+0x6c>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 80063c0:	a901      	add	r1, sp, #4
 80063c2:	2201      	movs	r2, #1
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7fb facb 	bl	8001960 <chMBFetch>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80063ca:	f100 0801 	add.w	r8, r0, #1
 80063ce:	f1d8 0100 	rsbs	r1, r8, #0
 80063d2:	eb41 0108 	adc.w	r1, r1, r8
 80063d6:	2011      	movs	r0, #17
 80063d8:	f7fe faca 	bl	8004970 <_test_assert>
 80063dc:	2800      	cmp	r0, #0
 80063de:	f47f ae1d 	bne.w	800601c <mbox1_execute+0x6c>
 80063e2:	2720      	movs	r7, #32
 80063e4:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 80063e8:	a901      	add	r1, sp, #4
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fb fae0 	bl	80019b0 <chMBFetchI>
 80063f0:	4601      	mov	r1, r0
 80063f2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80063f6:	f101 0c01 	add.w	ip, r1, #1
 80063fa:	f1dc 0100 	rsbs	r1, ip, #0
 80063fe:	eb41 010c 	adc.w	r1, r1, ip
 8006402:	2012      	movs	r0, #18
 8006404:	f7fe fab4 	bl	8004970 <_test_assert>
 8006408:	2800      	cmp	r0, #0
 800640a:	f47f ae07 	bne.w	800601c <mbox1_execute+0x6c>
 800640e:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006412:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006414:	f1a1 0e05 	sub.w	lr, r1, #5
 8006418:	f1de 0100 	rsbs	r1, lr, #0
 800641c:	eb41 010e 	adc.w	r1, r1, lr
 8006420:	2013      	movs	r0, #19
 8006422:	f7fe faa5 	bl	8004970 <_test_assert>
 8006426:	2800      	cmp	r0, #0
 8006428:	f47f aeed 	bne.w	8006206 <mbox1_execute+0x256>
 800642c:	2700      	movs	r7, #0
 800642e:	f387 8811 	msr	BASEPRI, r7
 8006432:	2520      	movs	r5, #32
 8006434:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006438:	69b1      	ldr	r1, [r6, #24]
 800643a:	4c50      	ldr	r4, [pc, #320]	; (800657c <mbox1_execute+0x5cc>)
 800643c:	fab1 f181 	clz	r1, r1
 8006440:	0949      	lsrs	r1, r1, #5
 8006442:	2014      	movs	r0, #20
 8006444:	f7fe fa94 	bl	8004970 <_test_assert>
 8006448:	4606      	mov	r6, r0
 800644a:	b110      	cbz	r0, 8006452 <mbox1_execute+0x4a2>
 800644c:	f387 8811 	msr	BASEPRI, r7
 8006450:	e5e4      	b.n	800601c <mbox1_execute+0x6c>
 8006452:	f380 8811 	msr	BASEPRI, r0
 8006456:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800645a:	68e1      	ldr	r1, [r4, #12]
 800645c:	68a3      	ldr	r3, [r4, #8]
 800645e:	1acf      	subs	r7, r1, r3
 8006460:	4279      	negs	r1, r7
 8006462:	4179      	adcs	r1, r7
 8006464:	2015      	movs	r0, #21
 8006466:	f7fe fa83 	bl	8004970 <_test_assert>
 800646a:	b110      	cbz	r0, 8006472 <mbox1_execute+0x4c2>
 800646c:	f386 8811 	msr	BASEPRI, r6
 8006470:	e5d4      	b.n	800601c <mbox1_execute+0x6c>
 8006472:	f380 8811 	msr	BASEPRI, r0
 8006476:	f385 8811 	msr	BASEPRI, r5

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 800647a:	2141      	movs	r1, #65	; 0x41
 800647c:	4620      	mov	r0, r4
 800647e:	f7fb fa0f 	bl	80018a0 <chMBPostI>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8006482:	fab0 f180 	clz	r1, r0
 8006486:	0949      	lsrs	r1, r1, #5
 8006488:	2016      	movs	r0, #22
 800648a:	f7fe fa71 	bl	8004970 <_test_assert>
 800648e:	2800      	cmp	r0, #0
 8006490:	f47f adc4 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'B');
 8006494:	2142      	movs	r1, #66	; 0x42
 8006496:	4620      	mov	r0, r4
 8006498:	f7fb fa02 	bl	80018a0 <chMBPostI>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 800649c:	fab0 f180 	clz	r1, r0
 80064a0:	0949      	lsrs	r1, r1, #5
 80064a2:	2017      	movs	r0, #23
 80064a4:	f7fe fa64 	bl	8004970 <_test_assert>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f47f adb7 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'C');
 80064ae:	2143      	movs	r1, #67	; 0x43
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7fb f9f5 	bl	80018a0 <chMBPostI>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80064b6:	fab0 f180 	clz	r1, r0
 80064ba:	0949      	lsrs	r1, r1, #5
 80064bc:	2018      	movs	r0, #24
 80064be:	f7fe fa57 	bl	8004970 <_test_assert>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f47f adaa 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'D');
 80064c8:	2144      	movs	r1, #68	; 0x44
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7fb f9e8 	bl	80018a0 <chMBPostI>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 80064d0:	fab0 f180 	clz	r1, r0
 80064d4:	0949      	lsrs	r1, r1, #5
 80064d6:	2019      	movs	r0, #25
 80064d8:	f7fe fa4a 	bl	8004970 <_test_assert>
 80064dc:	4606      	mov	r6, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	f47f ad9c 	bne.w	800601c <mbox1_execute+0x6c>
  msg1 = chMBPostI(&mb1, 'E');
 80064e4:	2145      	movs	r1, #69	; 0x45
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7fb f9da 	bl	80018a0 <chMBPostI>
 80064ec:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 80064f0:	fab0 f180 	clz	r1, r0
 80064f4:	0949      	lsrs	r1, r1, #5
 80064f6:	201a      	movs	r0, #26
 80064f8:	f7fe fa3a 	bl	8004970 <_test_assert>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f47f ad8d 	bne.w	800601c <mbox1_execute+0x6c>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006502:	68e1      	ldr	r1, [r4, #12]
 8006504:	68a3      	ldr	r3, [r4, #8]
 8006506:	1acc      	subs	r4, r1, r3
 8006508:	4261      	negs	r1, r4
 800650a:	4161      	adcs	r1, r4
 800650c:	201b      	movs	r0, #27
 800650e:	f7fe fa2f 	bl	8004970 <_test_assert>
 8006512:	2800      	cmp	r0, #0
 8006514:	f47f ad82 	bne.w	800601c <mbox1_execute+0x6c>
 8006518:	462e      	mov	r6, r5
 800651a:	4680      	mov	r8, r0
 800651c:	2505      	movs	r5, #5
 800651e:	2720      	movs	r7, #32
 8006520:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006524:	4c15      	ldr	r4, [pc, #84]	; (800657c <mbox1_execute+0x5cc>)
 8006526:	a901      	add	r1, sp, #4
 8006528:	4620      	mov	r0, r4
 800652a:	f7fb fa41 	bl	80019b0 <chMBFetchI>
 800652e:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8006532:	fab0 f180 	clz	r1, r0
 8006536:	0949      	lsrs	r1, r1, #5
 8006538:	201c      	movs	r0, #28
 800653a:	f7fe fa19 	bl	8004970 <_test_assert>
 800653e:	2800      	cmp	r0, #0
 8006540:	f47f ad6c 	bne.w	800601c <mbox1_execute+0x6c>
    test_emit_token(msg2);
 8006544:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006548:	f7fe fa02 	bl	8004950 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800654c:	3d01      	subs	r5, #1
 800654e:	d1e6      	bne.n	800651e <mbox1_execute+0x56e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8006550:	490b      	ldr	r1, [pc, #44]	; (8006580 <mbox1_execute+0x5d0>)
 8006552:	201d      	movs	r0, #29
 8006554:	f7fe fa24 	bl	80049a0 <_test_assert_sequence>
 8006558:	2800      	cmp	r0, #0
 800655a:	f47f ad5f 	bne.w	800601c <mbox1_execute+0x6c>
 800655e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006562:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006564:	1f4a      	subs	r2, r1, #5
 8006566:	4251      	negs	r1, r2
 8006568:	4151      	adcs	r1, r2
 800656a:	201e      	movs	r0, #30
 800656c:	f7fe fa00 	bl	8004970 <_test_assert>
 8006570:	2800      	cmp	r0, #0
 8006572:	f43f ad56 	beq.w	8006022 <mbox1_execute+0x72>
 8006576:	f385 8811 	msr	BASEPRI, r5
 800657a:	e54f      	b.n	800601c <mbox1_execute+0x6c>
 800657c:	2000083c 	.word	0x2000083c
 8006580:	0800967c 	.word	0x0800967c
	...

08006590 <mbox1_setup>:
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
 8006590:	2205      	movs	r2, #5
 8006592:	4902      	ldr	r1, [pc, #8]	; (800659c <mbox1_setup+0xc>)
 8006594:	4802      	ldr	r0, [pc, #8]	; (80065a0 <mbox1_setup+0x10>)
 8006596:	f7fb b91b 	b.w	80017d0 <chMBObjectInit>
 800659a:	bf00      	nop
 800659c:	20001290 	.word	0x20001290
 80065a0:	2000083c 	.word	0x2000083c
	...

080065b0 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80065b0:	2043      	movs	r0, #67	; 0x43
 80065b2:	f7fe b9cd 	b.w	8004950 <test_emit_token>
 80065b6:	bf00      	nop
	...

080065c0 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80065c0:	2042      	movs	r0, #66	; 0x42
 80065c2:	f7fe b9c5 	b.w	8004950 <test_emit_token>
 80065c6:	bf00      	nop
	...

080065d0 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 80065d0:	2041      	movs	r0, #65	; 0x41
 80065d2:	f7fe b9bd 	b.w	8004950 <test_emit_token>
 80065d6:	bf00      	nop
	...

080065e0 <evt1_execute>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4c1f      	ldr	r4, [pc, #124]	; (8006660 <evt1_execute+0x80>)
 80065e4:	b08a      	sub	sp, #40	; 0x28
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80065e6:	4620      	mov	r0, r4
 80065e8:	4669      	mov	r1, sp
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ee:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80065f0:	6024      	str	r4, [r4, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80065f2:	f7fa ff05 	bl	8001400 <chEvtRegisterMaskWithFlags>
 80065f6:	4620      	mov	r0, r4
 80065f8:	a905      	add	r1, sp, #20
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065fe:	2202      	movs	r2, #2
 8006600:	f7fa fefe 	bl	8001400 <chEvtRegisterMaskWithFlags>
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8006604:	6821      	ldr	r1, [r4, #0]
 8006606:	1b09      	subs	r1, r1, r4
 8006608:	bf18      	it	ne
 800660a:	2101      	movne	r1, #1
 800660c:	2001      	movs	r0, #1
 800660e:	f7fe f9af 	bl	8004970 <_test_assert>
 8006612:	b108      	cbz	r0, 8006618 <evt1_execute+0x38>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8006614:	b00a      	add	sp, #40	; 0x28
 8006616:	bd10      	pop	{r4, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8006618:	4669      	mov	r1, sp
 800661a:	4620      	mov	r0, r4
 800661c:	f7fa ff08 	bl	8001430 <chEvtUnregister>
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8006620:	6821      	ldr	r1, [r4, #0]
 8006622:	1b09      	subs	r1, r1, r4
 8006624:	bf18      	it	ne
 8006626:	2101      	movne	r1, #1
 8006628:	2002      	movs	r0, #2
 800662a:	f7fe f9a1 	bl	8004970 <_test_assert>
 800662e:	2800      	cmp	r0, #0
 8006630:	d1f0      	bne.n	8006614 <evt1_execute+0x34>
  chEvtUnregister(&es1, &el2);
 8006632:	a905      	add	r1, sp, #20
 8006634:	4620      	mov	r0, r4
 8006636:	f7fa fefb 	bl	8001430 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	1b09      	subs	r1, r1, r4
 800663e:	fab1 f181 	clz	r1, r1
 8006642:	2003      	movs	r0, #3
 8006644:	0949      	lsrs	r1, r1, #5
 8006646:	f7fe f993 	bl	8004970 <_test_assert>
 800664a:	2800      	cmp	r0, #0
 800664c:	d1e2      	bne.n	8006614 <evt1_execute+0x34>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
 800664e:	2107      	movs	r1, #7
 8006650:	4804      	ldr	r0, [pc, #16]	; (8006664 <evt1_execute+0x84>)
 8006652:	f7fa ff75 	bl	8001540 <chEvtDispatch>
  test_assert_sequence(4, "ABC");
 8006656:	4904      	ldr	r1, [pc, #16]	; (8006668 <evt1_execute+0x88>)
 8006658:	2004      	movs	r0, #4
 800665a:	f7fe f9a1 	bl	80049a0 <_test_assert_sequence>
 800665e:	e7d9      	b.n	8006614 <evt1_execute+0x34>
 8006660:	20000864 	.word	0x20000864
 8006664:	080099e0 	.word	0x080099e0
 8006668:	08009800 	.word	0x08009800
 800666c:	00000000 	.word	0x00000000

08006670 <evt3_setup>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006674:	f7fa bef4 	b.w	8001460 <chEvtGetAndClearEvents>
	...

08006680 <evt2_setup>:
 8006680:	f7ff bff6 	b.w	8006670 <evt3_setup>
	...

08006690 <evt1_setup>:
 8006690:	f7ff bfee 	b.w	8006670 <evt3_setup>
	...

080066a0 <evt2_execute>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80066a4:	2007      	movs	r0, #7
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80066a6:	b08d      	sub	sp, #52	; 0x34
  systime_t target_time;

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
 80066a8:	f7fa feea 	bl	8001480 <chEvtAddEvents>
  m = chEvtWaitOne(ALL_EVENTS);
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b0:	f7fa ff66 	bl	8001580 <chEvtWaitOne>
  test_assert(1, m == 1, "single event error");
 80066b4:	f1a0 0101 	sub.w	r1, r0, #1
 80066b8:	fab1 f181 	clz	r1, r1
 80066bc:	0949      	lsrs	r1, r1, #5
 80066be:	2001      	movs	r0, #1
 80066c0:	f7fe f956 	bl	8004970 <_test_assert>
 80066c4:	b110      	cbz	r0, 80066cc <evt2_execute+0x2c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80066c6:	b00d      	add	sp, #52	; 0x34
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d0:	f7fa ff56 	bl	8001580 <chEvtWaitOne>
  test_assert(2, m == 2, "single event error");
 80066d4:	f1a0 0102 	sub.w	r1, r0, #2
 80066d8:	fab1 f181 	clz	r1, r1
 80066dc:	0949      	lsrs	r1, r1, #5
 80066de:	2002      	movs	r0, #2
 80066e0:	f7fe f946 	bl	8004970 <_test_assert>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d1ee      	bne.n	80066c6 <evt2_execute+0x26>
  m = chEvtWaitOne(ALL_EVENTS);
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ec:	f7fa ff48 	bl	8001580 <chEvtWaitOne>
  test_assert(3, m == 4, "single event error");
 80066f0:	f1a0 0104 	sub.w	r1, r0, #4
 80066f4:	fab1 f181 	clz	r1, r1
 80066f8:	0949      	lsrs	r1, r1, #5
 80066fa:	2003      	movs	r0, #3
 80066fc:	f7fe f938 	bl	8004970 <_test_assert>
 8006700:	2800      	cmp	r0, #0
 8006702:	d1e0      	bne.n	80066c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006708:	f7fa feaa 	bl	8001460 <chEvtGetAndClearEvents>
  test_assert(4, m == 0, "stuck event");
 800670c:	fab0 f180 	clz	r1, r0
 8006710:	0949      	lsrs	r1, r1, #5
 8006712:	2004      	movs	r0, #4
 8006714:	f7fe f92c 	bl	8004970 <_test_assert>
 8006718:	4604      	mov	r4, r0
 800671a:	2800      	cmp	r0, #0
 800671c:	d1d3      	bne.n	80066c6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 800671e:	f7fe f9af 	bl	8004a80 <test_wait_tick>
 8006722:	f04f 0920 	mov.w	r9, #32
 8006726:	f389 8811 	msr	BASEPRI, r9
 800672a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800672e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8006732:	f384 8811 	msr	BASEPRI, r4
 8006736:	4f76      	ldr	r7, [pc, #472]	; (8006910 <evt2_execute+0x270>)
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006738:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800692c <evt2_execute+0x28c>
 800673c:	69b9      	ldr	r1, [r7, #24]
 800673e:	f8da 6000 	ldr.w	r6, [sl]
 8006742:	688a      	ldr	r2, [r1, #8]
 8006744:	4b73      	ldr	r3, [pc, #460]	; (8006914 <evt2_execute+0x274>)
 8006746:	9100      	str	r1, [sp, #0]
 8006748:	3a01      	subs	r2, #1
 800674a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800674e:	4630      	mov	r0, r6
 8006750:	f7fa f90e 	bl	8000970 <chThdCreateStatic>
 8006754:	4c70      	ldr	r4, [pc, #448]	; (8006918 <evt2_execute+0x278>)
 8006756:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8006758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800675c:	f7fa ff10 	bl	8001580 <chEvtWaitOne>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006760:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8006764:	4683      	mov	fp, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006766:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 800676a:	2005      	movs	r0, #5
 800676c:	f7fe f940 	bl	80049f0 <_test_assert_time_window>
 8006770:	2800      	cmp	r0, #0
 8006772:	d1a8      	bne.n	80066c6 <evt2_execute+0x26>
  test_assert(6, m == 1, "single event error");
 8006774:	f1ab 0101 	sub.w	r1, fp, #1
 8006778:	fab1 f181 	clz	r1, r1
 800677c:	0949      	lsrs	r1, r1, #5
 800677e:	2006      	movs	r0, #6
 8006780:	f7fe f8f6 	bl	8004970 <_test_assert>
 8006784:	2800      	cmp	r0, #0
 8006786:	d19e      	bne.n	80066c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800678c:	f7fa fe68 	bl	8001460 <chEvtGetAndClearEvents>
  test_assert(7, m == 0, "stuck event");
 8006790:	fab0 f180 	clz	r1, r0
 8006794:	0949      	lsrs	r1, r1, #5
 8006796:	2007      	movs	r0, #7
 8006798:	f7fe f8ea 	bl	8004970 <_test_assert>
 800679c:	2800      	cmp	r0, #0
 800679e:	d192      	bne.n	80066c6 <evt2_execute+0x26>
  test_wait_threads();
 80067a0:	f7fe f956 	bl	8004a50 <test_wait_threads>

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
 80067a4:	2005      	movs	r0, #5
 80067a6:	f7fa fe6b 	bl	8001480 <chEvtAddEvents>
  m = chEvtWaitAny(ALL_EVENTS);
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067ae:	f7fa ff07 	bl	80015c0 <chEvtWaitAny>
  test_assert(8, m == 5, "unexpected pending bit");
 80067b2:	1f45      	subs	r5, r0, #5
 80067b4:	4269      	negs	r1, r5
 80067b6:	4169      	adcs	r1, r5
 80067b8:	2008      	movs	r0, #8
 80067ba:	f7fe f8d9 	bl	8004970 <_test_assert>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d181      	bne.n	80066c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c6:	f7fa fe4b 	bl	8001460 <chEvtGetAndClearEvents>
  test_assert(9, m == 0, "stuck event");
 80067ca:	fab0 f180 	clz	r1, r0
 80067ce:	0949      	lsrs	r1, r1, #5
 80067d0:	2009      	movs	r0, #9
 80067d2:	f7fe f8cd 	bl	8004970 <_test_assert>
 80067d6:	4683      	mov	fp, r0
 80067d8:	2800      	cmp	r0, #0
 80067da:	f47f af74 	bne.w	80066c6 <evt2_execute+0x26>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80067de:	f7fe f94f 	bl	8004a80 <test_wait_tick>
 80067e2:	f389 8811 	msr	BASEPRI, r9
 80067e6:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 80067ea:	f38b 8811 	msr	BASEPRI, fp
 80067ee:	69b9      	ldr	r1, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80067f0:	4b48      	ldr	r3, [pc, #288]	; (8006914 <evt2_execute+0x274>)
 80067f2:	688a      	ldr	r2, [r1, #8]
 80067f4:	9100      	str	r1, [sp, #0]
 80067f6:	3a01      	subs	r2, #1
 80067f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7fa f8b7 	bl	8000970 <chThdCreateStatic>
 8006802:	6020      	str	r0, [r4, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8006804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006808:	f7fa feda 	bl	80015c0 <chEvtWaitAny>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800680c:	f205 2226 	addw	r2, r5, #550	; 0x226
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8006810:	4606      	mov	r6, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8006812:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 8006816:	200a      	movs	r0, #10
 8006818:	f7fe f8ea 	bl	80049f0 <_test_assert_time_window>
 800681c:	2800      	cmp	r0, #0
 800681e:	f47f af52 	bne.w	80066c6 <evt2_execute+0x26>
  test_assert(11, m == 1, "single event error");
 8006822:	1e70      	subs	r0, r6, #1
 8006824:	4241      	negs	r1, r0
 8006826:	4141      	adcs	r1, r0
 8006828:	200b      	movs	r0, #11
 800682a:	f7fe f8a1 	bl	8004970 <_test_assert>
 800682e:	2800      	cmp	r0, #0
 8006830:	f47f af49 	bne.w	80066c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006838:	f7fa fe12 	bl	8001460 <chEvtGetAndClearEvents>
  test_assert(12, m == 0, "stuck event");
 800683c:	fab0 f180 	clz	r1, r0
 8006840:	0949      	lsrs	r1, r1, #5
 8006842:	200c      	movs	r0, #12
 8006844:	f7fe f894 	bl	8004970 <_test_assert>
 8006848:	4681      	mov	r9, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	f47f af3b 	bne.w	80066c6 <evt2_execute+0x26>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8006850:	4e32      	ldr	r6, [pc, #200]	; (800691c <evt2_execute+0x27c>)
 8006852:	4d33      	ldr	r5, [pc, #204]	; (8006920 <evt2_execute+0x280>)
  test_wait_threads();
 8006854:	f7fe f8fc 	bl	8004a50 <test_wait_threads>
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8006858:	4630      	mov	r0, r6
 800685a:	a902      	add	r1, sp, #8
 800685c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006860:	2201      	movs	r2, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8006862:	6036      	str	r6, [r6, #0]
 8006864:	602d      	str	r5, [r5, #0]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8006866:	f7fa fdcb 	bl	8001400 <chEvtRegisterMaskWithFlags>
 800686a:	4628      	mov	r0, r5
 800686c:	a907      	add	r1, sp, #28
 800686e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006872:	2204      	movs	r2, #4
 8006874:	f7fa fdc4 	bl	8001400 <chEvtRegisterMaskWithFlags>
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8006878:	f7fe f902 	bl	8004a80 <test_wait_tick>
 800687c:	2320      	movs	r3, #32
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
 8006886:	f389 8811 	msr	BASEPRI, r9
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800688a:	69ba      	ldr	r2, [r7, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <evt2_execute+0x284>)
 800688e:	6892      	ldr	r2, [r2, #8]
 8006890:	f8da 0000 	ldr.w	r0, [sl]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	3a01      	subs	r2, #1
 8006898:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800689c:	4b22      	ldr	r3, [pc, #136]	; (8006928 <evt2_execute+0x288>)
 800689e:	f7fa f867 	bl	8000970 <chThdCreateStatic>
 80068a2:	6020      	str	r0, [r4, #0]
                                 thread2, "A");
  m = chEvtWaitAll(5);
 80068a4:	2005      	movs	r0, #5
 80068a6:	f7fa feab 	bl	8001600 <chEvtWaitAll>
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80068aa:	f208 2226 	addw	r2, r8, #550	; 0x226
 80068ae:	f508 71fa 	add.w	r1, r8, #500	; 0x1f4
 80068b2:	200d      	movs	r0, #13
 80068b4:	f7fe f89c 	bl	80049f0 <_test_assert_time_window>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f47f af04 	bne.w	80066c6 <evt2_execute+0x26>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c2:	f7fa fdcd 	bl	8001460 <chEvtGetAndClearEvents>
  test_assert(14, m == 0, "stuck event");
 80068c6:	fab0 f180 	clz	r1, r0
 80068ca:	0949      	lsrs	r1, r1, #5
 80068cc:	200e      	movs	r0, #14
 80068ce:	f7fe f84f 	bl	8004970 <_test_assert>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f47f aef7 	bne.w	80066c6 <evt2_execute+0x26>
  test_wait_threads();
 80068d8:	f7fe f8ba 	bl	8004a50 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80068dc:	a902      	add	r1, sp, #8
 80068de:	4630      	mov	r0, r6
 80068e0:	f7fa fda6 	bl	8001430 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 80068e4:	a907      	add	r1, sp, #28
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7fa fda2 	bl	8001430 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 80068ec:	6831      	ldr	r1, [r6, #0]
 80068ee:	1b8a      	subs	r2, r1, r6
 80068f0:	4251      	negs	r1, r2
 80068f2:	4151      	adcs	r1, r2
 80068f4:	200f      	movs	r0, #15
 80068f6:	f7fe f83b 	bl	8004970 <_test_assert>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f47f aee3 	bne.w	80066c6 <evt2_execute+0x26>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8006900:	6829      	ldr	r1, [r5, #0]
 8006902:	1b4b      	subs	r3, r1, r5
 8006904:	4259      	negs	r1, r3
 8006906:	4159      	adcs	r1, r3
 8006908:	2010      	movs	r0, #16
 800690a:	f7fe f831 	bl	8004970 <_test_assert>
 800690e:	e6da      	b.n	80066c6 <evt2_execute+0x26>
 8006910:	20000d70 	.word	0x20000d70
 8006914:	08006961 	.word	0x08006961
 8006918:	20001918 	.word	0x20001918
 800691c:	20000864 	.word	0x20000864
 8006920:	20000868 	.word	0x20000868
 8006924:	08009678 	.word	0x08009678
 8006928:	08006931 	.word	0x08006931
 800692c:	080093a0 	.word	0x080093a0

08006930 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8006930:	b508      	push	{r3, lr}
 *
 * @api
 */
static inline void chEvtBroadcast(event_source_t *esp) {

  chEvtBroadcastFlags(esp, (eventflags_t)0);
 8006932:	2100      	movs	r1, #0
 8006934:	4806      	ldr	r0, [pc, #24]	; (8006950 <thread2+0x20>)
 8006936:	f7fa fdf3 	bl	8001520 <chEvtBroadcastFlags>

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 800693a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800693e:	f7fa f887 	bl	8000a50 <chThdSleep>
 8006942:	2100      	movs	r1, #0
 8006944:	4803      	ldr	r0, [pc, #12]	; (8006954 <thread2+0x24>)
  chEvtBroadcast(&es2);
}
 8006946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800694a:	f7fa bde9 	b.w	8001520 <chEvtBroadcastFlags>
 800694e:	bf00      	nop
 8006950:	20000864 	.word	0x20000864
 8006954:	20000868 	.word	0x20000868
	...

08006960 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8006960:	b510      	push	{r4, lr}
 8006962:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8006964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006968:	f7fa f872 	bl	8000a50 <chThdSleep>
  chEvtSignal((thread_t *)p, 1);
 800696c:	4620      	mov	r0, r4
 800696e:	2101      	movs	r1, #1
}
 8006970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
 8006974:	f7fa bdc4 	b.w	8001500 <chEvtSignal>
	...

08006980 <evt3_execute>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8006980:	b508      	push	{r3, lr}
  eventmask_t m;

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 8006982:	2100      	movs	r1, #0
 8006984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006988:	f7fa fe5a 	bl	8001640 <chEvtWaitOneTimeout>
  test_assert(1, m == 0, "spurious event");
 800698c:	fab0 f180 	clz	r1, r0
 8006990:	0949      	lsrs	r1, r1, #5
 8006992:	2001      	movs	r0, #1
 8006994:	f7fd ffec 	bl	8004970 <_test_assert>
 8006998:	b100      	cbz	r0, 800699c <evt3_execute+0x1c>
 800699a:	bd08      	pop	{r3, pc}
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 800699c:	4601      	mov	r1, r0
 800699e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a2:	f7fa fe75 	bl	8001690 <chEvtWaitAnyTimeout>
  test_assert(2, m == 0, "spurious event");
 80069a6:	fab0 f180 	clz	r1, r0
 80069aa:	0949      	lsrs	r1, r1, #5
 80069ac:	2002      	movs	r0, #2
 80069ae:	f7fd ffdf 	bl	8004970 <_test_assert>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d1f1      	bne.n	800699a <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80069b6:	4601      	mov	r1, r0
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069bc:	f7fa fe90 	bl	80016e0 <chEvtWaitAllTimeout>
  test_assert(3, m == 0, "spurious event");
 80069c0:	fab0 f180 	clz	r1, r0
 80069c4:	0949      	lsrs	r1, r1, #5
 80069c6:	2003      	movs	r0, #3
 80069c8:	f7fd ffd2 	bl	8004970 <_test_assert>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1e4      	bne.n	800699a <evt3_execute+0x1a>
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
 80069d0:	210a      	movs	r1, #10
 80069d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d6:	f7fa fe33 	bl	8001640 <chEvtWaitOneTimeout>
  test_assert(4, m == 0, "spurious event");
 80069da:	fab0 f180 	clz	r1, r0
 80069de:	0949      	lsrs	r1, r1, #5
 80069e0:	2004      	movs	r0, #4
 80069e2:	f7fd ffc5 	bl	8004970 <_test_assert>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1d7      	bne.n	800699a <evt3_execute+0x1a>
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
 80069ea:	210a      	movs	r1, #10
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f0:	f7fa fe4e 	bl	8001690 <chEvtWaitAnyTimeout>
  test_assert(5, m == 0, "spurious event");
 80069f4:	fab0 f180 	clz	r1, r0
 80069f8:	0949      	lsrs	r1, r1, #5
 80069fa:	2005      	movs	r0, #5
 80069fc:	f7fd ffb8 	bl	8004970 <_test_assert>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d1ca      	bne.n	800699a <evt3_execute+0x1a>
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
 8006a04:	210a      	movs	r1, #10
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0a:	f7fa fe69 	bl	80016e0 <chEvtWaitAllTimeout>
  test_assert(6, m == 0, "spurious event");
 8006a0e:	fab0 f180 	clz	r1, r0
 8006a12:	0949      	lsrs	r1, r1, #5
 8006a14:	2006      	movs	r0, #6
}
 8006a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006a1a:	f7fd bfa9 	b.w	8004970 <_test_assert>
 8006a1e:	bf00      	nop

08006a20 <heap1_execute>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	b082      	sub	sp, #8
  void *p1, *p2, *p3;
  size_t n, sz;

  /* Unrelated, for coverage only.*/
  (void)chCoreGetStatusX();
 8006a24:	f7fb f974 	bl	8001d10 <chCoreGetStatusX>

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8006a28:	a901      	add	r1, sp, #4
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7fb fa38 	bl	8001ea0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8006a30:	2110      	movs	r1, #16
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7fb f99c 	bl	8001d70 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8006a38:	1c01      	adds	r1, r0, #0
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	bf18      	it	ne
 8006a3e:	2101      	movne	r1, #1
 8006a40:	2001      	movs	r0, #1
 8006a42:	f7fd ff95 	bl	8004970 <_test_assert>
 8006a46:	b108      	cbz	r0, 8006a4c <heap1_execute+0x2c>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	4604      	mov	r4, r0
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7fb f9d6 	bl	8001e00 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8006a54:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7fb f989 	bl	8001d70 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8006a5e:	fab0 f180 	clz	r1, r0
 8006a62:	0949      	lsrs	r1, r1, #5
 8006a64:	2002      	movs	r0, #2
 8006a66:	f7fd ff83 	bl	8004970 <_test_assert>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d1ec      	bne.n	8006a48 <heap1_execute+0x28>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8006a6e:	a901      	add	r1, sp, #4
 8006a70:	487b      	ldr	r0, [pc, #492]	; (8006c60 <heap1_execute+0x240>)
 8006a72:	f7fb fa15 	bl	8001ea0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006a76:	2110      	movs	r1, #16
 8006a78:	4879      	ldr	r0, [pc, #484]	; (8006c60 <heap1_execute+0x240>)
 8006a7a:	f7fb f979 	bl	8001d70 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006a7e:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006a80:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006a82:	4877      	ldr	r0, [pc, #476]	; (8006c60 <heap1_execute+0x240>)
 8006a84:	f7fb f974 	bl	8001d70 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006a88:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006a8a:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006a8c:	4874      	ldr	r0, [pc, #464]	; (8006c60 <heap1_execute+0x240>)
 8006a8e:	f7fb f96f 	bl	8001d70 <chHeapAlloc>
 8006a92:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7fb f9b3 	bl	8001e00 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7fb f9b0 	bl	8001e00 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7fb f9ad 	bl	8001e00 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006aa6:	4669      	mov	r1, sp
 8006aa8:	486d      	ldr	r0, [pc, #436]	; (8006c60 <heap1_execute+0x240>)
 8006aaa:	f7fb f9f9 	bl	8001ea0 <chHeapStatus>
 8006aae:	f1a0 0101 	sub.w	r1, r0, #1
 8006ab2:	fab1 f181 	clz	r1, r1
 8006ab6:	0949      	lsrs	r1, r1, #5
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f7fd ff59 	bl	8004970 <_test_assert>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1c2      	bne.n	8006a48 <heap1_execute+0x28>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	4866      	ldr	r0, [pc, #408]	; (8006c60 <heap1_execute+0x240>)
 8006ac6:	f7fb f953 	bl	8001d70 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006aca:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006acc:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ace:	4864      	ldr	r0, [pc, #400]	; (8006c60 <heap1_execute+0x240>)
 8006ad0:	f7fb f94e 	bl	8001d70 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006ad4:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ad6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006ad8:	4861      	ldr	r0, [pc, #388]	; (8006c60 <heap1_execute+0x240>)
 8006ada:	f7fb f949 	bl	8001d70 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8006ade:	f7fb f98f 	bl	8001e00 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7fb f98c 	bl	8001e00 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7fb f989 	bl	8001e00 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006aee:	4669      	mov	r1, sp
 8006af0:	485b      	ldr	r0, [pc, #364]	; (8006c60 <heap1_execute+0x240>)
 8006af2:	f7fb f9d5 	bl	8001ea0 <chHeapStatus>
 8006af6:	f1a0 0101 	sub.w	r1, r0, #1
 8006afa:	fab1 f181 	clz	r1, r1
 8006afe:	0949      	lsrs	r1, r1, #5
 8006b00:	2004      	movs	r0, #4
 8006b02:	f7fd ff35 	bl	8004970 <_test_assert>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d19e      	bne.n	8006a48 <heap1_execute+0x28>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006b0a:	2111      	movs	r1, #17
 8006b0c:	4854      	ldr	r0, [pc, #336]	; (8006c60 <heap1_execute+0x240>)
 8006b0e:	f7fb f92f 	bl	8001d70 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006b12:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006b14:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006b16:	4852      	ldr	r0, [pc, #328]	; (8006c60 <heap1_execute+0x240>)
 8006b18:	f7fb f92a 	bl	8001d70 <chHeapAlloc>
 8006b1c:	4605      	mov	r5, r0
  chHeapFree(p1);
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f7fb f96e 	bl	8001e00 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006b24:	4669      	mov	r1, sp
 8006b26:	484e      	ldr	r0, [pc, #312]	; (8006c60 <heap1_execute+0x240>)
 8006b28:	f7fb f9ba 	bl	8001ea0 <chHeapStatus>
 8006b2c:	f1a0 0102 	sub.w	r1, r0, #2
 8006b30:	fab1 f181 	clz	r1, r1
 8006b34:	0949      	lsrs	r1, r1, #5
 8006b36:	2005      	movs	r0, #5
 8006b38:	f7fd ff1a 	bl	8004970 <_test_assert>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d183      	bne.n	8006a48 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006b40:	2110      	movs	r1, #16
 8006b42:	4847      	ldr	r0, [pc, #284]	; (8006c60 <heap1_execute+0x240>)
 8006b44:	f7fb f914 	bl	8001d70 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006b48:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006b4a:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006b4c:	4844      	ldr	r0, [pc, #272]	; (8006c60 <heap1_execute+0x240>)
 8006b4e:	f7fb f9a7 	bl	8001ea0 <chHeapStatus>
 8006b52:	2801      	cmp	r0, #1
 8006b54:	f000 8081 	beq.w	8006c5a <heap1_execute+0x23a>
 8006b58:	4669      	mov	r1, sp
 8006b5a:	4841      	ldr	r0, [pc, #260]	; (8006c60 <heap1_execute+0x240>)
 8006b5c:	f7fb f9a0 	bl	8001ea0 <chHeapStatus>
 8006b60:	f1a0 0102 	sub.w	r1, r0, #2
 8006b64:	fab1 f181 	clz	r1, r1
 8006b68:	0949      	lsrs	r1, r1, #5
 8006b6a:	2006      	movs	r0, #6
 8006b6c:	f7fd ff00 	bl	8004970 <_test_assert>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f47f af69 	bne.w	8006a48 <heap1_execute+0x28>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7fb f942 	bl	8001e00 <chHeapFree>
  chHeapFree(p1);
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7fb f93f 	bl	8001e00 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006b82:	4669      	mov	r1, sp
 8006b84:	4836      	ldr	r0, [pc, #216]	; (8006c60 <heap1_execute+0x240>)
 8006b86:	f7fb f98b 	bl	8001ea0 <chHeapStatus>
 8006b8a:	1e46      	subs	r6, r0, #1
 8006b8c:	4271      	negs	r1, r6
 8006b8e:	4171      	adcs	r1, r6
 8006b90:	2007      	movs	r0, #7
 8006b92:	f7fd feed 	bl	8004970 <_test_assert>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f47f af56 	bne.w	8006a48 <heap1_execute+0x28>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006b9c:	2110      	movs	r1, #16
 8006b9e:	4830      	ldr	r0, [pc, #192]	; (8006c60 <heap1_execute+0x240>)
 8006ba0:	f7fb f8e6 	bl	8001d70 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ba4:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006ba6:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ba8:	482d      	ldr	r0, [pc, #180]	; (8006c60 <heap1_execute+0x240>)
 8006baa:	f7fb f8e1 	bl	8001d70 <chHeapAlloc>
 8006bae:	4604      	mov	r4, r0
  chHeapFree(p1);
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f7fb f925 	bl	8001e00 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006bb6:	4669      	mov	r1, sp
 8006bb8:	4829      	ldr	r0, [pc, #164]	; (8006c60 <heap1_execute+0x240>)
 8006bba:	f7fb f971 	bl	8001ea0 <chHeapStatus>
 8006bbe:	1e85      	subs	r5, r0, #2
 8006bc0:	4269      	negs	r1, r5
 8006bc2:	4169      	adcs	r1, r5
 8006bc4:	2008      	movs	r0, #8
 8006bc6:	f7fd fed3 	bl	8004970 <_test_assert>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f47f af3c 	bne.w	8006a48 <heap1_execute+0x28>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8006bd0:	2120      	movs	r1, #32
 8006bd2:	4823      	ldr	r0, [pc, #140]	; (8006c60 <heap1_execute+0x240>)
 8006bd4:	f7fb f8cc 	bl	8001d70 <chHeapAlloc>
  chHeapFree(p1);
 8006bd8:	f7fb f912 	bl	8001e00 <chHeapFree>
  chHeapFree(p2);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7fb f90f 	bl	8001e00 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006be2:	4669      	mov	r1, sp
 8006be4:	481e      	ldr	r0, [pc, #120]	; (8006c60 <heap1_execute+0x240>)
 8006be6:	f7fb f95b 	bl	8001ea0 <chHeapStatus>
 8006bea:	3801      	subs	r0, #1
 8006bec:	4241      	negs	r1, r0
 8006bee:	4141      	adcs	r1, r0
 8006bf0:	2009      	movs	r0, #9
 8006bf2:	f7fd febd 	bl	8004970 <_test_assert>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f47f af26 	bne.w	8006a48 <heap1_execute+0x28>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8006bfc:	4669      	mov	r1, sp
 8006bfe:	4818      	ldr	r0, [pc, #96]	; (8006c60 <heap1_execute+0x240>)
 8006c00:	f7fb f94e 	bl	8001ea0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8006c04:	9900      	ldr	r1, [sp, #0]
 8006c06:	4816      	ldr	r0, [pc, #88]	; (8006c60 <heap1_execute+0x240>)
 8006c08:	f7fb f8b2 	bl	8001d70 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8006c0c:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8006c0e:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8006c10:	4813      	ldr	r0, [pc, #76]	; (8006c60 <heap1_execute+0x240>)
 8006c12:	f7fb f945 	bl	8001ea0 <chHeapStatus>
 8006c16:	fab0 f180 	clz	r1, r0
 8006c1a:	0949      	lsrs	r1, r1, #5
 8006c1c:	200a      	movs	r0, #10
 8006c1e:	f7fd fea7 	bl	8004970 <_test_assert>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f47f af10 	bne.w	8006a48 <heap1_execute+0x28>
  chHeapFree(p1);
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f7fb f8e9 	bl	8001e00 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006c2e:	4669      	mov	r1, sp
 8006c30:	480b      	ldr	r0, [pc, #44]	; (8006c60 <heap1_execute+0x240>)
 8006c32:	f7fb f935 	bl	8001ea0 <chHeapStatus>
 8006c36:	1e42      	subs	r2, r0, #1
 8006c38:	4251      	negs	r1, r2
 8006c3a:	4151      	adcs	r1, r2
 8006c3c:	200b      	movs	r0, #11
 8006c3e:	f7fd fe97 	bl	8004970 <_test_assert>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	f47f af00 	bne.w	8006a48 <heap1_execute+0x28>
  test_assert(12, n == sz, "size changed");
 8006c48:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006c4c:	1acb      	subs	r3, r1, r3
 8006c4e:	4259      	negs	r1, r3
 8006c50:	4159      	adcs	r1, r3
 8006c52:	200c      	movs	r0, #12
 8006c54:	f7fd fe8c 	bl	8004970 <_test_assert>
 8006c58:	e6f6      	b.n	8006a48 <heap1_execute+0x28>
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	e785      	b.n	8006b6a <heap1_execute+0x14a>
 8006c5e:	bf00      	nop
 8006c60:	20001948 	.word	0x20001948
	...

08006c70 <heap1_setup>:
 * sequence.
 */

static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
 8006c70:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8006c74:	4901      	ldr	r1, [pc, #4]	; (8006c7c <heap1_setup+0xc>)
 8006c76:	4802      	ldr	r0, [pc, #8]	; (8006c80 <heap1_setup+0x10>)
 8006c78:	f7fb b86a 	b.w	8001d50 <chHeapObjectInit>
 8006c7c:	20001290 	.word	0x20001290
 8006c80:	20001948 	.word	0x20001948
	...

08006c90 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	4770      	bx	lr
	...

08006ca0 <pools1_setup>:

static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006ca6:	4801      	ldr	r0, [pc, #4]	; (8006cac <pools1_setup+0xc>)
 8006ca8:	f7fb b922 	b.w	8001ef0 <chPoolObjectInit>
 8006cac:	2000086c 	.word	0x2000086c

08006cb0 <pools1_execute>:
}

static void pools1_execute(void) {
 8006cb0:	b538      	push	{r3, r4, r5, lr}
  int i;

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);
 8006cb2:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <pools1_execute+0xb0>)
 8006cb4:	482b      	ldr	r0, [pc, #172]	; (8006d64 <pools1_execute+0xb4>)
 8006cb6:	681d      	ldr	r5, [r3, #0]
 8006cb8:	2205      	movs	r2, #5
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7fb f920 	bl	8001f00 <chPoolLoadArray>
 8006cc0:	2405      	movs	r4, #5

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8006cc2:	4828      	ldr	r0, [pc, #160]	; (8006d64 <pools1_execute+0xb4>)
 8006cc4:	f7fb f934 	bl	8001f30 <chPoolAlloc>
 8006cc8:	1c01      	adds	r1, r0, #0
 8006cca:	bf18      	it	ne
 8006ccc:	2101      	movne	r1, #1
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f7fd fe4e 	bl	8004970 <_test_assert>
 8006cd4:	bb90      	cbnz	r0, 8006d3c <pools1_execute+0x8c>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006cd6:	3c01      	subs	r4, #1
 8006cd8:	d1f3      	bne.n	8006cc2 <pools1_execute+0x12>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006cda:	4822      	ldr	r0, [pc, #136]	; (8006d64 <pools1_execute+0xb4>)
 8006cdc:	f7fb f928 	bl	8001f30 <chPoolAlloc>
 8006ce0:	fab0 f180 	clz	r1, r0
 8006ce4:	0949      	lsrs	r1, r1, #5
 8006ce6:	2002      	movs	r0, #2
 8006ce8:	f7fd fe42 	bl	8004970 <_test_assert>
 8006cec:	bb30      	cbnz	r0, 8006d3c <pools1_execute+0x8c>
 8006cee:	4c1c      	ldr	r4, [pc, #112]	; (8006d60 <pools1_execute+0xb0>)

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8006cf0:	481c      	ldr	r0, [pc, #112]	; (8006d64 <pools1_execute+0xb4>)
  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f104 0510 	add.w	r5, r4, #16

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8006cf8:	f7fb f932 	bl	8001f60 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006cfc:	42a5      	cmp	r5, r4
 8006cfe:	d006      	beq.n	8006d0e <pools1_execute+0x5e>
 8006d00:	f854 1f04 	ldr.w	r1, [r4, #4]!
    chPoolFree(&mp1, wa[i]);
 8006d04:	4817      	ldr	r0, [pc, #92]	; (8006d64 <pools1_execute+0xb4>)
 8006d06:	f7fb f92b 	bl	8001f60 <chPoolFree>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006d0a:	42a5      	cmp	r5, r4
 8006d0c:	d1f8      	bne.n	8006d00 <pools1_execute+0x50>
 8006d0e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8006d10:	4814      	ldr	r0, [pc, #80]	; (8006d64 <pools1_execute+0xb4>)
 8006d12:	f7fb f90d 	bl	8001f30 <chPoolAlloc>
 8006d16:	1c01      	adds	r1, r0, #0
 8006d18:	bf18      	it	ne
 8006d1a:	2101      	movne	r1, #1
 8006d1c:	2003      	movs	r0, #3
 8006d1e:	f7fd fe27 	bl	8004970 <_test_assert>
 8006d22:	b958      	cbnz	r0, 8006d3c <pools1_execute+0x8c>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006d24:	3c01      	subs	r4, #1
 8006d26:	d1f3      	bne.n	8006d10 <pools1_execute+0x60>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006d28:	480e      	ldr	r0, [pc, #56]	; (8006d64 <pools1_execute+0xb4>)
 8006d2a:	f7fb f901 	bl	8001f30 <chPoolAlloc>
 8006d2e:	fab0 f180 	clz	r1, r0
 8006d32:	0949      	lsrs	r1, r1, #5
 8006d34:	2004      	movs	r0, #4
 8006d36:	f7fd fe1b 	bl	8004970 <_test_assert>
 8006d3a:	b100      	cbz	r0, 8006d3e <pools1_execute+0x8e>
 8006d3c:	bd38      	pop	{r3, r4, r5, pc}

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
 8006d3e:	2110      	movs	r1, #16
 8006d40:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <pools1_execute+0xb8>)
 8006d42:	4808      	ldr	r0, [pc, #32]	; (8006d64 <pools1_execute+0xb4>)
 8006d44:	f7fb f8d4 	bl	8001ef0 <chPoolObjectInit>
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006d48:	4806      	ldr	r0, [pc, #24]	; (8006d64 <pools1_execute+0xb4>)
 8006d4a:	f7fb f8f1 	bl	8001f30 <chPoolAlloc>
 8006d4e:	fab0 f180 	clz	r1, r0
 8006d52:	0949      	lsrs	r1, r1, #5
 8006d54:	2005      	movs	r0, #5
}
 8006d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006d5a:	f7fd be09 	b.w	8004970 <_test_assert>
 8006d5e:	bf00      	nop
 8006d60:	080093a0 	.word	0x080093a0
 8006d64:	2000086c 	.word	0x2000086c
 8006d68:	08006c91 	.word	0x08006c91
 8006d6c:	00000000 	.word	0x00000000

08006d70 <dyn1_execute>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8006d70:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006d72:	4b34      	ldr	r3, [pc, #208]	; (8006e44 <dyn1_execute+0xd4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8006d74:	4834      	ldr	r0, [pc, #208]	; (8006e48 <dyn1_execute+0xd8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006d76:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006d78:	4c34      	ldr	r4, [pc, #208]	; (8006e4c <dyn1_execute+0xdc>)
 8006d7a:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8006d7c:	b084      	sub	sp, #16
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8006d7e:	a903      	add	r1, sp, #12
 8006d80:	f7fb f88e 	bl	8001ea0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <dyn1_execute+0xe0>)
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	1e6a      	subs	r2, r5, #1
 8006d8a:	4b32      	ldr	r3, [pc, #200]	; (8006e54 <dyn1_execute+0xe4>)
 8006d8c:	482e      	ldr	r0, [pc, #184]	; (8006e48 <dyn1_execute+0xd8>)
 8006d8e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d92:	f7f9 ffc5 	bl	8000d20 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <dyn1_execute+0xe8>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006d98:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006d9a:	1eaa      	subs	r2, r5, #2
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006da2:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <dyn1_execute+0xe4>)
 8006da4:	4828      	ldr	r0, [pc, #160]	; (8006e48 <dyn1_execute+0xd8>)
 8006da6:	f7f9 ffbb 	bl	8000d20 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8006daa:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006dac:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8006dae:	4826      	ldr	r0, [pc, #152]	; (8006e48 <dyn1_execute+0xd8>)
 8006db0:	f7fb f876 	bl	8001ea0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8006db4:	9902      	ldr	r1, [sp, #8]
 8006db6:	4824      	ldr	r0, [pc, #144]	; (8006e48 <dyn1_execute+0xd8>)
 8006db8:	f7fa ffda 	bl	8001d70 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <dyn1_execute+0xec>)
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8006dc4:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8006dc6:	1eea      	subs	r2, r5, #3
 8006dc8:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <dyn1_execute+0xe4>)
 8006dca:	481f      	ldr	r0, [pc, #124]	; (8006e48 <dyn1_execute+0xd8>)
 8006dcc:	f7f9 ffa8 	bl	8000d20 <chThdCreateFromHeap>
 8006dd0:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7fb f814 	bl	8001e00 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8006dd8:	6821      	ldr	r1, [r4, #0]
 8006dda:	b121      	cbz	r1, 8006de6 <dyn1_execute+0x76>
 8006ddc:	6861      	ldr	r1, [r4, #4]
 8006dde:	b111      	cbz	r1, 8006de6 <dyn1_execute+0x76>
 8006de0:	68a1      	ldr	r1, [r4, #8]
 8006de2:	b331      	cbz	r1, 8006e32 <dyn1_execute+0xc2>
 8006de4:	2100      	movs	r1, #0
 8006de6:	2001      	movs	r0, #1
 8006de8:	f7fd fdc2 	bl	8004970 <_test_assert>
 8006dec:	b108      	cbz	r0, 8006df2 <dyn1_execute+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8006dee:	b004      	add	sp, #16
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006df2:	f7fd fe2d 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8006df6:	491a      	ldr	r1, [pc, #104]	; (8006e60 <dyn1_execute+0xf0>)
 8006df8:	2002      	movs	r0, #2
 8006dfa:	f7fd fdd1 	bl	80049a0 <_test_assert_sequence>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d1f5      	bne.n	8006dee <dyn1_execute+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8006e02:	a902      	add	r1, sp, #8
 8006e04:	4810      	ldr	r0, [pc, #64]	; (8006e48 <dyn1_execute+0xd8>)
 8006e06:	f7fb f84b 	bl	8001ea0 <chHeapStatus>
 8006e0a:	f1a0 0101 	sub.w	r1, r0, #1
 8006e0e:	fab1 f181 	clz	r1, r1
 8006e12:	0949      	lsrs	r1, r1, #5
 8006e14:	2003      	movs	r0, #3
 8006e16:	f7fd fdab 	bl	8004970 <_test_assert>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d1e7      	bne.n	8006dee <dyn1_execute+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8006e1e:	9902      	ldr	r1, [sp, #8]
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	1ac9      	subs	r1, r1, r3
 8006e24:	fab1 f181 	clz	r1, r1
 8006e28:	0949      	lsrs	r1, r1, #5
 8006e2a:	2004      	movs	r0, #4
 8006e2c:	f7fd fda0 	bl	8004970 <_test_assert>
 8006e30:	e7dd      	b.n	8006dee <dyn1_execute+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1d6      	bne.n	8006de6 <dyn1_execute+0x76>
 8006e38:	6921      	ldr	r1, [r4, #16]
 8006e3a:	fab1 f181 	clz	r1, r1
 8006e3e:	0949      	lsrs	r1, r1, #5
 8006e40:	e7d1      	b.n	8006de6 <dyn1_execute+0x76>
 8006e42:	bf00      	nop
 8006e44:	20000d70 	.word	0x20000d70
 8006e48:	20001978 	.word	0x20001978
 8006e4c:	20001918 	.word	0x20001918
 8006e50:	08009678 	.word	0x08009678
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08009674 	.word	0x08009674
 8006e5c:	08009670 	.word	0x08009670
 8006e60:	08009ac0 	.word	0x08009ac0
	...

08006e70 <thread>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8006e70:	7800      	ldrb	r0, [r0, #0]
 8006e72:	f7fd bd6d 	b.w	8004950 <test_emit_token>
 8006e76:	bf00      	nop
	...

08006e80 <dyn3_setup>:
  return found;
}

static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
 8006e80:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8006e84:	4901      	ldr	r1, [pc, #4]	; (8006e8c <dyn3_setup+0xc>)
 8006e86:	4802      	ldr	r0, [pc, #8]	; (8006e90 <dyn3_setup+0x10>)
 8006e88:	f7fa bf62 	b.w	8001d50 <chHeapObjectInit>
 8006e8c:	20001290 	.word	0x20001290
 8006e90:	20001978 	.word	0x20001978
	...

08006ea0 <dyn1_setup>:
 8006ea0:	f7ff bfee 	b.w	8006e80 <dyn3_setup>
	...

08006eb0 <dyn2_execute>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006eb0:	4b31      	ldr	r3, [pc, #196]	; (8006f78 <dyn2_execute+0xc8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006eb2:	699b      	ldr	r3, [r3, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4c31      	ldr	r4, [pc, #196]	; (8006f7c <dyn2_execute+0xcc>)
 8006eb8:	689d      	ldr	r5, [r3, #8]
 8006eba:	f104 0610 	add.w	r6, r4, #16
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8006ebe:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ec2:	482f      	ldr	r0, [pc, #188]	; (8006f80 <dyn2_execute+0xd0>)
 8006ec4:	f7fb f84c 	bl	8001f60 <chPoolFree>
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8006ec8:	42a6      	cmp	r6, r4
 8006eca:	d1f8      	bne.n	8006ebe <dyn2_execute+0xe>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <dyn2_execute+0xd4>)
 8006ece:	4a2e      	ldr	r2, [pc, #184]	; (8006f88 <dyn2_execute+0xd8>)
 8006ed0:	482b      	ldr	r0, [pc, #172]	; (8006f80 <dyn2_execute+0xd0>)
 8006ed2:	4c2e      	ldr	r4, [pc, #184]	; (8006f8c <dyn2_execute+0xdc>)
 8006ed4:	1e69      	subs	r1, r5, #1
 8006ed6:	f7f9 ff43 	bl	8000d60 <chThdCreateFromMemoryPool>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006eda:	4b2d      	ldr	r3, [pc, #180]	; (8006f90 <dyn2_execute+0xe0>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006edc:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006ede:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <dyn2_execute+0xd8>)
 8006ee0:	4827      	ldr	r0, [pc, #156]	; (8006f80 <dyn2_execute+0xd0>)
 8006ee2:	1ea9      	subs	r1, r5, #2
 8006ee4:	f7f9 ff3c 	bl	8000d60 <chThdCreateFromMemoryPool>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006ee8:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <dyn2_execute+0xe4>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006eea:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <dyn2_execute+0xd8>)
 8006eee:	4824      	ldr	r0, [pc, #144]	; (8006f80 <dyn2_execute+0xd0>)
 8006ef0:	1ee9      	subs	r1, r5, #3
 8006ef2:	f7f9 ff35 	bl	8000d60 <chThdCreateFromMemoryPool>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006ef6:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <dyn2_execute+0xe8>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006ef8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006efa:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <dyn2_execute+0xd8>)
 8006efc:	4820      	ldr	r0, [pc, #128]	; (8006f80 <dyn2_execute+0xd0>)
 8006efe:	1f29      	subs	r1, r5, #4
 8006f00:	f7f9 ff2e 	bl	8000d60 <chThdCreateFromMemoryPool>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006f04:	1f69      	subs	r1, r5, #5

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006f06:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <dyn2_execute+0xec>)
 8006f0a:	4a1f      	ldr	r2, [pc, #124]	; (8006f88 <dyn2_execute+0xd8>)
 8006f0c:	481c      	ldr	r0, [pc, #112]	; (8006f80 <dyn2_execute+0xd0>)
 8006f0e:	f7f9 ff27 	bl	8000d60 <chThdCreateFromMemoryPool>

  test_assert(1, (threads[0] != NULL) &&
 8006f12:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006f14:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8006f16:	b141      	cbz	r1, 8006f2a <dyn2_execute+0x7a>
 8006f18:	6861      	ldr	r1, [r4, #4]
 8006f1a:	b131      	cbz	r1, 8006f2a <dyn2_execute+0x7a>
 8006f1c:	68a1      	ldr	r1, [r4, #8]
 8006f1e:	b121      	cbz	r1, 8006f2a <dyn2_execute+0x7a>
 8006f20:	68e1      	ldr	r1, [r4, #12]
 8006f22:	b111      	cbz	r1, 8006f2a <dyn2_execute+0x7a>
 8006f24:	fab0 f180 	clz	r1, r0
 8006f28:	0949      	lsrs	r1, r1, #5
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f7fd fd20 	bl	8004970 <_test_assert>
 8006f30:	b100      	cbz	r0, 8006f34 <dyn2_execute+0x84>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006f34:	f7fd fd8c 	bl	8004a50 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8006f38:	4919      	ldr	r1, [pc, #100]	; (8006fa0 <dyn2_execute+0xf0>)
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f7fd fd30 	bl	80049a0 <_test_assert_sequence>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1f6      	bne.n	8006f32 <dyn2_execute+0x82>
 8006f44:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8006f46:	480e      	ldr	r0, [pc, #56]	; (8006f80 <dyn2_execute+0xd0>)
 8006f48:	f7fa fff2 	bl	8001f30 <chPoolAlloc>
 8006f4c:	1c01      	adds	r1, r0, #0
 8006f4e:	bf18      	it	ne
 8006f50:	2101      	movne	r1, #1
 8006f52:	2003      	movs	r0, #3
 8006f54:	f7fd fd0c 	bl	8004970 <_test_assert>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1ea      	bne.n	8006f32 <dyn2_execute+0x82>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8006f5c:	3c01      	subs	r4, #1
 8006f5e:	d1f2      	bne.n	8006f46 <dyn2_execute+0x96>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006f60:	4807      	ldr	r0, [pc, #28]	; (8006f80 <dyn2_execute+0xd0>)
 8006f62:	f7fa ffe5 	bl	8001f30 <chPoolAlloc>
 8006f66:	fab0 f180 	clz	r1, r0
 8006f6a:	0949      	lsrs	r1, r1, #5
 8006f6c:	2004      	movs	r0, #4
}
 8006f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006f72:	f7fd bcfd 	b.w	8004970 <_test_assert>
 8006f76:	bf00      	nop
 8006f78:	20000d70 	.word	0x20000d70
 8006f7c:	080093a0 	.word	0x080093a0
 8006f80:	20001968 	.word	0x20001968
 8006f84:	08009678 	.word	0x08009678
 8006f88:	08006e71 	.word	0x08006e71
 8006f8c:	20001918 	.word	0x20001918
 8006f90:	08009674 	.word	0x08009674
 8006f94:	08009670 	.word	0x08009670
 8006f98:	0800a5a8 	.word	0x0800a5a8
 8006f9c:	08009680 	.word	0x08009680
 8006fa0:	08009ac4 	.word	0x08009ac4
	...

08006fb0 <dyn2_setup>:
 * one to fail.
 */

static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006fb6:	4801      	ldr	r0, [pc, #4]	; (8006fbc <dyn2_setup+0xc>)
 8006fb8:	f7fa bf9a 	b.w	8001ef0 <chPoolObjectInit>
 8006fbc:	20001968 	.word	0x20001968

08006fc0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4605      	mov	r5, r0
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
 8006fc4:	f7f9 fef4 	bl	8000db0 <chRegFirstThread>
 * coverage.
 */

static bool regfind(thread_t *tp) {
  thread_t *ftp;
  bool found = false;
 8006fc8:	2400      	movs	r4, #0

  ftp = chRegFirstThread();
 8006fca:	4603      	mov	r3, r0
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8006fcc:	4618      	mov	r0, r3
 8006fce:	42ab      	cmp	r3, r5
 8006fd0:	bf08      	it	eq
 8006fd2:	f044 0401 	orreq.w	r4, r4, #1
 8006fd6:	f7f9 fefb 	bl	8000dd0 <chRegNextThread>
  } while (ftp != NULL);
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d1f5      	bne.n	8006fcc <regfind+0xc>
  return found;
}
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
	...

08006ff0 <dyn3_execute>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8006ff0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006ff2:	4b48      	ldr	r3, [pc, #288]	; (8007114 <dyn3_execute+0x124>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8006ff4:	4948      	ldr	r1, [pc, #288]	; (8007118 <dyn3_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4848      	ldr	r0, [pc, #288]	; (800711c <dyn3_execute+0x12c>)
 8006ffa:	6892      	ldr	r2, [r2, #8]
 8006ffc:	4b48      	ldr	r3, [pc, #288]	; (8007120 <dyn3_execute+0x130>)
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8006ffe:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007000:	3a01      	subs	r2, #1
 8007002:	9100      	str	r1, [sp, #0]
 8007004:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007008:	f7f9 fe8a 	bl	8000d20 <chThdCreateFromHeap>
 800700c:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 800700e:	2001      	movs	r0, #1
 8007010:	7fa1      	ldrb	r1, [r4, #30]
 8007012:	1a09      	subs	r1, r1, r0
 8007014:	fab1 f181 	clz	r1, r1
 8007018:	0949      	lsrs	r1, r1, #5
 800701a:	f7fd fca9 	bl	8004970 <_test_assert>
 800701e:	b108      	cbz	r0, 8007024 <dyn3_execute+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8007020:	b002      	add	sp, #8
 8007022:	bd10      	pop	{r4, pc}
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
 8007024:	4620      	mov	r0, r4
 8007026:	f7f9 fe43 	bl	8000cb0 <chThdAddRef>
  test_assert(2, tp->p_refs == 2, "references increase failure");
 800702a:	7fa1      	ldrb	r1, [r4, #30]
 800702c:	2002      	movs	r0, #2
 800702e:	1a09      	subs	r1, r1, r0
 8007030:	fab1 f181 	clz	r1, r1
 8007034:	0949      	lsrs	r1, r1, #5
 8007036:	f7fd fc9b 	bl	8004970 <_test_assert>
 800703a:	2800      	cmp	r0, #0
 800703c:	d1f0      	bne.n	8007020 <dyn3_execute+0x30>
  chThdRelease(tp);
 800703e:	4620      	mov	r0, r4
 8007040:	f7f9 fe46 	bl	8000cd0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8007044:	7fa1      	ldrb	r1, [r4, #30]
 8007046:	f1a1 0101 	sub.w	r1, r1, #1
 800704a:	fab1 f181 	clz	r1, r1
 800704e:	2003      	movs	r0, #3
 8007050:	0949      	lsrs	r1, r1, #5
 8007052:	f7fd fc8d 	bl	8004970 <_test_assert>
 8007056:	2800      	cmp	r0, #0
 8007058:	d1e2      	bne.n	8007020 <dyn3_execute+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 800705a:	4620      	mov	r0, r4
 800705c:	f7ff ffb0 	bl	8006fc0 <regfind>
 8007060:	4601      	mov	r1, r0
 8007062:	2004      	movs	r0, #4
 8007064:	f7fd fc84 	bl	8004970 <_test_assert>
 8007068:	2800      	cmp	r0, #0
 800706a:	d1d9      	bne.n	8007020 <dyn3_execute+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 800706c:	4620      	mov	r0, r4
 800706e:	f7ff ffa7 	bl	8006fc0 <regfind>
 8007072:	4601      	mov	r1, r0
 8007074:	2005      	movs	r0, #5
 8007076:	f7fd fc7b 	bl	8004970 <_test_assert>
 800707a:	2800      	cmp	r0, #0
 800707c:	d1d0      	bne.n	8007020 <dyn3_execute+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 800707e:	4620      	mov	r0, r4
 8007080:	f7f9 fe26 	bl	8000cd0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8007084:	7fa1      	ldrb	r1, [r4, #30]
 8007086:	fab1 f181 	clz	r1, r1
 800708a:	0949      	lsrs	r1, r1, #5
 800708c:	2006      	movs	r0, #6
 800708e:	f7fd fc6f 	bl	8004970 <_test_assert>
 8007092:	2800      	cmp	r0, #0
 8007094:	d1c4      	bne.n	8007020 <dyn3_execute+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8007096:	7f21      	ldrb	r1, [r4, #28]
 8007098:	fab1 f181 	clz	r1, r1
 800709c:	0949      	lsrs	r1, r1, #5
 800709e:	2007      	movs	r0, #7
 80070a0:	f7fd fc66 	bl	8004970 <_test_assert>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d1bb      	bne.n	8007020 <dyn3_execute+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7ff ff89 	bl	8006fc0 <regfind>
 80070ae:	4601      	mov	r1, r0
 80070b0:	2008      	movs	r0, #8
 80070b2:	f7fd fc5d 	bl	8004970 <_test_assert>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d1b2      	bne.n	8007020 <dyn3_execute+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff ff80 	bl	8006fc0 <regfind>
 80070c0:	4601      	mov	r1, r0
 80070c2:	2009      	movs	r0, #9
 80070c4:	f7fd fc54 	bl	8004970 <_test_assert>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d1a9      	bne.n	8007020 <dyn3_execute+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 80070cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070d0:	f7f9 fcbe 	bl	8000a50 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80070d4:	7f21      	ldrb	r1, [r4, #28]
 80070d6:	f1a1 030f 	sub.w	r3, r1, #15
 80070da:	4259      	negs	r1, r3
 80070dc:	4159      	adcs	r1, r3
 80070de:	200a      	movs	r0, #10
 80070e0:	f7fd fc46 	bl	8004970 <_test_assert>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d19b      	bne.n	8007020 <dyn3_execute+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7ff ff69 	bl	8006fc0 <regfind>
 80070ee:	4601      	mov	r1, r0
 80070f0:	200b      	movs	r0, #11
 80070f2:	f7fd fc3d 	bl	8004970 <_test_assert>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d192      	bne.n	8007020 <dyn3_execute+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff ff60 	bl	8006fc0 <regfind>
 8007100:	f080 0101 	eor.w	r1, r0, #1
 8007104:	b2c9      	uxtb	r1, r1
 8007106:	200c      	movs	r0, #12
}
 8007108:	b002      	add	sp, #8
 800710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 800710e:	f7fd bc2f 	b.w	8004970 <_test_assert>
 8007112:	bf00      	nop
 8007114:	20000d70 	.word	0x20000d70
 8007118:	08009678 	.word	0x08009678
 800711c:	20001978 	.word	0x20001978
 8007120:	08006e71 	.word	0x08006e71
	...

08007130 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
	...

08007140 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8007140:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <thread1+0xc>)
 8007146:	f7fa bc93 	b.w	8001a70 <chIQGetTimeout>
 800714a:	bf00      	nop
 800714c:	2000089c 	.word	0x2000089c

08007150 <queues1_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8007150:	b500      	push	{lr}

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007152:	4a06      	ldr	r2, [pc, #24]	; (800716c <queues1_setup+0x1c>)
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <queues1_setup+0x20>)
 8007156:	6811      	ldr	r1, [r2, #0]
 8007158:	4806      	ldr	r0, [pc, #24]	; (8007174 <queues1_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 800715a:	b083      	sub	sp, #12

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 800715c:	2200      	movs	r2, #0
 800715e:	9200      	str	r2, [sp, #0]
 8007160:	2204      	movs	r2, #4
 8007162:	f7fa fc45 	bl	80019f0 <chIQObjectInit>
}
 8007166:	b003      	add	sp, #12
 8007168:	f85d fb04 	ldr.w	pc, [sp], #4
 800716c:	080093a0 	.word	0x080093a0
 8007170:	08007131 	.word	0x08007131
 8007174:	2000089c 	.word	0x2000089c
	...

08007180 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8007180:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007184:	2100      	movs	r1, #0
 8007186:	4801      	ldr	r0, [pc, #4]	; (800718c <thread2+0xc>)
 8007188:	f7fa bcfa 	b.w	8001b80 <chOQPutTimeout>
 800718c:	20000878 	.word	0x20000878

08007190 <queues2_setup>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8007190:	b500      	push	{lr}

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 8007192:	4a06      	ldr	r2, [pc, #24]	; (80071ac <queues2_setup+0x1c>)
 8007194:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <queues2_setup+0x20>)
 8007196:	6811      	ldr	r1, [r2, #0]
 8007198:	4806      	ldr	r0, [pc, #24]	; (80071b4 <queues2_setup+0x24>)
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 800719a:	b083      	sub	sp, #12

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
 800719c:	2200      	movs	r2, #0
 800719e:	9200      	str	r2, [sp, #0]
 80071a0:	2204      	movs	r2, #4
 80071a2:	f7fa fccd 	bl	8001b40 <chOQObjectInit>
}
 80071a6:	b003      	add	sp, #12
 80071a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ac:	080093a0 	.word	0x080093a0
 80071b0:	08007131 	.word	0x08007131
 80071b4:	20000878 	.word	0x20000878
	...

080071c0 <queues1_execute>:

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
}

static void queues1_execute(void) {
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	2420      	movs	r4, #32
 80071c6:	b082      	sub	sp, #8
 80071c8:	f384 8811 	msr	BASEPRI, r4
 80071cc:	4b90      	ldr	r3, [pc, #576]	; (8007410 <queues1_execute+0x250>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80071ce:	6899      	ldr	r1, [r3, #8]
 80071d0:	fab1 f181 	clz	r1, r1
 80071d4:	0949      	lsrs	r1, r1, #5
 80071d6:	2001      	movs	r0, #1
 80071d8:	f7fd fbca 	bl	8004970 <_test_assert>
 80071dc:	b9f0      	cbnz	r0, 800721c <queues1_execute+0x5c>
 80071de:	4606      	mov	r6, r0
 80071e0:	f380 8811 	msr	BASEPRI, r0
 80071e4:	f384 8811 	msr	BASEPRI, r4
 80071e8:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80071ea:	4d89      	ldr	r5, [pc, #548]	; (8007410 <queues1_execute+0x250>)
 80071ec:	4621      	mov	r1, r4
 80071ee:	3401      	adds	r4, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	b2e4      	uxtb	r4, r4
 80071f4:	f7fa fc1c 	bl	8001a30 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80071f8:	2c45      	cmp	r4, #69	; 0x45
 80071fa:	d1f6      	bne.n	80071ea <queues1_execute+0x2a>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	2320      	movs	r3, #32
 8007204:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8007208:	696a      	ldr	r2, [r5, #20]
 800720a:	69ab      	ldr	r3, [r5, #24]
 800720c:	429a      	cmp	r2, r3
 800720e:	d03a      	beq.n	8007286 <queues1_execute+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8007210:	4631      	mov	r1, r6
 8007212:	2002      	movs	r0, #2
 8007214:	f7fd fbac 	bl	8004970 <_test_assert>
 8007218:	4604      	mov	r4, r0
 800721a:	b128      	cbz	r0, 8007228 <queues1_execute+0x68>
 800721c:	2300      	movs	r3, #0
 800721e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8007222:	b002      	add	sp, #8
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	f380 8811 	msr	BASEPRI, r0
 800722c:	2320      	movs	r3, #32
 800722e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8007232:	4877      	ldr	r0, [pc, #476]	; (8007410 <queues1_execute+0x250>)
 8007234:	4621      	mov	r1, r4
 8007236:	f7fa fbfb 	bl	8001a30 <chIQPutI>
 800723a:	3004      	adds	r0, #4
 800723c:	bf14      	ite	ne
 800723e:	2100      	movne	r1, #0
 8007240:	2101      	moveq	r1, #1
 8007242:	2003      	movs	r0, #3
 8007244:	f7fd fb94 	bl	8004970 <_test_assert>
 8007248:	b9c0      	cbnz	r0, 800727c <queues1_execute+0xbc>
 800724a:	f380 8811 	msr	BASEPRI, r0
 800724e:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8007250:	4d6f      	ldr	r5, [pc, #444]	; (8007410 <queues1_execute+0x250>)
 8007252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007256:	4628      	mov	r0, r5
 8007258:	f7fa fc0a 	bl	8001a70 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 800725c:	b2c0      	uxtb	r0, r0
 800725e:	f7fd fb77 	bl	8004950 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007262:	3c01      	subs	r4, #1
 8007264:	d1f4      	bne.n	8007250 <queues1_execute+0x90>
 8007266:	2620      	movs	r6, #32
 8007268:	f386 8811 	msr	BASEPRI, r6
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800726c:	68a9      	ldr	r1, [r5, #8]
 800726e:	fab1 f181 	clz	r1, r1
 8007272:	0949      	lsrs	r1, r1, #5
 8007274:	2004      	movs	r0, #4
 8007276:	f7fd fb7b 	bl	8004970 <_test_assert>
 800727a:	b148      	cbz	r0, 8007290 <queues1_execute+0xd0>
 800727c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8007280:	b002      	add	sp, #8
 8007282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8007286:	68ae      	ldr	r6, [r5, #8]
 8007288:	3600      	adds	r6, #0
 800728a:	bf18      	it	ne
 800728c:	2601      	movne	r6, #1
 800728e:	e7bf      	b.n	8007210 <queues1_execute+0x50>
 8007290:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8007294:	495f      	ldr	r1, [pc, #380]	; (8007414 <queues1_execute+0x254>)
 8007296:	2005      	movs	r0, #5
 8007298:	f7fd fb82 	bl	80049a0 <_test_assert_sequence>
 800729c:	2800      	cmp	r0, #0
 800729e:	d1c0      	bne.n	8007222 <queues1_execute+0x62>
 80072a0:	f386 8811 	msr	BASEPRI, r6
 80072a4:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80072a6:	4d5a      	ldr	r5, [pc, #360]	; (8007410 <queues1_execute+0x250>)
 80072a8:	4621      	mov	r1, r4
 80072aa:	3401      	adds	r4, #1
 80072ac:	4628      	mov	r0, r5
 80072ae:	b2e4      	uxtb	r4, r4
 80072b0:	f7fa fbbe 	bl	8001a30 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80072b4:	2c45      	cmp	r4, #69	; 0x45
 80072b6:	d1f6      	bne.n	80072a6 <queues1_execute+0xe6>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80072be:	4e56      	ldr	r6, [pc, #344]	; (8007418 <queues1_execute+0x258>)
 80072c0:	2208      	movs	r2, #8
 80072c2:	6871      	ldr	r1, [r6, #4]
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7fa fbfb 	bl	8001ac0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80072ca:	f1a0 0104 	sub.w	r1, r0, #4
 80072ce:	fab1 f181 	clz	r1, r1
 80072d2:	0949      	lsrs	r1, r1, #5
 80072d4:	2006      	movs	r0, #6
 80072d6:	f7fd fb4b 	bl	8004970 <_test_assert>
 80072da:	4604      	mov	r4, r0
 80072dc:	2800      	cmp	r0, #0
 80072de:	d1a0      	bne.n	8007222 <queues1_execute+0x62>
 80072e0:	2720      	movs	r7, #32
 80072e2:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 80072e6:	68a9      	ldr	r1, [r5, #8]
 80072e8:	fab1 f181 	clz	r1, r1
 80072ec:	0949      	lsrs	r1, r1, #5
 80072ee:	2007      	movs	r0, #7
 80072f0:	f7fd fb3e 	bl	8004970 <_test_assert>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1c1      	bne.n	800727c <queues1_execute+0xbc>
 80072f8:	f380 8811 	msr	BASEPRI, r0
 80072fc:	f387 8811 	msr	BASEPRI, r7
 8007300:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8007302:	4d43      	ldr	r5, [pc, #268]	; (8007410 <queues1_execute+0x250>)
 8007304:	4621      	mov	r1, r4
 8007306:	3401      	adds	r4, #1
 8007308:	4628      	mov	r0, r5
 800730a:	b2e4      	uxtb	r4, r4
 800730c:	f7fa fb90 	bl	8001a30 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007310:	2c45      	cmp	r4, #69	; 0x45
 8007312:	d1f6      	bne.n	8007302 <queues1_execute+0x142>
 8007314:	2300      	movs	r3, #0
 8007316:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 800731a:	6874      	ldr	r4, [r6, #4]
 800731c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8007418 <queues1_execute+0x258>
 8007320:	4621      	mov	r1, r4
 8007322:	4628      	mov	r0, r5
 8007324:	2202      	movs	r2, #2
 8007326:	f7fa fbcb 	bl	8001ac0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800732a:	f1a0 0102 	sub.w	r1, r0, #2
 800732e:	fab1 f181 	clz	r1, r1
 8007332:	0949      	lsrs	r1, r1, #5
 8007334:	2008      	movs	r0, #8
 8007336:	f7fd fb1b 	bl	8004970 <_test_assert>
 800733a:	2800      	cmp	r0, #0
 800733c:	f47f af71 	bne.w	8007222 <queues1_execute+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8007340:	4603      	mov	r3, r0
 8007342:	4621      	mov	r1, r4
 8007344:	2202      	movs	r2, #2
 8007346:	4628      	mov	r0, r5
 8007348:	f7fa fbba 	bl	8001ac0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800734c:	f1a0 0102 	sub.w	r1, r0, #2
 8007350:	fab1 f181 	clz	r1, r1
 8007354:	0949      	lsrs	r1, r1, #5
 8007356:	2009      	movs	r0, #9
 8007358:	f7fd fb0a 	bl	8004970 <_test_assert>
 800735c:	4606      	mov	r6, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	f47f af5f 	bne.w	8007222 <queues1_execute+0x62>
 8007364:	2720      	movs	r7, #32
 8007366:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800736a:	68a9      	ldr	r1, [r5, #8]
 800736c:	fab1 f181 	clz	r1, r1
 8007370:	0949      	lsrs	r1, r1, #5
 8007372:	200a      	movs	r0, #10
 8007374:	f7fd fafc 	bl	8004970 <_test_assert>
 8007378:	4604      	mov	r4, r0
 800737a:	b110      	cbz	r0, 8007382 <queues1_execute+0x1c2>
 800737c:	f386 8811 	msr	BASEPRI, r6
 8007380:	e74f      	b.n	8007222 <queues1_execute+0x62>
 8007382:	f380 8811 	msr	BASEPRI, r0
 8007386:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 800738a:	4601      	mov	r1, r0
 800738c:	4628      	mov	r0, r5
 800738e:	f7fa fb4f 	bl	8001a30 <chIQPutI>
  chIQResetI(&iq);
 8007392:	4628      	mov	r0, r5
 8007394:	f7fa fb3c 	bl	8001a10 <chIQResetI>
 8007398:	f384 8811 	msr	BASEPRI, r4
 800739c:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80073a0:	68a9      	ldr	r1, [r5, #8]
 80073a2:	fab1 f181 	clz	r1, r1
 80073a6:	0949      	lsrs	r1, r1, #5
 80073a8:	200b      	movs	r0, #11
 80073aa:	f7fd fae1 	bl	8004970 <_test_assert>
 80073ae:	4606      	mov	r6, r0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f47f af63 	bne.w	800727c <queues1_execute+0xbc>
 80073b6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80073ba:	4b18      	ldr	r3, [pc, #96]	; (800741c <queues1_execute+0x25c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80073bc:	f8d8 0000 	ldr.w	r0, [r8]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <queues1_execute+0x260>)
 80073c4:	6892      	ldr	r2, [r2, #8]
 80073c6:	9600      	str	r6, [sp, #0]
 80073c8:	3201      	adds	r2, #1
 80073ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80073ce:	f7f9 facf 	bl	8000970 <chThdCreateStatic>
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <queues1_execute+0x264>)
 80073d4:	6018      	str	r0, [r3, #0]
 80073d6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 80073da:	68a9      	ldr	r1, [r5, #8]
 80073dc:	fab1 f181 	clz	r1, r1
 80073e0:	0949      	lsrs	r1, r1, #5
 80073e2:	200c      	movs	r0, #12
 80073e4:	f7fd fac4 	bl	8004970 <_test_assert>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1c7      	bne.n	800737c <queues1_execute+0x1bc>
 80073ec:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80073f0:	f7fd fb2e 	bl	8004a50 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80073f4:	4628      	mov	r0, r5
 80073f6:	210a      	movs	r1, #10
 80073f8:	f7fa fb3a 	bl	8001a70 <chIQGetTimeout>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	4259      	negs	r1, r3
 8007400:	4159      	adcs	r1, r3
 8007402:	200d      	movs	r0, #13
}
 8007404:	b002      	add	sp, #8
 8007406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800740a:	f7fd bab1 	b.w	8004970 <_test_assert>
 800740e:	bf00      	nop
 8007410:	2000089c 	.word	0x2000089c
 8007414:	08009ac4 	.word	0x08009ac4
 8007418:	080093a0 	.word	0x080093a0
 800741c:	20000d70 	.word	0x20000d70
 8007420:	08007141 	.word	0x08007141
 8007424:	20001918 	.word	0x20001918
	...

08007430 <queues2_execute>:

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
}

static void queues2_execute(void) {
 8007430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007434:	2320      	movs	r3, #32
 8007436:	b083      	sub	sp, #12
 8007438:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800743c:	4b85      	ldr	r3, [pc, #532]	; (8007654 <queues2_execute+0x224>)
 800743e:	6999      	ldr	r1, [r3, #24]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	4291      	cmp	r1, r2
 8007444:	d05d      	beq.n	8007502 <queues2_execute+0xd2>
 8007446:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8007448:	2001      	movs	r0, #1
 800744a:	f7fd fa91 	bl	8004970 <_test_assert>
 800744e:	bbb8      	cbnz	r0, 80074c0 <queues2_execute+0x90>
 8007450:	f380 8811 	msr	BASEPRI, r0
 8007454:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8007456:	4d7f      	ldr	r5, [pc, #508]	; (8007654 <queues2_execute+0x224>)
 8007458:	4621      	mov	r1, r4
 800745a:	3401      	adds	r4, #1
 800745c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007460:	4628      	mov	r0, r5
 8007462:	b2e4      	uxtb	r4, r4
 8007464:	f7fa fb8c 	bl	8001b80 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007468:	2c45      	cmp	r4, #69	; 0x45
 800746a:	d1f4      	bne.n	8007456 <queues2_execute+0x26>
 800746c:	2620      	movs	r6, #32
 800746e:	f386 8811 	msr	BASEPRI, r6
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8007472:	68a9      	ldr	r1, [r5, #8]
 8007474:	fab1 f181 	clz	r1, r1
 8007478:	0949      	lsrs	r1, r1, #5
 800747a:	2002      	movs	r0, #2
 800747c:	f7fd fa78 	bl	8004970 <_test_assert>
 8007480:	4607      	mov	r7, r0
 8007482:	b9e8      	cbnz	r0, 80074c0 <queues2_execute+0x90>
 8007484:	f380 8811 	msr	BASEPRI, r0
 8007488:	2404      	movs	r4, #4
 800748a:	4681      	mov	r9, r0
 800748c:	f04f 0820 	mov.w	r8, #32
 8007490:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8007494:	4d6f      	ldr	r5, [pc, #444]	; (8007654 <queues2_execute+0x224>)
 8007496:	4628      	mov	r0, r5
 8007498:	f7fa fb9a 	bl	8001bd0 <chOQGetI>
 800749c:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 80074a0:	b2c0      	uxtb	r0, r0
 80074a2:	f7fd fa55 	bl	8004950 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 80074a6:	3c01      	subs	r4, #1
 80074a8:	d1f0      	bne.n	800748c <queues2_execute+0x5c>
 80074aa:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80074ae:	696a      	ldr	r2, [r5, #20]
 80074b0:	69ab      	ldr	r3, [r5, #24]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d02a      	beq.n	800750c <queues2_execute+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 80074b6:	4639      	mov	r1, r7
 80074b8:	2003      	movs	r0, #3
 80074ba:	f7fd fa59 	bl	8004970 <_test_assert>
 80074be:	b128      	cbz	r0, 80074cc <queues2_execute+0x9c>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80074c6:	b003      	add	sp, #12
 80074c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074cc:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 80074d0:	4961      	ldr	r1, [pc, #388]	; (8007658 <queues2_execute+0x228>)
 80074d2:	2004      	movs	r0, #4
 80074d4:	f7fd fa64 	bl	80049a0 <_test_assert_sequence>
 80074d8:	4604      	mov	r4, r0
 80074da:	2800      	cmp	r0, #0
 80074dc:	d1f3      	bne.n	80074c6 <queues2_execute+0x96>
 80074de:	2620      	movs	r6, #32
 80074e0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 80074e4:	4d5b      	ldr	r5, [pc, #364]	; (8007654 <queues2_execute+0x224>)
 80074e6:	4628      	mov	r0, r5
 80074e8:	f7fa fb72 	bl	8001bd0 <chOQGetI>
 80074ec:	3003      	adds	r0, #3
 80074ee:	bf14      	ite	ne
 80074f0:	2100      	movne	r1, #0
 80074f2:	2101      	moveq	r1, #1
 80074f4:	2005      	movs	r0, #5
 80074f6:	f7fd fa3b 	bl	8004970 <_test_assert>
 80074fa:	b160      	cbz	r0, 8007516 <queues2_execute+0xe6>
 80074fc:	f384 8811 	msr	BASEPRI, r4
 8007500:	e7e1      	b.n	80074c6 <queues2_execute+0x96>
 8007502:	6899      	ldr	r1, [r3, #8]
 8007504:	3100      	adds	r1, #0
 8007506:	bf18      	it	ne
 8007508:	2101      	movne	r1, #1
 800750a:	e79d      	b.n	8007448 <queues2_execute+0x18>
 800750c:	68af      	ldr	r7, [r5, #8]
 800750e:	3700      	adds	r7, #0
 8007510:	bf18      	it	ne
 8007512:	2701      	movne	r7, #1
 8007514:	e7cf      	b.n	80074b6 <queues2_execute+0x86>
 8007516:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 800751a:	4f50      	ldr	r7, [pc, #320]	; (800765c <queues2_execute+0x22c>)
 800751c:	687c      	ldr	r4, [r7, #4]
 800751e:	4603      	mov	r3, r0
 8007520:	4621      	mov	r1, r4
 8007522:	2208      	movs	r2, #8
 8007524:	4628      	mov	r0, r5
 8007526:	f7fa fb73 	bl	8001c10 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 800752a:	f1a0 0104 	sub.w	r1, r0, #4
 800752e:	fab1 f181 	clz	r1, r1
 8007532:	0949      	lsrs	r1, r1, #5
 8007534:	2006      	movs	r0, #6
 8007536:	f7fd fa1b 	bl	8004970 <_test_assert>
 800753a:	4680      	mov	r8, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d1c2      	bne.n	80074c6 <queues2_execute+0x96>
 8007540:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8007544:	68a9      	ldr	r1, [r5, #8]
 8007546:	fab1 f181 	clz	r1, r1
 800754a:	0949      	lsrs	r1, r1, #5
 800754c:	2007      	movs	r0, #7
 800754e:	f7fd fa0f 	bl	8004970 <_test_assert>
 8007552:	4681      	mov	r9, r0
 8007554:	b110      	cbz	r0, 800755c <queues2_execute+0x12c>
 8007556:	f388 8811 	msr	BASEPRI, r8
 800755a:	e7b4      	b.n	80074c6 <queues2_execute+0x96>
 800755c:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007560:	4b3f      	ldr	r3, [pc, #252]	; (8007660 <queues2_execute+0x230>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007562:	6838      	ldr	r0, [r7, #0]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	4b3f      	ldr	r3, [pc, #252]	; (8007664 <queues2_execute+0x234>)
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	f8cd 9000 	str.w	r9, [sp]
 800756e:	3201      	adds	r2, #1
 8007570:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007574:	f7f9 f9fc 	bl	8000970 <chThdCreateStatic>
 8007578:	4b3b      	ldr	r3, [pc, #236]	; (8007668 <queues2_execute+0x238>)
 800757a:	6018      	str	r0, [r3, #0]
 800757c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8007580:	68e9      	ldr	r1, [r5, #12]
 8007582:	692b      	ldr	r3, [r5, #16]
 8007584:	68aa      	ldr	r2, [r5, #8]
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	1a99      	subs	r1, r3, r2
 800758a:	f1a1 0104 	sub.w	r1, r1, #4
 800758e:	fab1 f181 	clz	r1, r1
 8007592:	0949      	lsrs	r1, r1, #5
 8007594:	2008      	movs	r0, #8
 8007596:	f7fd f9eb 	bl	8004970 <_test_assert>
 800759a:	4607      	mov	r7, r0
 800759c:	b110      	cbz	r0, 80075a4 <queues2_execute+0x174>
 800759e:	f389 8811 	msr	BASEPRI, r9
 80075a2:	e790      	b.n	80074c6 <queues2_execute+0x96>
 80075a4:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80075a8:	f7fd fa52 	bl	8004a50 <test_wait_threads>
 80075ac:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7fa fad5 	bl	8001b60 <chOQResetI>
 80075b6:	f387 8811 	msr	BASEPRI, r7
 80075ba:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 80075be:	f105 0108 	add.w	r1, r5, #8
 80075c2:	c90e      	ldmia	r1, {r1, r2, r3}
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	1a59      	subs	r1, r3, r1
 80075c8:	fab1 f181 	clz	r1, r1
 80075cc:	0949      	lsrs	r1, r1, #5
 80075ce:	2009      	movs	r0, #9
 80075d0:	f7fd f9ce 	bl	8004970 <_test_assert>
 80075d4:	4603      	mov	r3, r0
 80075d6:	b110      	cbz	r0, 80075de <queues2_execute+0x1ae>
 80075d8:	f387 8811 	msr	BASEPRI, r7
 80075dc:	e773      	b.n	80074c6 <queues2_execute+0x96>
 80075de:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80075e2:	2202      	movs	r2, #2
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f7fa fb12 	bl	8001c10 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80075ec:	3802      	subs	r0, #2
 80075ee:	4241      	negs	r1, r0
 80075f0:	4141      	adcs	r1, r0
 80075f2:	200a      	movs	r0, #10
 80075f4:	f7fd f9bc 	bl	8004970 <_test_assert>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f47f af63 	bne.w	80074c6 <queues2_execute+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8007600:	4621      	mov	r1, r4
 8007602:	2202      	movs	r2, #2
 8007604:	4628      	mov	r0, r5
 8007606:	f7fa fb03 	bl	8001c10 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800760a:	1e82      	subs	r2, r0, #2
 800760c:	4251      	negs	r1, r2
 800760e:	4151      	adcs	r1, r2
 8007610:	200b      	movs	r0, #11
 8007612:	f7fd f9ad 	bl	8004970 <_test_assert>
 8007616:	2800      	cmp	r0, #0
 8007618:	f47f af55 	bne.w	80074c6 <queues2_execute+0x96>
 800761c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8007620:	68a9      	ldr	r1, [r5, #8]
 8007622:	fab1 f181 	clz	r1, r1
 8007626:	0949      	lsrs	r1, r1, #5
 8007628:	200c      	movs	r0, #12
 800762a:	f7fd f9a1 	bl	8004970 <_test_assert>
 800762e:	2800      	cmp	r0, #0
 8007630:	f47f af46 	bne.w	80074c0 <queues2_execute+0x90>
 8007634:	2100      	movs	r1, #0
 8007636:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800763a:	220a      	movs	r2, #10
 800763c:	4805      	ldr	r0, [pc, #20]	; (8007654 <queues2_execute+0x224>)
 800763e:	f7fa fa9f 	bl	8001b80 <chOQPutTimeout>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	4259      	negs	r1, r3
 8007646:	4159      	adcs	r1, r3
 8007648:	200d      	movs	r0, #13
}
 800764a:	b003      	add	sp, #12
 800764c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8007650:	f7fd b98e 	b.w	8004970 <_test_assert>
 8007654:	20000878 	.word	0x20000878
 8007658:	08009ac4 	.word	0x08009ac4
 800765c:	080093a0 	.word	0x080093a0
 8007660:	20000d70 	.word	0x20000d70
 8007664:	08007181 	.word	0x08007181
 8007668:	20001918 	.word	0x20001918
 800766c:	00000000 	.word	0x00000000

08007670 <sys2_execute>:
 8007670:	2320      	movs	r3, #32
 8007672:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007676:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007678:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800767a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800767e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007680:	2300      	movs	r3, #0
 8007682:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007686:	b662      	cpsie	i
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	0000      	movs	r0, r0
	...

08007690 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8007690:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007692:	2320      	movs	r3, #32
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	2400      	movs	r4, #0
 800769a:	f384 8811 	msr	BASEPRI, r4
 800769e:	f383 8811 	msr	BASEPRI, r3
  chSysLockFromISR();
  chSysUnlockFromISR();

  /* Reentrant case.*/
  chSysLockFromISR();
  sts = chSysGetStatusAndLockX();
 80076a2:	f7f8 ff25 	bl	80004f0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 80076a6:	f7f8 ff33 	bl	8000510 <chSysRestoreStatusX>
 80076aa:	f384 8811 	msr	BASEPRI, r4
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <sys3_execute>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	2420      	movs	r4, #32
 80076b4:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7f8 fe79 	bl	80003b0 <chSysIntegrityCheckI>
 80076be:	2300      	movs	r3, #0
 80076c0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 80076c4:	f080 0101 	eor.w	r1, r0, #1
 80076c8:	b2c9      	uxtb	r1, r1
 80076ca:	2001      	movs	r0, #1
 80076cc:	f7fd f950 	bl	8004970 <_test_assert>
 80076d0:	b100      	cbz	r0, 80076d4 <sys3_execute+0x24>
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	4605      	mov	r5, r0
 80076d6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80076da:	2002      	movs	r0, #2
 80076dc:	f7f8 fe68 	bl	80003b0 <chSysIntegrityCheckI>
 80076e0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 80076e4:	f080 0101 	eor.w	r1, r0, #1
 80076e8:	b2c9      	uxtb	r1, r1
 80076ea:	2002      	movs	r0, #2
 80076ec:	f7fd f940 	bl	8004970 <_test_assert>
 80076f0:	4605      	mov	r5, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1ed      	bne.n	80076d2 <sys3_execute+0x22>
 80076f6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80076fa:	2004      	movs	r0, #4
 80076fc:	f7f8 fe58 	bl	80003b0 <chSysIntegrityCheckI>
 8007700:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8007704:	f080 0101 	eor.w	r1, r0, #1
 8007708:	b2c9      	uxtb	r1, r1
 800770a:	2003      	movs	r0, #3
 800770c:	f7fd f930 	bl	8004970 <_test_assert>
 8007710:	4605      	mov	r5, r0
 8007712:	2800      	cmp	r0, #0
 8007714:	d1dd      	bne.n	80076d2 <sys3_execute+0x22>
 8007716:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 800771a:	2008      	movs	r0, #8
 800771c:	f7f8 fe48 	bl	80003b0 <chSysIntegrityCheckI>
 8007720:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8007724:	f080 0101 	eor.w	r1, r0, #1
 8007728:	b2c9      	uxtb	r1, r1
 800772a:	2004      	movs	r0, #4
}
 800772c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8007730:	f7fd b91e 	b.w	8004970 <_test_assert>
	...

08007740 <sys1_execute>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8007740:	b510      	push	{r4, lr}
 8007742:	b086      	sub	sp, #24
  syssts_t sts;
  virtual_timer_t vt;

  /* Testing normal case.*/
  sts = chSysGetStatusAndLockX();
 8007744:	f7f8 fed4 	bl	80004f0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8007748:	f7f8 fee2 	bl	8000510 <chSysRestoreStatusX>
 800774c:	2420      	movs	r4, #32
 800774e:	f384 8811 	msr	BASEPRI, r4

  /* Reentrant case.*/
  chSysLock();
  sts = chSysGetStatusAndLockX();
 8007752:	f7f8 fecd 	bl	80004f0 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8007756:	f7f8 fedb 	bl	8000510 <chSysRestoreStatusX>
 800775a:	2300      	movs	r3, #0
 800775c:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8007760:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8007764:	b90b      	cbnz	r3, 800776a <sys1_execute+0x2a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007766:	f384 8811 	msr	BASEPRI, r4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800776a:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 800776e:	b913      	cbnz	r3, 8007776 <sys1_execute+0x36>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007770:	2320      	movs	r3, #32
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	2300      	movs	r3, #0
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	2220      	movs	r2, #32
 800777e:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8007782:	f3ef 8212 	mrs	r2, BASEPRI_MAX
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8007786:	b10a      	cbz	r2, 800778c <sys1_execute+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007788:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800778c:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 8007790:	b113      	cbz	r3, 8007798 <sys1_execute+0x58>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007792:	2300      	movs	r3, #0
 8007794:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8007798:	2300      	movs	r3, #0
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	2320      	movs	r3, #32
 800779e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80077a2:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 80077a4:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80077a6:	b113      	cbz	r3, 80077ae <sys1_execute+0x6e>
    chVTDoResetI(vtp);
 80077a8:	4620      	mov	r0, r4
 80077aa:	f7f8 ff21 	bl	80005f0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80077ae:	4620      	mov	r0, r4
 80077b0:	2300      	movs	r3, #0
 80077b2:	4a0c      	ldr	r2, [pc, #48]	; (80077e4 <sys1_execute+0xa4>)
 80077b4:	2101      	movs	r1, #1
 80077b6:	f7f8 fedb 	bl	8000570 <chVTDoSetI>
 80077ba:	2400      	movs	r4, #0
 80077bc:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 80077c0:	200a      	movs	r0, #10
 80077c2:	f7f9 f945 	bl	8000a50 <chThdSleep>
 80077c6:	2320      	movs	r3, #32
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	9904      	ldr	r1, [sp, #16]
 80077ce:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80077d2:	fab1 f181 	clz	r1, r1
 80077d6:	0949      	lsrs	r1, r1, #5
 80077d8:	2001      	movs	r0, #1
 80077da:	f7fd f8c9 	bl	8004970 <_test_assert>
}
 80077de:	b006      	add	sp, #24
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	08007691 	.word	0x08007691
	...

080077f0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
	...

08007800 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8007800:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8007802:	482f      	ldr	r0, [pc, #188]	; (80078c0 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8007804:	4c2f      	ldr	r4, [pc, #188]	; (80078c4 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8007806:	f7fd f86b 	bl	80048e0 <test_print>
  test_printn(sizeof(ch_system_t));
 800780a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800780e:	f7fd f837 	bl	8004880 <test_printn>
  test_println(" bytes");
 8007812:	4620      	mov	r0, r4
 8007814:	f7fd f87c 	bl	8004910 <test_println>
  test_print("--- Thread: ");
 8007818:	482b      	ldr	r0, [pc, #172]	; (80078c8 <bmk13_execute+0xc8>)
 800781a:	f7fd f861 	bl	80048e0 <test_print>
  test_printn(sizeof(thread_t));
 800781e:	2044      	movs	r0, #68	; 0x44
 8007820:	f7fd f82e 	bl	8004880 <test_printn>
  test_println(" bytes");
 8007824:	4620      	mov	r0, r4
 8007826:	f7fd f873 	bl	8004910 <test_println>
  test_print("--- Timer : ");
 800782a:	4828      	ldr	r0, [pc, #160]	; (80078cc <bmk13_execute+0xcc>)
 800782c:	f7fd f858 	bl	80048e0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8007830:	2014      	movs	r0, #20
 8007832:	f7fd f825 	bl	8004880 <test_printn>
  test_println(" bytes");
 8007836:	4620      	mov	r0, r4
 8007838:	f7fd f86a 	bl	8004910 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800783c:	4824      	ldr	r0, [pc, #144]	; (80078d0 <bmk13_execute+0xd0>)
 800783e:	f7fd f84f 	bl	80048e0 <test_print>
  test_printn(sizeof(semaphore_t));
 8007842:	200c      	movs	r0, #12
 8007844:	f7fd f81c 	bl	8004880 <test_printn>
  test_println(" bytes");
 8007848:	4620      	mov	r0, r4
 800784a:	f7fd f861 	bl	8004910 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800784e:	4821      	ldr	r0, [pc, #132]	; (80078d4 <bmk13_execute+0xd4>)
 8007850:	f7fd f846 	bl	80048e0 <test_print>
  test_printn(sizeof(event_source_t));
 8007854:	2004      	movs	r0, #4
 8007856:	f7fd f813 	bl	8004880 <test_printn>
  test_println(" bytes");
 800785a:	4620      	mov	r0, r4
 800785c:	f7fd f858 	bl	8004910 <test_println>
  test_print("--- EventL: ");
 8007860:	481d      	ldr	r0, [pc, #116]	; (80078d8 <bmk13_execute+0xd8>)
 8007862:	f7fd f83d 	bl	80048e0 <test_print>
  test_printn(sizeof(event_listener_t));
 8007866:	2014      	movs	r0, #20
 8007868:	f7fd f80a 	bl	8004880 <test_printn>
  test_println(" bytes");
 800786c:	4620      	mov	r0, r4
 800786e:	f7fd f84f 	bl	8004910 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8007872:	481a      	ldr	r0, [pc, #104]	; (80078dc <bmk13_execute+0xdc>)
 8007874:	f7fd f834 	bl	80048e0 <test_print>
  test_printn(sizeof(mutex_t));
 8007878:	2010      	movs	r0, #16
 800787a:	f7fd f801 	bl	8004880 <test_printn>
  test_println(" bytes");
 800787e:	4620      	mov	r0, r4
 8007880:	f7fd f846 	bl	8004910 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8007884:	4816      	ldr	r0, [pc, #88]	; (80078e0 <bmk13_execute+0xe0>)
 8007886:	f7fd f82b 	bl	80048e0 <test_print>
  test_printn(sizeof(condition_variable_t));
 800788a:	2008      	movs	r0, #8
 800788c:	f7fc fff8 	bl	8004880 <test_printn>
  test_println(" bytes");
 8007890:	4620      	mov	r0, r4
 8007892:	f7fd f83d 	bl	8004910 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8007896:	4813      	ldr	r0, [pc, #76]	; (80078e4 <bmk13_execute+0xe4>)
 8007898:	f7fd f822 	bl	80048e0 <test_print>
  test_printn(sizeof(io_queue_t));
 800789c:	2024      	movs	r0, #36	; 0x24
 800789e:	f7fc ffef 	bl	8004880 <test_printn>
  test_println(" bytes");
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7fd f834 	bl	8004910 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80078a8:	480f      	ldr	r0, [pc, #60]	; (80078e8 <bmk13_execute+0xe8>)
 80078aa:	f7fd f819 	bl	80048e0 <test_print>
  test_printn(sizeof(mailbox_t));
 80078ae:	2028      	movs	r0, #40	; 0x28
 80078b0:	f7fc ffe6 	bl	8004880 <test_printn>
  test_println(" bytes");
 80078b4:	4620      	mov	r0, r4
#endif
}
 80078b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80078ba:	f7fd b829 	b.w	8004910 <test_println>
 80078be:	bf00      	nop
 80078c0:	08009d00 	.word	0x08009d00
 80078c4:	08009d10 	.word	0x08009d10
 80078c8:	08009d18 	.word	0x08009d18
 80078cc:	08009d28 	.word	0x08009d28
 80078d0:	08009d38 	.word	0x08009d38
 80078d4:	08009d48 	.word	0x08009d48
 80078d8:	08009d58 	.word	0x08009d58
 80078dc:	08009d68 	.word	0x08009d68
 80078e0:	08009d78 	.word	0x08009d78
 80078e4:	08009d88 	.word	0x08009d88
 80078e8:	08009d98 	.word	0x08009d98
 80078ec:	00000000 	.word	0x00000000

080078f0 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 80078f0:	b510      	push	{r4, lr}
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80078f2:	f7f9 ff3d 	bl	8001770 <chMsgWait>
 80078f6:	6b04      	ldr	r4, [r0, #48]	; 0x30
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
 80078f8:	4621      	mov	r1, r4
 80078fa:	f7f9 ff59 	bl	80017b0 <chMsgRelease>
  } while (msg);
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d1f7      	bne.n	80078f2 <thread2+0x2>
}
 8007902:	bd10      	pop	{r4, pc}
	...

08007910 <bmk6_execute>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007914:	4b14      	ldr	r3, [pc, #80]	; (8007968 <bmk6_execute+0x58>)

  uint32_t n = 0;
  void *wap = wa[0];
 8007916:	4a15      	ldr	r2, [pc, #84]	; (800796c <bmk6_execute+0x5c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() + 1;
 800791e:	689d      	ldr	r5, [r3, #8]
 8007920:	4f13      	ldr	r7, [pc, #76]	; (8007970 <bmk6_execute+0x60>)
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8007922:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
 8007924:	f7fd f8ac 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800792c:	f7fd f8b8 	bl	8004aa0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8007930:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8007932:	3501      	adds	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8007934:	4626      	mov	r6, r4
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <bmk6_execute+0x64>)
 8007938:	9600      	str	r6, [sp, #0]
 800793a:	462a      	mov	r2, r5
 800793c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007940:	4640      	mov	r0, r8
 8007942:	f7f9 f815 	bl	8000970 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007946:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 8007948:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f3      	beq.n	8007936 <bmk6_execute+0x26>
  test_print("--- Score : ");
 800794e:	480a      	ldr	r0, [pc, #40]	; (8007978 <bmk6_execute+0x68>)
 8007950:	f7fc ffc6 	bl	80048e0 <test_print>
  test_printn(n);
 8007954:	4620      	mov	r0, r4
 8007956:	f7fc ff93 	bl	8004880 <test_printn>
  test_println(" threads/S");
 800795a:	4808      	ldr	r0, [pc, #32]	; (800797c <bmk6_execute+0x6c>)
}
 800795c:	b002      	add	sp, #8
 800795e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8007962:	f7fc bfd5 	b.w	8004910 <test_println>
 8007966:	bf00      	nop
 8007968:	20000d70 	.word	0x20000d70
 800796c:	080093a0 	.word	0x080093a0
 8007970:	200018fd 	.word	0x200018fd
 8007974:	08007b81 	.word	0x08007b81
 8007978:	08009da8 	.word	0x08009da8
 800797c:	08009db8 	.word	0x08009db8

08007980 <msg_loop_test>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8007984:	f7fd f87c 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800798c:	f7fd f888 	bl	8004aa0 <test_start_timer>
 8007990:	4e07      	ldr	r6, [pc, #28]	; (80079b0 <msg_loop_test+0x30>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8007992:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8007994:	2101      	movs	r1, #1
 8007996:	4628      	mov	r0, r5
 8007998:	f7f9 feca 	bl	8001730 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800799c:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800799e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f7      	beq.n	8007994 <msg_loop_test+0x14>
  (void)chMsgSend(tp, 0);
 80079a4:	4628      	mov	r0, r5
 80079a6:	2100      	movs	r1, #0
 80079a8:	f7f9 fec2 	bl	8001730 <chMsgSend>
  return n;
}
 80079ac:	4620      	mov	r0, r4
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	200018fd 	.word	0x200018fd
	...

080079c0 <bmk1_execute>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80079c0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <bmk1_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80079c4:	4a13      	ldr	r2, [pc, #76]	; (8007a14 <bmk1_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	6810      	ldr	r0, [r2, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <bmk1_execute+0x58>)
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80079ce:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80079d0:	2100      	movs	r1, #0
 80079d2:	3a01      	subs	r2, #1
 80079d4:	9100      	str	r1, [sp, #0]
 80079d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80079da:	f7f8 ffc9 	bl	8000970 <chThdCreateStatic>
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <bmk1_execute+0x5c>)
 80079e0:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80079e2:	f7ff ffcd 	bl	8007980 <msg_loop_test>
 80079e6:	4604      	mov	r4, r0
  test_wait_threads();
 80079e8:	f7fd f832 	bl	8004a50 <test_wait_threads>
  test_print("--- Score : ");
 80079ec:	480c      	ldr	r0, [pc, #48]	; (8007a20 <bmk1_execute+0x60>)
 80079ee:	f7fc ff77 	bl	80048e0 <test_print>
  test_printn(n);
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7fc ff44 	bl	8004880 <test_printn>
  test_print(" msgs/S, ");
 80079f8:	480a      	ldr	r0, [pc, #40]	; (8007a24 <bmk1_execute+0x64>)
 80079fa:	f7fc ff71 	bl	80048e0 <test_print>
  test_printn(n << 1);
 80079fe:	0060      	lsls	r0, r4, #1
 8007a00:	f7fc ff3e 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007a04:	4808      	ldr	r0, [pc, #32]	; (8007a28 <bmk1_execute+0x68>)
}
 8007a06:	b002      	add	sp, #8
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8007a0c:	f7fc bf80 	b.w	8004910 <test_println>
 8007a10:	20000d70 	.word	0x20000d70
 8007a14:	080093a0 	.word	0x080093a0
 8007a18:	080078f1 	.word	0x080078f1
 8007a1c:	20001918 	.word	0x20001918
 8007a20:	08009da8 	.word	0x08009da8
 8007a24:	08009dc4 	.word	0x08009dc4
 8007a28:	08009dd0 	.word	0x08009dd0
 8007a2c:	00000000 	.word	0x00000000

08007a30 <bmk2_execute>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8007a30:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <bmk2_execute+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <bmk2_execute+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	6810      	ldr	r0, [r2, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <bmk2_execute+0x58>)
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8007a3e:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007a40:	2100      	movs	r1, #0
 8007a42:	3201      	adds	r2, #1
 8007a44:	9100      	str	r1, [sp, #0]
 8007a46:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a4a:	f7f8 ff91 	bl	8000970 <chThdCreateStatic>
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <bmk2_execute+0x5c>)
 8007a50:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8007a52:	f7ff ff95 	bl	8007980 <msg_loop_test>
 8007a56:	4604      	mov	r4, r0
  test_wait_threads();
 8007a58:	f7fc fffa 	bl	8004a50 <test_wait_threads>
  test_print("--- Score : ");
 8007a5c:	480c      	ldr	r0, [pc, #48]	; (8007a90 <bmk2_execute+0x60>)
 8007a5e:	f7fc ff3f 	bl	80048e0 <test_print>
  test_printn(n);
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7fc ff0c 	bl	8004880 <test_printn>
  test_print(" msgs/S, ");
 8007a68:	480a      	ldr	r0, [pc, #40]	; (8007a94 <bmk2_execute+0x64>)
 8007a6a:	f7fc ff39 	bl	80048e0 <test_print>
  test_printn(n << 1);
 8007a6e:	0060      	lsls	r0, r4, #1
 8007a70:	f7fc ff06 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007a74:	4808      	ldr	r0, [pc, #32]	; (8007a98 <bmk2_execute+0x68>)
}
 8007a76:	b002      	add	sp, #8
 8007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8007a7c:	f7fc bf48 	b.w	8004910 <test_println>
 8007a80:	20000d70 	.word	0x20000d70
 8007a84:	080093a0 	.word	0x080093a0
 8007a88:	080078f1 	.word	0x080078f1
 8007a8c:	20001918 	.word	0x20001918
 8007a90:	08009da8 	.word	0x08009da8
 8007a94:	08009dc4 	.word	0x08009dc4
 8007a98:	08009dd0 	.word	0x08009dd0
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <bmk3_execute>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8007aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007aa4:	4f2c      	ldr	r7, [pc, #176]	; (8007b58 <bmk3_execute+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007aa6:	4e2d      	ldr	r6, [pc, #180]	; (8007b5c <bmk3_execute+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	6830      	ldr	r0, [r6, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	4b2c      	ldr	r3, [pc, #176]	; (8007b60 <bmk3_execute+0xc0>)
 8007ab0:	4c2c      	ldr	r4, [pc, #176]	; (8007b64 <bmk3_execute+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8007ab2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007b74 <bmk3_execute+0xd4>
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8007ab6:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007ab8:	2500      	movs	r5, #0
 8007aba:	3201      	adds	r2, #1
 8007abc:	9500      	str	r5, [sp, #0]
 8007abe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ac2:	f7f8 ff55 	bl	8000970 <chThdCreateStatic>
 8007ac6:	69ba      	ldr	r2, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8007ac8:	6873      	ldr	r3, [r6, #4]
 8007aca:	6892      	ldr	r2, [r2, #8]
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007acc:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8007ace:	3a02      	subs	r2, #2
 8007ad0:	9500      	str	r5, [sp, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ad8:	4643      	mov	r3, r8
 8007ada:	f7f8 ff49 	bl	8000970 <chThdCreateStatic>
 8007ade:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8007ae0:	68b3      	ldr	r3, [r6, #8]
 8007ae2:	6892      	ldr	r2, [r2, #8]

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8007ae4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8007ae6:	3a03      	subs	r2, #3
 8007ae8:	9500      	str	r5, [sp, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007af0:	4643      	mov	r3, r8
 8007af2:	f7f8 ff3d 	bl	8000970 <chThdCreateStatic>
 8007af6:	69ba      	ldr	r2, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8007af8:	68f3      	ldr	r3, [r6, #12]
 8007afa:	6892      	ldr	r2, [r2, #8]
static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8007afc:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8007afe:	3a04      	subs	r2, #4
 8007b00:	9500      	str	r5, [sp, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007b08:	4643      	mov	r3, r8
 8007b0a:	f7f8 ff31 	bl	8000970 <chThdCreateStatic>
 8007b0e:	69ba      	ldr	r2, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8007b10:	6933      	ldr	r3, [r6, #16]
 8007b12:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8007b14:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8007b16:	3a05      	subs	r2, #5
 8007b18:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	9500      	str	r5, [sp, #0]
 8007b20:	4643      	mov	r3, r8
 8007b22:	f7f8 ff25 	bl	8000970 <chThdCreateStatic>
 8007b26:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	f7ff ff29 	bl	8007980 <msg_loop_test>
 8007b2e:	4604      	mov	r4, r0
  test_wait_threads();
 8007b30:	f7fc ff8e 	bl	8004a50 <test_wait_threads>
  test_print("--- Score : ");
 8007b34:	480c      	ldr	r0, [pc, #48]	; (8007b68 <bmk3_execute+0xc8>)
 8007b36:	f7fc fed3 	bl	80048e0 <test_print>
  test_printn(n);
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7fc fea0 	bl	8004880 <test_printn>
  test_print(" msgs/S, ");
 8007b40:	480a      	ldr	r0, [pc, #40]	; (8007b6c <bmk3_execute+0xcc>)
 8007b42:	f7fc fecd 	bl	80048e0 <test_print>
  test_printn(n << 1);
 8007b46:	0060      	lsls	r0, r4, #1
 8007b48:	f7fc fe9a 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007b4c:	4808      	ldr	r0, [pc, #32]	; (8007b70 <bmk3_execute+0xd0>)
}
 8007b4e:	b002      	add	sp, #8
 8007b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8007b54:	f7fc bedc 	b.w	8004910 <test_println>
 8007b58:	20000d70 	.word	0x20000d70
 8007b5c:	080093a0 	.word	0x080093a0
 8007b60:	080078f1 	.word	0x080078f1
 8007b64:	20001918 	.word	0x20001918
 8007b68:	08009da8 	.word	0x08009da8
 8007b6c:	08009dc4 	.word	0x08009dc4
 8007b70:	08009dd0 	.word	0x08009dd0
 8007b74:	08007b81 	.word	0x08007b81
	...

08007b80 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8007b80:	f7f8 bfbe 	b.w	8000b00 <chThdExit>
	...

08007b90 <bmk4_execute>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8007b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <bmk4_execute+0xa0>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007b96:	4a27      	ldr	r2, [pc, #156]	; (8007c34 <bmk4_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	6810      	ldr	r0, [r2, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	4b26      	ldr	r3, [pc, #152]	; (8007c38 <bmk4_execute+0xa8>)
 8007ba0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007c48 <bmk4_execute+0xb8>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8007ba4:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	3201      	adds	r2, #1
 8007baa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007bae:	9500      	str	r5, [sp, #0]
 8007bb0:	f7f8 fede 	bl	8000970 <chThdCreateStatic>
 8007bb4:	4b21      	ldr	r3, [pc, #132]	; (8007c3c <bmk4_execute+0xac>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8007bba:	f7fc ff61 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bc2:	f7fc ff6d 	bl	8004aa0 <test_start_timer>
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8007bc6:	46aa      	mov	sl, r5
 8007bc8:	f04f 0820 	mov.w	r8, #32
 8007bcc:	2720      	movs	r7, #32
 8007bce:	f388 8811 	msr	BASEPRI, r8
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7f8 fde3 	bl	80007a0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007bda:	4620      	mov	r0, r4
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f7f8 fddf 	bl	80007a0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007be2:	4620      	mov	r0, r4
 8007be4:	2100      	movs	r1, #0
 8007be6:	f7f8 fddb 	bl	80007a0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007bea:	4620      	mov	r0, r4
 8007bec:	2100      	movs	r1, #0
 8007bee:	f7f8 fdd7 	bl	80007a0 <chSchWakeupS>
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007bf8:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8007bfc:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0e4      	beq.n	8007bcc <bmk4_execute+0x3c>
 8007c02:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8007c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7f8 fdc8 	bl	80007a0 <chSchWakeupS>
 8007c10:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 8007c14:	f7fc ff1c 	bl	8004a50 <test_wait_threads>
  test_print("--- Score : ");
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <bmk4_execute+0xb0>)
 8007c1a:	f7fc fe61 	bl	80048e0 <test_print>
  test_printn(n * 2);
 8007c1e:	0068      	lsls	r0, r5, #1
 8007c20:	f7fc fe2e 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007c24:	4807      	ldr	r0, [pc, #28]	; (8007c44 <bmk4_execute+0xb4>)
}
 8007c26:	b002      	add	sp, #8
 8007c28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8007c2c:	f7fc be70 	b.w	8004910 <test_println>
 8007c30:	20000d70 	.word	0x20000d70
 8007c34:	080093a0 	.word	0x080093a0
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	20001918 	.word	0x20001918
 8007c40:	08009da8 	.word	0x08009da8
 8007c44:	08009dd0 	.word	0x08009dd0
 8007c48:	200018fd 	.word	0x200018fd
 8007c4c:	00000000 	.word	0x00000000

08007c50 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007c50:	4a07      	ldr	r2, [pc, #28]	; (8007c70 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8007c52:	b510      	push	{r4, lr}
 8007c54:	2320      	movs	r3, #32
 8007c56:	6994      	ldr	r4, [r2, #24]
 8007c58:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8007c5c:	2003      	movs	r0, #3
 8007c5e:	f7f8 fd5f 	bl	8000720 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8007c62:	6a23      	ldr	r3, [r4, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f9      	beq.n	8007c5c <thread4+0xc>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	20000d70 	.word	0x20000d70
	...

08007c80 <bmk5_execute>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	4b15      	ldr	r3, [pc, #84]	; (8007cdc <bmk5_execute+0x5c>)

  uint32_t n = 0;
  void *wap = wa[0];
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <bmk5_execute+0x60>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f8d2 8000 	ldr.w	r8, [r2]
  tprio_t prio = chThdGetPriorityX() - 1;
 8007c8e:	689d      	ldr	r5, [r3, #8]
 8007c90:	4f14      	ldr	r7, [pc, #80]	; (8007ce4 <bmk5_execute+0x64>)
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8007c92:	b082      	sub	sp, #8

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
 8007c94:	f7fc fef4 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c9c:	f7fc ff00 	bl	8004aa0 <test_start_timer>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 8007ca0:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8007ca2:	3d01      	subs	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8007ca4:	4626      	mov	r6, r4
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <bmk5_execute+0x68>)
 8007ca8:	9600      	str	r6, [sp, #0]
 8007caa:	462a      	mov	r2, r5
 8007cac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	f7f8 fe5d 	bl	8000970 <chThdCreateStatic>
 8007cb6:	f7f8 ff2b 	bl	8000b10 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007cba:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8007cbc:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f1      	beq.n	8007ca6 <bmk5_execute+0x26>
  test_print("--- Score : ");
 8007cc2:	480a      	ldr	r0, [pc, #40]	; (8007cec <bmk5_execute+0x6c>)
 8007cc4:	f7fc fe0c 	bl	80048e0 <test_print>
  test_printn(n);
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7fc fdd9 	bl	8004880 <test_printn>
  test_println(" threads/S");
 8007cce:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <bmk5_execute+0x70>)
}
 8007cd0:	b002      	add	sp, #8
 8007cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8007cd6:	f7fc be1b 	b.w	8004910 <test_println>
 8007cda:	bf00      	nop
 8007cdc:	20000d70 	.word	0x20000d70
 8007ce0:	080093a0 	.word	0x080093a0
 8007ce4:	200018fd 	.word	0x200018fd
 8007ce8:	08007b81 	.word	0x08007b81
 8007cec:	08009da8 	.word	0x08009da8
 8007cf0:	08009db8 	.word	0x08009db8
	...

08007d00 <bmk7_execute>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007d04:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8007e08 <bmk7_execute+0x108>
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007d08:	4f37      	ldr	r7, [pc, #220]	; (8007de8 <bmk7_execute+0xe8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007d0a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	4b36      	ldr	r3, [pc, #216]	; (8007dec <bmk7_execute+0xec>)
 8007d14:	4e36      	ldr	r6, [pc, #216]	; (8007df0 <bmk7_execute+0xf0>)
 8007d16:	4d37      	ldr	r5, [pc, #220]	; (8007df4 <bmk7_execute+0xf4>)
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8007d18:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	3205      	adds	r2, #5
 8007d1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d22:	9400      	str	r4, [sp, #0]
 8007d24:	f7f8 fe24 	bl	8000970 <chThdCreateStatic>
 8007d28:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6892      	ldr	r2, [r2, #8]
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007d30:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007d32:	3204      	adds	r2, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d3a:	4b2c      	ldr	r3, [pc, #176]	; (8007dec <bmk7_execute+0xec>)
 8007d3c:	9400      	str	r4, [sp, #0]
 8007d3e:	f7f8 fe17 	bl	8000970 <chThdCreateStatic>
 8007d42:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6892      	ldr	r2, [r2, #8]

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007d4a:	6070      	str	r0, [r6, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8007d4c:	3203      	adds	r2, #3
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <bmk7_execute+0xec>)
 8007d56:	9400      	str	r4, [sp, #0]
 8007d58:	f7f8 fe0a 	bl	8000970 <chThdCreateStatic>
 8007d5c:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6892      	ldr	r2, [r2, #8]
static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8007d64:	60b0      	str	r0, [r6, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007d66:	3202      	adds	r2, #2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <bmk7_execute+0xec>)
 8007d70:	9400      	str	r4, [sp, #0]
 8007d72:	f7f8 fdfd 	bl	8000970 <chThdCreateStatic>
 8007d76:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007d7e:	60f0      	str	r0, [r6, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8007d80:	3201      	adds	r2, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d88:	4b18      	ldr	r3, [pc, #96]	; (8007dec <bmk7_execute+0xec>)
 8007d8a:	9400      	str	r4, [sp, #0]
 8007d8c:	f7f8 fdf0 	bl	8000970 <chThdCreateStatic>
 8007d90:	6130      	str	r0, [r6, #16]

  n = 0;
  test_wait_tick();
 8007d92:	f7fc fe75 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d9a:	f7fc fe81 	bl	8004aa0 <test_start_timer>
  do {
    chSemReset(&sem1, 0);
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4815      	ldr	r0, [pc, #84]	; (8007df8 <bmk7_execute+0xf8>)
 8007da2:	f7f9 f84d 	bl	8000e40 <chSemReset>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007da6:	782b      	ldrb	r3, [r5, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8007da8:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f7      	beq.n	8007d9e <bmk7_execute+0x9e>
  test_terminate_threads();
 8007dae:	f7fc fe3f 	bl	8004a30 <test_terminate_threads>
  chSemReset(&sem1, 0);
 8007db2:	2100      	movs	r1, #0
 8007db4:	4810      	ldr	r0, [pc, #64]	; (8007df8 <bmk7_execute+0xf8>)
 8007db6:	f7f9 f843 	bl	8000e40 <chSemReset>
  test_wait_threads();
 8007dba:	f7fc fe49 	bl	8004a50 <test_wait_threads>

  test_print("--- Score : ");
 8007dbe:	480f      	ldr	r0, [pc, #60]	; (8007dfc <bmk7_execute+0xfc>)
 8007dc0:	f7fc fd8e 	bl	80048e0 <test_print>
  test_printn(n);
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f7fc fd5b 	bl	8004880 <test_printn>
  test_print(" reschedules/S, ");
 8007dca:	480d      	ldr	r0, [pc, #52]	; (8007e00 <bmk7_execute+0x100>)
 8007dcc:	f7fc fd88 	bl	80048e0 <test_print>
  test_printn(n * 6);
 8007dd0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007dd4:	0040      	lsls	r0, r0, #1
 8007dd6:	f7fc fd53 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007dda:	480a      	ldr	r0, [pc, #40]	; (8007e04 <bmk7_execute+0x104>)
}
 8007ddc:	b002      	add	sp, #8
 8007dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8007de2:	f7fc bd95 	b.w	8004910 <test_println>
 8007de6:	bf00      	nop
 8007de8:	080093a0 	.word	0x080093a0
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	20001918 	.word	0x20001918
 8007df4:	200018fd 	.word	0x200018fd
 8007df8:	200019e0 	.word	0x200019e0
 8007dfc:	08009da8 	.word	0x08009da8
 8007e00:	08009ddc 	.word	0x08009ddc
 8007e04:	08009dd0 	.word	0x08009dd0
 8007e08:	20000d70 	.word	0x20000d70
 8007e0c:	00000000 	.word	0x00000000

08007e10 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8007e10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007e12:	4c06      	ldr	r4, [pc, #24]	; (8007e2c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8007e14:	69a3      	ldr	r3, [r4, #24]

  (void)p;
  while (!chThdShouldTerminateX())
 8007e16:	7f5b      	ldrb	r3, [r3, #29]
 8007e18:	075a      	lsls	r2, r3, #29
 8007e1a:	d406      	bmi.n	8007e2a <thread3+0x1a>
    chSemWait(&sem1);
 8007e1c:	4804      	ldr	r0, [pc, #16]	; (8007e30 <thread3+0x20>)
 8007e1e:	f7f9 f81f 	bl	8000e60 <chSemWait>
 8007e22:	69a3      	ldr	r3, [r4, #24]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8007e24:	7f5b      	ldrb	r3, [r3, #29]
 8007e26:	075b      	lsls	r3, r3, #29
 8007e28:	d5f8      	bpl.n	8007e1c <thread3+0xc>
 8007e2a:	bd10      	pop	{r4, pc}
 8007e2c:	20000d70 	.word	0x20000d70
 8007e30:	200019e0 	.word	0x200019e0
	...

08007e40 <bmk7_setup>:
    chSemWait(&sem1);
}

static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
 8007e40:	2100      	movs	r1, #0
 8007e42:	4801      	ldr	r0, [pc, #4]	; (8007e48 <bmk7_setup+0x8>)
 8007e44:	f7f8 bfdc 	b.w	8000e00 <chSemObjectInit>
 8007e48:	200019e0 	.word	0x200019e0
 8007e4c:	00000000 	.word	0x00000000

08007e50 <bmk11_setup>:
 * a second of continuous operations.
 */

static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
 8007e50:	2101      	movs	r1, #1
 8007e52:	4801      	ldr	r0, [pc, #4]	; (8007e58 <bmk11_setup+0x8>)
 8007e54:	f7f8 bfd4 	b.w	8000e00 <chSemObjectInit>
 8007e58:	200019e0 	.word	0x200019e0
 8007e5c:	00000000 	.word	0x00000000

08007e60 <bmk8_execute>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8007e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e64:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8007e66:	ac04      	add	r4, sp, #16
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007e68:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8007f38 <bmk8_execute+0xd8>
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007e6c:	4f2d      	ldr	r7, [pc, #180]	; (8007f24 <bmk8_execute+0xc4>)
 8007e6e:	4e2e      	ldr	r6, [pc, #184]	; (8007f28 <bmk8_execute+0xc8>)
 8007e70:	4d2e      	ldr	r5, [pc, #184]	; (8007f2c <bmk8_execute+0xcc>)
}

static void bmk8_execute(void) {
  uint32_t n;

  n = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8007e78:	f7fc fe02 	bl	8004a80 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007e7c:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	9400      	str	r4, [sp, #0]
 8007e86:	4633      	mov	r3, r6
 8007e88:	3a01      	subs	r2, #1
 8007e8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e8e:	f7f8 fd6f 	bl	8000970 <chThdCreateStatic>
 8007e92:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007e9a:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	9400      	str	r4, [sp, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ea6:	4633      	mov	r3, r6
 8007ea8:	f7f8 fd62 	bl	8000970 <chThdCreateStatic>
 8007eac:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	6892      	ldr	r2, [r2, #8]

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007eb4:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007eb6:	3a01      	subs	r2, #1
 8007eb8:	9400      	str	r4, [sp, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ec0:	4633      	mov	r3, r6
 8007ec2:	f7f8 fd55 	bl	8000970 <chThdCreateStatic>
 8007ec6:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6892      	ldr	r2, [r2, #8]
  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007ece:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007ed0:	3a01      	subs	r2, #1
 8007ed2:	9400      	str	r4, [sp, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007eda:	4633      	mov	r3, r6
 8007edc:	f7f8 fd48 	bl	8000970 <chThdCreateStatic>
 8007ee0:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6892      	ldr	r2, [r2, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007ee8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007eea:	3a01      	subs	r2, #1
 8007eec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ef0:	9400      	str	r4, [sp, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	4633      	mov	r3, r6
 8007ef6:	f7f8 fd3b 	bl	8000970 <chThdCreateStatic>
 8007efa:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8007efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f00:	f7f8 fda6 	bl	8000a50 <chThdSleep>
  test_terminate_threads();
 8007f04:	f7fc fd94 	bl	8004a30 <test_terminate_threads>
  test_wait_threads();
 8007f08:	f7fc fda2 	bl	8004a50 <test_wait_threads>

  test_print("--- Score : ");
 8007f0c:	4808      	ldr	r0, [pc, #32]	; (8007f30 <bmk8_execute+0xd0>)
 8007f0e:	f7fc fce7 	bl	80048e0 <test_print>
  test_printn(n);
 8007f12:	9803      	ldr	r0, [sp, #12]
 8007f14:	f7fc fcb4 	bl	8004880 <test_printn>
  test_println(" ctxswc/S");
 8007f18:	4806      	ldr	r0, [pc, #24]	; (8007f34 <bmk8_execute+0xd4>)
 8007f1a:	f7fc fcf9 	bl	8004910 <test_println>
}
 8007f1e:	b004      	add	sp, #16
 8007f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f24:	080093a0 	.word	0x080093a0
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	20001918 	.word	0x20001918
 8007f30:	08009da8 	.word	0x08009da8
 8007f34:	08009dd0 	.word	0x08009dd0
 8007f38:	20000d70 	.word	0x20000d70
 8007f3c:	00000000 	.word	0x00000000

08007f40 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d09      	ldr	r5, [pc, #36]	; (8007f68 <thread8+0x28>)
 8007f44:	4604      	mov	r4, r0

  do {
    chThdYield();
 8007f46:	f7f8 fda3 	bl	8000a90 <chThdYield>
    chThdYield();
 8007f4a:	f7f8 fda1 	bl	8000a90 <chThdYield>
    chThdYield();
 8007f4e:	f7f8 fd9f 	bl	8000a90 <chThdYield>
    chThdYield();
 8007f52:	f7f8 fd9d 	bl	8000a90 <chThdYield>
    (*(uint32_t *)p) += 4;
 8007f56:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8007f58:	69aa      	ldr	r2, [r5, #24]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	6023      	str	r3, [r4, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8007f5e:	7f53      	ldrb	r3, [r2, #29]
 8007f60:	075b      	lsls	r3, r3, #29
 8007f62:	d5f0      	bpl.n	8007f46 <thread8+0x6>
}
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	20000d70 	.word	0x20000d70
 8007f6c:	00000000 	.word	0x00000000

08007f70 <bmk9_execute>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	b082      	sub	sp, #8
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
 8007f74:	2400      	movs	r4, #0
 8007f76:	4623      	mov	r3, r4
 8007f78:	2210      	movs	r2, #16
 8007f7a:	4923      	ldr	r1, [pc, #140]	; (8008008 <bmk9_execute+0x98>)
 8007f7c:	4823      	ldr	r0, [pc, #140]	; (800800c <bmk9_execute+0x9c>)
 8007f7e:	9400      	str	r4, [sp, #0]
 8007f80:	f7f9 fd36 	bl	80019f0 <chIQObjectInit>
  n = 0;
  test_wait_tick();
 8007f84:	f7fc fd7c 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8007f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f8c:	f7fc fd88 	bl	8004aa0 <test_start_timer>
 8007f90:	4e1f      	ldr	r6, [pc, #124]	; (8008010 <bmk9_execute+0xa0>)
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8007f92:	4625      	mov	r5, r4
 8007f94:	2320      	movs	r3, #32
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	481b      	ldr	r0, [pc, #108]	; (800800c <bmk9_execute+0x9c>)
 8007f9e:	f7f9 fd47 	bl	8001a30 <chIQPutI>
    chIQPutI(&iq, 1);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4819      	ldr	r0, [pc, #100]	; (800800c <bmk9_execute+0x9c>)
 8007fa6:	f7f9 fd43 	bl	8001a30 <chIQPutI>
    chIQPutI(&iq, 2);
 8007faa:	2102      	movs	r1, #2
 8007fac:	4817      	ldr	r0, [pc, #92]	; (800800c <bmk9_execute+0x9c>)
 8007fae:	f7f9 fd3f 	bl	8001a30 <chIQPutI>
    chIQPutI(&iq, 3);
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	4815      	ldr	r0, [pc, #84]	; (800800c <bmk9_execute+0x9c>)
 8007fb6:	f7f9 fd3b 	bl	8001a30 <chIQPutI>
 8007fba:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8007fbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fc2:	4812      	ldr	r0, [pc, #72]	; (800800c <bmk9_execute+0x9c>)
 8007fc4:	f7f9 fd54 	bl	8001a70 <chIQGetTimeout>
 8007fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fcc:	480f      	ldr	r0, [pc, #60]	; (800800c <bmk9_execute+0x9c>)
 8007fce:	f7f9 fd4f 	bl	8001a70 <chIQGetTimeout>
 8007fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <bmk9_execute+0x9c>)
 8007fd8:	f7f9 fd4a 	bl	8001a70 <chIQGetTimeout>
 8007fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fe0:	480a      	ldr	r0, [pc, #40]	; (800800c <bmk9_execute+0x9c>)
 8007fe2:	f7f9 fd45 	bl	8001a70 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007fe6:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8007fe8:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0d2      	beq.n	8007f94 <bmk9_execute+0x24>
  test_print("--- Score : ");
 8007fee:	4809      	ldr	r0, [pc, #36]	; (8008014 <bmk9_execute+0xa4>)
 8007ff0:	f7fc fc76 	bl	80048e0 <test_print>
  test_printn(n * 4);
 8007ff4:	00a0      	lsls	r0, r4, #2
 8007ff6:	f7fc fc43 	bl	8004880 <test_printn>
  test_println(" bytes/S");
 8007ffa:	4807      	ldr	r0, [pc, #28]	; (8008018 <bmk9_execute+0xa8>)
}
 8007ffc:	b002      	add	sp, #8
 8007ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8008002:	f7fc bc85 	b.w	8004910 <test_println>
 8008006:	bf00      	nop
 8008008:	200019a8 	.word	0x200019a8
 800800c:	200019ec 	.word	0x200019ec
 8008010:	200018fd 	.word	0x200018fd
 8008014:	08009da8 	.word	0x08009da8
 8008018:	08009df0 	.word	0x08009df0
 800801c:	00000000 	.word	0x00000000

08008020 <bmk10_execute>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8008022:	f7fc fd2d 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8008026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800802a:	f7fc fd39 	bl	8004aa0 <test_start_timer>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800802e:	2400      	movs	r4, #0
 8008030:	4f14      	ldr	r7, [pc, #80]	; (8008084 <bmk10_execute+0x64>)

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8008032:	4626      	mov	r6, r4
 8008034:	2520      	movs	r5, #32
 8008036:	f385 8811 	msr	BASEPRI, r5
 800803a:	2300      	movs	r3, #0
 800803c:	4a12      	ldr	r2, [pc, #72]	; (8008088 <bmk10_execute+0x68>)
 800803e:	4813      	ldr	r0, [pc, #76]	; (800808c <bmk10_execute+0x6c>)
 8008040:	2101      	movs	r1, #1
 8008042:	f7f8 fa95 	bl	8000570 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008046:	2300      	movs	r3, #0
 8008048:	4a0f      	ldr	r2, [pc, #60]	; (8008088 <bmk10_execute+0x68>)
 800804a:	4811      	ldr	r0, [pc, #68]	; (8008090 <bmk10_execute+0x70>)
 800804c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008050:	f7f8 fa8e 	bl	8000570 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8008054:	480d      	ldr	r0, [pc, #52]	; (800808c <bmk10_execute+0x6c>)
 8008056:	f7f8 facb 	bl	80005f0 <chVTDoResetI>
    chVTDoResetI(&vt2);
 800805a:	480d      	ldr	r0, [pc, #52]	; (8008090 <bmk10_execute+0x70>)
 800805c:	f7f8 fac8 	bl	80005f0 <chVTDoResetI>
 8008060:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008064:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8008066:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0e4      	beq.n	8008036 <bmk10_execute+0x16>
  test_print("--- Score : ");
 800806c:	4809      	ldr	r0, [pc, #36]	; (8008094 <bmk10_execute+0x74>)
 800806e:	f7fc fc37 	bl	80048e0 <test_print>
  test_printn(n * 2);
 8008072:	0060      	lsls	r0, r4, #1
 8008074:	f7fc fc04 	bl	8004880 <test_printn>
  test_println(" timers/S");
 8008078:	4807      	ldr	r0, [pc, #28]	; (8008098 <bmk10_execute+0x78>)
}
 800807a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 800807e:	f7fc bc47 	b.w	8004910 <test_println>
 8008082:	bf00      	nop
 8008084:	200018fd 	.word	0x200018fd
 8008088:	080077f1 	.word	0x080077f1
 800808c:	200019b8 	.word	0x200019b8
 8008090:	200019cc 	.word	0x200019cc
 8008094:	08009da8 	.word	0x08009da8
 8008098:	08009dfc 	.word	0x08009dfc
 800809c:	00000000 	.word	0x00000000

080080a0 <bmk11_execute>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80080a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80080a2:	f7fc fced 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 80080a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080aa:	f7fc fcf9 	bl	8004aa0 <test_start_timer>
 80080ae:	4d14      	ldr	r5, [pc, #80]	; (8008100 <bmk11_execute+0x60>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80080b0:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80080b2:	4814      	ldr	r0, [pc, #80]	; (8008104 <bmk11_execute+0x64>)
 80080b4:	f7f8 fed4 	bl	8000e60 <chSemWait>
    chSemSignal(&sem1);
 80080b8:	4812      	ldr	r0, [pc, #72]	; (8008104 <bmk11_execute+0x64>)
 80080ba:	f7f8 ff41 	bl	8000f40 <chSemSignal>
    chSemWait(&sem1);
 80080be:	4811      	ldr	r0, [pc, #68]	; (8008104 <bmk11_execute+0x64>)
 80080c0:	f7f8 fece 	bl	8000e60 <chSemWait>
    chSemSignal(&sem1);
 80080c4:	480f      	ldr	r0, [pc, #60]	; (8008104 <bmk11_execute+0x64>)
 80080c6:	f7f8 ff3b 	bl	8000f40 <chSemSignal>
    chSemWait(&sem1);
 80080ca:	480e      	ldr	r0, [pc, #56]	; (8008104 <bmk11_execute+0x64>)
 80080cc:	f7f8 fec8 	bl	8000e60 <chSemWait>
    chSemSignal(&sem1);
 80080d0:	480c      	ldr	r0, [pc, #48]	; (8008104 <bmk11_execute+0x64>)
 80080d2:	f7f8 ff35 	bl	8000f40 <chSemSignal>
    chSemWait(&sem1);
 80080d6:	480b      	ldr	r0, [pc, #44]	; (8008104 <bmk11_execute+0x64>)
 80080d8:	f7f8 fec2 	bl	8000e60 <chSemWait>
    chSemSignal(&sem1);
 80080dc:	4809      	ldr	r0, [pc, #36]	; (8008104 <bmk11_execute+0x64>)
 80080de:	f7f8 ff2f 	bl	8000f40 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80080e2:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80080e4:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0e3      	beq.n	80080b2 <bmk11_execute+0x12>
  test_print("--- Score : ");
 80080ea:	4807      	ldr	r0, [pc, #28]	; (8008108 <bmk11_execute+0x68>)
 80080ec:	f7fc fbf8 	bl	80048e0 <test_print>
  test_printn(n * 4);
 80080f0:	00a0      	lsls	r0, r4, #2
 80080f2:	f7fc fbc5 	bl	8004880 <test_printn>
  test_println(" wait+signal/S");
 80080f6:	4805      	ldr	r0, [pc, #20]	; (800810c <bmk11_execute+0x6c>)
}
 80080f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80080fc:	f7fc bc08 	b.w	8004910 <test_println>
 8008100:	200018fd 	.word	0x200018fd
 8008104:	200019e0 	.word	0x200019e0
 8008108:	08009da8 	.word	0x08009da8
 800810c:	08009e08 	.word	0x08009e08

08008110 <bmk12_execute>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8008110:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008112:	f7fc fcb5 	bl	8004a80 <test_wait_tick>
  test_start_timer(1000);
 8008116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800811a:	f7fc fcc1 	bl	8004aa0 <test_start_timer>
 800811e:	4d14      	ldr	r5, [pc, #80]	; (8008170 <bmk12_execute+0x60>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8008120:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8008122:	4814      	ldr	r0, [pc, #80]	; (8008174 <bmk12_execute+0x64>)
 8008124:	f7f8 fffc 	bl	8001120 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008128:	4812      	ldr	r0, [pc, #72]	; (8008174 <bmk12_execute+0x64>)
 800812a:	f7f9 f821 	bl	8001170 <chMtxUnlock>
    chMtxLock(&mtx1);
 800812e:	4811      	ldr	r0, [pc, #68]	; (8008174 <bmk12_execute+0x64>)
 8008130:	f7f8 fff6 	bl	8001120 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008134:	480f      	ldr	r0, [pc, #60]	; (8008174 <bmk12_execute+0x64>)
 8008136:	f7f9 f81b 	bl	8001170 <chMtxUnlock>
    chMtxLock(&mtx1);
 800813a:	480e      	ldr	r0, [pc, #56]	; (8008174 <bmk12_execute+0x64>)
 800813c:	f7f8 fff0 	bl	8001120 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <bmk12_execute+0x64>)
 8008142:	f7f9 f815 	bl	8001170 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008146:	480b      	ldr	r0, [pc, #44]	; (8008174 <bmk12_execute+0x64>)
 8008148:	f7f8 ffea 	bl	8001120 <chMtxLock>
    chMtxUnlock(&mtx1);
 800814c:	4809      	ldr	r0, [pc, #36]	; (8008174 <bmk12_execute+0x64>)
 800814e:	f7f9 f80f 	bl	8001170 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008152:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8008154:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0e3      	beq.n	8008122 <bmk12_execute+0x12>
  test_print("--- Score : ");
 800815a:	4807      	ldr	r0, [pc, #28]	; (8008178 <bmk12_execute+0x68>)
 800815c:	f7fc fbc0 	bl	80048e0 <test_print>
  test_printn(n * 4);
 8008160:	00a0      	lsls	r0, r4, #2
 8008162:	f7fc fb8d 	bl	8004880 <test_printn>
  test_println(" lock+unlock/S");
 8008166:	4805      	ldr	r0, [pc, #20]	; (800817c <bmk12_execute+0x6c>)
}
 8008168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 800816c:	f7fc bbd0 	b.w	8004910 <test_println>
 8008170:	200018fd 	.word	0x200018fd
 8008174:	20001998 	.word	0x20001998
 8008178:	08009da8 	.word	0x08009da8
 800817c:	08009e18 	.word	0x08009e18

08008180 <bmk12_setup>:
 * a second of continuous operations.
 */

static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <bmk12_setup+0x8>)
 8008182:	f7f8 bf5d 	b.w	8001040 <chMtxObjectInit>
 8008186:	bf00      	nop
 8008188:	20001998 	.word	0x20001998
 800818c:	00000000 	.word	0x00000000

08008190 <lis302dlReadRegister>:
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
 8008192:	4c0b      	ldr	r4, [pc, #44]	; (80081c0 <lis302dlReadRegister+0x30>)
  txbuf[1] = 0xff;
  spiExchange(spip, 2, txbuf, rxbuf);
 8008194:	4e0b      	ldr	r6, [pc, #44]	; (80081c4 <lis302dlReadRegister+0x34>)
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {
 8008196:	460d      	mov	r5, r1
 8008198:	4607      	mov	r7, r0

  spiSelect(spip);
 800819a:	f7fa fa09 	bl	80025b0 <spiSelect>
  txbuf[0] = 0x80 | reg;
 800819e:	f065 017f 	orn	r1, r5, #127	; 0x7f
  txbuf[1] = 0xff;
  spiExchange(spip, 2, txbuf, rxbuf);
 80081a2:	4622      	mov	r2, r4
 80081a4:	4638      	mov	r0, r7
 80081a6:	4633      	mov	r3, r6
 * @return              The register value.
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
 80081a8:	7021      	strb	r1, [r4, #0]
  txbuf[1] = 0xff;
 80081aa:	25ff      	movs	r5, #255	; 0xff
  spiExchange(spip, 2, txbuf, rxbuf);
 80081ac:	2102      	movs	r1, #2
 */
uint8_t lis302dlReadRegister(SPIDriver *spip, uint8_t reg) {

  spiSelect(spip);
  txbuf[0] = 0x80 | reg;
  txbuf[1] = 0xff;
 80081ae:	7065      	strb	r5, [r4, #1]
  spiExchange(spip, 2, txbuf, rxbuf);
 80081b0:	f7fa fa1e 	bl	80025f0 <spiExchange>
  spiUnselect(spip);
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7fa fa0b 	bl	80025d0 <spiUnselect>
  return rxbuf[1];
}
 80081ba:	7870      	ldrb	r0, [r6, #1]
 80081bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081be:	bf00      	nop
 80081c0:	20001a14 	.word	0x20001a14
 80081c4:	20001a10 	.word	0x20001a10
	...

080081d0 <lis302dlWriteRegister>:
 *
 * @param[in] spip      pointer to the SPI initerface
 * @param[in] reg       register number
 * @param[in] value     the value to be written
 */
void lis302dlWriteRegister(SPIDriver *spip, uint8_t reg, uint8_t value) {
 80081d0:	f1a1 0320 	sub.w	r3, r1, #32
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b1f      	cmp	r3, #31
 80081d8:	d807      	bhi.n	80081ea <lis302dlWriteRegister+0x1a>
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	2501      	movs	r5, #1
 80081de:	4c0c      	ldr	r4, [pc, #48]	; (8008210 <lis302dlWriteRegister+0x40>)
 80081e0:	fa05 f303 	lsl.w	r3, r5, r3
 80081e4:	401c      	ands	r4, r3
 80081e6:	b90c      	cbnz	r4, 80081ec <lis302dlWriteRegister+0x1c>
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	4770      	bx	lr
 80081ec:	4606      	mov	r6, r0
 80081ee:	4615      	mov	r5, r2
 80081f0:	460c      	mov	r4, r1
  case LIS302DL_CLICK_THSY_X:
  case LIS302DL_CLICK_THSZ:
  case LIS302DL_CLICK_TIMELIMIT:
  case LIS302DL_CLICK_LATENCY:
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
 80081f2:	f7fa f9dd 	bl	80025b0 <spiSelect>
    txbuf[0] = reg;
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <lis302dlWriteRegister+0x44>)
    txbuf[1] = value;
    spiSend(spip, 2, txbuf);
 80081f8:	4630      	mov	r0, r6
 80081fa:	2102      	movs	r1, #2
 80081fc:	461a      	mov	r2, r3
  case LIS302DL_CLICK_THSZ:
  case LIS302DL_CLICK_TIMELIMIT:
  case LIS302DL_CLICK_LATENCY:
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
    txbuf[0] = reg;
 80081fe:	701c      	strb	r4, [r3, #0]
    txbuf[1] = value;
 8008200:	705d      	strb	r5, [r3, #1]
    spiSend(spip, 2, txbuf);
 8008202:	f7fa fa0d 	bl	8002620 <spiSend>
    spiUnselect(spip);
 8008206:	4630      	mov	r0, r6
  }
}
 8008208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case LIS302DL_CLICK_WINDOW:
    spiSelect(spip);
    txbuf[0] = reg;
    txbuf[1] = value;
    spiSend(spip, 2, txbuf);
    spiUnselect(spip);
 800820c:	f7fa b9e0 	b.w	80025d0 <spiUnselect>
 8008210:	f9dd0007 	.word	0xf9dd0007
 8008214:	20001a14 	.word	0x20001a14
	...

08008220 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	b500      	push	{lr}
 8008224:	b082      	sub	sp, #8
 8008226:	aa03      	add	r2, sp, #12
 8008228:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800822c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800822e:	f000 fa07 	bl	8008640 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008232:	b002      	add	sp, #8
 8008234:	f85d eb04 	ldr.w	lr, [sp], #4
 8008238:	b003      	add	sp, #12
 800823a:	4770      	bx	lr
 800823c:	0000      	movs	r0, r0
	...

08008240 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8008240:	2900      	cmp	r1, #0
 8008242:	dd03      	ble.n	800824c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008244:	4a07      	ldr	r2, [pc, #28]	; (8008264 <cmd_systime+0x24>)
 8008246:	4908      	ldr	r1, [pc, #32]	; (8008268 <cmd_systime+0x28>)
 8008248:	f7ff bfea 	b.w	8008220 <chprintf>
 800824c:	2320      	movs	r3, #32
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008256:	2300      	movs	r3, #0
 8008258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800825a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 800825e:	4903      	ldr	r1, [pc, #12]	; (800826c <cmd_systime+0x2c>)
 8008260:	f7ff bfde 	b.w	8008220 <chprintf>
 8008264:	0800a030 	.word	0x0800a030
 8008268:	0800a038 	.word	0x0800a038
 800826c:	0800a044 	.word	0x0800a044

08008270 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8008270:	2900      	cmp	r1, #0
 8008272:	dd03      	ble.n	800827c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008274:	4a19      	ldr	r2, [pc, #100]	; (80082dc <cmd_info+0x6c>)
 8008276:	491a      	ldr	r1, [pc, #104]	; (80082e0 <cmd_info+0x70>)
 8008278:	f7ff bfd2 	b.w	8008220 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800827c:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 800827e:	4a19      	ldr	r2, [pc, #100]	; (80082e4 <cmd_info+0x74>)
 8008280:	4919      	ldr	r1, [pc, #100]	; (80082e8 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008282:	b082      	sub	sp, #8
 8008284:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8008286:	f7ff ffcb 	bl	8008220 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800828a:	4a18      	ldr	r2, [pc, #96]	; (80082ec <cmd_info+0x7c>)
 800828c:	4918      	ldr	r1, [pc, #96]	; (80082f0 <cmd_info+0x80>)
 800828e:	4620      	mov	r0, r4
 8008290:	f7ff ffc6 	bl	8008220 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <cmd_info+0x84>)
 8008296:	4918      	ldr	r1, [pc, #96]	; (80082f8 <cmd_info+0x88>)
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff ffc1 	bl	8008220 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800829e:	4a17      	ldr	r2, [pc, #92]	; (80082fc <cmd_info+0x8c>)
 80082a0:	4917      	ldr	r1, [pc, #92]	; (8008300 <cmd_info+0x90>)
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7ff ffbc 	bl	8008220 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 80082a8:	4a16      	ldr	r2, [pc, #88]	; (8008304 <cmd_info+0x94>)
 80082aa:	4917      	ldr	r1, [pc, #92]	; (8008308 <cmd_info+0x98>)
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff ffb7 	bl	8008220 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80082b2:	4a16      	ldr	r2, [pc, #88]	; (800830c <cmd_info+0x9c>)
 80082b4:	4916      	ldr	r1, [pc, #88]	; (8008310 <cmd_info+0xa0>)
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff ffb2 	bl	8008220 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80082bc:	4a15      	ldr	r2, [pc, #84]	; (8008314 <cmd_info+0xa4>)
 80082be:	4916      	ldr	r1, [pc, #88]	; (8008318 <cmd_info+0xa8>)
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7ff ffad 	bl	8008220 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 80082c6:	4b15      	ldr	r3, [pc, #84]	; (800831c <cmd_info+0xac>)
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4620      	mov	r0, r4
 80082cc:	4b14      	ldr	r3, [pc, #80]	; (8008320 <cmd_info+0xb0>)
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <cmd_info+0xb4>)
 80082d0:	4915      	ldr	r1, [pc, #84]	; (8008328 <cmd_info+0xb8>)
 80082d2:	f7ff ffa5 	bl	8008220 <chprintf>
#endif
#endif
}
 80082d6:	b002      	add	sp, #8
 80082d8:	bd10      	pop	{r4, pc}
 80082da:	bf00      	nop
 80082dc:	0800a04c 	.word	0x0800a04c
 80082e0:	0800a038 	.word	0x0800a038
 80082e4:	08009524 	.word	0x08009524
 80082e8:	0800a054 	.word	0x0800a054
 80082ec:	08009544 	.word	0x08009544
 80082f0:	0800a068 	.word	0x0800a068
 80082f4:	0800958c 	.word	0x0800958c
 80082f8:	0800a07c 	.word	0x0800a07c
 80082fc:	08009598 	.word	0x08009598
 8008300:	0800a090 	.word	0x0800a090
 8008304:	080095a4 	.word	0x080095a4
 8008308:	0800a0a4 	.word	0x0800a0a4
 800830c:	080095bc 	.word	0x080095bc
 8008310:	0800a0b8 	.word	0x0800a0b8
 8008314:	080095e8 	.word	0x080095e8
 8008318:	0800a0cc 	.word	0x0800a0cc
 800831c:	0800a108 	.word	0x0800a108
 8008320:	0800a0e0 	.word	0x0800a0e0
 8008324:	0800a0e4 	.word	0x0800a0e4
 8008328:	0800a0f0 	.word	0x0800a0f0
 800832c:	00000000 	.word	0x00000000

08008330 <_strtok.constprop.2>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	460d      	mov	r5, r1
  char *token;
  if (str)
 8008334:	b198      	cbz	r0, 800835e <_strtok.constprop.2+0x2e>
 8008336:	4604      	mov	r4, r0
    *saveptr = str;
 8008338:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800833a:	490c      	ldr	r1, [pc, #48]	; (800836c <_strtok.constprop.2+0x3c>)
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fdff 	bl	8008f40 <strspn>
 8008342:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8008344:	4620      	mov	r0, r4
 8008346:	4909      	ldr	r1, [pc, #36]	; (800836c <_strtok.constprop.2+0x3c>)
 8008348:	f000 fdd2 	bl	8008ef0 <strpbrk>
  if (*saveptr)
 800834c:	b160      	cbz	r0, 8008368 <_strtok.constprop.2+0x38>
    *(*saveptr)++ = '\0';
 800834e:	1c42      	adds	r2, r0, #1
 8008350:	2300      	movs	r3, #0
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8008356:	7823      	ldrb	r3, [r4, #0]
 8008358:	b123      	cbz	r3, 8008364 <_strtok.constprop.2+0x34>
 800835a:	4620      	mov	r0, r4
}
 800835c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800835e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8008360:	2c00      	cmp	r4, #0
 8008362:	d1ea      	bne.n	800833a <_strtok.constprop.2+0xa>
    return NULL;
 8008364:	2000      	movs	r0, #0
 8008366:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8008368:	6028      	str	r0, [r5, #0]
 800836a:	e7f4      	b.n	8008356 <_strtok.constprop.2+0x26>
 800836c:	0800a114 	.word	0x0800a114

08008370 <shellInit>:
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8008370:	4b01      	ldr	r3, [pc, #4]	; (8008378 <shellInit+0x8>)
 8008372:	601b      	str	r3, [r3, #0]
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20001a18 	.word	0x20001a18
 800837c:	00000000 	.word	0x00000000

08008380 <shellCreate>:
 * @retval NULL         thread creation failed because memory allocation.
 *
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {
 8008380:	b500      	push	{lr}
 8008382:	b083      	sub	sp, #12

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8008384:	4b03      	ldr	r3, [pc, #12]	; (8008394 <shellCreate+0x14>)
 8008386:	9000      	str	r0, [sp, #0]
 8008388:	2000      	movs	r0, #0
 800838a:	f7f8 fcc9 	bl	8000d20 <chThdCreateFromHeap>
}
 800838e:	b003      	add	sp, #12
 8008390:	f85d fb04 	ldr.w	pc, [sp], #4
 8008394:	08008441 	.word	0x08008441
	...

080083a0 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80083a2:	3a01      	subs	r2, #1
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80083a4:	b083      	sub	sp, #12
 80083a6:	460e      	mov	r6, r1
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80083a8:	188f      	adds	r7, r1, r2
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
  char *p = line;

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	2201      	movs	r2, #1
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f10d 0107 	add.w	r1, sp, #7
 80083b8:	4620      	mov	r0, r4
 80083ba:	4798      	blx	r3
 80083bc:	b348      	cbz	r0, 8008412 <shellGetLine+0x72>
      return true;
    if (c == 4) {
 80083be:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80083c2:	2904      	cmp	r1, #4
 80083c4:	d028      	beq.n	8008418 <shellGetLine+0x78>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 80083c6:	2908      	cmp	r1, #8
 80083c8:	d010      	beq.n	80083ec <shellGetLine+0x4c>
 80083ca:	297f      	cmp	r1, #127	; 0x7f
 80083cc:	d00e      	beq.n	80083ec <shellGetLine+0x4c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80083ce:	290d      	cmp	r1, #13
 80083d0:	d029      	beq.n	8008426 <shellGetLine+0x86>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 80083d2:	291f      	cmp	r1, #31
 80083d4:	d9eb      	bls.n	80083ae <shellGetLine+0xe>
      continue;
    if (p < line + size - 1) {
 80083d6:	42bd      	cmp	r5, r7
 80083d8:	d2e9      	bcs.n	80083ae <shellGetLine+0xe>
      chSequentialStreamPut(chp, c);
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	4620      	mov	r0, r4
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4798      	blx	r3
      *p++ = (char)c;
 80083e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083e6:	702b      	strb	r3, [r5, #0]
 80083e8:	3501      	adds	r5, #1
 80083ea:	e7e0      	b.n	80083ae <shellGetLine+0xe>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80083ec:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, c);
 80083ee:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80083f0:	d0dd      	beq.n	80083ae <shellGetLine+0xe>
        chSequentialStreamPut(chp, c);
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	2120      	movs	r1, #32
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	4620      	mov	r0, r4
 8008400:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	4620      	mov	r0, r4
        p--;
 800840c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800840e:	4798      	blx	r3
 8008410:	e7cd      	b.n	80083ae <shellGetLine+0xe>

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
 8008412:	2001      	movs	r0, #1
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8008414:	b003      	add	sp, #12
 8008416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8008418:	4620      	mov	r0, r4
 800841a:	4907      	ldr	r1, [pc, #28]	; (8008438 <shellGetLine+0x98>)
 800841c:	f7ff ff00 	bl	8008220 <chprintf>
      return true;
 8008420:	2001      	movs	r0, #1
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8008422:	b003      	add	sp, #12
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8008426:	4620      	mov	r0, r4
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <shellGetLine+0x9c>)
 800842a:	f7ff fef9 	bl	8008220 <chprintf>
      *p = 0;
 800842e:	2000      	movs	r0, #0
 8008430:	7028      	strb	r0, [r5, #0]
    if (p < line + size - 1) {
      chSequentialStreamPut(chp, c);
      *p++ = (char)c;
    }
  }
}
 8008432:	b003      	add	sp, #12
 8008434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008436:	bf00      	nop
 8008438:	0800a118 	.word	0x0800a118
 800843c:	0800a0dc 	.word	0x0800a0dc

08008440 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8008444:	4b5a      	ldr	r3, [pc, #360]	; (80085b0 <shell_thread+0x170>)
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8008446:	6806      	ldr	r6, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	4a5a      	ldr	r2, [pc, #360]	; (80085b4 <shell_thread+0x174>)
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800844c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8008450:	4959      	ldr	r1, [pc, #356]	; (80085b8 <shell_thread+0x178>)
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8008452:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8008454:	b096      	sub	sp, #88	; 0x58
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff fee2 	bl	8008220 <chprintf>
  while (true) {
    chprintf(chp, "ch> ");
 800845c:	4957      	ldr	r1, [pc, #348]	; (80085bc <shell_thread+0x17c>)
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff fede 	bl	8008220 <chprintf>
    if (shellGetLine(chp, line, sizeof(line))) {
 8008464:	2240      	movs	r2, #64	; 0x40
 8008466:	a906      	add	r1, sp, #24
 8008468:	4630      	mov	r0, r6
 800846a:	f7ff ff99 	bl	80083a0 <shellGetLine>
 800846e:	4604      	mov	r4, r0
 8008470:	bb78      	cbnz	r0, 80084d2 <shell_thread+0x92>
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8008472:	4669      	mov	r1, sp
 8008474:	a806      	add	r0, sp, #24
 8008476:	f7ff ff5b 	bl	8008330 <_strtok.constprop.2>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800847a:	4669      	mov	r1, sp
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800847c:	4607      	mov	r7, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800847e:	2000      	movs	r0, #0
 8008480:	ad01      	add	r5, sp, #4
 8008482:	f7ff ff55 	bl	8008330 <_strtok.constprop.2>
 8008486:	b150      	cbz	r0, 800849e <shell_thread+0x5e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8008488:	2c04      	cmp	r4, #4
 800848a:	d01b      	beq.n	80084c4 <shell_thread+0x84>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800848c:	f845 0b04 	str.w	r0, [r5], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8008490:	4669      	mov	r1, sp
 8008492:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8008494:	3401      	adds	r4, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8008496:	f7ff ff4b 	bl	8008330 <_strtok.constprop.2>
 800849a:	2800      	cmp	r0, #0
 800849c:	d1f4      	bne.n	8008488 <shell_thread+0x48>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800849e:	ab16      	add	r3, sp, #88	; 0x58
 80084a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084a4:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	d0d7      	beq.n	800845c <shell_thread+0x1c>
      if (strcasecmp(cmd, "exit") == 0) {
 80084ac:	4944      	ldr	r1, [pc, #272]	; (80085c0 <shell_thread+0x180>)
 80084ae:	4638      	mov	r0, r7
 80084b0:	f000 fcf6 	bl	8008ea0 <strcasecmp>
 80084b4:	b9f0      	cbnz	r0, 80084f4 <shell_thread+0xb4>
        if (n > 0) {
 80084b6:	b184      	cbz	r4, 80084da <shell_thread+0x9a>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80084b8:	4a41      	ldr	r2, [pc, #260]	; (80085c0 <shell_thread+0x180>)
 80084ba:	4942      	ldr	r1, [pc, #264]	; (80085c4 <shell_thread+0x184>)
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff feaf 	bl	8008220 <chprintf>
    args[n] = NULL;
    if (cmd != NULL) {
      if (strcasecmp(cmd, "exit") == 0) {
        if (n > 0) {
          usage(chp, "exit");
          continue;
 80084c2:	e7cb      	b.n	800845c <shell_thread+0x1c>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80084c4:	4940      	ldr	r1, [pc, #256]	; (80085c8 <shell_thread+0x188>)
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff feaa 	bl	8008220 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	9305      	str	r3, [sp, #20]
 80084d0:	e7c4      	b.n	800845c <shell_thread+0x1c>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80084d2:	4630      	mov	r0, r6
 80084d4:	493d      	ldr	r1, [pc, #244]	; (80085cc <shell_thread+0x18c>)
 80084d6:	f7ff fea3 	bl	8008220 <chprintf>
 80084da:	2320      	movs	r3, #32
 80084dc:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80084e0:	2100      	movs	r1, #0
 80084e2:	483b      	ldr	r0, [pc, #236]	; (80085d0 <shell_thread+0x190>)
 80084e4:	f7f8 fff4 	bl	80014d0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 80084e8:	2000      	movs	r0, #0
 80084ea:	f7f8 fae9 	bl	8000ac0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 80084ee:	b016      	add	sp, #88	; 0x58
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 80084f4:	4937      	ldr	r1, [pc, #220]	; (80085d4 <shell_thread+0x194>)
 80084f6:	4638      	mov	r0, r7
 80084f8:	f000 fcd2 	bl	8008ea0 <strcasecmp>
 80084fc:	b930      	cbnz	r0, 800850c <shell_thread+0xcc>
        if (n > 0) {
 80084fe:	b1bc      	cbz	r4, 8008530 <shell_thread+0xf0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008500:	4a34      	ldr	r2, [pc, #208]	; (80085d4 <shell_thread+0x194>)
 8008502:	4930      	ldr	r1, [pc, #192]	; (80085c4 <shell_thread+0x184>)
 8008504:	4630      	mov	r0, r6
 8008506:	f7ff fe8b 	bl	8008220 <chprintf>
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
 800850a:	e7a7      	b.n	800845c <shell_thread+0x1c>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800850c:	4d32      	ldr	r5, [pc, #200]	; (80085d8 <shell_thread+0x198>)
 800850e:	6828      	ldr	r0, [r5, #0]
 8008510:	b918      	cbnz	r0, 800851a <shell_thread+0xda>
 8008512:	e031      	b.n	8008578 <shell_thread+0x138>
 8008514:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8008518:	b370      	cbz	r0, 8008578 <shell_thread+0x138>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800851a:	4639      	mov	r1, r7
 800851c:	f000 fcc0 	bl	8008ea0 <strcasecmp>
 8008520:	2800      	cmp	r0, #0
 8008522:	d1f7      	bne.n	8008514 <shell_thread+0xd4>
      scp->sc_function(chp, argc, argv);
 8008524:	686b      	ldr	r3, [r5, #4]
 8008526:	aa01      	add	r2, sp, #4
 8008528:	4621      	mov	r1, r4
 800852a:	4630      	mov	r0, r6
 800852c:	4798      	blx	r3
 800852e:	e795      	b.n	800845c <shell_thread+0x1c>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8008530:	4d29      	ldr	r5, [pc, #164]	; (80085d8 <shell_thread+0x198>)
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8008532:	492a      	ldr	r1, [pc, #168]	; (80085dc <shell_thread+0x19c>)
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff fe73 	bl	8008220 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 800853a:	682a      	ldr	r2, [r5, #0]
 800853c:	462c      	mov	r4, r5
 800853e:	b13a      	cbz	r2, 8008550 <shell_thread+0x110>
    chprintf(chp, "%s ", scp->sc_name);
 8008540:	4927      	ldr	r1, [pc, #156]	; (80085e0 <shell_thread+0x1a0>)
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff fe6c 	bl	8008220 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8008548:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800854c:	2a00      	cmp	r2, #0
 800854e:	d1f7      	bne.n	8008540 <shell_thread+0x100>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8008550:	f1b8 0f00 	cmp.w	r8, #0
 8008554:	d00b      	beq.n	800856e <shell_thread+0x12e>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8008556:	f8d8 2000 	ldr.w	r2, [r8]
 800855a:	b142      	cbz	r2, 800856e <shell_thread+0x12e>
 800855c:	4644      	mov	r4, r8
    chprintf(chp, "%s ", scp->sc_name);
 800855e:	4920      	ldr	r1, [pc, #128]	; (80085e0 <shell_thread+0x1a0>)
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff fe5d 	bl	8008220 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8008566:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800856a:	2a00      	cmp	r2, #0
 800856c:	d1f7      	bne.n	800855e <shell_thread+0x11e>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800856e:	491d      	ldr	r1, [pc, #116]	; (80085e4 <shell_thread+0x1a4>)
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff fe55 	bl	8008220 <chprintf>
 8008576:	e771      	b.n	800845c <shell_thread+0x1c>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8008578:	f1b8 0f00 	cmp.w	r8, #0
 800857c:	d00d      	beq.n	800859a <shell_thread+0x15a>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800857e:	f8d8 0000 	ldr.w	r0, [r8]
 8008582:	b150      	cbz	r0, 800859a <shell_thread+0x15a>
 8008584:	4645      	mov	r5, r8
 8008586:	e002      	b.n	800858e <shell_thread+0x14e>
 8008588:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800858c:	b128      	cbz	r0, 800859a <shell_thread+0x15a>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800858e:	4639      	mov	r1, r7
 8008590:	f000 fc86 	bl	8008ea0 <strcasecmp>
 8008594:	2800      	cmp	r0, #0
 8008596:	d1f7      	bne.n	8008588 <shell_thread+0x148>
 8008598:	e7c4      	b.n	8008524 <shell_thread+0xe4>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 800859a:	463a      	mov	r2, r7
 800859c:	4912      	ldr	r1, [pc, #72]	; (80085e8 <shell_thread+0x1a8>)
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff fe3e 	bl	8008220 <chprintf>
        chprintf(chp, " ?\r\n");
 80085a4:	4911      	ldr	r1, [pc, #68]	; (80085ec <shell_thread+0x1ac>)
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff fe3a 	bl	8008220 <chprintf>
 80085ac:	e756      	b.n	800845c <shell_thread+0x1c>
 80085ae:	bf00      	nop
 80085b0:	20000d70 	.word	0x20000d70
 80085b4:	0800a11c 	.word	0x0800a11c
 80085b8:	0800a124 	.word	0x0800a124
 80085bc:	0800a13c 	.word	0x0800a13c
 80085c0:	0800a168 	.word	0x0800a168
 80085c4:	0800a038 	.word	0x0800a038
 80085c8:	0800a150 	.word	0x0800a150
 80085cc:	0800a144 	.word	0x0800a144
 80085d0:	20001a18 	.word	0x20001a18
 80085d4:	0800a170 	.word	0x0800a170
 80085d8:	200008c0 	.word	0x200008c0
 80085dc:	0800a178 	.word	0x0800a178
 80085e0:	0800a190 	.word	0x0800a190
 80085e4:	0800a0dc 	.word	0x0800a0dc
 80085e8:	0800a194 	.word	0x0800a194
 80085ec:	0800a198 	.word	0x0800a198

080085f0 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 80085f0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80085f2:	f100 070b 	add.w	r7, r0, #11
 80085f6:	463c      	mov	r4, r7
 80085f8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 80085fa:	fbb1 f6f2 	udiv	r6, r1, r2
 80085fe:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8008602:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8008606:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8008608:	bfc8      	it	gt
 800860a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8008614:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8008618:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800861a:	2d00      	cmp	r5, #0
 800861c:	d1ed      	bne.n	80085fa <ch_ltoa+0xa>
 800861e:	1b3a      	subs	r2, r7, r4
 8008620:	4402      	add	r2, r0
 8008622:	e001      	b.n	8008628 <ch_ltoa+0x38>
 8008624:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8008628:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800862c:	4290      	cmp	r0, r2
 800862e:	d1f9      	bne.n	8008624 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 8008630:	bcf0      	pop	{r4, r5, r6, r7}
 8008632:	4770      	bx	lr
	...

08008640 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	b087      	sub	sp, #28
 8008646:	4617      	mov	r7, r2
 8008648:	f10d 030d 	add.w	r3, sp, #13
 800864c:	aa03      	add	r2, sp, #12
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	4606      	mov	r6, r0
 8008652:	460d      	mov	r5, r1
 8008654:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8008656:	f04f 0a00 	mov.w	sl, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800865a:	7829      	ldrb	r1, [r5, #0]
 800865c:	1c6a      	adds	r2, r5, #1
    if (c == 0)
 800865e:	b161      	cbz	r1, 800867a <chvprintf+0x3a>
      return n;
    if (c != '%') {
 8008660:	2925      	cmp	r1, #37	; 0x25
 8008662:	d00e      	beq.n	8008682 <chvprintf+0x42>
      chSequentialStreamPut(chp, (uint8_t)c);
 8008664:	6833      	ldr	r3, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8008666:	4615      	mov	r5, r2
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4630      	mov	r0, r6
 800866c:	4798      	blx	r3
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800866e:	7829      	ldrb	r1, [r5, #0]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8008670:	f10a 0a01 	add.w	sl, sl, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8008674:	1c6a      	adds	r2, r5, #1
    if (c == 0)
 8008676:	2900      	cmp	r1, #0
 8008678:	d1f2      	bne.n	8008660 <chvprintf+0x20>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800867a:	4650      	mov	r0, sl
 800867c:	b007      	add	sp, #28
 800867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8008682:	7869      	ldrb	r1, [r5, #1]
 8008684:	292d      	cmp	r1, #45	; 0x2d
 8008686:	bf03      	ittte	eq
 8008688:	78a9      	ldrbeq	r1, [r5, #2]
      fmt++;
 800868a:	1caa      	addeq	r2, r5, #2
      left_align = TRUE;
 800868c:	f04f 0b01 	moveq.w	fp, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8008690:	f04f 0b00 	movne.w	fp, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8008694:	2930      	cmp	r1, #48	; 0x30
 8008696:	bf03      	ittte	eq
 8008698:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 800869a:	3201      	addeq	r2, #1
      filler = '0';
 800869c:	f04f 0830 	moveq.w	r8, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80086a0:	f04f 0820 	movne.w	r8, #32
 80086a4:	1c50      	adds	r0, r2, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 80086a6:	f04f 0900 	mov.w	r9, #0
 80086aa:	e005      	b.n	80086b8 <chvprintf+0x78>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 80086ac:	783b      	ldrb	r3, [r7, #0]
 80086ae:	3704      	adds	r7, #4
 80086b0:	7829      	ldrb	r1, [r5, #0]
      else
        break;
      width = width * 10 + c;
 80086b2:	eb03 0942 	add.w	r9, r3, r2, lsl #1
 80086b6:	3001      	adds	r0, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80086b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 80086c0:	4605      	mov	r5, r0
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 80086c2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80086c6:	d9f3      	bls.n	80086b0 <chvprintf+0x70>
        c -= '0';
      else if (c == '*')
 80086c8:	292a      	cmp	r1, #42	; 0x2a
 80086ca:	d0ef      	beq.n	80086ac <chvprintf+0x6c>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80086cc:	292e      	cmp	r1, #46	; 0x2e
 80086ce:	f04f 0000 	mov.w	r0, #0
 80086d2:	d043      	beq.n	800875c <chvprintf+0x11c>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80086d4:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 80086d8:	2a4c      	cmp	r2, #76	; 0x4c
 80086da:	d04e      	beq.n	800877a <chvprintf+0x13a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80086dc:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
 80086e0:	2a34      	cmp	r2, #52	; 0x34
 80086e2:	f200 80f9 	bhi.w	80088d8 <chvprintf+0x298>
 80086e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80086ea:	00ee      	.short	0x00ee
 80086ec:	00f700f7 	.word	0x00f700f7
 80086f0:	00f700f7 	.word	0x00f700f7
 80086f4:	00f700ee 	.word	0x00f700ee
 80086f8:	00f700f7 	.word	0x00f700f7
 80086fc:	00f700f7 	.word	0x00f700f7
 8008700:	00f700ec 	.word	0x00f700ec
 8008704:	00f700f7 	.word	0x00f700f7
 8008708:	00f700f7 	.word	0x00f700f7
 800870c:	00f700b9 	.word	0x00f700b9
 8008710:	006f00f7 	.word	0x006f00f7
 8008714:	00f700f7 	.word	0x00f700f7
 8008718:	00f700f7 	.word	0x00f700f7
 800871c:	00f700f7 	.word	0x00f700f7
 8008720:	00f700f7 	.word	0x00f700f7
 8008724:	00f700f7 	.word	0x00f700f7
 8008728:	00ee00e0 	.word	0x00ee00e0
 800872c:	00f700f7 	.word	0x00f700f7
 8008730:	00f700f7 	.word	0x00f700f7
 8008734:	00f700ee 	.word	0x00f700ee
 8008738:	00f700f7 	.word	0x00f700f7
 800873c:	00f700f7 	.word	0x00f700f7
 8008740:	00f700ec 	.word	0x00f700ec
 8008744:	00f700f7 	.word	0x00f700f7
 8008748:	00f700bb 	.word	0x00f700bb
 800874c:	00f700b9 	.word	0x00f700b9
 8008750:	006f00f7 	.word	0x006f00f7
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8008754:	783b      	ldrb	r3, [r7, #0]
 8008756:	3704      	adds	r7, #4
        else
          break;
        precision *= 10;
        precision += c;
 8008758:	eb03 0042 	add.w	r0, r3, r2, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800875c:	f815 1b01 	ldrb.w	r1, [r5], #1
        if (c >= '0' && c <= '9')
 8008760:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8008768:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800876c:	d9f4      	bls.n	8008758 <chvprintf+0x118>
          c -= '0';
        else if (c == '*')
 800876e:	292a      	cmp	r1, #42	; 0x2a
 8008770:	d0f0      	beq.n	8008754 <chvprintf+0x114>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8008772:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8008776:	2a4c      	cmp	r2, #76	; 0x4c
 8008778:	d1b0      	bne.n	80086dc <chvprintf+0x9c>
      is_long = TRUE;
      if (*fmt)
 800877a:	782c      	ldrb	r4, [r5, #0]
 800877c:	2c00      	cmp	r4, #0
 800877e:	f000 80ab 	beq.w	80088d8 <chvprintf+0x298>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8008782:	f1a4 0244 	sub.w	r2, r4, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8008786:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8008788:	2a34      	cmp	r2, #52	; 0x34
 800878a:	f200 80a4 	bhi.w	80088d6 <chvprintf+0x296>
 800878e:	e8df f002 	tbb	[pc, r2]
 8008792:	a29a      	.short	0xa29a
 8008794:	9aa2a2a2 	.word	0x9aa2a2a2
 8008798:	a2a2a2a2 	.word	0xa2a2a2a2
 800879c:	a2a298a2 	.word	0xa2a298a2
 80087a0:	65a2a2a2 	.word	0x65a2a2a2
 80087a4:	a21ba2a2 	.word	0xa21ba2a2
 80087a8:	a2a2a2a2 	.word	0xa2a2a2a2
 80087ac:	a2a2a2a2 	.word	0xa2a2a2a2
 80087b0:	a29a8ca2 	.word	0xa29a8ca2
 80087b4:	9aa2a2a2 	.word	0x9aa2a2a2
 80087b8:	a2a2a2a2 	.word	0xa2a2a2a2
 80087bc:	a2a298a2 	.word	0xa2a298a2
 80087c0:	65a267a2 	.word	0x65a267a2
 80087c4:	a2a2      	.short	0xa2a2
 80087c6:	1b          	.byte	0x1b
 80087c7:	00          	.byte	0x00
 80087c8:	2210      	movs	r2, #16
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80087ca:	6839      	ldr	r1, [r7, #0]
      p = ch_ltoa(p, l, c);
 80087cc:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80087ce:	3704      	adds	r7, #4
      p = ch_ltoa(p, l, c);
 80087d0:	f7ff ff0e 	bl	80085f0 <ch_ltoa>
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	1ac0      	subs	r0, r0, r3
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80087dc:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80087de:	ebc0 0909 	rsb	r9, r0, r9
 80087e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      width = 0;
    if (left_align == FALSE)
 80087e6:	f1bb 0f00 	cmp.w	fp, #0
 80087ea:	d15a      	bne.n	80088a2 <chvprintf+0x262>
      width = -width;
 80087ec:	f1c9 0b00 	rsb	fp, r9, #0
    if (width < 0) {
 80087f0:	f1bb 0f00 	cmp.w	fp, #0
 80087f4:	d078      	beq.n	80088e8 <chvprintf+0x2a8>
      if (*s == '-' && filler == '0') {
 80087f6:	7821      	ldrb	r1, [r4, #0]
 80087f8:	292d      	cmp	r1, #45	; 0x2d
 80087fa:	f000 8088 	beq.w	800890e <chvprintf+0x2ce>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80087fe:	6833      	ldr	r3, [r6, #0]
 8008800:	4641      	mov	r1, r8
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4630      	mov	r0, r6
 8008806:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8008808:	f11b 0b01 	adds.w	fp, fp, #1
 800880c:	d1f7      	bne.n	80087fe <chvprintf+0x1be>
    }
    while (--i >= 0) {
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	44ca      	add	sl, r9
 8008814:	f6ff af21 	blt.w	800865a <chvprintf+0x1a>
 8008818:	46d9      	mov	r9, fp
 800881a:	f8dd b000 	ldr.w	fp, [sp]
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800881e:	6833      	ldr	r3, [r6, #0]
 8008820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008824:	689b      	ldr	r3, [r3, #8]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8008826:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800882a:	4630      	mov	r0, r6
 800882c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800882e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8008832:	d1f4      	bne.n	800881e <chvprintf+0x1de>
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	f10a 0a01 	add.w	sl, sl, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfa8      	it	ge
 800883e:	449a      	addge	sl, r3
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8008840:	f1b9 0f00 	cmp.w	r9, #0
 8008844:	f43f af09 	beq.w	800865a <chvprintf+0x1a>
 8008848:	464c      	mov	r4, r9
      chSequentialStreamPut(chp, (uint8_t)filler);
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	4641      	mov	r1, r8
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4630      	mov	r0, r6
 8008852:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8008854:	3c01      	subs	r4, #1
 8008856:	d1f8      	bne.n	800884a <chvprintf+0x20a>
 8008858:	44ca      	add	sl, r9
 800885a:	e6fe      	b.n	800865a <chvprintf+0x1a>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 800885c:	220a      	movs	r2, #10
 800885e:	e7b4      	b.n	80087ca <chvprintf+0x18a>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8008860:	683c      	ldr	r4, [r7, #0]
        s = "(null)";
 8008862:	4a37      	ldr	r2, [pc, #220]	; (8008940 <chvprintf+0x300>)
 8008864:	2c00      	cmp	r4, #0
 8008866:	bf08      	it	eq
 8008868:	4614      	moveq	r4, r2
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800886a:	3704      	adds	r7, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800886c:	7822      	ldrb	r2, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 800886e:	2800      	cmp	r0, #0
 8008870:	d03e      	beq.n	80088f0 <chvprintf+0x2b0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8008872:	2a00      	cmp	r2, #0
 8008874:	d040      	beq.n	80088f8 <chvprintf+0x2b8>
 8008876:	3801      	subs	r0, #1
 8008878:	4622      	mov	r2, r4
 800887a:	e001      	b.n	8008880 <chvprintf+0x240>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d004      	beq.n	800888a <chvprintf+0x24a>
 8008880:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008884:	3801      	subs	r0, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f8      	bne.n	800887c <chvprintf+0x23c>
 800888a:	1b10      	subs	r0, r2, r4
 800888c:	1e43      	subs	r3, r0, #1
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800888e:	ebc0 0909 	rsb	r9, r0, r9
 8008892:	9300      	str	r3, [sp, #0]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8008894:	f04f 0820 	mov.w	r8, #32
 8008898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800889c:	f1bb 0f00 	cmp.w	fp, #0
 80088a0:	d0a4      	beq.n	80087ec <chvprintf+0x1ac>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80088a2:	9b00      	ldr	r3, [sp, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dab8      	bge.n	800881a <chvprintf+0x1da>
 80088a8:	e7ca      	b.n	8008840 <chvprintf+0x200>
 80088aa:	9b01      	ldr	r3, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	f88d 200c 	strb.w	r2, [sp, #12]
 80088b2:	4618      	mov	r0, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	3704      	adds	r7, #4
 80088b8:	9300      	str	r3, [sp, #0]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80088ba:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80088be:	ac03      	add	r4, sp, #12
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
 80088c0:	e78d      	b.n	80087de <chvprintf+0x19e>
 80088c2:	2208      	movs	r2, #8
 80088c4:	e781      	b.n	80087ca <chvprintf+0x18a>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80088c6:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 80088c8:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80088ca:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 80088ce:	db2d      	blt.n	800892c <chvprintf+0x2ec>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80088d0:	a803      	add	r0, sp, #12
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 80088d2:	220a      	movs	r2, #10
 80088d4:	e77c      	b.n	80087d0 <chvprintf+0x190>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80088d6:	4621      	mov	r1, r4
 80088d8:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80088da:	f88d 100c 	strb.w	r1, [sp, #12]
 80088de:	4618      	mov	r0, r3
 80088e0:	3b01      	subs	r3, #1
 80088e2:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80088e4:	ac03      	add	r4, sp, #12
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
      break;
 80088e6:	e77a      	b.n	80087de <chvprintf+0x19e>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80088e8:	9b00      	ldr	r3, [sp, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da94      	bge.n	8008818 <chvprintf+0x1d8>
 80088ee:	e6b4      	b.n	800865a <chvprintf+0x1a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80088f0:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	d1bf      	bne.n	8008878 <chvprintf+0x238>
 80088f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80088fc:	f1bb 0f00 	cmp.w	fp, #0
 8008900:	d11b      	bne.n	800893a <chvprintf+0x2fa>
 8008902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	f04f 0820 	mov.w	r8, #32
 800890c:	e76e      	b.n	80087ec <chvprintf+0x1ac>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800890e:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8008912:	f47f af74 	bne.w	80087fe <chvprintf+0x1be>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8008916:	6832      	ldr	r2, [r6, #0]
 8008918:	4630      	mov	r0, r6
 800891a:	6892      	ldr	r2, [r2, #8]
 800891c:	4790      	blx	r2
 800891e:	9b00      	ldr	r3, [sp, #0]
 8008920:	3b01      	subs	r3, #1
 8008922:	3401      	adds	r4, #1
        n++;
 8008924:	f10a 0a01 	add.w	sl, sl, #1
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	e768      	b.n	80087fe <chvprintf+0x1be>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800892c:	222d      	movs	r2, #45	; 0x2d
        l = -l;
 800892e:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8008930:	f88d 200c 	strb.w	r2, [sp, #12]
 8008934:	f10d 000d 	add.w	r0, sp, #13
 8008938:	e7cb      	b.n	80088d2 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800893a:	f04f 0820 	mov.w	r8, #32
 800893e:	e77f      	b.n	8008840 <chvprintf+0x200>
 8008940:	0800a1a0 	.word	0x0800a1a0
	...

08008950 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8008950:	2902      	cmp	r1, #2
 8008952:	d006      	beq.n	8008962 <get_descriptor+0x12>
 8008954:	2903      	cmp	r1, #3
 8008956:	d006      	beq.n	8008966 <get_descriptor+0x16>
 8008958:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800895a:	4806      	ldr	r0, [pc, #24]	; (8008974 <get_descriptor+0x24>)
 800895c:	bf18      	it	ne
 800895e:	2000      	movne	r0, #0
 8008960:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8008962:	4805      	ldr	r0, [pc, #20]	; (8008978 <get_descriptor+0x28>)
 8008964:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8008966:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8008968:	bf9a      	itte	ls
 800896a:	4b04      	ldrls	r3, [pc, #16]	; (800897c <get_descriptor+0x2c>)
 800896c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8008970:	2000      	movhi	r0, #0
}
 8008972:	4770      	bx	lr
 8008974:	0800a360 	.word	0x0800a360
 8008978:	0800a1e0 	.word	0x0800a1e0
 800897c:	0800a330 	.word	0x0800a330

08008980 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8008980:	2902      	cmp	r1, #2
 8008982:	d115      	bne.n	80089b0 <usb_event+0x30>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	460c      	mov	r4, r1
 800898a:	2320      	movs	r3, #32
 800898c:	f383 8811 	msr	BASEPRI, r3
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8008990:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <usb_event+0x34>)
 8008992:	2101      	movs	r1, #1
 8008994:	f7f9 fe8c 	bl	80026b0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8008998:	4621      	mov	r1, r4
 800899a:	4628      	mov	r0, r5
 800899c:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <usb_event+0x38>)
 800899e:	f7f9 fe87 	bl	80026b0 <usbInitEndpointI>

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);
 80089a2:	4806      	ldr	r0, [pc, #24]	; (80089bc <usb_event+0x3c>)
 80089a4:	f7f9 fd24 	bl	80023f0 <sduConfigureHookI>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	0800a1b0 	.word	0x0800a1b0
 80089b8:	0800a1f0 	.word	0x0800a1f0
 80089bc:	20001ba0 	.word	0x20001ba0

080089c0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80089c0:	b40e      	push	{r1, r2, r3}
 80089c2:	b500      	push	{lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	aa03      	add	r2, sp, #12
 80089c8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80089cc:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80089ce:	f7ff fe37 	bl	8008640 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80089d2:	b002      	add	sp, #8
 80089d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d8:	b003      	add	sp, #12
 80089da:	4770      	bx	lr
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <Thread1>:
/*
 * This is a periodic thread that reads accelerometer and outputs
 * result to SPI2 and PWM.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static int8_t xbuf[4], ybuf[4];   /* Last accelerometer data.*/
  systime_t time;                   /* Next deadline.*/

  (void)arg;
  chRegSetThreadName("reader");
 80089e2:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <Thread1+0x9c>)
 80089e4:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <Thread1+0xa0>)
 80089e6:	699b      	ldr	r3, [r3, #24]

  /* LIS302DL initialization.*/
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG1, 0x43);
 80089e8:	4826      	ldr	r0, [pc, #152]	; (8008a84 <Thread1+0xa4>)
static THD_FUNCTION(Thread1, arg) {
  static int8_t xbuf[4], ybuf[4];   /* Last accelerometer data.*/
  systime_t time;                   /* Next deadline.*/

  (void)arg;
  chRegSetThreadName("reader");
 80089ea:	619a      	str	r2, [r3, #24]

  /* LIS302DL initialization.*/
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG1, 0x43);
 80089ec:	2120      	movs	r1, #32
 80089ee:	2243      	movs	r2, #67	; 0x43
 80089f0:	f7ff fbee 	bl	80081d0 <lis302dlWriteRegister>
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG2, 0x00);
 80089f4:	2200      	movs	r2, #0
 80089f6:	2121      	movs	r1, #33	; 0x21
 80089f8:	4822      	ldr	r0, [pc, #136]	; (8008a84 <Thread1+0xa4>)
 80089fa:	f7ff fbe9 	bl	80081d0 <lis302dlWriteRegister>
  lis302dlWriteRegister(&SPID1, LIS302DL_CTRL_REG3, 0x00);
 80089fe:	2200      	movs	r2, #0
 8008a00:	2122      	movs	r1, #34	; 0x22
 8008a02:	4820      	ldr	r0, [pc, #128]	; (8008a84 <Thread1+0xa4>)
 8008a04:	f7ff fbe4 	bl	80081d0 <lis302dlWriteRegister>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008a12:	2300      	movs	r3, #0
 8008a14:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	4f1b      	ldr	r7, [pc, #108]	; (8008a88 <Thread1+0xa8>)
 8008a1c:	4e1b      	ldr	r6, [pc, #108]	; (8008a8c <Thread1+0xac>)
 8008a1e:	491c      	ldr	r1, [pc, #112]	; (8008a90 <Thread1+0xb0>)
 8008a20:	4a1c      	ldr	r2, [pc, #112]	; (8008a94 <Thread1+0xb4>)
 8008a22:	1c4c      	adds	r4, r1, #1
 8008a24:	1c50      	adds	r0, r2, #1
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 8008a26:	2303      	movs	r3, #3
      xbuf[i] = xbuf[i - 1];
 8008a28:	f911 cd01 	ldrsb.w	ip, [r1, #-1]!
      ybuf[i] = ybuf[i - 1];
 8008a2c:	f912 ed01 	ldrsb.w	lr, [r2, #-1]!
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
      xbuf[i] = xbuf[i - 1];
 8008a30:	f804 cd01 	strb.w	ip, [r4, #-1]!
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 8008a34:	3b01      	subs	r3, #1
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
 8008a36:	f800 ed01 	strb.w	lr, [r0, #-1]!
  while (true) {
    int32_t x, y;
    unsigned i;

    /* Keeping an history of the latest four accelerometer readings.*/
    for (i = 3; i > 0; i--) {
 8008a3a:	d1f5      	bne.n	8008a28 <Thread1+0x48>
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
    }

    /* Reading MEMS accelerometer X and Y registers.*/
    xbuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTX);
 8008a3c:	2129      	movs	r1, #41	; 0x29
 8008a3e:	4811      	ldr	r0, [pc, #68]	; (8008a84 <Thread1+0xa4>)
 8008a40:	f7ff fba6 	bl	8008190 <lis302dlReadRegister>
    ybuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTY);
 8008a44:	212b      	movs	r1, #43	; 0x2b
      xbuf[i] = xbuf[i - 1];
      ybuf[i] = ybuf[i - 1];
    }

    /* Reading MEMS accelerometer X and Y registers.*/
    xbuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTX);
 8008a46:	7038      	strb	r0, [r7, #0]
    ybuf[0] = (int8_t)lis302dlReadRegister(&SPID1, LIS302DL_OUTY);
 8008a48:	480e      	ldr	r0, [pc, #56]	; (8008a84 <Thread1+0xa4>)
 8008a4a:	f7ff fba1 	bl	8008190 <lis302dlReadRegister>
 8008a4e:	7030      	strb	r0, [r6, #0]

    /* Transmitting accelerometer the data over SPI2.*/
    spiSelect(&SPID2);
 8008a50:	4811      	ldr	r0, [pc, #68]	; (8008a98 <Thread1+0xb8>)
 8008a52:	f7f9 fdad 	bl	80025b0 <spiSelect>
    spiSend(&SPID2, 4, xbuf);
 8008a56:	4a0c      	ldr	r2, [pc, #48]	; (8008a88 <Thread1+0xa8>)
 8008a58:	480f      	ldr	r0, [pc, #60]	; (8008a98 <Thread1+0xb8>)
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	f7f9 fde0 	bl	8002620 <spiSend>
    spiSend(&SPID2, 4, ybuf);
 8008a60:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <Thread1+0xac>)
 8008a62:	480d      	ldr	r0, [pc, #52]	; (8008a98 <Thread1+0xb8>)
 8008a64:	2104      	movs	r1, #4
 8008a66:	f7f9 fddb 	bl	8002620 <spiSend>
   
  
///////////////******************************************///////////////////////////////////////////

    /* Waiting until the next 250 milliseconds time interval.*/
    chThdSleepUntil(time += MS2ST(100));
 8008a6a:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8

    /* Transmitting accelerometer the data over SPI2.*/
    spiSelect(&SPID2);
    spiSend(&SPID2, 4, xbuf);
    spiSend(&SPID2, 4, ybuf);
    spiUnselect(&SPID2);
 8008a6e:	480a      	ldr	r0, [pc, #40]	; (8008a98 <Thread1+0xb8>)
 8008a70:	f7f9 fdae 	bl	80025d0 <spiUnselect>
   
  
///////////////******************************************///////////////////////////////////////////

    /* Waiting until the next 250 milliseconds time interval.*/
    chThdSleepUntil(time += MS2ST(100));
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7f7 fffb 	bl	8000a70 <chThdSleepUntil>
  }
 8008a7a:	e7d0      	b.n	8008a1e <Thread1+0x3e>
 8008a7c:	20000d70 	.word	0x20000d70
 8008a80:	0800a400 	.word	0x0800a400
 8008a84:	20001140 	.word	0x20001140
 8008a88:	20001dfc 	.word	0x20001dfc
 8008a8c:	20001df8 	.word	0x20001df8
 8008a90:	20001dff 	.word	0x20001dff
 8008a94:	20001dfb 	.word	0x20001dfb
 8008a98:	20001170 	.word	0x20001170
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <command_set_pwm>:
  &PWMD9, // 11
};

static void command_set_pwm(BaseSequentialStream *chp, int argc, char* argv[]){

  if(argc != 2)
 8008aa0:	2902      	cmp	r1, #2
 8008aa2:	d002      	beq.n	8008aaa <command_set_pwm+0xa>
  {
    chprintf(chp, "set_pwm command needs 2 arguments; first one is channel number , second one is PWM value \r\n");
 8008aa4:	4915      	ldr	r1, [pc, #84]	; (8008afc <command_set_pwm+0x5c>)
 8008aa6:	f7ff bf8b 	b.w	80089c0 <chprintf>
  &PWMD5, // 9
  &PWMD9, // 10
  &PWMD9, // 11
};

static void command_set_pwm(BaseSequentialStream *chp, int argc, char* argv[]){
 8008aaa:	b570      	push	{r4, r5, r6, lr}
 8008aac:	4614      	mov	r4, r2
  {
    chprintf(chp, "set_pwm command needs 2 arguments; first one is channel number , second one is PWM value \r\n");
    return;
  }
  
  int channel_num = strtol(argv[0],NULL,0);
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	f000 fafb 	bl	80090b0 <strtol>

  if (channel_num < 0 || channel_num > 11  )   // argv[0] shows which channel
 8008aba:	280b      	cmp	r0, #11
  {
    chprintf(chp, "set_pwm command needs 2 arguments; first one is channel number , second one is PWM value \r\n");
    return;
  }
  
  int channel_num = strtol(argv[0],NULL,0);
 8008abc:	4606      	mov	r6, r0

  if (channel_num < 0 || channel_num > 11  )   // argv[0] shows which channel
 8008abe:	d817      	bhi.n	8008af0 <command_set_pwm+0x50>
  {
        chprintf(chp, "PWM channels should be between 0-11\r\n");
        return;
  }

  int pwm_value = strtol(argv[1],NULL,0);
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	6860      	ldr	r0, [r4, #4]
 8008ac6:	f000 faf3 	bl	80090b0 <strtol>
  if (pwm_value < 0 || pwm_value > 100)
 8008aca:	2864      	cmp	r0, #100	; 0x64
  {
        chprintf(chp, "PWM channels should be between 0-11\r\n");
        return;
  }

  int pwm_value = strtol(argv[1],NULL,0);
 8008acc:	4602      	mov	r2, r0
  if (pwm_value < 0 || pwm_value > 100)
 8008ace:	d809      	bhi.n	8008ae4 <command_set_pwm+0x44>
  {
  chprintf(chp, "PWM value is out of range\r\n");
  return;
  }
         
   pwmEnableChannel(pwm_driver_mapping[channel_num], pwm_timchannel_mapping[channel_num], pwm_value ) ;
 8008ad0:	490b      	ldr	r1, [pc, #44]	; (8008b00 <command_set_pwm+0x60>)
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <command_set_pwm+0x64>)
 8008ad4:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8008ad8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  else if (channel_num <= 11)    
  {  
         pwmEnableChannel(&PWMD9, channel_num - 10, pwm_value);     // 0 1 olmali
  }*/

}
 8008adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  {
  chprintf(chp, "PWM value is out of range\r\n");
  return;
  }
         
   pwmEnableChannel(pwm_driver_mapping[channel_num], pwm_timchannel_mapping[channel_num], pwm_value ) ;
 8008ae0:	f7f9 bae6 	b.w	80020b0 <pwmEnableChannel>
  }

  int pwm_value = strtol(argv[1],NULL,0);
  if (pwm_value < 0 || pwm_value > 100)
  {
  chprintf(chp, "PWM value is out of range\r\n");
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	4908      	ldr	r1, [pc, #32]	; (8008b08 <command_set_pwm+0x68>)
  else if (channel_num <= 11)    
  {  
         pwmEnableChannel(&PWMD9, channel_num - 10, pwm_value);     // 0 1 olmali
  }*/

}
 8008ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  int pwm_value = strtol(argv[1],NULL,0);
  if (pwm_value < 0 || pwm_value > 100)
  {
  chprintf(chp, "PWM value is out of range\r\n");
 8008aec:	f7ff bf68 	b.w	80089c0 <chprintf>
  
  int channel_num = strtol(argv[0],NULL,0);

  if (channel_num < 0 || channel_num > 11  )   // argv[0] shows which channel
  {
        chprintf(chp, "PWM channels should be between 0-11\r\n");
 8008af0:	4628      	mov	r0, r5
 8008af2:	4906      	ldr	r1, [pc, #24]	; (8008b0c <command_set_pwm+0x6c>)
  else if (channel_num <= 11)    
  {  
         pwmEnableChannel(&PWMD9, channel_num - 10, pwm_value);     // 0 1 olmali
  }*/

}
 8008af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  
  int channel_num = strtol(argv[0],NULL,0);

  if (channel_num < 0 || channel_num > 11  )   // argv[0] shows which channel
  {
        chprintf(chp, "PWM channels should be between 0-11\r\n");
 8008af8:	f7ff bf62 	b.w	80089c0 <chprintf>
 8008afc:	0800a408 	.word	0x0800a408
 8008b00:	200008d8 	.word	0x200008d8
 8008b04:	20000908 	.word	0x20000908
 8008b08:	0800a48c 	.word	0x0800a48c
 8008b0c:	0800a464 	.word	0x0800a464

08008b10 <cmd_test>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008b10:	2900      	cmp	r1, #0
 8008b12:	dd02      	ble.n	8008b1a <cmd_test+0xa>
    chprintf(chp, "Usage: test\r\n");
 8008b14:	490e      	ldr	r1, [pc, #56]	; (8008b50 <cmd_test+0x40>)
 8008b16:	f7ff bf53 	b.w	80089c0 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008b1a:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008b1c:	4a0d      	ldr	r2, [pc, #52]	; (8008b54 <cmd_test+0x44>)
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <cmd_test+0x48>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008b20:	6992      	ldr	r2, [r2, #24]
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008b22:	b082      	sub	sp, #8
 8008b24:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8008b26:	6892      	ldr	r2, [r2, #8]
 8008b28:	9000      	str	r0, [sp, #0]
 8008b2a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f7f8 f8f6 	bl	8000d20 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 8008b34:	b120      	cbz	r0, 8008b40 <cmd_test+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 8008b36:	b002      	add	sp, #8
 8008b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8008b3c:	f7f7 bfe8 	b.w	8000b10 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008b40:	4906      	ldr	r1, [pc, #24]	; (8008b5c <cmd_test+0x4c>)
 8008b42:	4620      	mov	r0, r4
    return;
  }
  chThdWait(tp);
}
 8008b44:	b002      	add	sp, #8
 8008b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008b4a:	f7ff bf39 	b.w	80089c0 <chprintf>
 8008b4e:	bf00      	nop
 8008b50:	0800a4a8 	.word	0x0800a4a8
 8008b54:	20000d70 	.word	0x20000d70
 8008b58:	08004af1 	.word	0x08004af1
 8008b5c:	0800a4b8 	.word	0x0800a4b8

08008b60 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008b60:	2900      	cmp	r1, #0
 8008b62:	dd02      	ble.n	8008b6a <cmd_threads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8008b64:	4911      	ldr	r1, [pc, #68]	; (8008bac <cmd_threads+0x4c>)
 8008b66:	f7ff bf2b 	b.w	80089c0 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008b6a:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8008b6c:	4910      	ldr	r1, [pc, #64]	; (8008bb0 <cmd_threads+0x50>)
 8008b6e:	4e11      	ldr	r6, [pc, #68]	; (8008bb4 <cmd_threads+0x54>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008b70:	b084      	sub	sp, #16
 8008b72:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8008b74:	f7ff ff24 	bl	80089c0 <chprintf>
  tp = chRegFirstThread();
 8008b78:	f7f8 f91a 	bl	8000db0 <chRegFirstThread>
 8008b7c:	4604      	mov	r4, r0
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8008b7e:	7f22      	ldrb	r2, [r4, #28]
 8008b80:	68e3      	ldr	r3, [r4, #12]
 8008b82:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008b86:	9202      	str	r2, [sp, #8]
 8008b88:	7fa2      	ldrb	r2, [r4, #30]
 8008b8a:	490b      	ldr	r1, [pc, #44]	; (8008bb8 <cmd_threads+0x58>)
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	9201      	str	r2, [sp, #4]
 8008b90:	68a2      	ldr	r2, [r4, #8]
 8008b92:	9200      	str	r2, [sp, #0]
 8008b94:	4628      	mov	r0, r5
 8008b96:	4622      	mov	r2, r4
 8008b98:	f7ff ff12 	bl	80089c0 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7f8 f917 	bl	8000dd0 <chRegNextThread>
  } while (tp != NULL);
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1ea      	bne.n	8008b7e <cmd_threads+0x1e>
}
 8008ba8:	b004      	add	sp, #16
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	0800a4c8 	.word	0x0800a4c8
 8008bb0:	0800a4dc 	.word	0x0800a4dc
 8008bb4:	0800a3c0 	.word	0x0800a3c0
 8008bb8:	0800a504 	.word	0x0800a504
 8008bbc:	00000000 	.word	0x00000000

08008bc0 <cmd_mem>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008bc0:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008bc2:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008bc4:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008bc6:	dd04      	ble.n	8008bd2 <cmd_mem+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8008bc8:	490e      	ldr	r1, [pc, #56]	; (8008c04 <cmd_mem+0x44>)
 8008bca:	f7ff fef9 	bl	80089c0 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8008bce:	b003      	add	sp, #12
 8008bd0:	bd30      	pop	{r4, r5, pc}
 8008bd2:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8008bd4:	a901      	add	r1, sp, #4
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f7f9 f962 	bl	8001ea0 <chHeapStatus>
 8008bdc:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8008bde:	f7f9 f897 	bl	8001d10 <chCoreGetStatusX>
 8008be2:	4909      	ldr	r1, [pc, #36]	; (8008c08 <cmd_mem+0x48>)
 8008be4:	4602      	mov	r2, r0
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff feea 	bl	80089c0 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8008bec:	462a      	mov	r2, r5
 8008bee:	4907      	ldr	r1, [pc, #28]	; (8008c0c <cmd_mem+0x4c>)
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7ff fee5 	bl	80089c0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	4905      	ldr	r1, [pc, #20]	; (8008c10 <cmd_mem+0x50>)
 8008bfc:	f7ff fee0 	bl	80089c0 <chprintf>
}
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	0800a520 	.word	0x0800a520
 8008c08:	0800a530 	.word	0x0800a530
 8008c0c:	0800a550 	.word	0x0800a550
 8008c10:	0800a568 	.word	0x0800a568
	...

08008c20 <main>:
/*===========================================================================*/

/*
 * Application entry point.
 */
int main(void) {
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	4d8a      	ldr	r5, [pc, #552]	; (8008e4c <main+0x22c>)

  /*
   * Initializes a serial-over-USB CDC driver.
   */
  sduObjectInit(&SDU1);
  sduStart(&SDU1, &serusbcfg);
 8008c24:	4e8a      	ldr	r6, [pc, #552]	; (8008e50 <main+0x230>)
   * PB13 - SCK.
   * PB14 - MISO.
   * PB15 - MOSI.
   */
  spiStart(&SPID2, &spi2cfg);
  palSetPad(GPIOB, 12);
 8008c26:	4c8b      	ldr	r4, [pc, #556]	; (8008e54 <main+0x234>)
/*===========================================================================*/

/*
 * Application entry point.
 */
int main(void) {
 8008c28:	b082      	sub	sp, #8
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8008c2a:	f7f9 f9e1 	bl	8001ff0 <halInit>
  chSysInit();
 8008c2e:	f7f7 fb67 	bl	8000300 <chSysInit>

  /*
   * Shell manager initialization.
   */
  shellInit();
 8008c32:	f7ff fb9d 	bl	8008370 <shellInit>

  /*
   * Initializes a serial-over-USB CDC driver.
   */
  sduObjectInit(&SDU1);
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7f9 fb92 	bl	8002360 <sduObjectInit>
  sduStart(&SDU1, &serusbcfg);
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7f9 fbb6 	bl	80023b0 <sduStart>
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8008c44:	6833      	ldr	r3, [r6, #0]
 8008c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c48:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008c4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008c4e:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1000);
 8008c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c54:	f7f7 fefc 	bl	8000a50 <chThdSleep>
  usbStart(serusbcfg.usbp, &usbcfg);
 8008c58:	6830      	ldr	r0, [r6, #0]
 8008c5a:	497f      	ldr	r1, [pc, #508]	; (8008e58 <main+0x238>)
 8008c5c:	f7f9 fd10 	bl	8002680 <usbStart>
  usbConnectBus(serusbcfg.usbp);
 8008c60:	6833      	ldr	r3, [r6, #0]

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
 8008c62:	487e      	ldr	r0, [pc, #504]	; (8008e5c <main+0x23c>)
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
  chThdSleepMilliseconds(1000);
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8008c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c66:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c6c:	6393      	str	r3, [r2, #56]	; 0x38

  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f7f9 fa96 	bl	80021a0 <sdStart>
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8008c74:	f240 3282 	movw	r2, #898	; 0x382
 8008c78:	2104      	movs	r1, #4
 8008c7a:	4879      	ldr	r0, [pc, #484]	; (8008e60 <main+0x240>)
 8008c7c:	f7fa fbc0 	bl	8003400 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8008c80:	f240 3282 	movw	r2, #898	; 0x382
 8008c84:	2108      	movs	r1, #8
 8008c86:	4876      	ldr	r0, [pc, #472]	; (8008e60 <main+0x240>)
 8008c88:	f7fa fbba 	bl	8003400 <_pal_lld_setgroupmode>

  /*
   * Initializes the SPI driver 1 in order to access the MEMS. The signals
   * are already initialized in the board file.
   */
  spiStart(&SPID1, &spi1cfg);
 8008c8c:	4975      	ldr	r1, [pc, #468]	; (8008e64 <main+0x244>)
 8008c8e:	4876      	ldr	r0, [pc, #472]	; (8008e68 <main+0x248>)
 8008c90:	f7f9 fc7e 	bl	8002590 <spiStart>
   * PB12 - NSS.
   * PB13 - SCK.
   * PB14 - MISO.
   * PB15 - MOSI.
   */
  spiStart(&SPID2, &spi2cfg);
 8008c94:	4975      	ldr	r1, [pc, #468]	; (8008e6c <main+0x24c>)
 8008c96:	4876      	ldr	r0, [pc, #472]	; (8008e70 <main+0x250>)
 8008c98:	f7f9 fc7a 	bl	8002590 <spiStart>
  palSetPad(GPIOB, 12);
 8008c9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ca0:	8321      	strh	r1, [r4, #24]
  palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	2219      	movs	r2, #25
 8008ca6:	f7fa fbab 	bl	8003400 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* NSS.     */
  palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(5) |
 8008caa:	4620      	mov	r0, r4
 8008cac:	f240 229a 	movw	r2, #666	; 0x29a
 8008cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008cb4:	f7fa fba4 	bl	8003400 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* SCK.     */
  palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(5));              /* MISO.    */
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f240 2282 	movw	r2, #642	; 0x282
 8008cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008cc2:	f7fa fb9d 	bl	8003400 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(5) |
 8008cc6:	f240 229a 	movw	r2, #666	; 0x29a
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008cd0:	f7fa fb96 	bl	8003400 <_pal_lld_setgroupmode>
                           PAL_STM32_OSPEED_HIGHEST);           /* MOSI.    */

  /*
   * Initializes the PWM driver 4, routes the TIM4 outputs to the board LEDs.
   */
  	pwmStart(&PWMD1, &pwmcfg);
 8008cd4:	4967      	ldr	r1, [pc, #412]	; (8008e74 <main+0x254>)
 8008cd6:	4868      	ldr	r0, [pc, #416]	; (8008e78 <main+0x258>)
 8008cd8:	f7f9 f9d2 	bl	8002080 <pwmStart>
  	pwmStart(&PWMD3, &pwmcfg);
 8008cdc:	4965      	ldr	r1, [pc, #404]	; (8008e74 <main+0x254>)
 8008cde:	4867      	ldr	r0, [pc, #412]	; (8008e7c <main+0x25c>)
 8008ce0:	f7f9 f9ce 	bl	8002080 <pwmStart>
  	pwmStart(&PWMD5, &pwmcfg);  
 8008ce4:	4963      	ldr	r1, [pc, #396]	; (8008e74 <main+0x254>)
 8008ce6:	4866      	ldr	r0, [pc, #408]	; (8008e80 <main+0x260>)
 8008ce8:	f7f9 f9ca 	bl	8002080 <pwmStart>
    pwmStart(&PWMD9, &pwmcfg);
 8008cec:	4961      	ldr	r1, [pc, #388]	; (8008e74 <main+0x254>)
 8008cee:	4865      	ldr	r0, [pc, #404]	; (8008e84 <main+0x264>)
 8008cf0:	f7f9 f9c6 	bl	8002080 <pwmStart>

  	palSetPadMode(GPIOE, GPIOE_PIN9,  PAL_MODE_ALTERNATE(1));      
 8008cf4:	2282      	movs	r2, #130	; 0x82
 8008cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cfa:	4863      	ldr	r0, [pc, #396]	; (8008e88 <main+0x268>)
 8008cfc:	f7fa fb80 	bl	8003400 <_pal_lld_setgroupmode>
  	palSetPadMode(GPIOE, GPIOE_PIN11, PAL_MODE_ALTERNATE(1));      
 8008d00:	2282      	movs	r2, #130	; 0x82
 8008d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d06:	4860      	ldr	r0, [pc, #384]	; (8008e88 <main+0x268>)
 8008d08:	f7fa fb7a 	bl	8003400 <_pal_lld_setgroupmode>
  	palSetPadMode(GPIOE, GPIOE_PIN13, PAL_MODE_ALTERNATE(1));     
 8008d0c:	2282      	movs	r2, #130	; 0x82
 8008d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d12:	485d      	ldr	r0, [pc, #372]	; (8008e88 <main+0x268>)
 8008d14:	f7fa fb74 	bl	8003400 <_pal_lld_setgroupmode>
  	palSetPadMode(GPIOE, GPIOE_PIN14, PAL_MODE_ALTERNATE(1));
 8008d18:	2282      	movs	r2, #130	; 0x82
 8008d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d1e:	485a      	ldr	r0, [pc, #360]	; (8008e88 <main+0x268>)
 8008d20:	f7fa fb6e 	bl	8003400 <_pal_lld_setgroupmode>

    pwmEnableChannel(&PWMD1, 0, 50);         //channels number should start 0
 8008d24:	2232      	movs	r2, #50	; 0x32
 8008d26:	2100      	movs	r1, #0
 8008d28:	4853      	ldr	r0, [pc, #332]	; (8008e78 <main+0x258>)
 8008d2a:	f7f9 f9c1 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD1, 1, 50);
 8008d2e:	2232      	movs	r2, #50	; 0x32
 8008d30:	2101      	movs	r1, #1
 8008d32:	4851      	ldr	r0, [pc, #324]	; (8008e78 <main+0x258>)
 8008d34:	f7f9 f9bc 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD1, 2, 50);
 8008d38:	2232      	movs	r2, #50	; 0x32
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	484e      	ldr	r0, [pc, #312]	; (8008e78 <main+0x258>)
 8008d3e:	f7f9 f9b7 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD1, 3, 50);
 8008d42:	2232      	movs	r2, #50	; 0x32
 8008d44:	2103      	movs	r1, #3
 8008d46:	484c      	ldr	r0, [pc, #304]	; (8008e78 <main+0x258>)
 8008d48:	f7f9 f9b2 	bl	80020b0 <pwmEnableChannel>

  	palSetPadMode(GPIOC, GPIOC_PIN6,  PAL_MODE_ALTERNATE(2));      
 8008d4c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	484e      	ldr	r0, [pc, #312]	; (8008e8c <main+0x26c>)
 8008d54:	f7fa fb54 	bl	8003400 <_pal_lld_setgroupmode>
  	palSetPadMode(GPIOC, GPIOC_PIN8,  PAL_MODE_ALTERNATE(2));     
 8008d58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d60:	484a      	ldr	r0, [pc, #296]	; (8008e8c <main+0x26c>)
 8008d62:	f7fa fb4d 	bl	8003400 <_pal_lld_setgroupmode>
  	palSetPadMode(GPIOC, GPIOC_PIN9,  PAL_MODE_ALTERNATE(2));
 8008d66:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d6e:	4847      	ldr	r0, [pc, #284]	; (8008e8c <main+0x26c>)
 8008d70:	f7fa fb46 	bl	8003400 <_pal_lld_setgroupmode>

    pwmEnableChannel(&PWMD3, 0, 50);         //channels number should start 0
 8008d74:	2232      	movs	r2, #50	; 0x32
 8008d76:	2100      	movs	r1, #0
 8008d78:	4840      	ldr	r0, [pc, #256]	; (8008e7c <main+0x25c>)
 8008d7a:	f7f9 f999 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD3, 2, 50);
 8008d7e:	2232      	movs	r2, #50	; 0x32
 8008d80:	2102      	movs	r1, #2
 8008d82:	483e      	ldr	r0, [pc, #248]	; (8008e7c <main+0x25c>)
 8008d84:	f7f9 f994 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD3, 3, 50);
 8008d88:	2232      	movs	r2, #50	; 0x32
 8008d8a:	2103      	movs	r1, #3
 8008d8c:	483b      	ldr	r0, [pc, #236]	; (8008e7c <main+0x25c>)
 8008d8e:	f7f9 f98f 	bl	80020b0 <pwmEnableChannel>

    palSetPadMode(GPIOA, GPIOA_PIN1,  PAL_MODE_ALTERNATE(2));      
 8008d92:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008d96:	2102      	movs	r1, #2
 8008d98:	4831      	ldr	r0, [pc, #196]	; (8008e60 <main+0x240>)
 8008d9a:	f7fa fb31 	bl	8003400 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, GPIOA_PIN2,  PAL_MODE_ALTERNATE(2));     
 8008d9e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008da2:	2104      	movs	r1, #4
 8008da4:	482e      	ldr	r0, [pc, #184]	; (8008e60 <main+0x240>)
 8008da6:	f7fa fb2b 	bl	8003400 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, GPIOA_PIN3,  PAL_MODE_ALTERNATE(2));
 8008daa:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008dae:	2108      	movs	r1, #8
 8008db0:	482b      	ldr	r0, [pc, #172]	; (8008e60 <main+0x240>)
 8008db2:	f7fa fb25 	bl	8003400 <_pal_lld_setgroupmode>

    pwmEnableChannel(&PWMD5, 1, 50);         //channels number should start 0
 8008db6:	2232      	movs	r2, #50	; 0x32
 8008db8:	2101      	movs	r1, #1
 8008dba:	4831      	ldr	r0, [pc, #196]	; (8008e80 <main+0x260>)
 8008dbc:	f7f9 f978 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD5, 2, 50);
 8008dc0:	2232      	movs	r2, #50	; 0x32
 8008dc2:	2102      	movs	r1, #2
 8008dc4:	482e      	ldr	r0, [pc, #184]	; (8008e80 <main+0x260>)
 8008dc6:	f7f9 f973 	bl	80020b0 <pwmEnableChannel>
    pwmEnableChannel(&PWMD5, 3, 50);
 8008dca:	2232      	movs	r2, #50	; 0x32
 8008dcc:	2103      	movs	r1, #3
 8008dce:	482c      	ldr	r0, [pc, #176]	; (8008e80 <main+0x260>)
 8008dd0:	f7f9 f96e 	bl	80020b0 <pwmEnableChannel>

    palSetPadMode(GPIOE, GPIOE_PIN5,  PAL_MODE_ALTERNATE(3));      
 8008dd4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008dd8:	2120      	movs	r1, #32
 8008dda:	482b      	ldr	r0, [pc, #172]	; (8008e88 <main+0x268>)
 8008ddc:	f7fa fb10 	bl	8003400 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, GPIOE_PIN6,  PAL_MODE_ALTERNATE(3));     
 8008de0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008de4:	2140      	movs	r1, #64	; 0x40
 8008de6:	4828      	ldr	r0, [pc, #160]	; (8008e88 <main+0x268>)
 8008de8:	f7fa fb0a 	bl	8003400 <_pal_lld_setgroupmode>

    pwmEnableChannel(&PWMD9, 0, 50);         //channels number should start 0
 8008dec:	2232      	movs	r2, #50	; 0x32
 8008dee:	2100      	movs	r1, #0
 8008df0:	4824      	ldr	r0, [pc, #144]	; (8008e84 <main+0x264>)
 8008df2:	f7f9 f95d 	bl	80020b0 <pwmEnableChannel>


  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1),
 8008df6:	2400      	movs	r4, #0

    palSetPadMode(GPIOE, GPIOE_PIN5,  PAL_MODE_ALTERNATE(3));      
    palSetPadMode(GPIOE, GPIOE_PIN6,  PAL_MODE_ALTERNATE(3));     

    pwmEnableChannel(&PWMD9, 0, 50);         //channels number should start 0
    pwmEnableChannel(&PWMD9, 1, 50);
 8008df8:	2232      	movs	r2, #50	; 0x32
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4821      	ldr	r0, [pc, #132]	; (8008e84 <main+0x264>)
 8008dfe:	f7f9 f957 	bl	80020b0 <pwmEnableChannel>


  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1),
 8008e02:	9400      	str	r4, [sp, #0]
 8008e04:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <main+0x270>)
 8008e06:	4823      	ldr	r0, [pc, #140]	; (8008e94 <main+0x274>)
 8008e08:	224a      	movs	r2, #74	; 0x4a
 8008e0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e0e:	f7f7 fdaf 	bl	8000970 <chThdCreateStatic>
  /*
   * Normal main() thread activity, in this demo it just performs
   * a shell respawn upon its termination.
   */
  while (true) {
    if (!shelltp) {
 8008e12:	b144      	cbz	r4, 8008e26 <main+0x206>
        shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
      }
    }
    else {
      /* If the previous shell exited.*/
      if (chThdTerminatedX(shelltp)) {
 8008e14:	7f23      	ldrb	r3, [r4, #28]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d013      	beq.n	8008e42 <main+0x222>
        /* Recovers memory of the previous shell.*/
        chThdRelease(shelltp);
        shelltp = NULL;
      }
    }
    chThdSleepMilliseconds(500);
 8008e1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8008e1e:	f7f7 fe17 	bl	8000a50 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it just performs
   * a shell respawn upon its termination.
   */
  while (true) {
    if (!shelltp) {
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	d1f6      	bne.n	8008e14 <main+0x1f4>
      if (SDU1.config->usbp->state == USB_ACTIVE) {
 8008e26:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d1f3      	bne.n	8008e1a <main+0x1fa>
        /* Spawns a new shell.*/
        shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
 8008e32:	2240      	movs	r2, #64	; 0x40
 8008e34:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8008e38:	4817      	ldr	r0, [pc, #92]	; (8008e98 <main+0x278>)
 8008e3a:	f7ff faa1 	bl	8008380 <shellCreate>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	e7eb      	b.n	8008e1a <main+0x1fa>
    }
    else {
      /* If the previous shell exited.*/
      if (chThdTerminatedX(shelltp)) {
        /* Recovers memory of the previous shell.*/
        chThdRelease(shelltp);
 8008e42:	4620      	mov	r0, r4
 8008e44:	f7f7 ff44 	bl	8000cd0 <chThdRelease>
        shelltp = NULL;
 8008e48:	2400      	movs	r4, #0
 8008e4a:	e7e6      	b.n	8008e1a <main+0x1fa>
 8008e4c:	20001ba0 	.word	0x20001ba0
 8008e50:	0800a350 	.word	0x0800a350
 8008e54:	40020400 	.word	0x40020400
 8008e58:	0800a220 	.word	0x0800a220
 8008e5c:	20001214 	.word	0x20001214
 8008e60:	40020000 	.word	0x40020000
 8008e64:	0800a3a0 	.word	0x0800a3a0
 8008e68:	20001140 	.word	0x20001140
 8008e6c:	0800a3b0 	.word	0x0800a3b0
 8008e70:	20001170 	.word	0x20001170
 8008e74:	0800a630 	.word	0x0800a630
 8008e78:	200011a4 	.word	0x200011a4
 8008e7c:	200011c0 	.word	0x200011c0
 8008e80:	200011dc 	.word	0x200011dc
 8008e84:	200011f8 	.word	0x200011f8
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	40020800 	.word	0x40020800
 8008e90:	080089e1 	.word	0x080089e1
 8008e94:	20001a58 	.word	0x20001a58
 8008e98:	0800a670 	.word	0x0800a670
 8008e9c:	00000000 	.word	0x00000000

08008ea0 <strcasecmp>:
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <strcasecmp+0x48>)
 8008ea2:	b430      	push	{r4, r5}
 8008ea4:	681d      	ldr	r5, [r3, #0]
 8008ea6:	f810 4b01 	ldrb.w	r4, [r0], #1
 8008eaa:	192b      	adds	r3, r5, r4
 8008eac:	4622      	mov	r2, r4
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eba:	bf08      	it	eq
 8008ebc:	f104 0220 	addeq.w	r2, r4, #32
 8008ec0:	18ec      	adds	r4, r5, r3
 8008ec2:	7864      	ldrb	r4, [r4, #1]
 8008ec4:	f004 0403 	and.w	r4, r4, #3
 8008ec8:	2c01      	cmp	r4, #1
 8008eca:	d006      	beq.n	8008eda <strcasecmp+0x3a>
 8008ecc:	1ad2      	subs	r2, r2, r3
 8008ece:	d101      	bne.n	8008ed4 <strcasecmp+0x34>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e8      	bne.n	8008ea6 <strcasecmp+0x6>
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	bc30      	pop	{r4, r5}
 8008ed8:	4770      	bx	lr
 8008eda:	3320      	adds	r3, #32
 8008edc:	1ad2      	subs	r2, r2, r3
 8008ede:	d0e2      	beq.n	8008ea6 <strcasecmp+0x6>
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	bc30      	pop	{r4, r5}
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000938 	.word	0x20000938
 8008eec:	00000000 	.word	0x00000000

08008ef0 <strpbrk>:
 8008ef0:	b430      	push	{r4, r5}
 8008ef2:	7804      	ldrb	r4, [r0, #0]
 8008ef4:	b1dc      	cbz	r4, 8008f2e <strpbrk+0x3e>
 8008ef6:	780d      	ldrb	r5, [r1, #0]
 8008ef8:	b19d      	cbz	r5, 8008f22 <strpbrk+0x32>
 8008efa:	42a5      	cmp	r5, r4
 8008efc:	d00f      	beq.n	8008f1e <strpbrk+0x2e>
 8008efe:	460a      	mov	r2, r1
 8008f00:	e001      	b.n	8008f06 <strpbrk+0x16>
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	d00b      	beq.n	8008f1e <strpbrk+0x2e>
 8008f06:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f9      	bne.n	8008f02 <strpbrk+0x12>
 8008f0e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d1f0      	bne.n	8008ef8 <strpbrk+0x8>
 8008f16:	7813      	ldrb	r3, [r2, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf08      	it	eq
 8008f1c:	2000      	moveq	r0, #0
 8008f1e:	bc30      	pop	{r4, r5}
 8008f20:	4770      	bx	lr
 8008f22:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8008f26:	460a      	mov	r2, r1
 8008f28:	2c00      	cmp	r4, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <strpbrk+0x8>
 8008f2c:	e7f3      	b.n	8008f16 <strpbrk+0x26>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	bc30      	pop	{r4, r5}
 8008f32:	4770      	bx	lr
	...

08008f40 <strspn>:
 8008f40:	b470      	push	{r4, r5, r6}
 8008f42:	7804      	ldrb	r4, [r0, #0]
 8008f44:	b1a4      	cbz	r4, 8008f70 <strspn+0x30>
 8008f46:	780e      	ldrb	r6, [r1, #0]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	b14e      	cbz	r6, 8008f60 <strspn+0x20>
 8008f4c:	42b4      	cmp	r4, r6
 8008f4e:	d00a      	beq.n	8008f66 <strspn+0x26>
 8008f50:	460a      	mov	r2, r1
 8008f52:	e001      	b.n	8008f58 <strspn+0x18>
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	d006      	beq.n	8008f66 <strspn+0x26>
 8008f58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f9      	bne.n	8008f54 <strspn+0x14>
 8008f60:	1a28      	subs	r0, r5, r0
 8008f62:	bc70      	pop	{r4, r5, r6}
 8008f64:	4770      	bx	lr
 8008f66:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	d1ed      	bne.n	8008f4a <strspn+0xa>
 8008f6e:	e7f7      	b.n	8008f60 <strspn+0x20>
 8008f70:	4620      	mov	r0, r4
 8008f72:	e7f6      	b.n	8008f62 <strspn+0x22>
	...

08008f80 <_strtol_r>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4c47      	ldr	r4, [pc, #284]	; (80090a4 <_strtol_r+0x124>)
 8008f86:	4683      	mov	fp, r0
 8008f88:	460e      	mov	r6, r1
 8008f8a:	f8d4 e000 	ldr.w	lr, [r4]
 8008f8e:	e000      	b.n	8008f92 <_strtol_r+0x12>
 8008f90:	4626      	mov	r6, r4
 8008f92:	4634      	mov	r4, r6
 8008f94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f98:	eb0e 0005 	add.w	r0, lr, r5
 8008f9c:	7840      	ldrb	r0, [r0, #1]
 8008f9e:	f000 0008 	and.w	r0, r0, #8
 8008fa2:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d1f2      	bne.n	8008f90 <_strtol_r+0x10>
 8008faa:	2d2d      	cmp	r5, #45	; 0x2d
 8008fac:	d05c      	beq.n	8009068 <_strtol_r+0xe8>
 8008fae:	2d2b      	cmp	r5, #43	; 0x2b
 8008fb0:	bf04      	itt	eq
 8008fb2:	7875      	ldrbeq	r5, [r6, #1]
 8008fb4:	1cb4      	addeq	r4, r6, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d03e      	beq.n	8009038 <_strtol_r+0xb8>
 8008fba:	2b10      	cmp	r3, #16
 8008fbc:	d060      	beq.n	8009080 <_strtol_r+0x100>
 8008fbe:	469a      	mov	sl, r3
 8008fc0:	f1b8 0f00 	cmp.w	r8, #0
 8008fc4:	bf0c      	ite	eq
 8008fc6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008fca:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008fce:	2700      	movs	r7, #0
 8008fd0:	fbb0 f9fa 	udiv	r9, r0, sl
 8008fd4:	46bc      	mov	ip, r7
 8008fd6:	fb0a 0019 	mls	r0, sl, r9, r0
 8008fda:	e00c      	b.n	8008ff6 <_strtol_r+0x76>
 8008fdc:	3d30      	subs	r5, #48	; 0x30
 8008fde:	42ab      	cmp	r3, r5
 8008fe0:	dd19      	ble.n	8009016 <_strtol_r+0x96>
 8008fe2:	1c7e      	adds	r6, r7, #1
 8008fe4:	d005      	beq.n	8008ff2 <_strtol_r+0x72>
 8008fe6:	45cc      	cmp	ip, r9
 8008fe8:	d823      	bhi.n	8009032 <_strtol_r+0xb2>
 8008fea:	d020      	beq.n	800902e <_strtol_r+0xae>
 8008fec:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8008ff0:	2701      	movs	r7, #1
 8008ff2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ff6:	eb0e 0605 	add.w	r6, lr, r5
 8008ffa:	7876      	ldrb	r6, [r6, #1]
 8008ffc:	f016 0f04 	tst.w	r6, #4
 8009000:	d1ec      	bne.n	8008fdc <_strtol_r+0x5c>
 8009002:	f016 0603 	ands.w	r6, r6, #3
 8009006:	d006      	beq.n	8009016 <_strtol_r+0x96>
 8009008:	2e01      	cmp	r6, #1
 800900a:	bf14      	ite	ne
 800900c:	2657      	movne	r6, #87	; 0x57
 800900e:	2637      	moveq	r6, #55	; 0x37
 8009010:	1bad      	subs	r5, r5, r6
 8009012:	42ab      	cmp	r3, r5
 8009014:	dce5      	bgt.n	8008fe2 <_strtol_r+0x62>
 8009016:	1c7b      	adds	r3, r7, #1
 8009018:	d016      	beq.n	8009048 <_strtol_r+0xc8>
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	d110      	bne.n	8009042 <_strtol_r+0xc2>
 8009020:	4660      	mov	r0, ip
 8009022:	2a00      	cmp	r2, #0
 8009024:	d039      	beq.n	800909a <_strtol_r+0x11a>
 8009026:	b9df      	cbnz	r7, 8009060 <_strtol_r+0xe0>
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	4285      	cmp	r5, r0
 8009030:	dddc      	ble.n	8008fec <_strtol_r+0x6c>
 8009032:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009036:	e7dc      	b.n	8008ff2 <_strtol_r+0x72>
 8009038:	2d30      	cmp	r5, #48	; 0x30
 800903a:	d01a      	beq.n	8009072 <_strtol_r+0xf2>
 800903c:	230a      	movs	r3, #10
 800903e:	469a      	mov	sl, r3
 8009040:	e7be      	b.n	8008fc0 <_strtol_r+0x40>
 8009042:	f1cc 0c00 	rsb	ip, ip, #0
 8009046:	e7eb      	b.n	8009020 <_strtol_r+0xa0>
 8009048:	f1b8 0f00 	cmp.w	r8, #0
 800904c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8009050:	bf0c      	ite	eq
 8009052:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009056:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800905a:	f8cb 3000 	str.w	r3, [fp]
 800905e:	b1f2      	cbz	r2, 800909e <_strtol_r+0x11e>
 8009060:	1e61      	subs	r1, r4, #1
 8009062:	6011      	str	r1, [r2, #0]
 8009064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009068:	1cb4      	adds	r4, r6, #2
 800906a:	7875      	ldrb	r5, [r6, #1]
 800906c:	f04f 0801 	mov.w	r8, #1
 8009070:	e7a1      	b.n	8008fb6 <_strtol_r+0x36>
 8009072:	7823      	ldrb	r3, [r4, #0]
 8009074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009078:	2b58      	cmp	r3, #88	; 0x58
 800907a:	d008      	beq.n	800908e <_strtol_r+0x10e>
 800907c:	2308      	movs	r3, #8
 800907e:	e79e      	b.n	8008fbe <_strtol_r+0x3e>
 8009080:	2d30      	cmp	r5, #48	; 0x30
 8009082:	d19c      	bne.n	8008fbe <_strtol_r+0x3e>
 8009084:	7820      	ldrb	r0, [r4, #0]
 8009086:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800908a:	2858      	cmp	r0, #88	; 0x58
 800908c:	d197      	bne.n	8008fbe <_strtol_r+0x3e>
 800908e:	f04f 0a10 	mov.w	sl, #16
 8009092:	7865      	ldrb	r5, [r4, #1]
 8009094:	4653      	mov	r3, sl
 8009096:	3402      	adds	r4, #2
 8009098:	e792      	b.n	8008fc0 <_strtol_r+0x40>
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	bf00      	nop
 80090a4:	20000938 	.word	0x20000938
	...

080090b0 <strtol>:
 80090b0:	b410      	push	{r4}
 80090b2:	4c04      	ldr	r4, [pc, #16]	; (80090c4 <strtol+0x14>)
 80090b4:	4613      	mov	r3, r2
 80090b6:	460a      	mov	r2, r1
 80090b8:	4601      	mov	r1, r0
 80090ba:	6820      	ldr	r0, [r4, #0]
 80090bc:	bc10      	pop	{r4}
 80090be:	f7ff bf5f 	b.w	8008f80 <_strtol_r>
 80090c2:	bf00      	nop
 80090c4:	20000d68 	.word	0x20000d68
	...
 80090d0:	656c6469 	.word	0x656c6469
	...

080090e0 <ch_debug>:
 80090e0:	6e69616d 18001600 08440404 1814100c     main......D.....
 80090f0:	1e1d1c00 00000000 00000000 00000000     ................

08009100 <vmt>:
 8009100:	08002101 080020e1 08002141 08002121     .!... ..A!..!!..
 8009110:	08002131 08002111 080020f1 080020d1     1!...!... ... ..

08009120 <vmt>:
 8009120:	08002301 080022e1 08002341 08002321     .#..."..A#..!#..
 8009130:	08002331 08002311 080022f1 080022d1     1#...#..."..."..

08009140 <zero_status>:
	...

08009150 <active_status>:
	...

08009160 <halted_status>:
 8009160:	00000001 00000000 00000000 00000000     ................

08009170 <_stm32_dma_streams>:
 8009170:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8009180:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8009190:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 80091a0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 80091b0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 80091c0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 80091d0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80091e0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80091f0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8009200:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8009210:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8009220:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08009230 <fsparams>:
 8009230:	00000080 00000140 00000003 00000000     ....@...........
 8009240:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08009250 <ep0config>:
 8009250:	00000000 08002791 08002ad1 08002bc1     .....'...*...+..
 8009260:	00400040 20001120 20001120 00000001     @.@. ..  .. ....
 8009270:	20001134 00000000 00000000 00000000     4.. ............
 8009280:	20414d44 6c696166 00657275 00000000     DMA failure.....

08009290 <default_config>:
 8009290:	00009600 40000000 00000000 00000000     .......@........

080092a0 <pal_default_config>:
 80092a0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80092b0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 80092c0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 80092d0:	04000000 00000040 02208001 00000000     ....@..... .....
 80092e0:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 80092f0:	00060600 55000100 00000000 ffffffff     .......U........
 8009300:	00555055 00000fff 00000000 00000000     UPU.............
 8009310:	00000040 00000000 ffffffff 00000000     @...............
 8009320:	0000ffff 00000000 00000000 00000000     ................
 8009330:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8009350:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800936c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8009388:	ffffffff 00000000 0000ffff 00000000     ................
	...

080093a0 <wa>:
 80093a0:	20001290 200013d8 20001520 20001668     ... ...  .. h.. 
 80093b0:	200017b0 00000000 00000000 00000000     ... ............

080093c0 <patterns>:
 80093c0:	08009c40 08009650 08009730 080098a0     @...P...0.......
 80093d0:	08009900 08009910 08009950 08009a00     ........P.......
 80093e0:	08009a70 08009b50 08009b60 08009c60     p...P...`...`...
	...
 8009400:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 8009410:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 8009420:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 8009430:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 8009440:	68637241 63657469 65727574 0000203a     Architecture: ..
 8009450:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 8009460:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 8009470:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 8009480:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 8009490:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 80094a0:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 80094b0:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 80094c0:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 80094d0:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 80094e0:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 80094f0:	20747365 74697573 00000065 002a2a2a     est suite...***.
 8009500:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 8009510:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 8009520:	00455255 2e302e33 00367030 206c754a     URE.3.0.0p6.Jul 
 8009530:	32203032 20363130 3331202d 3a39313a     20 2016 - 13:19:
 8009540:	00003234 20434347 2e332e35 30322031     42..GCC 5.3.1 20
 8009550:	33303631 28203730 656c6572 29657361     160307 (release)
 8009560:	52415b20 6d652f4d 64646562 352d6465      [ARM/embedded-5
 8009570:	6172622d 2068636e 69766572 6e6f6973     -branch revision
 8009580:	34333220 5d393835 00000000 764d5241      234589]....ARMv
 8009590:	454d2d37 00000000 74726f43 4d2d7865     7-ME....Cortex-M
 80095a0:	00000034 61766441 6465636e 72656b20     4...Advanced ker
 80095b0:	206c656e 65646f6d 00000000 334d5453     nel mode....STM3
 80095c0:	30344632 69482037 50206867 6f667265     2F407 High Perfo
 80095d0:	6e616d72 77206563 20687469 20505344     rmance with DSP 
 80095e0:	20646e61 00555046 694d5453 656f7263     and FPU.STMicroe
 80095f0:	7463656c 696e6f72 53207363 32334d54     lectronics STM32
 8009600:	442d3446 6f637369 79726576 00000000     F4-Discovery....

08009610 <testthd1>:
 8009610:	080096cc 00000000 00000000 08004e11     .............N..

08009620 <testthd2>:
 8009620:	080096b0 00000000 00000000 08004ef1     .............N..

08009630 <testthd3>:
 8009630:	08009694 00000000 00000000 08004fd1     .............O..

08009640 <testthd4>:
 8009640:	08009684 00000000 00000000 08005101     .............Q..

08009650 <patternthd>:
 8009650:	08009610 08009620 08009630 08009640     .... ...0...@...
	...
 8009670:	00000043 00000042 00000041 44434241     C...B...A...ABCD
 8009680:	00000045 65726854 2c736461 6c656420     E...Threads, del
 8009690:	00737961 65726854 2c736461 69727020     ays.Threads, pri
 80096a0:	7469726f 68632079 65676e61 00000000     ority change....
 80096b0:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 80096c0:	7420676e 20747365 00003223 65726854     ng test #2..Thre
 80096d0:	2c736461 716e6520 69756575 7420676e     ads, enqueuing t
 80096e0:	20747365 00003123 00000000 00000000     est #1..........

080096f0 <testsem1>:
 80096f0:	080097a8 08005361 00000000 080051a1     ....aS.......Q..

08009700 <testsem2>:
 8009700:	08009794 08005351 00000000 080053a1     ....QS.......S..

08009710 <testsem3>:
 8009710:	08009774 08005341 00000000 08005501     t...AS.......U..

08009720 <testsem4>:
 8009720:	08009750 00000000 00000000 080055d1     P............U..

08009730 <patternsem>:
 8009730:	080096f0 08009700 08009710 08009720     ............ ...
	...
 8009750:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 8009760:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 8009770:	00000000 616d6553 726f6870 202c7365     ....Semaphores, 
 8009780:	6d6f7461 73206369 616e6769 61772d6c     atomic signal-wa
 8009790:	00007469 616d6553 726f6870 202c7365     it..Semaphores, 
 80097a0:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 80097b0:	202c7365 75716e65 6e697565 00000067     es, enqueuing...

080097c0 <testmtx5>:
 80097c0:	08009848 08005861 00000000 08005b31     H...aX......1[..

080097d0 <testmtx6>:
 80097d0:	08009830 08005d31 00000000 08005bf1     0...1].......[..

080097e0 <testmtx7>:
 80097e0:	08009818 08005d11 00000000 08005d71     .....]......q]..

080097f0 <testmtx8>:
 80097f0:	08009804 08005d41 00000000 08005e31     ....A]......1^..
 8009800:	00434241 646e6f43 2c726156 6f6f6220     ABC.CondVar, boo
 8009810:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 8009820:	6f726220 61636461 74207473 00747365      broadcast test.
 8009830:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 8009840:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 8009850:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 8009860:	69727020 7469726f 65722079 6e727574      priority return
 8009870:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 8009880:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 8009890:	74736574 00000000 00000000 00000000     test............

080098a0 <patternmtx>:
 80098a0:	080098c0 080098d0 080097c0 080097d0     ................
 80098b0:	080097e0 080097f0 00000000 00000000     ................

080098c0 <testmtx1>:
 80098c0:	08009874 08005871 00000000 08005721     t...qX......!W..

080098d0 <testmtx4>:
 80098d0:	08009858 08005841 00000000 080058c1     X...AX.......X..

080098e0 <testmsg1>:
 80098e0:	080098f0 00000000 00000000 08005f11     ............._..
 80098f0:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..

08009900 <patternmsg>:
 8009900:	080098e0 00000000 00000000 00000000     ................

08009910 <patternmbox>:
 8009910:	08009940 00000000 00000000 00000000     @...............
 8009920:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 8009930:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.

08009940 <testmbox1>:
 8009940:	08009920 08006591 00000000 08005fb1      ....e......._..

08009950 <patternevt>:
 8009950:	080099d0 08009960 080099f0 00000000     ....`...........

08009960 <testevt2>:
 8009960:	08009984 08006681 00000000 080066a1     .....f.......f..
 8009970:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 8009980:	00000000 6e657645 202c7374 74696177     ....Events, wait
 8009990:	646e6120 6f726220 61636461 00007473      and broadcast..
 80099a0:	6e657645 202c7374 69676572 61727473     Events, registra
 80099b0:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 80099c0:	00000068 00000000 00000000 00000000     h...............

080099d0 <testevt1>:
 80099d0:	080099a0 08006691 00000000 080065e1     .....f.......e..

080099e0 <evhndl>:
 80099e0:	080065d1 080065c1 080065b1 00000000     .e...e...e......

080099f0 <testevt3>:
 80099f0:	08009970 08006671 00000000 08006981     p...qf.......i..

08009a00 <patternheap>:
 8009a00:	08009a40 00000000 00000000 00000000     @...............
 8009a10:	70616548 6c61202c 61636f6c 6e6f6974     Heap, allocation
 8009a20:	646e6120 61726620 6e656d67 69746174      and fragmentati
 8009a30:	74206e6f 00747365 00000000 00000000     on test.........

08009a40 <testheap1>:
 8009a40:	08009a10 08006c71 00000000 08006a21     ....ql......!j..
 8009a50:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 8009a60:	2f657565 75716564 00657565 00000000     eue/dequeue.....

08009a70 <patternpools>:
 8009a70:	08009a80 00000000 00000000 00000000     ................

08009a80 <testpools1>:
 8009a80:	08009a50 08006ca1 00000000 08006cb1     P....l.......l..

08009a90 <testdyn1>:
 8009a90:	08009b24 08006ea1 00000000 08006d71     $....n......qm..

08009aa0 <testdyn2>:
 8009aa0:	08009af4 08006fb1 00000000 08006eb1     .....o.......n..

08009ab0 <testdyn3>:
 8009ab0:	08009acc 08006e81 00000000 08006ff1     .....n.......o..
 8009ac0:	00004241 44434241 00000000 616e7944     AB..ABCD....Dyna
 8009ad0:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 8009ae0:	61207972 7220646e 72656665 65636e65     ry and reference
 8009af0:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 8009b00:	6874202c 64616572 72632073 69746165     , threads creati
 8009b10:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 8009b20:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 8009b30:	6874202c 64616572 72632073 69746165     , threads creati
 8009b40:	66206e6f 206d6f72 70616568 00000000     on from heap....

08009b50 <patterndyn>:
 8009b50:	08009a90 08009aa0 08009ab0 00000000     ................

08009b60 <patternqueues>:
 8009b60:	08009bb0 08009b70 00000000 00000000     ....p...........

08009b70 <testqueues2>:
 8009b70:	08009b80 08007191 00000000 08007431     .....q......1t..
 8009b80:	75657551 202c7365 7074756f 71207475     Queues, output q
 8009b90:	65756575 00000073 75657551 202c7365     ueues...Queues, 
 8009ba0:	75706e69 75712074 73657565 00000000     input queues....

08009bb0 <testqueues1>:
 8009bb0:	08009b98 08007151 00000000 080071c1     ....Qq.......q..

08009bc0 <testsys1>:
 8009bc0:	08009c20 00000000 00000000 08007741      ...........Aw..

08009bd0 <testsys2>:
 8009bd0:	08009c04 00000000 00000000 08007671     ............qv..

08009be0 <testsys3>:
 8009be0:	08009bf0 00000000 00000000 080076b1     .............v..
 8009bf0:	74737953 202c6d65 65746e69 74697267     System, integrit
 8009c00:	00000079 74737953 202c6d65 65746e69     y...System, inte
 8009c10:	70757272 68207374 6c646e61 00676e69     rrupts handling.
 8009c20:	74737953 202c6d65 74697263 6c616369     System, critical
 8009c30:	6e6f7a20 00007365 00000000 00000000      zones..........

08009c40 <patternsys>:
 8009c40:	08009bc0 08009bd0 08009be0 00000000     ................

08009c50 <testbmk8>:
 8009c50:	08009ed0 00000000 00000000 08007e61     ............a~..

08009c60 <patternbmk>:
 8009c60:	08009ca0 08009cb0 08009cd0 08009cf0     ................
 8009c70:	08009ce0 0800a010 0800a020 08009c50     ........ ...P...
 8009c80:	08009cc0 08009fd0 08009fe0 08009ff0     ................
 8009c90:	0800a000 00000000 00000000 00000000     ................

08009ca0 <testbmk1>:
 8009ca0:	08009fb0 00000000 00000000 080079c1     .............y..

08009cb0 <testbmk2>:
 8009cb0:	08009f98 00000000 00000000 08007a31     ............1z..

08009cc0 <testbmk9>:
 8009cc0:	08009eac 00000000 00000000 08007f71     ............q...

08009cd0 <testbmk3>:
 8009cd0:	08009f80 00000000 00000000 08007aa1     .............z..

08009ce0 <testbmk5>:
 8009ce0:	08009f44 00000000 00000000 08007c81     D............|..

08009cf0 <testbmk4>:
 8009cf0:	08009f64 00000000 00000000 08007b91     d............{..
 8009d00:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 8009d10:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 8009d20:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 8009d30:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 8009d40:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 8009d50:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 8009d60:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 8009d70:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 8009d80:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 8009d90:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 8009da0:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 8009db0:	203a2065 00000000 72687420 73646165     e : .... threads
 8009dc0:	0000532f 67736d20 2c532f73 00000020     /S.. msgs/S, ...
 8009dd0:	78746320 2f637773 00000053 73657220      ctxswc/S... res
 8009de0:	64656863 73656c75 202c532f 00000000     chedules/S, ....
 8009df0:	74796220 532f7365 00000000 6d697420      bytes/S.... tim
 8009e00:	2f737265 00000053 69617720 69732b74     ers/S... wait+si
 8009e10:	6c616e67 0000532f 636f6c20 6e752b6b     gnal/S.. lock+un
 8009e20:	6b636f6c 0000532f 636e6542 72616d68     lock/S..Benchmar
 8009e30:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 8009e40:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 8009e50:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 8009e60:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 8009e70:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 8009e80:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 8009e90:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 8009ea0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 8009eb0:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 8009ec0:	68742073 67756f72 74757068 00000000     s throughput....
 8009ed0:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 8009ee0:	626f7220 63206e69 65746e6f 73207478      robin context s
 8009ef0:	63746977 676e6968 00000000 636e6542     witching....Benc
 8009f00:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 8009f10:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 8009f20:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 8009f30:	61657268 202c7364 61657263 6f206574     hreads, create o
 8009f40:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 8009f50:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 8009f60:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 8009f70:	65746e6f 73207478 63746977 00000068     ontext switch...
 8009f80:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8009f90:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 8009fa0:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 8009fb0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8009fc0:	20736567 00003123 00000000 00000000     ges #1..........

08009fd0 <testbmk10>:
 8009fd0:	08009e88 00000000 00000000 08008021     ............!...

08009fe0 <testbmk11>:
 8009fe0:	08009e64 08007e51 00000000 080080a1     d...Q~..........

08009ff0 <testbmk12>:
 8009ff0:	08009e44 08008181 00000000 08008111     D...............

0800a000 <testbmk13>:
 800a000:	08009e28 00000000 00000000 08007801     (............x..

0800a010 <testbmk6>:
 800a010:	08009f24 00000000 00000000 08007911     $............y..

0800a020 <testbmk7>:
 800a020:	08009efc 08007e41 00000000 08007d01     ....A~.......}..
 800a030:	74737973 00656d69 67617355 25203a65     systime.Usage: %
 800a040:	000a0d73 0d756c25 0000000a 6f666e69     s...%lu.....info
 800a050:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800a060:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800a070:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800a080:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800a090:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800a0a0:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800a0b0:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800a0c0:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800a0d0:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800a0e0:	00202d20 206c754a 32203032 00363130      - .Jul 20 2016.
 800a0f0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800a100:	73257325 00000a0d 313a3331 34343a39     %s%s....13:19:44
 800a110:	00000000 00000920 0000445e 6c656873     .... ...^D..shel
 800a120:	0000006c 68430a0d 4f696269 54522f53     l.....ChibiOS/RT
 800a130:	65685320 0a0d6c6c 00000000 203e6863      Shell......ch> 
 800a140:	00000000 6f6c0a0d 74756f67 00000000     ......logout....
 800a150:	206f6f74 796e616d 67726120 6e656d75     too many argumen
 800a160:	0a0d7374 00000000 74697865 00000000     ts......exit....
 800a170:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 800a180:	6568203a 6520706c 20746978 00000000     : help exit ....
 800a190:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 800a1a0:	6c756e28 0000296c 00000000 00000000     (null)..........

0800a1b0 <ep1config>:
 800a1b0:	00000002 00000000 08002481 080024f1     .........$...$..
 800a1c0:	00400040 20001a30 20001a44 00000002     @.@.0.. D.. ....
	...

0800a1e0 <vcom_configuration_descriptor>:
 800a1e0:	00000043 0800a230 00000000 00000000     C...0...........

0800a1f0 <ep2config>:
 800a1f0:	00000003 00000000 08002561 00000000     ........a%......
 800a200:	00000010 20001a1c 00000000 00000001     ....... ........
	...

0800a220 <usbcfg>:
 800a220:	08008981 08008951 08002441 00000000     ....Q...A$......

0800a230 <vcom_configuration_descriptor_data>:
 800a230:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800a240:	24050001 05011000 01000124 02022404     ...$....$....$..
 800a250:	00062405 82050701 ff000803 00010409     .$..............
 800a260:	00000a02 01050700 00004002 02810507     .........@......
 800a270:	00000040 00000000 00000000 00000000     @...............

0800a280 <vcom_device_descriptor_data>:
 800a280:	01100112 40000002 57400483 02010200     .......@..@W....
 800a290:	00000103 00000000 00000000 00000000     ................

0800a2a0 <vcom_string0>:
 800a2a0:	04090304 00000000 00000000 00000000     ................

0800a2b0 <vcom_string1>:
 800a2b0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800a2c0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800a2d0:	00630069 00000073 00000000 00000000     i.c.s...........

0800a2e0 <vcom_string2>:
 800a2e0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800a2f0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800a300:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800a310:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800a320 <vcom_string3>:
 800a320:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800a330 <vcom_strings>:
 800a330:	00000004 0800a2a0 00000026 0800a2b0     ........&.......
 800a340:	00000038 0800a2e0 00000008 0800a320     8........... ...

0800a350 <serusbcfg>:
 800a350:	20000f70 00020101 00000000 00000000     p.. ............

0800a360 <vcom_device_descriptor>:
 800a360:	00000012 0800a280 00000000 00000000     ................

0800a370 <commands>:
 800a370:	0800a614 08008bc1 0800a618 08008b61     ............a...
 800a380:	08009890 08008b11 0800a620 08008aa1     ........ .......
	...

0800a3a0 <spi1cfg>:
 800a3a0:	00000000 40021000 001b0003 00000000     .......@........

0800a3b0 <spi2cfg>:
 800a3b0:	00000000 40020400 0000000c 00000000     .......@........

0800a3c0 <states.8289>:
 800a3c0:	0800a588 0800a590 0800a598 0800a5a0     ................
 800a3d0:	0800a5ac 0800a5b4 0800a5bc 0800a5c4     ................
 800a3e0:	0800a5cc 0800a5d8 0800a5e0 0800a5e8     ................
 800a3f0:	0800a5f4 0800a5fc 0800a604 0800a60c     ................
 800a400:	64616572 00007265 5f746573 206d7770     reader..set_pwm 
 800a410:	6d6d6f63 20646e61 6465656e 20322073     command needs 2 
 800a420:	75677261 746e656d 66203b73 74737269     arguments; first
 800a430:	656e6f20 20736920 6e616863 206c656e      one is channel 
 800a440:	626d756e 2c207265 63657320 20646e6f     number , second 
 800a450:	20656e6f 50207369 76204d57 65756c61     one is PWM value
 800a460:	000a0d20 204d5750 6e616863 736c656e      ...PWM channels
 800a470:	6f687320 20646c75 62206562 65777465      should be betwe
 800a480:	30206e65 0d31312d 0000000a 204d5750     en 0-11.....PWM 
 800a490:	756c6176 73692065 74756f20 20666f20     value is out of 
 800a4a0:	676e6172 000a0d65 67617355 74203a65     range...Usage: t
 800a4b0:	0d747365 0000000a 2074756f 6d20666f     est.....out of m
 800a4c0:	726f6d65 000a0d79 67617355 74203a65     emory...Usage: t
 800a4d0:	61657268 0a0d7364 00000000 20202020     hreads......    
 800a4e0:	72646461 20202020 63617473 7270206b     addr    stack pr
 800a4f0:	72206f69 20736665 20202020 74617473     io refs     stat
 800a500:	000a0d65 6c383025 30252078 20786c38     e...%08lx %08lx 
 800a510:	756c3425 6c342520 39252075 000a0d73     %4lu %4lu %9s...
 800a520:	67617355 6d203a65 0a0d6d65 00000000     Usage: mem......
 800a530:	65726f63 65726620 656d2065 79726f6d     core free memory
 800a540:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 800a550:	70616568 61726620 6e656d67 20207374     heap fragments  
 800a560:	25203a20 000a0d75 70616568 65726620      : %u...heap fre
 800a570:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 800a580:	0d736574 0000000a 44414552 00000059     tes.....READY...
 800a590:	52525543 00544e45 54535457 00545241     CURRENT.WTSTART.
 800a5a0:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 800a5b0:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 800a5c0:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 800a5d0:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 800a5e0:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 800a5f0:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 800a600:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 800a610:	0000004c 006d656d 65726874 00736461     L...mem.threads.
 800a620:	5f746573 006d7770 00000000 00000000     set_pwm.........

0800a630 <pwmcfg>:
 800a630:	000186a0 00000064 00000000 00000001     ....d...........
 800a640:	00000000 00000001 00000000 00000001     ................
 800a650:	00000000 00000001 00000000 00000000     ................
	...

0800a670 <shell_cfg1>:
 800a670:	20001ba0 0800a370 00000000 00000000     ... p...........

0800a680 <_ctype_>:
 800a680:	20202000 20202020 28282020 20282828     .         ((((( 
 800a690:	20202020 20202020 20202020 20202020                     
 800a6a0:	10108820 10101010 10101010 10101010      ...............
 800a6b0:	04040410 04040404 10040404 10101010     ................
 800a6c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800a6d0:	01010101 01010101 01010101 10101010     ................
 800a6e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800a6f0:	02020202 02020202 02020202 10101010     ................
 800a700:	00000020 00000000 00000000 00000000      ...............
	...
