
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f002 f915 	bl	8002400 <__early_init>
 80001d6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001da:	491c      	ldr	r1, [pc, #112]	; (800024c <endfiniloop+0xa>)
 80001dc:	4a1c      	ldr	r2, [pc, #112]	; (8000250 <endfiniloop+0xe>)

080001de <msloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <msloop>
 80001e8:	491a      	ldr	r1, [pc, #104]	; (8000254 <endfiniloop+0x12>)
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <endfiniloop+0x6>)

080001ec <psloop>:
 80001ec:	4291      	cmp	r1, r2
 80001ee:	bf3c      	itt	cc
 80001f0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f4:	e7fa      	bcc.n	80001ec <psloop>
 80001f6:	4918      	ldr	r1, [pc, #96]	; (8000258 <endfiniloop+0x16>)
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x1a>)
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <endfiniloop+0x1e>)

080001fc <dloop>:
 80001fc:	429a      	cmp	r2, r3
 80001fe:	bf3e      	ittt	cc
 8000200:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000204:	f842 0b04 	strcc.w	r0, [r2], #4
 8000208:	e7f8      	bcc.n	80001fc <dloop>
 800020a:	2000      	movs	r0, #0
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <endfiniloop+0x22>)
 800020e:	4a16      	ldr	r2, [pc, #88]	; (8000268 <endfiniloop+0x26>)

08000210 <bloop>:
 8000210:	4291      	cmp	r1, r2
 8000212:	bf3c      	itt	cc
 8000214:	f841 0b04 	strcc.w	r0, [r1], #4
 8000218:	e7fa      	bcc.n	8000210 <bloop>
 800021a:	f000 f851 	bl	80002c0 <__late_init>
 800021e:	4c13      	ldr	r4, [pc, #76]	; (800026c <endfiniloop+0x2a>)
 8000220:	4d13      	ldr	r5, [pc, #76]	; (8000270 <endfiniloop+0x2e>)

08000222 <initloop>:
 8000222:	42ac      	cmp	r4, r5
 8000224:	da03      	bge.n	800022e <endinitloop>
 8000226:	f854 1b04 	ldr.w	r1, [r4], #4
 800022a:	4788      	blx	r1
 800022c:	e7f9      	b.n	8000222 <initloop>

0800022e <endinitloop>:
 800022e:	f002 f9af 	bl	8002590 <main>
 8000232:	4c10      	ldr	r4, [pc, #64]	; (8000274 <endfiniloop+0x32>)
 8000234:	4d10      	ldr	r5, [pc, #64]	; (8000278 <endfiniloop+0x36>)

08000236 <finiloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endfiniloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <finiloop>

08000242 <endfiniloop>:
 8000242:	f000 b845 	b.w	80002d0 <__default_exit>
 8000246:	0000      	.short	0x0000
 8000248:	20000800 	.word	0x20000800
 800024c:	20000000 	.word	0x20000000
 8000250:	20000400 	.word	0x20000400
 8000254:	20000400 	.word	0x20000400
 8000258:	080029f8 	.word	0x080029f8
 800025c:	20000800 	.word	0x20000800
 8000260:	20000820 	.word	0x20000820
 8000264:	20000820 	.word	0x20000820
 8000268:	20000f98 	.word	0x20000f98
 800026c:	080001c0 	.word	0x080001c0
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	00000000 	.word	0x00000000

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	f000 f916 	bl	80004c0 <_dbg_check_unlock>
 8000294:	f000 fdac 	bl	8000df0 <_stats_stop_measure_crit_thd>
 8000298:	2300      	movs	r3, #0
 800029a:	f383 8811 	msr	BASEPRI, r3
 800029e:	4628      	mov	r0, r5
 80002a0:	47a0      	blx	r4
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fccc 	bl	8000c40 <chThdExit>

080002a8 <_port_switch_from_isr>:
 80002a8:	f000 fd9a 	bl	8000de0 <_stats_start_measure_crit_thd>
 80002ac:	f000 f8f8 	bl	80004a0 <_dbg_check_lock>
 80002b0:	f000 fbc6 	bl	8000a40 <chSchDoReschedule>
 80002b4:	f000 f904 	bl	80004c0 <_dbg_check_unlock>
 80002b8:	f000 fd9a 	bl	8000df0 <_stats_stop_measure_crit_thd>

080002bc <_port_exit_from_isr>:
 80002bc:	df00      	svc	0
 80002be:	e7fe      	b.n	80002be <_port_exit_from_isr+0x2>

080002c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
	...

080002d0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80002d0:	e7fe      	b.n	80002d0 <__default_exit>
 80002d2:	bf00      	nop
	...

080002e0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80002e0:	e7fe      	b.n	80002e0 <_unhandled_exception>
 80002e2:	bf00      	nop
	...

080002f0 <_idle_thread>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <_idle_thread+0xc>)
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <_idle_thread+0x10>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	619a      	str	r2, [r3, #24]
 80002f8:	e7fe      	b.n	80002f8 <_idle_thread+0x8>
 80002fa:	bf00      	nop
 80002fc:	20000820 	.word	0x20000820
 8000300:	08002620 	.word	0x08002620
	...

08000310 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <chSysInit+0x90>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000312:	4a24      	ldr	r2, [pc, #144]	; (80003a4 <chSysInit+0x94>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000314:	4824      	ldr	r0, [pc, #144]	; (80003a8 <chSysInit+0x98>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000316:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000318:	2400      	movs	r4, #0
 800031a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800031e:	4e23      	ldr	r6, [pc, #140]	; (80003ac <chSysInit+0x9c>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000320:	4d23      	ldr	r5, [pc, #140]	; (80003b0 <chSysInit+0xa0>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000322:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000326:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 8000328:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	68f2      	ldr	r2, [r6, #12]
 800032e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000332:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000334:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000336:	2120      	movs	r1, #32
 8000338:	f042 0201 	orr.w	r2, r2, #1
 800033c:	2610      	movs	r6, #16
 800033e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000340:	b083      	sub	sp, #12
 8000342:	77de      	strb	r6, [r3, #31]
 8000344:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000348:	f000 fa2a 	bl	80007a0 <_scheduler_init>
  _vt_init();
 800034c:	f000 f978 	bl	8000640 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000350:	f000 fcc6 	bl	8000ce0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000354:	f000 fd74 	bl	8000e40 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000358:	f000 fdc2 	bl	8000ee0 <_heap_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 800035c:	f000 fd00 	bl	8000d60 <_stats_init>
#endif
#if CH_DBG_ENABLE_TRACE == TRUE
  _dbg_trace_init();
 8000360:	f000 f946 	bl	80005f0 <_dbg_trace_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	4628      	mov	r0, r5
 8000368:	f000 fb72 	bl	8000a50 <_thread_init>
 800036c:	f5a5 6788 	sub.w	r7, r5, #1088	; 0x440

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <chSysInit+0xa4>)
 8000372:	61c3      	str	r3, [r0, #28]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000374:	2601      	movs	r6, #1
 8000376:	f880 6020 	strb.w	r6, [r0, #32]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800037a:	61b8      	str	r0, [r7, #24]
 *
 * @special
 */
static inline void chSysEnable(void) {

  _dbg_check_enable();
 800037c:	f000 f880 	bl	8000480 <_dbg_check_enable>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000380:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000384:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <chSysInit+0xa8>)
 800038a:	619a      	str	r2, [r3, #24]

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  (void) chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa),
 800038c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8000390:	4632      	mov	r2, r6
 8000392:	9400      	str	r4, [sp, #0]
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <chSysInit+0xac>)
 8000396:	21f8      	movs	r1, #248	; 0xf8
 8000398:	f000 fbb2 	bl	8000b00 <chThdCreateStatic>
                           IDLEPRIO, (tfunc_t)_idle_thread, NULL);
#endif
}
 800039c:	b003      	add	sp, #12
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	05fa0300 	.word	0x05fa0300
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	e000edf0 	.word	0xe000edf0
 80003b0:	20000c60 	.word	0x20000c60
 80003b4:	20000400 	.word	0x20000400
 80003b8:	08002710 	.word	0x08002710
 80003bc:	080002f1 	.word	0x080002f1

080003c0 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80003c2:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <chSysHalt+0x8>)
 80003c4:	62d8      	str	r0, [r3, #44]	; 0x2c
 80003c6:	e7fe      	b.n	80003c6 <chSysHalt+0x6>
 80003c8:	20000820 	.word	0x20000820
 80003cc:	00000000 	.word	0x00000000

080003d0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80003d4:	4d27      	ldr	r5, [pc, #156]	; (8000474 <chSysTimerHandlerI+0xa4>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003d6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000

  chDbgCheckClassI();
 80003da:	f000 f8e9 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80003de:	f000 f8e7 	bl	80005b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80003e2:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80003e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003e6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80003e8:	68a1      	ldr	r1, [r4, #8]
 80003ea:	1ad0      	subs	r0, r2, r3
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f105 0a1c 	add.w	sl, r5, #28
 80003f2:	d322      	bcc.n	800043a <chSysTimerHandlerI+0x6a>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80003f4:	2700      	movs	r7, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003f6:	f04f 0820 	mov.w	r8, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80003fa:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80003fc:	f8d4 900c 	ldr.w	r9, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000400:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000402:	4552      	cmp	r2, sl
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000404:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000406:	f8c2 a004 	str.w	sl, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800040a:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800040c:	60e7      	str	r7, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800040e:	d02e      	beq.n	800046e <chSysTimerHandlerI+0x9e>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000410:	f000 f886 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000414:	f000 fcfc 	bl	8000e10 <_stats_stop_measure_crit_isr>
 8000418:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800041c:	6920      	ldr	r0, [r4, #16]
 800041e:	47c8      	blx	r9
 8000420:	f388 8811 	msr	BASEPRI, r8
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8000424:	f000 fcec 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000428:	f000 f862 	bl	80004f0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 800042c:	69ec      	ldr	r4, [r5, #28]
 800042e:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000430:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000432:	68a1      	ldr	r1, [r4, #8]
 8000434:	1ad0      	subs	r0, r2, r3
 8000436:	4281      	cmp	r1, r0
 8000438:	d9df      	bls.n	80003fa <chSysTimerHandlerI+0x2a>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800043a:	4554      	cmp	r4, sl
 800043c:	d015      	beq.n	800046a <chSysTimerHandlerI+0x9a>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800043e:	440b      	add	r3, r1
 8000440:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000442:	2b01      	cmp	r3, #1
 8000444:	bf98      	it	ls
 8000446:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 8000448:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800044a:	4620      	mov	r0, r4
 800044c:	f000 fdc8 	bl	8000fe0 <stSetAlarm>
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8000454:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <chSysTimerHandlerI+0xa4>)
 800045a:	1a63      	subs	r3, r4, r1
 800045c:	1a52      	subs	r2, r2, r1
 800045e:	429a      	cmp	r2, r3
 8000460:	d903      	bls.n	800046a <chSysTimerHandlerI+0x9a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000462:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <chSysTimerHandlerI+0xa8>)
 8000466:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000468:	e7fe      	b.n	8000468 <chSysTimerHandlerI+0x98>
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 800046e:	f000 fdaf 	bl	8000fd0 <stStopAlarm>
 8000472:	e7cd      	b.n	8000410 <chSysTimerHandlerI+0x40>
 8000474:	20000820 	.word	0x20000820
 8000478:	08002610 	.word	0x08002610
 800047c:	00000000 	.word	0x00000000

08000480 <_dbg_check_enable>:
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <_dbg_check_enable+0x14>)
 8000482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000484:	b90a      	cbnz	r2, 800048a <_dbg_check_enable+0xa>
 8000486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000488:	b113      	cbz	r3, 8000490 <_dbg_check_enable+0x10>
    chSysHalt("SV#3");
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <_dbg_check_enable+0x18>)
 800048c:	f7ff bf98 	b.w	80003c0 <chSysHalt>
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000820 	.word	0x20000820
 8000498:	08002640 	.word	0x08002640
 800049c:	00000000 	.word	0x00000000

080004a0 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 80004a0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80004a2:	4c05      	ldr	r4, [pc, #20]	; (80004b8 <_dbg_check_lock+0x18>)
 80004a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004a6:	b90b      	cbnz	r3, 80004ac <_dbg_check_lock+0xc>
 80004a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004aa:	b113      	cbz	r3, 80004b2 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <_dbg_check_lock+0x1c>)
 80004ae:	f7ff ff87 	bl	80003c0 <chSysHalt>
  }
  _dbg_enter_lock();
 80004b2:	2301      	movs	r3, #1
 80004b4:	6363      	str	r3, [r4, #52]	; 0x34
 80004b6:	bd10      	pop	{r4, pc}
 80004b8:	20000820 	.word	0x20000820
 80004bc:	08002648 	.word	0x08002648

080004c0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 80004c0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80004c2:	4c07      	ldr	r4, [pc, #28]	; (80004e0 <_dbg_check_unlock+0x20>)
 80004c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004c6:	b92b      	cbnz	r3, 80004d4 <_dbg_check_unlock+0x14>
 80004c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dd02      	ble.n	80004d4 <_dbg_check_unlock+0x14>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 80004ce:	2300      	movs	r3, #0
 80004d0:	6363      	str	r3, [r4, #52]	; 0x34
 80004d2:	bd10      	pop	{r4, pc}
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#5");
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <_dbg_check_unlock+0x24>)
 80004d6:	f7ff ff73 	bl	80003c0 <chSysHalt>
  }
  _dbg_leave_lock();
 80004da:	2300      	movs	r3, #0
 80004dc:	6363      	str	r3, [r4, #52]	; 0x34
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	20000820 	.word	0x20000820
 80004e4:	08002650 	.word	0x08002650
	...

080004f0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 80004f0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80004f2:	4c06      	ldr	r4, [pc, #24]	; (800050c <_dbg_check_lock_from_isr+0x1c>)
 80004f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd01      	ble.n	80004fe <_dbg_check_lock_from_isr+0xe>
 80004fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004fc:	b113      	cbz	r3, 8000504 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <_dbg_check_lock_from_isr+0x20>)
 8000500:	f7ff ff5e 	bl	80003c0 <chSysHalt>
  }
  _dbg_enter_lock();
 8000504:	2301      	movs	r3, #1
 8000506:	6363      	str	r3, [r4, #52]	; 0x34
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	20000820 	.word	0x20000820
 8000510:	08002658 	.word	0x08002658
	...

08000520 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8000520:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000522:	4c08      	ldr	r4, [pc, #32]	; (8000544 <_dbg_check_unlock_from_isr+0x24>)
 8000524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000526:	2b00      	cmp	r3, #0
 8000528:	dd05      	ble.n	8000536 <_dbg_check_unlock_from_isr+0x16>
 800052a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd02      	ble.n	8000536 <_dbg_check_unlock_from_isr+0x16>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8000530:	2300      	movs	r3, #0
 8000532:	6363      	str	r3, [r4, #52]	; 0x34
 8000534:	bd10      	pop	{r4, pc}
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#7");
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <_dbg_check_unlock_from_isr+0x28>)
 8000538:	f7ff ff42 	bl	80003c0 <chSysHalt>
  }
  _dbg_leave_lock();
 800053c:	2300      	movs	r3, #0
 800053e:	6363      	str	r3, [r4, #52]	; 0x34
 8000540:	bd10      	pop	{r4, pc}
 8000542:	bf00      	nop
 8000544:	20000820 	.word	0x20000820
 8000548:	08002660 	.word	0x08002660
 800054c:	00000000 	.word	0x00000000

08000550 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8000550:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000552:	2320      	movs	r3, #32
 8000554:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000558:	4c07      	ldr	r4, [pc, #28]	; (8000578 <_dbg_check_enter_isr+0x28>)
 800055a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800055c:	2b00      	cmp	r3, #0
 800055e:	db01      	blt.n	8000564 <_dbg_check_enter_isr+0x14>
 8000560:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000562:	b11a      	cbz	r2, 800056c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <_dbg_check_enter_isr+0x2c>)
 8000566:	f7ff ff2b 	bl	80003c0 <chSysHalt>
 800056a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  ch.dbg.isr_cnt++;
 800056c:	3301      	adds	r3, #1
 800056e:	6323      	str	r3, [r4, #48]	; 0x30
 8000570:	2300      	movs	r3, #0
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	bd10      	pop	{r4, pc}
 8000578:	20000820 	.word	0x20000820
 800057c:	08002668 	.word	0x08002668

08000580 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8000580:	b510      	push	{r4, lr}
 8000582:	2320      	movs	r3, #32
 8000584:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000588:	4c07      	ldr	r4, [pc, #28]	; (80005a8 <_dbg_check_leave_isr+0x28>)
 800058a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd01      	ble.n	8000594 <_dbg_check_leave_isr+0x14>
 8000590:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000592:	b11a      	cbz	r2, 800059c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <_dbg_check_leave_isr+0x2c>)
 8000596:	f7ff ff13 	bl	80003c0 <chSysHalt>
 800059a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  ch.dbg.isr_cnt--;
 800059c:	3b01      	subs	r3, #1
 800059e:	6323      	str	r3, [r4, #48]	; 0x30
 80005a0:	2300      	movs	r3, #0
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	bd10      	pop	{r4, pc}
 80005a8:	20000820 	.word	0x20000820
 80005ac:	08002670 	.word	0x08002670

080005b0 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <chDbgCheckClassI+0x18>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	db03      	blt.n	80005c0 <chDbgCheckClassI+0x10>
 80005b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	dd00      	ble.n	80005c0 <chDbgCheckClassI+0x10>
 80005be:	4770      	bx	lr
    chSysHalt("SV#10");
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <chDbgCheckClassI+0x1c>)
 80005c2:	f7ff befd 	b.w	80003c0 <chSysHalt>
 80005c6:	bf00      	nop
 80005c8:	20000820 	.word	0x20000820
 80005cc:	08002678 	.word	0x08002678

080005d0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <chDbgCheckClassS+0x14>)
 80005d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d4:	b91a      	cbnz	r2, 80005de <chDbgCheckClassS+0xe>
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dd00      	ble.n	80005de <chDbgCheckClassS+0xe>
 80005dc:	4770      	bx	lr
    chSysHalt("SV#11");
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <chDbgCheckClassS+0x18>)
 80005e0:	f7ff beee 	b.w	80003c0 <chSysHalt>
 80005e4:	20000820 	.word	0x20000820
 80005e8:	08002680 	.word	0x08002680
 80005ec:	00000000 	.word	0x00000000

080005f0 <_dbg_trace_init>:
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <_dbg_trace_init+0xc>)
 80005f2:	2140      	movs	r1, #64	; 0x40
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80005f4:	185a      	adds	r2, r3, r1
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80005f6:	6399      	str	r1, [r3, #56]	; 0x38
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80005f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fa:	4770      	bx	lr
 80005fc:	20000820 	.word	0x20000820

08000600 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <_dbg_trace+0x30>)
 8000602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000606:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8000608:	b410      	push	{r4}
 800060a:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800060c:	6991      	ldr	r1, [r2, #24]
 800060e:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8000610:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8000612:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000614:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8000616:	f890 1020 	ldrb.w	r1, [r0, #32]
 800061a:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800061c:	3310      	adds	r3, #16
 800061e:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 8000622:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8000624:	bf28      	it	cs
 8000626:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 800062a:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800062c:	bc10      	pop	{r4}
 800062e:	4770      	bx	lr
 8000630:	20000820 	.word	0x20000820
	...

08000640 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000646:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800064a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800064c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800064e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000650:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000652:	621a      	str	r2, [r3, #32]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000820 	.word	0x20000820
 800065c:	00000000 	.word	0x00000000

08000660 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000664:	4605      	mov	r5, r0
 8000666:	460e      	mov	r6, r1
 8000668:	4614      	mov	r4, r2
 800066a:	4698      	mov	r8, r3
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 800066c:	f7ff ffa0 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8000670:	2d00      	cmp	r5, #0
 8000672:	d02d      	beq.n	80006d0 <chVTDoSetI+0x70>
 8000674:	b364      	cbz	r4, 80006d0 <chVTDoSetI+0x70>
 8000676:	b35e      	cbz	r6, 80006d0 <chVTDoSetI+0x70>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000678:	4f1e      	ldr	r7, [pc, #120]	; (80006f4 <chVTDoSetI+0x94>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800067a:	f8c5 8010 	str.w	r8, [r5, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800067e:	463b      	mov	r3, r7
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000680:	2e01      	cmp	r6, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000682:	f853 1f1c 	ldr.w	r1, [r3, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000686:	60ec      	str	r4, [r5, #12]
 8000688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800068c:	bf98      	it	ls
 800068e:	2602      	movls	r6, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000690:	4299      	cmp	r1, r3
 8000692:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000694:	d023      	beq.n	80006de <chVTDoSetI+0x7e>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000696:	6abc      	ldr	r4, [r7, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000698:	688b      	ldr	r3, [r1, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800069a:	4430      	add	r0, r6
 800069c:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800069e:	429c      	cmp	r4, r3
 80006a0:	d31a      	bcc.n	80006d8 <chVTDoSetI+0x78>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 80006a2:	69fb      	ldr	r3, [r7, #28]
  while (p->vt_delta < delta) {
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	4294      	cmp	r4, r2
 80006a8:	d904      	bls.n	80006b4 <chVTDoSetI+0x54>
    delta -= p->vt_delta;
    p = p->vt_next;
 80006aa:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80006ac:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	42a2      	cmp	r2, r4
 80006b2:	d3fa      	bcc.n	80006aa <chVTDoSetI+0x4a>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	606a      	str	r2, [r5, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80006b8:	602b      	str	r3, [r5, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80006ba:	6015      	str	r5, [r2, #0]
  p->vt_prev = vtp;
 80006bc:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 80006be:	60ac      	str	r4, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80006c0:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80006c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80006c6:	1b14      	subs	r4, r2, r4
 80006c8:	609c      	str	r4, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80006ca:	6279      	str	r1, [r7, #36]	; 0x24
 80006cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <chVTDoSetI+0x98>)
 80006d2:	f7ff fe75 	bl	80003c0 <chSysHalt>
 80006d6:	e7cf      	b.n	8000678 <chVTDoSetI+0x18>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80006d8:	f000 fc82 	bl	8000fe0 <stSetAlarm>
 80006dc:	e7e1      	b.n	80006a2 <chVTDoSetI+0x42>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80006de:	62b8      	str	r0, [r7, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80006e0:	61fd      	str	r5, [r7, #28]
      ch.vtlist.vt_prev = vtp;
 80006e2:	623d      	str	r5, [r7, #32]
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
 80006e4:	4430      	add	r0, r6
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80006e6:	6029      	str	r1, [r5, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80006e8:	6069      	str	r1, [r5, #4]
      vtp->vt_delta = delay;
 80006ea:	60ae      	str	r6, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
}
 80006ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006f0:	f000 bc56 	b.w	8000fa0 <stStartAlarm>
 80006f4:	20000820 	.word	0x20000820
 80006f8:	08002690 	.word	0x08002690
 80006fc:	00000000 	.word	0x00000000

08000700 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000700:	b510      	push	{r4, lr}
 8000702:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8000704:	f7ff ff54 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8000708:	2c00      	cmp	r4, #0
 800070a:	d033      	beq.n	8000774 <chVTDoResetI+0x74>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 800070c:	68e3      	ldr	r3, [r4, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d034      	beq.n	800077c <chVTDoResetI+0x7c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <chVTDoResetI+0x8c>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4294      	cmp	r4, r2
 8000718:	d00f      	beq.n	800073a <chVTDoResetI+0x3a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800071a:	6861      	ldr	r1, [r4, #4]
 800071c:	6822      	ldr	r2, [r4, #0]
 800071e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000720:	6822      	ldr	r2, [r4, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000722:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000724:	2000      	movs	r0, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000726:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000728:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800072a:	60e0      	str	r0, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800072c:	d004      	beq.n	8000738 <chVTDoResetI+0x38>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	6891      	ldr	r1, [r2, #8]
 8000732:	440b      	add	r3, r1
 8000734:	6093      	str	r3, [r2, #8]
 8000736:	bd10      	pop	{r4, pc}
 8000738:	bd10      	pop	{r4, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800073a:	461a      	mov	r2, r3
 800073c:	6821      	ldr	r1, [r4, #0]
 800073e:	f842 1f1c 	str.w	r1, [r2, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000742:	2000      	movs	r0, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000744:	4291      	cmp	r1, r2
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000746:	604a      	str	r2, [r1, #4]
  vtp->vt_func = NULL;
 8000748:	60e0      	str	r0, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800074a:	d01b      	beq.n	8000784 <chVTDoResetI+0x84>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800074c:	68a2      	ldr	r2, [r4, #8]
 800074e:	6888      	ldr	r0, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000750:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000752:	1883      	adds	r3, r0, r2
 8000754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000758:	608b      	str	r3, [r1, #8]
 800075a:	6a50      	ldr	r0, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800075c:	1b02      	subs	r2, r0, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800075e:	4293      	cmp	r3, r2
 8000760:	d9ea      	bls.n	8000738 <chVTDoResetI+0x38>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000762:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000764:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000766:	bf98      	it	ls
 8000768:	2302      	movls	r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800076a:	4418      	add	r0, r3
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 bc36 	b.w	8000fe0 <stSetAlarm>
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <chVTDoResetI+0x90>)
 8000776:	f7ff fe23 	bl	80003c0 <chSysHalt>
 800077a:	e7c7      	b.n	800070c <chVTDoResetI+0xc>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <chVTDoResetI+0x90>)
 800077e:	f7ff fe1f 	bl	80003c0 <chSysHalt>
 8000782:	e7c6      	b.n	8000712 <chVTDoResetI+0x12>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 8000788:	f000 bc22 	b.w	8000fd0 <stStopAlarm>
 800078c:	20000820 	.word	0x20000820
 8000790:	080026a0 	.word	0x080026a0
	...

080007a0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80007a2:	2200      	movs	r2, #0
 80007a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80007a6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80007a8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80007aa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	4770      	bx	lr
 80007b0:	20000820 	.word	0x20000820
	...

080007c0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 80007c4:	f7ff fef4 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80007c8:	b1c4      	cbz	r4, 80007fc <chSchReadyI+0x3c>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80007ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 80007ce:	b18b      	cbz	r3, 80007f4 <chSchReadyI+0x34>
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d00f      	beq.n	80007f4 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007d4:	2200      	movs	r2, #0
 80007d6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <chSchReadyI+0x44>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80007da:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80007de:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d2fb      	bcs.n	80007de <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80007ea:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80007ec:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80007ee:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80007f0:	605c      	str	r4, [r3, #4]

  return tp;
}
 80007f2:	bd10      	pop	{r4, pc}
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <chSchReadyI+0x48>)
 80007f6:	f7ff fde3 	bl	80003c0 <chSysHalt>
 80007fa:	e7eb      	b.n	80007d4 <chSchReadyI+0x14>
 */
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <chSchReadyI+0x48>)
 80007fe:	f7ff fddf 	bl	80003c0 <chSysHalt>
 8000802:	e7e2      	b.n	80007ca <chSchReadyI+0xa>
 8000804:	20000820 	.word	0x20000820
 8000808:	080026b0 	.word	0x080026b0
 800080c:	00000000 	.word	0x00000000

08000810 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4604      	mov	r4, r0
 8000814:	2320      	movs	r3, #32
 8000816:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800081a:	f000 faf1 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800081e:	f7ff fe67 	bl	80004f0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000822:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000826:	2b07      	cmp	r3, #7
 8000828:	d810      	bhi.n	800084c <wakeup+0x3c>
 800082a:	e8df f003 	tbb	[pc, r3]
 800082e:	0f15      	.short	0x0f15
 8000830:	040a1d0f 	.word	0x040a1d0f
 8000834:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000836:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000838:	f7ff feba 	bl	80005b0 <chDbgCheckClassI>

  sp->s_cnt++;
 800083c:	68ab      	ldr	r3, [r5, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000842:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000846:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000848:	6822      	ldr	r2, [r4, #0]
 800084a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000850:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff ffb4 	bl	80007c0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000858:	f7ff fe62 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800085c:	f000 fad8 	bl	8000e10 <_stats_stop_measure_crit_isr>
 8000860:	2300      	movs	r3, #0
 8000862:	f383 8811 	msr	BASEPRI, r3
 8000866:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000872:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff ffa3 	bl	80007c0 <chSchReadyI>
 800087a:	e7ed      	b.n	8000858 <wakeup+0x48>
 800087c:	0000      	movs	r0, r0
	...

08000880 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000880:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000882:	4c12      	ldr	r4, [pc, #72]	; (80008cc <chSchGoSleepS+0x4c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000884:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8000886:	f7ff fea3 	bl	80005d0 <chDbgCheckClassS>

  otp = currp;
 800088a:	69a5      	ldr	r5, [r4, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800088c:	6823      	ldr	r3, [r4, #0]
  otp->p_state = newstate;
 800088e:	f885 6020 	strb.w	r6, [r5, #32]

  tqp->p_next = tp->p_next;
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	6022      	str	r2, [r4, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000896:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000898:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 800089a:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800089c:	f883 1020 	strb.w	r1, [r3, #32]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80008a0:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80008a2:	f7ff fead 	bl	8000600 <_dbg_trace>
 80008a6:	4629      	mov	r1, r5
 80008a8:	69a0      	ldr	r0, [r4, #24]
 80008aa:	f000 fa81 	bl	8000db0 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80008ae:	f3ef 8309 	mrs	r3, PSP
 80008b2:	69ea      	ldr	r2, [r5, #28]
 80008b4:	3b24      	subs	r3, #36	; 0x24
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d902      	bls.n	80008c0 <chSchGoSleepS+0x40>
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <chSchGoSleepS+0x50>)
 80008bc:	f7ff fd80 	bl	80003c0 <chSysHalt>
 80008c0:	4629      	mov	r1, r5
 80008c2:	69a0      	ldr	r0, [r4, #24]
}
 80008c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80008c8:	f7ff bcda 	b.w	8000280 <_port_switch>
 80008cc:	20000820 	.word	0x20000820
 80008d0:	080026c0 	.word	0x080026c0
	...

080008e0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	460c      	mov	r4, r1
 80008e4:	b086      	sub	sp, #24
 80008e6:	4606      	mov	r6, r0

  chDbgCheckClassS();
 80008e8:	f7ff fe72 	bl	80005d0 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80008ec:	1c63      	adds	r3, r4, #1
 80008ee:	d014      	beq.n	800091a <chSchGoSleepTimeoutS+0x3a>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80008f0:	4d0e      	ldr	r5, [pc, #56]	; (800092c <chSchGoSleepTimeoutS+0x4c>)
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <chSchGoSleepTimeoutS+0x50>)
 80008f4:	69ab      	ldr	r3, [r5, #24]
 80008f6:	4621      	mov	r1, r4
 80008f8:	a801      	add	r0, sp, #4
 80008fa:	f7ff feb1 	bl	8000660 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80008fe:	4630      	mov	r0, r6
 8000900:	f7ff ffbe 	bl	8000880 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000904:	f7ff fe54 	bl	80005b0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000908:	9b04      	ldr	r3, [sp, #16]
 800090a:	b113      	cbz	r3, 8000912 <chSchGoSleepTimeoutS+0x32>
      chVTDoResetI(&vt);
 800090c:	a801      	add	r0, sp, #4
 800090e:	f7ff fef7 	bl	8000700 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000912:	69ab      	ldr	r3, [r5, #24]
}
 8000914:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000916:	b006      	add	sp, #24
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	4d04      	ldr	r5, [pc, #16]	; (800092c <chSchGoSleepTimeoutS+0x4c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800091c:	4630      	mov	r0, r6
 800091e:	f7ff ffaf 	bl	8000880 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8000922:	69ab      	ldr	r3, [r5, #24]
}
 8000924:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000926:	b006      	add	sp, #24
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	bf00      	nop
 800092c:	20000820 	.word	0x20000820
 8000930:	08000811 	.word	0x08000811
	...

08000940 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000940:	b570      	push	{r4, r5, r6, lr}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000942:	4d19      	ldr	r5, [pc, #100]	; (80009a8 <chSchWakeupS+0x68>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000944:	4604      	mov	r4, r0
 8000946:	460e      	mov	r6, r1

  chDbgCheckClassS();
 8000948:	f7ff fe42 	bl	80005d0 <chDbgCheckClassS>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800094c:	69a8      	ldr	r0, [r5, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800094e:	6266      	str	r6, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000950:	6883      	ldr	r3, [r0, #8]
 8000952:	68a2      	ldr	r2, [r4, #8]
 8000954:	429a      	cmp	r2, r3
 8000956:	d918      	bls.n	800098a <chSchWakeupS+0x4a>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000958:	f7ff ff32 	bl	80007c0 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800095c:	2301      	movs	r3, #1
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 800095e:	4606      	mov	r6, r0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000960:	f884 3020 	strb.w	r3, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8000964:	61ac      	str	r4, [r5, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000966:	f7ff fe4b 	bl	8000600 <_dbg_trace>
 800096a:	4631      	mov	r1, r6
 800096c:	4620      	mov	r0, r4
 800096e:	f000 fa1f 	bl	8000db0 <_stats_ctxswc>
 8000972:	f3ef 8309 	mrs	r3, PSP
 8000976:	69f2      	ldr	r2, [r6, #28]
 8000978:	3b24      	subs	r3, #36	; 0x24
 800097a:	429a      	cmp	r2, r3
 800097c:	d80a      	bhi.n	8000994 <chSchWakeupS+0x54>
 800097e:	4631      	mov	r1, r6
 8000980:	4620      	mov	r0, r4
  }
}
 8000982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000986:	f7ff bc7b 	b.w	8000280 <_port_switch>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 800098a:	4620      	mov	r0, r4
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800098c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 8000990:	f7ff bf16 	b.w	80007c0 <chSchReadyI>
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <chSchWakeupS+0x6c>)
 8000996:	f7ff fd13 	bl	80003c0 <chSysHalt>
 800099a:	4631      	mov	r1, r6
 800099c:	4620      	mov	r0, r4
  }
}
 800099e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80009a2:	f7ff bc6d 	b.w	8000280 <_port_switch>
 80009a6:	bf00      	nop
 80009a8:	20000820 	.word	0x20000820
 80009ac:	080026c0 	.word	0x080026c0

080009b0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <chSchIsPreemptionRequired+0x14>)
 80009b2:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->p_prio;
 80009b4:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80009b6:	6890      	ldr	r0, [r2, #8]
 80009b8:	689b      	ldr	r3, [r3, #8]
#endif
}
 80009ba:	4298      	cmp	r0, r3
 80009bc:	bf94      	ite	ls
 80009be:	2000      	movls	r0, #0
 80009c0:	2001      	movhi	r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	20000820 	.word	0x20000820
	...

080009d0 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80009d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp, *cp;

  otp = currp;
 80009d2:	4d17      	ldr	r5, [pc, #92]	; (8000a30 <chSchDoRescheduleAhead+0x60>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80009d4:	682a      	ldr	r2, [r5, #0]
 80009d6:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80009dc:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009de:	605d      	str	r5, [r3, #4]

  otp->p_state = CH_STATE_READY;
 80009e0:	2000      	movs	r0, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80009e2:	f882 1020 	strb.w	r1, [r2, #32]
 80009e6:	68a1      	ldr	r1, [r4, #8]

  otp->p_state = CH_STATE_READY;
 80009e8:	f884 0020 	strb.w	r0, [r4, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80009ec:	61aa      	str	r2, [r5, #24]
 80009ee:	e000      	b.n	80009f2 <chSchDoRescheduleAhead+0x22>
 80009f0:	681b      	ldr	r3, [r3, #0]

  otp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	428a      	cmp	r2, r1
 80009f6:	d8fb      	bhi.n	80009f0 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80009fc:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80009fe:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8000a00:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000a02:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 8000a04:	f7ff fdfc 	bl	8000600 <_dbg_trace>
 8000a08:	4621      	mov	r1, r4
 8000a0a:	69a8      	ldr	r0, [r5, #24]
 8000a0c:	f000 f9d0 	bl	8000db0 <_stats_ctxswc>
 8000a10:	f3ef 8309 	mrs	r3, PSP
 8000a14:	69e2      	ldr	r2, [r4, #28]
 8000a16:	3b24      	subs	r3, #36	; 0x24
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d902      	bls.n	8000a22 <chSchDoRescheduleAhead+0x52>
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <chSchDoRescheduleAhead+0x64>)
 8000a1e:	f7ff fccf 	bl	80003c0 <chSysHalt>
 8000a22:	4621      	mov	r1, r4
 8000a24:	69a8      	ldr	r0, [r5, #24]
}
 8000a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000a2a:	f7ff bc29 	b.w	8000280 <_port_switch>
 8000a2e:	bf00      	nop
 8000a30:	20000820 	.word	0x20000820
 8000a34:	080026c0 	.word	0x080026c0
	...

08000a40 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000a40:	f7ff bfc6 	b.w	80009d0 <chSchDoRescheduleAhead>
	...

08000a50 <_thread_init>:
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <_thread_init+0x58>)
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8000a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a54:	4604      	mov	r4, r0

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000a56:	2502      	movs	r5, #2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a58:	6950      	ldr	r0, [r2, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000a5a:	6421      	str	r1, [r4, #64]	; 0x40
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000a5c:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000a5e:	60a1      	str	r1, [r4, #8]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000a60:	f04f 0e01 	mov.w	lr, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000a64:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000a68:	f884 5020 	strb.w	r5, [r4, #32]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8000a6c:	f104 0728 	add.w	r7, r4, #40	; 0x28
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a70:	f104 0548 	add.w	r5, r4, #72	; 0x48
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000a74:	f104 0660 	add.w	r6, r4, #96	; 0x60
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a78:	6122      	str	r2, [r4, #16]
 8000a7a:	6160      	str	r0, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000a7c:	f884 e022 	strb.w	lr, [r4, #34]	; 0x22
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000a80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000a84:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000a86:	63a3      	str	r3, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000a88:	61a3      	str	r3, [r4, #24]
  REG_INSERT(tp);
 8000a8a:	6104      	str	r4, [r0, #16]
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a8c:	4628      	mov	r0, r5
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a8e:	62e1      	str	r1, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8000a90:	6321      	str	r1, [r4, #48]	; 0x30
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000a92:	62a7      	str	r7, [r4, #40]	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000a94:	61e6      	str	r6, [r4, #28]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000a96:	6154      	str	r4, [r2, #20]
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 8000a98:	f000 f8e2 	bl	8000c60 <chTMObjectInit>
  chTMStartMeasurementX(&tp->p_stats);
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f000 f8ef 	bl	8000c80 <chTMStartMeasurementX>
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000820 	.word	0x20000820
 8000aac:	00000000 	.word	0x00000000

08000ab0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8000ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460d      	mov	r5, r1
 8000ab8:	4616      	mov	r6, r2
 8000aba:	461f      	mov	r7, r3
 8000abc:	f8dd 8018 	ldr.w	r8, [sp, #24]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 8000ac0:	f7ff fd76 	bl	80005b0 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8000ac4:	b10c      	cbz	r4, 8000aca <chThdCreateI+0x1a>
 8000ac6:	2de7      	cmp	r5, #231	; 0xe7
 8000ac8:	d811      	bhi.n	8000aee <chThdCreateI+0x3e>
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <chThdCreateI+0x48>)
 8000acc:	f7ff fc78 	bl	80003c0 <chSysHalt>
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ad0:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8000ad4:	18e2      	adds	r2, r4, r3
 8000ad6:	4d09      	ldr	r5, [pc, #36]	; (8000afc <chThdCreateI+0x4c>)
 8000ad8:	60e2      	str	r2, [r4, #12]

  return _thread_init(tp, prio);
 8000ada:	4631      	mov	r1, r6

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000adc:	50e7      	str	r7, [r4, r3]

  return _thread_init(tp, prio);
 8000ade:	4620      	mov	r0, r4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ae0:	f8c2 8004 	str.w	r8, [r2, #4]
 8000ae4:	6215      	str	r5, [r2, #32]

  return _thread_init(tp, prio);
}
 8000ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
 8000aea:	f7ff bfb1 	b.w	8000a50 <_thread_init>
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8000aee:	2e7f      	cmp	r6, #127	; 0x7f
 8000af0:	d8eb      	bhi.n	8000aca <chThdCreateI+0x1a>
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d1ec      	bne.n	8000ad0 <chThdCreateI+0x20>
 8000af6:	e7e8      	b.n	8000aca <chThdCreateI+0x1a>
 8000af8:	080026e0 	.word	0x080026e0
 8000afc:	08000291 	.word	0x08000291

08000b00 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b083      	sub	sp, #12
 8000b06:	4680      	mov	r8, r0
 8000b08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000b0a:	4689      	mov	r9, r1
 8000b0c:	4692      	mov	sl, r2
 8000b0e:	469b      	mov	fp, r3
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 8000b10:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8000b14:	4604      	mov	r4, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8000b16:	26ff      	movs	r6, #255	; 0xff
 8000b18:	f804 6b01 	strb.w	r6, [r4], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b1c:	42a5      	cmp	r5, r4
 8000b1e:	d1fb      	bne.n	8000b18 <chThdCreateStatic+0x18>
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 8000b20:	eb08 0409 	add.w	r4, r8, r9
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b24:	42a5      	cmp	r5, r4
    *startp++ = v;
 8000b26:	bf38      	it	cc
 8000b28:	2655      	movcc	r6, #85	; 0x55
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b2a:	d203      	bcs.n	8000b34 <chThdCreateStatic+0x34>
    *startp++ = v;
 8000b2c:	f805 6b01 	strb.w	r6, [r5], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000b30:	42ac      	cmp	r4, r5
 8000b32:	d1fb      	bne.n	8000b2c <chThdCreateStatic+0x2c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b34:	2320      	movs	r3, #32
 8000b36:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000b3a:	f000 f951 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b3e:	f7ff fcaf 	bl	80004a0 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000b42:	465b      	mov	r3, fp
 8000b44:	4652      	mov	r2, sl
 8000b46:	4649      	mov	r1, r9
 8000b48:	9700      	str	r7, [sp, #0]
 8000b4a:	4640      	mov	r0, r8
 8000b4c:	f7ff ffb0 	bl	8000ab0 <chThdCreateI>
  chSchWakeupS(tp, MSG_OK);
 8000b50:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000b52:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8000b54:	f7ff fef4 	bl	8000940 <chSchWakeupS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000b58:	f7ff fcb2 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000b5c:	f000 f948 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <chThdCreateStatic+0x88>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d007      	beq.n	8000b78 <chThdCreateStatic+0x78>
 8000b68:	6999      	ldr	r1, [r3, #24]
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	688a      	ldr	r2, [r1, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d202      	bcs.n	8000b78 <chThdCreateStatic+0x78>
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <chThdCreateStatic+0x8c>)
 8000b74:	f7ff fc24 	bl	80003c0 <chSysHalt>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000b7e:	4620      	mov	r0, r4
 8000b80:	b003      	add	sp, #12
 8000b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b86:	bf00      	nop
 8000b88:	20000820 	.word	0x20000820
 8000b8c:	08002700 	.word	0x08002700

08000b90 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000b90:	b510      	push	{r4, lr}
 8000b92:	2320      	movs	r3, #32
 8000b94:	4604      	mov	r4, r0
 8000b96:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000b9a:	f000 f921 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000b9e:	f7ff fc7f 	bl	80004a0 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8000ba2:	b914      	cbnz	r4, 8000baa <chThdSleep+0x1a>
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <chThdSleep+0x4c>)
 8000ba6:	f7ff fc0b 	bl	80003c0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000baa:	4621      	mov	r1, r4
 8000bac:	2008      	movs	r0, #8
 8000bae:	f7ff fe97 	bl	80008e0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000bb2:	f7ff fc85 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000bb6:	f000 f91b 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <chThdSleep+0x50>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d007      	beq.n	8000bd2 <chThdSleep+0x42>
 8000bc2:	6999      	ldr	r1, [r3, #24]
 8000bc4:	6893      	ldr	r3, [r2, #8]
 8000bc6:	688a      	ldr	r2, [r1, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d202      	bcs.n	8000bd2 <chThdSleep+0x42>
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <chThdSleep+0x54>)
 8000bce:	f7ff fbf7 	bl	80003c0 <chSysHalt>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f383 8811 	msr	BASEPRI, r3
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	080026f0 	.word	0x080026f0
 8000be0:	20000820 	.word	0x20000820
 8000be4:	08002700 	.word	0x08002700
	...

08000bf0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000bf0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <chThdExitS+0x44>)
 8000bf4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8000bf8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000bfa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bfe:	429d      	cmp	r5, r3
 8000c00:	d007      	beq.n	8000c12 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fdda 	bl	80007c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d1f7      	bne.n	8000c02 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000c12:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000c16:	079b      	lsls	r3, r3, #30
 8000c18:	d104      	bne.n	8000c24 <chThdExitS+0x34>
    REG_REMOVE(tp);
 8000c1a:	6963      	ldr	r3, [r4, #20]
 8000c1c:	6922      	ldr	r2, [r4, #16]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	6922      	ldr	r2, [r4, #16]
 8000c22:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000c24:	200f      	movs	r0, #15
 8000c26:	f7ff fe2b 	bl	8000880 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <chThdExitS+0x48>)
}
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8000c30:	f7ff bbc6 	b.w	80003c0 <chSysHalt>
 8000c34:	20000820 	.word	0x20000820
 8000c38:	080026d0 	.word	0x080026d0
 8000c3c:	00000000 	.word	0x00000000

08000c40 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8000c40:	b510      	push	{r4, lr}
 8000c42:	2320      	movs	r3, #32
 8000c44:	4604      	mov	r4, r0
 8000c46:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000c4a:	f000 f8c9 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000c4e:	f7ff fc27 	bl	80004a0 <_dbg_check_lock>

  chSysLock();
  chThdExitS(msg);
 8000c52:	4620      	mov	r0, r4
  /* The thread never returns here.*/
}
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8000c58:	f7ff bfca 	b.w	8000bf0 <chThdExitS>
 8000c5c:	0000      	movs	r0, r0
	...

08000c60 <chTMObjectInit>:

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c60:	2200      	movs	r2, #0
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6e:	e880 000c 	stmia.w	r0, {r2, r3}
  tmp->last       = (rtcnt_t)0;
 8000c72:	6083      	str	r3, [r0, #8]
  tmp->n          = (ucnt_t)0;
 8000c74:	60c3      	str	r3, [r0, #12]
 8000c76:	4770      	bx	lr
	...

08000c80 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000c80:	4b01      	ldr	r3, [pc, #4]	; (8000c88 <chTMStartMeasurementX+0x8>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000c84:	6083      	str	r3, [r0, #8]
 8000c86:	4770      	bx	lr
 8000c88:	e0001000 	.word	0xe0001000
 8000c8c:	00000000 	.word	0x00000000

08000c90 <chTMStopMeasurementX>:
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c92:	4910      	ldr	r1, [pc, #64]	; (8000cd4 <chTMStopMeasurementX+0x44>)
 8000c94:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000c96:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c98:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c9a:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000c9e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000ca0:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000ca2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000caa:	18e4      	adds	r4, r4, r3
 8000cac:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000cb0:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000cb2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000cb4:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000cb6:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000cb8:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000cbc:	d805      	bhi.n	8000cca <chTMStopMeasurementX+0x3a>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000cbe:	6802      	ldr	r2, [r0, #0]
 8000cc0:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000cc2:	bf38      	it	cc
 8000cc4:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc8:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000cca:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cce:	4770      	bx	lr
 8000cd0:	e0001000 	.word	0xe0001000
 8000cd4:	20000820 	.word	0x20000820
	...

08000ce0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000ce2:	4c0d      	ldr	r4, [pc, #52]	; (8000d18 <_tm_init+0x38>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8000ce4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000ce6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000cec:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000cee:	2600      	movs	r6, #0
 8000cf0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000cf2:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000cf6:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000cf8:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000cfa:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000cfc:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000d02:	f7ff ffbd 	bl	8000c80 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000d06:	4668      	mov	r0, sp
 8000d08:	f7ff ffc2 	bl	8000c90 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000d0c:	9b02      	ldr	r3, [sp, #8]
 8000d0e:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
}
 8000d12:	b006      	add	sp, #24
 8000d14:	bdd0      	pop	{r4, r6, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000820 	.word	0x20000820
 8000d1c:	00000000 	.word	0x00000000

08000d20 <chTMChainMeasurementToX>:
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <chTMChainMeasurementToX+0x3c>)

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d22:	6842      	ldr	r2, [r0, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000d26:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000d28:	608b      	str	r3, [r1, #8]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000d2a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000d2e:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d30:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000d32:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000d34:	18e4      	adds	r4, r4, r3
 8000d36:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d3a:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d3c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000d3e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000d40:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d42:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000d46:	d805      	bhi.n	8000d54 <chTMChainMeasurementToX+0x34>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000d48:	6802      	ldr	r2, [r0, #0]
 8000d4a:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000d4c:	bf38      	it	cc
 8000d4e:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000d50:	bc70      	pop	{r4, r5, r6}
 8000d52:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000d54:	6043      	str	r3, [r0, #4]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000d56:	bc70      	pop	{r4, r5, r6}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e0001000 	.word	0xe0001000

08000d60 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8000d60:	b510      	push	{r4, lr}

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000d62:	4c08      	ldr	r4, [pc, #32]	; (8000d84 <_stats_init+0x24>)
 8000d64:	2300      	movs	r3, #0
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8000d66:	f504 6096 	add.w	r0, r4, #1200	; 0x4b0
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000d6a:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8000d6e:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8000d72:	f7ff ff75 	bl	8000c60 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8000d76:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
}
 8000d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8000d7e:	f7ff bf6f 	b.w	8000c60 <chTMObjectInit>
 8000d82:	bf00      	nop
 8000d84:	20000820 	.word	0x20000820
	...

08000d90 <_stats_increase_irq>:
/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  ch.kernel_stats.n_irq++;
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <_stats_increase_irq+0x10>)
 8000d92:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000820 	.word	0x20000820
	...

08000db0 <_stats_ctxswc>:
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <_stats_ctxswc+0x20>)
 8000db2:	f8d2 34ac 	ldr.w	r3, [r2, #1196]	; 0x4ac
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8000db6:	b410      	push	{r4}

  ch.kernel_stats.n_ctxswc++;
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000db8:	f101 0448 	add.w	r4, r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000dbc:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000dbe:	f100 0148 	add.w	r1, r0, #72	; 0x48
 8000dc2:	4620      	mov	r0, r4
}
 8000dc4:	bc10      	pop	{r4}
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000dc6:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000dca:	f7ff bfa9 	b.w	8000d20 <chTMChainMeasurementToX>
 8000dce:	bf00      	nop
 8000dd0:	20000820 	.word	0x20000820
	...

08000de0 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000de0:	4801      	ldr	r0, [pc, #4]	; (8000de8 <_stats_start_measure_crit_thd+0x8>)
 8000de2:	f7ff bf4d 	b.w	8000c80 <chTMStartMeasurementX>
 8000de6:	bf00      	nop
 8000de8:	20000cd0 	.word	0x20000cd0
 8000dec:	00000000 	.word	0x00000000

08000df0 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000df0:	4801      	ldr	r0, [pc, #4]	; (8000df8 <_stats_stop_measure_crit_thd+0x8>)
 8000df2:	f7ff bf4d 	b.w	8000c90 <chTMStopMeasurementX>
 8000df6:	bf00      	nop
 8000df8:	20000cd0 	.word	0x20000cd0
 8000dfc:	00000000 	.word	0x00000000

08000e00 <_stats_start_measure_crit_isr>:
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <_stats_start_measure_crit_isr+0x8>)
 8000e02:	f7ff bf3d 	b.w	8000c80 <chTMStartMeasurementX>
 8000e06:	bf00      	nop
 8000e08:	20000ce8 	.word	0x20000ce8
 8000e0c:	00000000 	.word	0x00000000

08000e10 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <_stats_stop_measure_crit_isr+0x8>)
 8000e12:	f7ff bf3d 	b.w	8000c90 <chTMStopMeasurementX>
 8000e16:	bf00      	nop
 8000e18:	20000ce8 	.word	0x20000ce8
 8000e1c:	00000000 	.word	0x00000000

08000e20 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8000e20:	b510      	push	{r4, lr}

  chDbgCheck(mp != NULL);
 8000e22:	4604      	mov	r4, r0
 8000e24:	b120      	cbz	r0, 8000e30 <chMtxObjectInit+0x10>

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000e26:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000e28:	6024      	str	r4, [r4, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000e2a:	6064      	str	r4, [r4, #4]
 8000e2c:	60a3      	str	r3, [r4, #8]
 8000e2e:	bd10      	pop	{r4, pc}
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);
 8000e30:	4801      	ldr	r0, [pc, #4]	; (8000e38 <chMtxObjectInit+0x18>)
 8000e32:	f7ff fac5 	bl	80003c0 <chSysHalt>
 8000e36:	e7f6      	b.n	8000e26 <chMtxObjectInit+0x6>
 8000e38:	08002730 	.word	0x08002730
 8000e3c:	00000000 	.word	0x00000000

08000e40 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000e40:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000e46:	4907      	ldr	r1, [pc, #28]	; (8000e64 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000e48:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000e4c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000e50:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000e52:	600b      	str	r3, [r1, #0]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000f9f 	.word	0x20000f9f
 8000e5c:	20020000 	.word	0x20020000
 8000e60:	20000dfc 	.word	0x20000dfc
 8000e64:	20000df8 	.word	0x20000df8
	...

08000e70 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000e70:	b510      	push	{r4, lr}
 8000e72:	2320      	movs	r3, #32
 8000e74:	4604      	mov	r4, r0
 8000e76:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000e7a:	f7ff ffb1 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000e7e:	f7ff fb0f 	bl	80004a0 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8000e82:	f7ff fb95 	bl	80005b0 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000e86:	4911      	ldr	r1, [pc, #68]	; (8000ecc <chCoreAlloc+0x5c>)
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <chCoreAlloc+0x60>)
 8000e8a:	6808      	ldr	r0, [r1, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000e8e:	1de3      	adds	r3, r4, #7
 8000e90:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000e94:	1a12      	subs	r2, r2, r0
 8000e96:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000e98:	bf9d      	ittte	ls
 8000e9a:	181b      	addls	r3, r3, r0
 8000e9c:	600b      	strls	r3, [r1, #0]

  return p;
 8000e9e:	4604      	movls	r4, r0

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000ea0:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000ea2:	f7ff fb0d 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000ea6:	f7ff ffa3 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <chCoreAlloc+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d007      	beq.n	8000ec2 <chCoreAlloc+0x52>
 8000eb2:	6999      	ldr	r1, [r3, #24]
 8000eb4:	6893      	ldr	r3, [r2, #8]
 8000eb6:	688a      	ldr	r2, [r1, #8]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d202      	bcs.n	8000ec2 <chCoreAlloc+0x52>
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <chCoreAlloc+0x68>)
 8000ebe:	f7ff fa7f 	bl	80003c0 <chSysHalt>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8000ec8:	4620      	mov	r0, r4
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	20000dfc 	.word	0x20000dfc
 8000ed0:	20000df8 	.word	0x20000df8
 8000ed4:	20000820 	.word	0x20000820
 8000ed8:	08002740 	.word	0x08002740
 8000edc:	00000000 	.word	0x00000000

08000ee0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <_heap_init+0x14>)
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_heap_init+0x18>)
 8000ee4:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000ee6:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000eee:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8000ef0:	f7ff bf96 	b.w	8000e20 <chMtxObjectInit>
 8000ef4:	20000e00 	.word	0x20000e00
 8000ef8:	08000e71 	.word	0x08000e71
 8000efc:	00000000 	.word	0x00000000

08000f00 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f00:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f04:	3320      	adds	r3, #32
 8000f06:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f383 8811 	msr	BASEPRI, r3
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
	...

08000f20 <_port_irq_epilogue>:
 8000f20:	2320      	movs	r3, #32
 8000f22:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <_port_irq_epilogue+0x44>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f2e:	d102      	bne.n	8000f36 <_port_irq_epilogue+0x16>
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000f36:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f38:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f40:	f844 3c04 	str.w	r3, [r4, #-4]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f44:	f1a4 0320 	sub.w	r3, r4, #32
 8000f48:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f4c:	f7ff fd30 	bl	80009b0 <chSchIsPreemptionRequired>
 8000f50:	b118      	cbz	r0, 8000f5a <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_port_irq_epilogue+0x48>)
 8000f54:	f844 3c08 	str.w	r3, [r4, #-8]
 8000f58:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <_port_irq_epilogue+0x4c>)
 8000f5c:	f844 3c08 	str.w	r3, [r4, #-8]
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	080002a9 	.word	0x080002a9
 8000f6c:	080002bc 	.word	0x080002bc

08000f70 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000f70:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8000f72:	f000 fc45 	bl	8001800 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <halInit+0x1c>)
 8000f78:	f000 fd32 	bl	80019e0 <_pal_lld_init>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8000f7c:	f000 f840 	bl	8001000 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000f80:	f001 fa46 	bl	8002410 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8000f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8000f88:	f000 b802 	b.w	8000f90 <stInit>
 8000f8c:	080028e0 	.word	0x080028e0

08000f90 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8000f90:	f000 bcfe 	b.w	8001990 <st_lld_init>
	...

08000fa0 <stStartAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000fa8:	079b      	lsls	r3, r3, #30
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000faa:	4604      	mov	r4, r0

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000fac:	d502      	bpl.n	8000fb4 <stStartAlarm+0x14>
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <stStartAlarm+0x24>)
 8000fb0:	f7ff fa06 	bl	80003c0 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8000fb8:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000fba:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000fbc:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000fbe:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	08002750 	.word	0x08002750
	...

08000fd0 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	0000      	movs	r0, r0
	...

08000fe0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000fe8:	079b      	lsls	r3, r3, #30
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000fea:	4604      	mov	r4, r0

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000fec:	d402      	bmi.n	8000ff4 <stSetAlarm+0x14>
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <stSetAlarm+0x1c>)
 8000ff0:	f7ff f9e6 	bl	80003c0 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff8:	635c      	str	r4, [r3, #52]	; 0x34
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	08002760 	.word	0x08002760

08001000 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001000:	f000 bf5e 	b.w	8001ec0 <uart_lld_init>
	...

08001010 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 8001010:	2300      	movs	r3, #0
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 8001012:	2201      	movs	r2, #1
 8001014:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 8001016:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 8001018:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800101a:	6043      	str	r3, [r0, #4]
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	460d      	mov	r5, r1

  osalDbgCheck((uartp != NULL) && (config != NULL));
 8001024:	4604      	mov	r4, r0
 8001026:	b340      	cbz	r0, 800107a <uartStart+0x5a>
 8001028:	b339      	cbz	r1, 800107a <uartStart+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800102a:	2320      	movs	r3, #32
 800102c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001030:	f7ff fed6 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001034:	f7ff fa34 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
 8001038:	7823      	ldrb	r3, [r4, #0]
 800103a:	3b01      	subs	r3, #1
 800103c:	2b01      	cmp	r3, #1
 800103e:	d902      	bls.n	8001046 <uartStart+0x26>
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <uartStart+0x64>)
 8001042:	f7ff f9bd 	bl	80003c0 <chSysHalt>
                "invalid state");

  uartp->config = config;
  uart_lld_start(uartp);
 8001046:	4620      	mov	r0, r4

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 8001048:	6065      	str	r5, [r4, #4]
  uart_lld_start(uartp);
 800104a:	f000 ffb9 	bl	8001fc0 <uart_lld_start>
  uartp->state = UART_READY;
 800104e:	2302      	movs	r3, #2
 8001050:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001052:	f7ff fa35 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001056:	f7ff fecb 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <uartStart+0x68>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d007      	beq.n	8001072 <uartStart+0x52>
 8001062:	6999      	ldr	r1, [r3, #24]
 8001064:	6893      	ldr	r3, [r2, #8]
 8001066:	688a      	ldr	r2, [r1, #8]
 8001068:	429a      	cmp	r2, r3
 800106a:	d202      	bcs.n	8001072 <uartStart+0x52>
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <uartStart+0x6c>)
 800106e:	f7ff f9a7 	bl	80003c0 <chSysHalt>
 8001072:	2300      	movs	r3, #0
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {

  osalDbgCheck((uartp != NULL) && (config != NULL));
 800107a:	4802      	ldr	r0, [pc, #8]	; (8001084 <uartStart+0x64>)
 800107c:	f7ff f9a0 	bl	80003c0 <chSysHalt>
 8001080:	e7d3      	b.n	800102a <uartStart+0xa>
 8001082:	bf00      	nop
 8001084:	08002780 	.word	0x08002780
 8001088:	20000820 	.word	0x20000820
 800108c:	080027b0 	.word	0x080027b0

08001090 <uartStartSend>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	460d      	mov	r5, r1
 8001094:	4616      	mov	r6, r2

  osalDbgCheck((uartp != NULL) && (n > 0U) && (txbuf != NULL));
 8001096:	4604      	mov	r4, r0
 8001098:	b100      	cbz	r0, 800109c <uartStartSend+0xc>
 800109a:	bb69      	cbnz	r1, 80010f8 <uartStartSend+0x68>
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <uartStartSend+0x78>)
 800109e:	f7ff f98f 	bl	80003c0 <chSysHalt>
 80010a2:	2320      	movs	r3, #32
 80010a4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80010a8:	f7ff fe9a 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010ac:	f7ff f9f8 	bl	80004a0 <_dbg_check_lock>
             
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
 80010b0:	7823      	ldrb	r3, [r4, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d002      	beq.n	80010bc <uartStartSend+0x2c>
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <uartStartSend+0x78>)
 80010b8:	f7ff f982 	bl	80003c0 <chSysHalt>
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");
 80010bc:	7863      	ldrb	r3, [r4, #1]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d01d      	beq.n	80010fe <uartStartSend+0x6e>

  uart_lld_start_send(uartp, n, txbuf);
 80010c2:	4632      	mov	r2, r6
 80010c4:	4629      	mov	r1, r5
 80010c6:	4620      	mov	r0, r4
 80010c8:	f001 f922 	bl	8002310 <uart_lld_start_send>
  uartp->txstate = UART_TX_ACTIVE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	7063      	strb	r3, [r4, #1]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80010d0:	f7ff f9f6 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80010d4:	f7ff fe8c 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <uartStartSend+0x7c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d007      	beq.n	80010f0 <uartStartSend+0x60>
 80010e0:	6999      	ldr	r1, [r3, #24]
 80010e2:	6893      	ldr	r3, [r2, #8]
 80010e4:	688a      	ldr	r2, [r1, #8]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d202      	bcs.n	80010f0 <uartStartSend+0x60>
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <uartStartSend+0x80>)
 80010ec:	f7ff f968 	bl	80003c0 <chSysHalt>
 80010f0:	2300      	movs	r3, #0
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {

  osalDbgCheck((uartp != NULL) && (n > 0U) && (txbuf != NULL));
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d1d2      	bne.n	80010a2 <uartStartSend+0x12>
 80010fc:	e7ce      	b.n	800109c <uartStartSend+0xc>
             
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");
 80010fe:	4802      	ldr	r0, [pc, #8]	; (8001108 <uartStartSend+0x78>)
 8001100:	f7ff f95e 	bl	80003c0 <chSysHalt>
 8001104:	e7dd      	b.n	80010c2 <uartStartSend+0x32>
 8001106:	bf00      	nop
 8001108:	080027a0 	.word	0x080027a0
 800110c:	20000820 	.word	0x20000820
 8001110:	080027b0 	.word	0x080027b0
	...

08001120 <uartStopSend>:
 *                      stopped transmit operation.
 * @retval 0            There was no transmit operation in progress.
 *
 * @api
 */
size_t uartStopSend(UARTDriver *uartp) {
 8001120:	b538      	push	{r3, r4, r5, lr}
  size_t n;

  osalDbgCheck(uartp != NULL);
 8001122:	4604      	mov	r4, r0
 8001124:	b360      	cbz	r0, 8001180 <uartStopSend+0x60>
 8001126:	2320      	movs	r3, #32
 8001128:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800112c:	f7ff fe58 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001130:	f7ff f9b6 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");
 8001134:	7823      	ldrb	r3, [r4, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d002      	beq.n	8001140 <uartStopSend+0x20>
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <uartStopSend+0x68>)
 800113c:	f7ff f940 	bl	80003c0 <chSysHalt>

  if (uartp->txstate == UART_TX_ACTIVE) {
 8001140:	7863      	ldrb	r3, [r4, #1]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d015      	beq.n	8001172 <uartStopSend+0x52>
    n = uart_lld_stop_send(uartp);
    uartp->txstate = UART_TX_IDLE;
  }
  else {
    n = 0;
 8001146:	2500      	movs	r5, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001148:	f7ff f9ba 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800114c:	f7ff fe50 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <uartStopSend+0x6c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d007      	beq.n	8001168 <uartStopSend+0x48>
 8001158:	6999      	ldr	r1, [r3, #24]
 800115a:	6893      	ldr	r3, [r2, #8]
 800115c:	688a      	ldr	r2, [r1, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	d202      	bcs.n	8001168 <uartStopSend+0x48>
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <uartStopSend+0x70>)
 8001164:	f7ff f92c 	bl	80003c0 <chSysHalt>
 8001168:	2300      	movs	r3, #0
 800116a:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 800116e:	4628      	mov	r0, r5
 8001170:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->txstate == UART_TX_ACTIVE) {
    n = uart_lld_stop_send(uartp);
 8001172:	4620      	mov	r0, r4
 8001174:	f001 f8ec 	bl	8002350 <uart_lld_stop_send>
    uartp->txstate = UART_TX_IDLE;
 8001178:	2300      	movs	r3, #0

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->txstate == UART_TX_ACTIVE) {
    n = uart_lld_stop_send(uartp);
 800117a:	4605      	mov	r5, r0
    uartp->txstate = UART_TX_IDLE;
 800117c:	7063      	strb	r3, [r4, #1]
 800117e:	e7e3      	b.n	8001148 <uartStopSend+0x28>
 * @api
 */
size_t uartStopSend(UARTDriver *uartp) {
  size_t n;

  osalDbgCheck(uartp != NULL);
 8001180:	4801      	ldr	r0, [pc, #4]	; (8001188 <uartStopSend+0x68>)
 8001182:	f7ff f91d 	bl	80003c0 <chSysHalt>
 8001186:	e7ce      	b.n	8001126 <uartStopSend+0x6>
 8001188:	08002790 	.word	0x08002790
 800118c:	20000820 	.word	0x20000820
 8001190:	080027b0 	.word	0x080027b0
	...

080011a0 <uartStartReceive>:
 * @param[in] n         number of data frames to send
 * @param[in] rxbuf     the pointer to the receive buffer
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	460d      	mov	r5, r1
 80011a4:	4616      	mov	r6, r2

  osalDbgCheck((uartp != NULL) && (n > 0U) && (rxbuf != NULL));
 80011a6:	4604      	mov	r4, r0
 80011a8:	b100      	cbz	r0, 80011ac <uartStartReceive+0xc>
 80011aa:	bb69      	cbnz	r1, 8001208 <uartStartReceive+0x68>
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <uartStartReceive+0x78>)
 80011ae:	f7ff f907 	bl	80003c0 <chSysHalt>
 80011b2:	2320      	movs	r3, #32
 80011b4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80011b8:	f7ff fe12 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80011bc:	f7ff f970 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
 80011c0:	7823      	ldrb	r3, [r4, #0]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d002      	beq.n	80011cc <uartStartReceive+0x2c>
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <uartStartReceive+0x78>)
 80011c8:	f7ff f8fa 	bl	80003c0 <chSysHalt>
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");
 80011cc:	78a3      	ldrb	r3, [r4, #2]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d01d      	beq.n	800120e <uartStartReceive+0x6e>

  uart_lld_start_receive(uartp, n, rxbuf);
 80011d2:	4632      	mov	r2, r6
 80011d4:	4629      	mov	r1, r5
 80011d6:	4620      	mov	r0, r4
 80011d8:	f001 f8ca 	bl	8002370 <uart_lld_start_receive>
  uartp->rxstate = UART_RX_ACTIVE;
 80011dc:	2301      	movs	r3, #1
 80011de:	70a3      	strb	r3, [r4, #2]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80011e0:	f7ff f96e 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80011e4:	f7ff fe04 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <uartStartReceive+0x7c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d007      	beq.n	8001200 <uartStartReceive+0x60>
 80011f0:	6999      	ldr	r1, [r3, #24]
 80011f2:	6893      	ldr	r3, [r2, #8]
 80011f4:	688a      	ldr	r2, [r1, #8]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d202      	bcs.n	8001200 <uartStartReceive+0x60>
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <uartStartReceive+0x80>)
 80011fc:	f7ff f8e0 	bl	80003c0 <chSysHalt>
 8001200:	2300      	movs	r3, #0
 8001202:	f383 8811 	msr	BASEPRI, r3
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {

  osalDbgCheck((uartp != NULL) && (n > 0U) && (rxbuf != NULL));
 8001208:	2a00      	cmp	r2, #0
 800120a:	d1d2      	bne.n	80011b2 <uartStartReceive+0x12>
 800120c:	e7ce      	b.n	80011ac <uartStartReceive+0xc>

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <uartStartReceive+0x78>)
 8001210:	f7ff f8d6 	bl	80003c0 <chSysHalt>
 8001214:	e7dd      	b.n	80011d2 <uartStartReceive+0x32>
 8001216:	bf00      	nop
 8001218:	080027c0 	.word	0x080027c0
 800121c:	20000820 	.word	0x20000820
 8001220:	080027b0 	.word	0x080027b0
	...

08001230 <uartStopReceive>:
 *                      stopped receive operation.
 * @retval 0            There was no receive operation in progress.
 *
 * @api
 */
size_t uartStopReceive(UARTDriver *uartp) {
 8001230:	b538      	push	{r3, r4, r5, lr}
  size_t n;

  osalDbgCheck(uartp != NULL);
 8001232:	4604      	mov	r4, r0
 8001234:	b360      	cbz	r0, 8001290 <uartStopReceive+0x60>
 8001236:	2320      	movs	r3, #32
 8001238:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800123c:	f7ff fdd0 	bl	8000de0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001240:	f7ff f92e 	bl	80004a0 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");
 8001244:	7823      	ldrb	r3, [r4, #0]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d002      	beq.n	8001250 <uartStopReceive+0x20>
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <uartStopReceive+0x68>)
 800124c:	f7ff f8b8 	bl	80003c0 <chSysHalt>

  if (uartp->rxstate == UART_RX_ACTIVE) {
 8001250:	78a3      	ldrb	r3, [r4, #2]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d015      	beq.n	8001282 <uartStopReceive+0x52>
    n = uart_lld_stop_receive(uartp);
    uartp->rxstate = UART_RX_IDLE;
  }
  else {
    n = 0;
 8001256:	2500      	movs	r5, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001258:	f7ff f932 	bl	80004c0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800125c:	f7ff fdc8 	bl	8000df0 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <uartStopReceive+0x6c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d007      	beq.n	8001278 <uartStopReceive+0x48>
 8001268:	6999      	ldr	r1, [r3, #24]
 800126a:	6893      	ldr	r3, [r2, #8]
 800126c:	688a      	ldr	r2, [r1, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	d202      	bcs.n	8001278 <uartStopReceive+0x48>
 8001272:	480b      	ldr	r0, [pc, #44]	; (80012a0 <uartStopReceive+0x70>)
 8001274:	f7ff f8a4 	bl	80003c0 <chSysHalt>
 8001278:	2300      	movs	r3, #0
 800127a:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 800127e:	4628      	mov	r0, r5
 8001280:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->rxstate == UART_RX_ACTIVE) {
    n = uart_lld_stop_receive(uartp);
 8001282:	4620      	mov	r0, r4
 8001284:	f001 f894 	bl	80023b0 <uart_lld_stop_receive>
    uartp->rxstate = UART_RX_IDLE;
 8001288:	2300      	movs	r3, #0

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->rxstate == UART_RX_ACTIVE) {
    n = uart_lld_stop_receive(uartp);
 800128a:	4605      	mov	r5, r0
    uartp->rxstate = UART_RX_IDLE;
 800128c:	70a3      	strb	r3, [r4, #2]
 800128e:	e7e3      	b.n	8001258 <uartStopReceive+0x28>
 * @api
 */
size_t uartStopReceive(UARTDriver *uartp) {
  size_t n;

  osalDbgCheck(uartp != NULL);
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <uartStopReceive+0x68>)
 8001292:	f7ff f895 	bl	80003c0 <chSysHalt>
 8001296:	e7ce      	b.n	8001236 <uartStopReceive+0x6>
 8001298:	08002770 	.word	0x08002770
 800129c:	20000820 	.word	0x20000820
 80012a0:	080027b0 	.word	0x080027b0
	...

080012b0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 80012b0:	0943      	lsrs	r3, r0, #5
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	b410      	push	{r4}
 80012b6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80012ba:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80012be:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80012c2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80012c6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80012c8:	f000 001f 	and.w	r0, r0, #31
 80012cc:	2201      	movs	r2, #1
 80012ce:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80012d8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80012dc:	6018      	str	r0, [r3, #0]
}
 80012de:	bc10      	pop	{r4}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
	...

080012f0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 80012f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80012f2:	f7ff fd4d 	bl	8000d90 <_stats_increase_irq>
 80012f6:	f7ff f92b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 8001304:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	b10b      	cbz	r3, 800130e <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800130a:	6850      	ldr	r0, [r2, #4]
 800130c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800130e:	f7ff f937 	bl	8000580 <_dbg_check_leave_isr>
}
 8001312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001316:	f7ff be03 	b.w	8000f20 <_port_irq_epilogue>
 800131a:	bf00      	nop
 800131c:	40026000 	.word	0x40026000
 8001320:	20000e20 	.word	0x20000e20
	...

08001330 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8001330:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001332:	f7ff fd2d 	bl	8000d90 <_stats_increase_irq>
 8001336:	f7ff f90b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <Vector70+0x34>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800133e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8001340:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001342:	0989      	lsrs	r1, r1, #6
 8001344:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6;
 8001348:	018c      	lsls	r4, r1, #6
 800134a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800134c:	b10a      	cbz	r2, 8001352 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800134e:	68c0      	ldr	r0, [r0, #12]
 8001350:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001352:	f7ff f915 	bl	8000580 <_dbg_check_leave_isr>
}
 8001356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800135a:	f7ff bde1 	b.w	8000f20 <_port_irq_epilogue>
 800135e:	bf00      	nop
 8001360:	40026000 	.word	0x40026000
 8001364:	20000e20 	.word	0x20000e20
	...

08001370 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8001370:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001372:	f7ff fd0d 	bl	8000d90 <_stats_increase_irq>
 8001376:	f7ff f8eb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <Vector74+0x34>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800137e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001380:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001382:	0c09      	lsrs	r1, r1, #16
 8001384:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16;
 8001388:	040c      	lsls	r4, r1, #16
 800138a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800138c:	b10a      	cbz	r2, 8001392 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800138e:	6940      	ldr	r0, [r0, #20]
 8001390:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001392:	f7ff f8f5 	bl	8000580 <_dbg_check_leave_isr>
}
 8001396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800139a:	f7ff bdc1 	b.w	8000f20 <_port_irq_epilogue>
 800139e:	bf00      	nop
 80013a0:	40026000 	.word	0x40026000
 80013a4:	20000e20 	.word	0x20000e20
	...

080013b0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80013b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80013b2:	f7ff fced 	bl	8000d90 <_stats_increase_irq>
 80013b6:	f7ff f8cb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <Vector78+0x34>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013be:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 80013c0:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 80013c2:	0d89      	lsrs	r1, r1, #22
 80013c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22;
 80013c8:	058c      	lsls	r4, r1, #22
 80013ca:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80013cc:	b10a      	cbz	r2, 80013d2 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80013ce:	69c0      	ldr	r0, [r0, #28]
 80013d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80013d2:	f7ff f8d5 	bl	8000580 <_dbg_check_leave_isr>
}
 80013d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80013da:	f7ff bda1 	b.w	8000f20 <_port_irq_epilogue>
 80013de:	bf00      	nop
 80013e0:	40026000 	.word	0x40026000
 80013e4:	20000e20 	.word	0x20000e20
	...

080013f0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80013f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80013f2:	f7ff fccd 	bl	8000d90 <_stats_increase_irq>
 80013f6:	f7ff f8ab 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80013fe:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 8001400:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001402:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 8001406:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001408:	b10a      	cbz	r2, 800140e <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800140a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800140c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800140e:	f7ff f8b7 	bl	8000580 <_dbg_check_leave_isr>
}
 8001412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001416:	f7ff bd83 	b.w	8000f20 <_port_irq_epilogue>
 800141a:	bf00      	nop
 800141c:	40026000 	.word	0x40026000
 8001420:	20000e20 	.word	0x20000e20
	...

08001430 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8001430:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001432:	f7ff fcad 	bl	8000d90 <_stats_increase_irq>
 8001436:	f7ff f88b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <Vector80+0x34>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800143e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001440:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001442:	0989      	lsrs	r1, r1, #6
 8001444:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6;
 8001448:	018c      	lsls	r4, r1, #6
 800144a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800144c:	b10a      	cbz	r2, 8001452 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800144e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001450:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001452:	f7ff f895 	bl	8000580 <_dbg_check_leave_isr>
}
 8001456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800145a:	f7ff bd61 	b.w	8000f20 <_port_irq_epilogue>
 800145e:	bf00      	nop
 8001460:	40026000 	.word	0x40026000
 8001464:	20000e20 	.word	0x20000e20
	...

08001470 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8001470:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001472:	f7ff fc8d 	bl	8000d90 <_stats_increase_irq>
 8001476:	f7ff f86b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <Vector84+0x34>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800147e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001480:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001482:	0c09      	lsrs	r1, r1, #16
 8001484:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16;
 8001488:	040c      	lsls	r4, r1, #16
 800148a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800148c:	b10a      	cbz	r2, 8001492 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800148e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001490:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001492:	f7ff f875 	bl	8000580 <_dbg_check_leave_isr>
}
 8001496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800149a:	f7ff bd41 	b.w	8000f20 <_port_irq_epilogue>
 800149e:	bf00      	nop
 80014a0:	40026000 	.word	0x40026000
 80014a4:	20000e20 	.word	0x20000e20
	...

080014b0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 80014b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80014b2:	f7ff fc6d 	bl	8000d90 <_stats_increase_irq>
 80014b6:	f7ff f84b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014be:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 80014c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 80014c2:	0d89      	lsrs	r1, r1, #22
 80014c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22;
 80014c8:	058c      	lsls	r4, r1, #22
 80014ca:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80014cc:	b10a      	cbz	r2, 80014d2 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80014ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80014d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80014d2:	f7ff f855 	bl	8000580 <_dbg_check_leave_isr>
}
 80014d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80014da:	f7ff bd21 	b.w	8000f20 <_port_irq_epilogue>
 80014de:	bf00      	nop
 80014e0:	40026000 	.word	0x40026000
 80014e4:	20000e20 	.word	0x20000e20
	...

080014f0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 80014f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80014f2:	f7ff fc4d 	bl	8000d90 <_stats_increase_irq>
 80014f6:	f7ff f82b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <Vector120+0x30>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80014fe:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 8001500:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 8001502:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 8001506:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8001508:	b10a      	cbz	r2, 800150e <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800150a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800150c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800150e:	f7ff f837 	bl	8000580 <_dbg_check_leave_isr>
}
 8001512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001516:	f7ff bd03 	b.w	8000f20 <_port_irq_epilogue>
 800151a:	bf00      	nop
 800151c:	40026400 	.word	0x40026400
 8001520:	20000e20 	.word	0x20000e20
	...

08001530 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 8001530:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001532:	f7ff fc2d 	bl	8000d90 <_stats_increase_irq>
 8001536:	f7ff f80b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <Vector124+0x34>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800153e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001540:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001542:	0989      	lsrs	r1, r1, #6
 8001544:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6;
 8001548:	018c      	lsls	r4, r1, #6
 800154a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800154c:	b10a      	cbz	r2, 8001552 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800154e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001550:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001552:	f7ff f815 	bl	8000580 <_dbg_check_leave_isr>
}
 8001556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800155a:	f7ff bce1 	b.w	8000f20 <_port_irq_epilogue>
 800155e:	bf00      	nop
 8001560:	40026400 	.word	0x40026400
 8001564:	20000e20 	.word	0x20000e20
	...

08001570 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8001570:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001572:	f7ff fc0d 	bl	8000d90 <_stats_increase_irq>
 8001576:	f7fe ffeb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <Vector128+0x34>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800157e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001580:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001582:	0c09      	lsrs	r1, r1, #16
 8001584:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16;
 8001588:	040c      	lsls	r4, r1, #16
 800158a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800158c:	b10a      	cbz	r2, 8001592 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800158e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001590:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001592:	f7fe fff5 	bl	8000580 <_dbg_check_leave_isr>
}
 8001596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800159a:	f7ff bcc1 	b.w	8000f20 <_port_irq_epilogue>
 800159e:	bf00      	nop
 80015a0:	40026400 	.word	0x40026400
 80015a4:	20000e20 	.word	0x20000e20
	...

080015b0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 80015b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80015b2:	f7ff fbed 	bl	8000d90 <_stats_increase_irq>
 80015b6:	f7fe ffcb 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015be:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 80015c0:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 80015c2:	0d89      	lsrs	r1, r1, #22
 80015c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22;
 80015c8:	058c      	lsls	r4, r1, #22
 80015ca:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80015cc:	b10a      	cbz	r2, 80015d2 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80015ce:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80015d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80015d2:	f7fe ffd5 	bl	8000580 <_dbg_check_leave_isr>
}
 80015d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80015da:	f7ff bca1 	b.w	8000f20 <_port_irq_epilogue>
 80015de:	bf00      	nop
 80015e0:	40026400 	.word	0x40026400
 80015e4:	20000e20 	.word	0x20000e20
	...

080015f0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 80015f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80015f2:	f7ff fbcd 	bl	8000d90 <_stats_increase_irq>
 80015f6:	f7fe ffab 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <Vector130+0x30>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80015fe:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 8001600:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 8001602:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 8001606:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001608:	b10a      	cbz	r2, 800160e <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800160a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800160c:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800160e:	f7fe ffb7 	bl	8000580 <_dbg_check_leave_isr>
}
 8001612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001616:	f7ff bc83 	b.w	8000f20 <_port_irq_epilogue>
 800161a:	bf00      	nop
 800161c:	40026400 	.word	0x40026400
 8001620:	20000e20 	.word	0x20000e20
	...

08001630 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8001630:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001632:	f7ff fbad 	bl	8000d90 <_stats_increase_irq>
 8001636:	f7fe ff8b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <Vector150+0x34>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800163e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001640:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001642:	0989      	lsrs	r1, r1, #6
 8001644:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6;
 8001648:	018c      	lsls	r4, r1, #6
 800164a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800164c:	b10a      	cbz	r2, 8001652 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800164e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001650:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001652:	f7fe ff95 	bl	8000580 <_dbg_check_leave_isr>
}
 8001656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800165a:	f7ff bc61 	b.w	8000f20 <_port_irq_epilogue>
 800165e:	bf00      	nop
 8001660:	40026400 	.word	0x40026400
 8001664:	20000e20 	.word	0x20000e20
	...

08001670 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8001670:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001672:	f7ff fb8d 	bl	8000d90 <_stats_increase_irq>
 8001676:	f7fe ff6b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <Vector154+0x34>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800167e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 8001680:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001682:	0c09      	lsrs	r1, r1, #16
 8001684:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16;
 8001688:	040c      	lsls	r4, r1, #16
 800168a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800168c:	b10a      	cbz	r2, 8001692 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800168e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001690:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001692:	f7fe ff75 	bl	8000580 <_dbg_check_leave_isr>
}
 8001696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800169a:	f7ff bc41 	b.w	8000f20 <_port_irq_epilogue>
 800169e:	bf00      	nop
 80016a0:	40026400 	.word	0x40026400
 80016a4:	20000e20 	.word	0x20000e20
	...

080016b0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 80016b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80016b2:	f7ff fb6d 	bl	8000d90 <_stats_increase_irq>
 80016b6:	f7fe ff4b 	bl	8000550 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <Vector158+0x34>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016be:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80016c0:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80016c2:	0d89      	lsrs	r1, r1, #22
 80016c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22;
 80016c8:	058c      	lsls	r4, r1, #22
 80016ca:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80016cc:	b10a      	cbz	r2, 80016d2 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80016ce:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80016d0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80016d2:	f7fe ff55 	bl	8000580 <_dbg_check_leave_isr>
}
 80016d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80016da:	f7ff bc21 	b.w	8000f20 <_port_irq_epilogue>
 80016de:	bf00      	nop
 80016e0:	40026400 	.word	0x40026400
 80016e4:	20000e20 	.word	0x20000e20
	...

080016f0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <dmaInit+0x3c>)
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <dmaInit+0x40>)
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <dmaInit+0x44>)
 80016f6:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 80016f8:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	4c0e      	ldr	r4, [pc, #56]	; (8001738 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 80016fe:	4619      	mov	r1, r3
 8001700:	e001      	b.n	8001706 <dmaInit+0x16>
 8001702:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8001706:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001708:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800170c:	3301      	adds	r3, #1
 800170e:	2b10      	cmp	r3, #16
 8001710:	f102 020c 	add.w	r2, r2, #12
 8001714:	d1f5      	bne.n	8001702 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8001716:	4909      	ldr	r1, [pc, #36]	; (800173c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800171a:	bc10      	pop	{r4}
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001720:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8001722:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 8001724:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000ea0 	.word	0x20000ea0
 8001730:	0800280c 	.word	0x0800280c
 8001734:	40026010 	.word	0x40026010
 8001738:	20000e20 	.word	0x20000e20
 800173c:	40026000 	.word	0x40026000
 8001740:	40026400 	.word	0x40026400
	...

08001750 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);
 8001752:	4605      	mov	r5, r0
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001754:	b085      	sub	sp, #20

  osalDbgCheck(dmastp != NULL);
 8001756:	2800      	cmp	r0, #0
 8001758:	d03e      	beq.n	80017d8 <dmaStreamAllocate+0x88>

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800175a:	4c24      	ldr	r4, [pc, #144]	; (80017ec <dmaStreamAllocate+0x9c>)
 800175c:	7a6f      	ldrb	r7, [r5, #9]
 800175e:	6826      	ldr	r6, [r4, #0]
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 fe07 	lsl.w	lr, r0, r7
 8001766:	ea1e 0f06 	tst.w	lr, r6
 800176a:	d12a      	bne.n	80017c2 <dmaStreamAllocate+0x72>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800176c:	4820      	ldr	r0, [pc, #128]	; (80017f0 <dmaStreamAllocate+0xa0>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800176e:	ea4e 0606 	orr.w	r6, lr, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001772:	eb00 0ec7 	add.w	lr, r0, r7, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8001776:	f016 0fff 	tst.w	r6, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800177a:	6026      	str	r6, [r4, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800177c:	f840 2037 	str.w	r2, [r0, r7, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001780:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8001784:	d004      	beq.n	8001790 <dmaStreamAllocate+0x40>
    rccEnableDMA1(FALSE);
 8001786:	481b      	ldr	r0, [pc, #108]	; (80017f4 <dmaStreamAllocate+0xa4>)
 8001788:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800178a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178e:	6303      	str	r3, [r0, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 8001790:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
 8001794:	d117      	bne.n	80017c6 <dmaStreamAllocate+0x76>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	f020 001f 	bic.w	r0, r0, #31
 800179e:	6018      	str	r0, [r3, #0]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f010 0401 	ands.w	r4, r0, #1
 80017a6:	d1fb      	bne.n	80017a0 <dmaStreamAllocate+0x50>
 80017a8:	7a2f      	ldrb	r7, [r5, #8]
 80017aa:	686e      	ldr	r6, [r5, #4]
 80017ac:	203d      	movs	r0, #61	; 0x3d
 80017ae:	40b8      	lsls	r0, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80017b0:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80017b2:	6030      	str	r0, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80017b4:	601c      	str	r4, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80017b6:	615f      	str	r7, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80017b8:	b15a      	cbz	r2, 80017d2 <dmaStreamAllocate+0x82>
    nvicEnableVector(dmastp->vector, priority);
 80017ba:	7aa8      	ldrb	r0, [r5, #10]
 80017bc:	f7ff fd78 	bl	80012b0 <nvicEnableVector>

  return FALSE;
 80017c0:	4620      	mov	r0, r4
}
 80017c2:	b005      	add	sp, #20
 80017c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <dmaStreamAllocate+0xa4>)
 80017c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ce:	6303      	str	r3, [r0, #48]	; 0x30
 80017d0:	e7e1      	b.n	8001796 <dmaStreamAllocate+0x46>

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 80017d2:	4610      	mov	r0, r2
}
 80017d4:	b005      	add	sp, #20
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <dmaStreamAllocate+0xa8>)
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	9202      	str	r2, [sp, #8]
 80017de:	9101      	str	r1, [sp, #4]
 80017e0:	f7fe fdee 	bl	80003c0 <chSysHalt>
 80017e4:	a901      	add	r1, sp, #4
 80017e6:	c90e      	ldmia	r1, {r1, r2, r3}
 80017e8:	e7b7      	b.n	800175a <dmaStreamAllocate+0xa>
 80017ea:	bf00      	nop
 80017ec:	20000ea0 	.word	0x20000ea0
 80017f0:	20000e20 	.word	0x20000e20
 80017f4:	40023800 	.word	0x40023800
 80017f8:	080027e0 	.word	0x080027e0
 80017fc:	00000000 	.word	0x00000000

08001800 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <hal_lld_init+0x5c>)
 8001802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800180a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800180c:	6119      	str	r1, [r3, #16]
 800180e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001810:	6958      	ldr	r0, [r3, #20]
 8001812:	6159      	str	r1, [r3, #20]
 8001814:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001816:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001818:	4c11      	ldr	r4, [pc, #68]	; (8001860 <hal_lld_init+0x60>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800181a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800181e:	6218      	str	r0, [r3, #32]
 8001820:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001822:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001824:	6259      	str	r1, [r3, #36]	; 0x24
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001828:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800182a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800182e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001830:	6821      	ldr	r1, [r4, #0]
 8001832:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001836:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001838:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800183a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800183e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001842:	d003      	beq.n	800184c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001844:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001848:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800184a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <hal_lld_init+0x60>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800184e:	bc10      	pop	{r4}

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001850:	6853      	ldr	r3, [r2, #4]
 8001852:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001856:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001858:	f7ff bf4a 	b.w	80016f0 <dmaInit>
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
	...

08001870 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001874:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001878:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800187c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800187e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001880:	680b      	ldr	r3, [r1, #0]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001888:	680a      	ldr	r2, [r1, #0]
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <stm32_clock_init+0xb4>)
 800188c:	0790      	lsls	r0, r2, #30
 800188e:	d5fb      	bpl.n	8001888 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	f022 0203 	bic.w	r2, r2, #3
 8001896:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800189c:	4619      	mov	r1, r3
 800189e:	688b      	ldr	r3, [r1, #8]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <stm32_clock_init+0xb4>)
 80018a2:	f013 030c 	ands.w	r3, r3, #12
 80018a6:	d1fa      	bne.n	800189e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80018ae:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80018b0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80018ba:	6811      	ldr	r1, [r2, #0]
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <stm32_clock_init+0xb4>)
 80018be:	0389      	lsls	r1, r1, #14
 80018c0:	d5fb      	bpl.n	80018ba <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80018c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80018ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018cc:	4915      	ldr	r1, [pc, #84]	; (8001924 <stm32_clock_init+0xb4>)
 80018ce:	0790      	lsls	r0, r2, #30
 80018d0:	d5fb      	bpl.n	80018ca <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <stm32_clock_init+0xbc>)
 80018d4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80018d6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80018d8:	4a13      	ldr	r2, [pc, #76]	; (8001928 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80018e0:	6853      	ldr	r3, [r2, #4]
 80018e2:	0459      	lsls	r1, r3, #17
 80018e4:	d5fc      	bpl.n	80018e0 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80018e6:	490f      	ldr	r1, [pc, #60]	; (8001924 <stm32_clock_init+0xb4>)
 80018e8:	680a      	ldr	r2, [r1, #0]
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <stm32_clock_init+0xb4>)
 80018ec:	0192      	lsls	r2, r2, #6
 80018ee:	d5fb      	bpl.n	80018e8 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80018f2:	4910      	ldr	r1, [pc, #64]	; (8001934 <stm32_clock_init+0xc4>)
 80018f4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80018f6:	f240 7105 	movw	r1, #1797	; 0x705
 80018fa:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	f042 0202 	orr.w	r2, r2, #2
 8001902:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001904:	461a      	mov	r2, r3
 8001906:	6893      	ldr	r3, [r2, #8]
 8001908:	4906      	ldr	r1, [pc, #24]	; (8001924 <stm32_clock_init+0xb4>)
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d1f9      	bne.n	8001906 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001912:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	644b      	str	r3, [r1, #68]	; 0x44
 800191a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	664b      	str	r3, [r1, #100]	; 0x64
 8001922:	4770      	bx	lr
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	07405408 	.word	0x07405408
 8001930:	40023c00 	.word	0x40023c00
 8001934:	38089400 	.word	0x38089400
	...

08001940 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001940:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8001942:	f7ff fa25 	bl	8000d90 <_stats_increase_irq>
 8001946:	f7fe fe03 	bl	8000550 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800194a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	0792      	lsls	r2, r2, #30
 8001952:	d510      	bpl.n	8001976 <VectorB0+0x36>
    STM32_ST_TIM->SR = 0U;
 8001954:	2400      	movs	r4, #0
 8001956:	611c      	str	r4, [r3, #16]
 8001958:	2320      	movs	r3, #32
 800195a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800195e:	f7ff fa4f 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001962:	f7fe fdc5 	bl	80004f0 <_dbg_check_lock_from_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8001966:	f7fe fd33 	bl	80003d0 <chSysTimerHandlerI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800196a:	f7fe fdd9 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800196e:	f7ff fa4f 	bl	8000e10 <_stats_stop_measure_crit_isr>
 8001972:	f384 8811 	msr	BASEPRI, r4
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001976:	f7fe fe03 	bl	8000580 <_dbg_check_leave_isr>
}
 800197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800197e:	f7ff bacf 	b.w	8000f20 <_port_irq_epilogue>
 8001982:	bf00      	nop
	...

08001990 <st_lld_init>:

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <st_lld_init+0x40>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001992:	4810      	ldr	r0, [pc, #64]	; (80019d4 <st_lld_init+0x44>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001994:	6c13      	ldr	r3, [r2, #64]	; 0x40
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001996:	b470      	push	{r4, r5, r6}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800199e:	6881      	ldr	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80019a4:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80019a6:	2401      	movs	r4, #1

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019a8:	f041 0101 	orr.w	r1, r1, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019ac:	f242 06cf 	movw	r6, #8399	; 0x20cf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80019b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019b4:	6081      	str	r1, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019b6:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019b8:	2108      	movs	r1, #8
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80019ba:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019bc:	201c      	movs	r0, #28
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
 80019be:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80019c2:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80019c4:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80019c6:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80019c8:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 80019ca:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80019cc:	f7ff bc70 	b.w	80012b0 <nvicEnableVector>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	e0042000 	.word	0xe0042000
	...

080019e0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 80019e0:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80019e2:	4d65      	ldr	r5, [pc, #404]	; (8001b78 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80019e4:	4c65      	ldr	r4, [pc, #404]	; (8001b7c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80019e6:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80019e8:	4965      	ldr	r1, [pc, #404]	; (8001b80 <_pal_lld_init+0x1a0>)
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <_pal_lld_init+0x1a4>)
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80019ee:	f240 16ff 	movw	r6, #511	; 0x1ff
 80019f2:	4337      	orrs	r7, r6
 80019f4:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80019f6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80019f8:	433e      	orrs	r6, r7
 80019fa:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80019fc:	6845      	ldr	r5, [r0, #4]
 80019fe:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001a00:	6885      	ldr	r5, [r0, #8]
 8001a02:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001a04:	68c5      	ldr	r5, [r0, #12]
 8001a06:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8001a08:	6905      	ldr	r5, [r0, #16]
 8001a0a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001a0c:	6945      	ldr	r5, [r0, #20]
 8001a0e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001a10:	6985      	ldr	r5, [r0, #24]
 8001a12:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001a14:	6805      	ldr	r5, [r0, #0]
 8001a16:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001a18:	6a04      	ldr	r4, [r0, #32]
 8001a1a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001a1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001a1e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001a20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001a22:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8001a24:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a26:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001a28:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a2a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001a2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a2e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001a30:	69c4      	ldr	r4, [r0, #28]
 8001a32:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001a34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a36:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001a38:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a3a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001a3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a3e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8001a40:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a42:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001a44:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001a46:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001a48:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001a4a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001a4c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001a4e:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001a50:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001a52:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001a54:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001a56:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001a58:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001a5a:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8001a5c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001a5e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001a60:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001a62:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001a64:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001a68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001a6a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001a6c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001a6e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8001a72:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001a74:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8001a78:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8001a7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 8001a7e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8001a82:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8001a86:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001a8a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 8001a8e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001a92:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8001a96:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001a9c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001aa0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8001aa4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001aa8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 8001aac:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8001ab0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8001ab4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8001ab8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 8001abc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8001ac0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8001ac4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8001ac8:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 8001acc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001ad0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001ad4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001ad8:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 8001adc:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001ade:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001ae2:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001ae4:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8001ae8:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8001aea:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8001aee:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001af0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8001af4:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001af6:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001afc:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8001b00:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001b02:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8001b06:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8001b0a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 8001b0e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8001b12:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8001b16:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 8001b1a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 8001b1e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 8001b22:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 8001b26:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 8001b2a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 8001b2e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8001b32:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8001b36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001b3a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8001b3e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 8001b42:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 8001b46:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 8001b4a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8001b4e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 8001b52:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 8001b56:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 8001b5a:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 8001b5e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8001b62:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 8001b66:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 8001b6a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 8001b6e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 8001b72:	bcf0      	pop	{r4, r5, r6, r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	00000000 	.word	0x00000000

08001b90 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 8001b94:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001b98:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8001b9c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8001ba0:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 8001ba4:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8001ba8:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001baa:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001bae:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001bb2:	f04f 0803 	mov.w	r8, #3
 8001bb6:	e030      	b.n	8001c1a <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001bb8:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8001bbc:	ea2b 0303 	bic.w	r3, fp, r3
 8001bc0:	ea43 030a 	orr.w	r3, r3, sl
 8001bc4:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001bc6:	6843      	ldr	r3, [r0, #4]
 8001bc8:	fa09 fa04 	lsl.w	sl, r9, r4
 8001bcc:	ea23 030a 	bic.w	r3, r3, sl
 8001bd0:	433b      	orrs	r3, r7
 8001bd2:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001bd4:	0063      	lsls	r3, r4, #1
 8001bd6:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001bda:	fa08 f303 	lsl.w	r3, r8, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	ea0a 0a03 	and.w	sl, sl, r3
 8001be4:	ea4a 0a06 	orr.w	sl, sl, r6
 8001be8:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001bec:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8001bf0:	ea03 0a0a 	and.w	sl, r3, sl
 8001bf4:	ea4a 0a05 	orr.w	sl, sl, r5
 8001bf8:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 8001bfc:	f8d0 a000 	ldr.w	sl, [r0]
 8001c00:	ea03 030a 	and.w	r3, r3, sl
 8001c04:	ea43 030e 	orr.w	r3, r3, lr
 8001c08:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 8001c0a:	0849      	lsrs	r1, r1, #1
 8001c0c:	d019      	beq.n	8001c42 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 8001c0e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 8001c10:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 8001c12:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 8001c14:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8001c18:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001c1a:	f004 0307 	and.w	r3, r4, #7
 8001c1e:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8001c20:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001c24:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 8001c28:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 8001c2c:	d0ed      	beq.n	8001c0a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 8001c2e:	2c07      	cmp	r4, #7
 8001c30:	d9c2      	bls.n	8001bb8 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001c32:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8001c36:	ea2b 0303 	bic.w	r3, fp, r3
 8001c3a:	ea43 030a 	orr.w	r3, r3, sl
 8001c3e:	6243      	str	r3, [r0, #36]	; 0x24
 8001c40:	e7c1      	b.n	8001bc6 <_pal_lld_setgroupmode+0x36>
 8001c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
	...

08001c50 <usart_stop>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8001c50:	6901      	ldr	r1, [r0, #16]
 8001c52:	680a      	ldr	r2, [r1, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f023 031f 	bic.w	r3, r3, #31
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	6813      	ldr	r3, [r2, #0]
 8001c5e:	07db      	lsls	r3, r3, #31
 8001c60:	d4fc      	bmi.n	8001c5c <usart_stop+0xc>
 * @brief   USART de-initialization.
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {
 8001c62:	b430      	push	{r4, r5}

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
 8001c64:	6944      	ldr	r4, [r0, #20]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8001c66:	7a0d      	ldrb	r5, [r1, #8]
 8001c68:	6849      	ldr	r1, [r1, #4]
  dmaStreamDisable(uartp->dmatx);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8001c6c:	233d      	movs	r3, #61	; 0x3d
 8001c6e:	40ab      	lsls	r3, r5
 8001c70:	600b      	str	r3, [r1, #0]
  dmaStreamDisable(uartp->dmatx);
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	f023 031f 	bic.w	r3, r3, #31
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	f013 0301 	ands.w	r3, r3, #1
 8001c80:	d1fb      	bne.n	8001c7a <usart_stop+0x2a>
 8001c82:	7a25      	ldrb	r5, [r4, #8]
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8001c84:	6882      	ldr	r2, [r0, #8]
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
 8001c86:	6860      	ldr	r0, [r4, #4]
 8001c88:	213d      	movs	r1, #61	; 0x3d
 8001c8a:	40a9      	lsls	r1, r5
 8001c8c:	6001      	str	r1, [r0, #0]
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
}
 8001c8e:	bc30      	pop	{r4, r5}
  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8001c90:	60d3      	str	r3, [r2, #12]
  uartp->usart->CR2 = 0;
 8001c92:	6113      	str	r3, [r2, #16]
  uartp->usart->CR3 = 0;
 8001c94:	6153      	str	r3, [r2, #20]
}
 8001c96:	4770      	bx	lr
	...

08001ca0 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8001ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8001ca4:	6884      	ldr	r4, [r0, #8]
  uint32_t cr1 = u->CR1;
 8001ca6:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8001ca8:	6826      	ldr	r6, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001caa:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001cac:	f240 130f 	movw	r3, #271	; 0x10f
 8001cb0:	4033      	ands	r3, r6
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8001cb2:	4605      	mov	r5, r0
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001cb4:	b1eb      	cbz	r3, 8001cf2 <serve_usart_irq+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 8001cb6:	6843      	ldr	r3, [r0, #4]
 8001cb8:	691a      	ldr	r2, [r3, #16]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 8001cba:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001cbe:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 8001cc0:	b1ba      	cbz	r2, 8001cf2 <serve_usart_irq+0x52>
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
 8001cc2:	b2b3      	uxth	r3, r6
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8001cc4:	f013 0f08 	tst.w	r3, #8
 8001cc8:	bf0c      	ite	eq
 8001cca:	2100      	moveq	r1, #0
 8001ccc:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 8001cce:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8001cd0:	bf48      	it	mi
 8001cd2:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8001cd6:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8001cd8:	bf48      	it	mi
 8001cda:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 8001cde:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8001ce0:	bf48      	it	mi
 8001ce2:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8001ce6:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8001ce8:	bf48      	it	mi
 8001cea:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 8001cee:	4628      	mov	r0, r5
 8001cf0:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8001cf2:	0672      	lsls	r2, r6, #25
 8001cf4:	d50e      	bpl.n	8001d14 <serve_usart_irq+0x74>
 8001cf6:	067b      	lsls	r3, r7, #25
 8001cf8:	d50c      	bpl.n	8001d14 <serve_usart_irq+0x74>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8001cfa:	686b      	ldr	r3, [r5, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001cfe:	f027 0740 	bic.w	r7, r7, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8001d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d06:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001d08:	60e7      	str	r7, [r4, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8001d0a:	b11b      	cbz	r3, 8001d14 <serve_usart_irq+0x74>
      uartp->config->txend2_cb(uartp);
 8001d0c:	4628      	mov	r0, r5
  }
}
 8001d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
      uartp->config->txend2_cb(uartp);
 8001d12:	4718      	bx	r3
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d20 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d20:	f011 0f0c 	tst.w	r1, #12
 * @brief   TX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d28:	d11b      	bne.n	8001d62 <uart_lld_serve_tx_end_irq+0x42>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001d2a:	6961      	ldr	r1, [r4, #20]
 8001d2c:	680a      	ldr	r2, [r1, #0]
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	f023 031f 	bic.w	r3, r3, #31
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	07db      	lsls	r3, r3, #31
 8001d3a:	d4fc      	bmi.n	8001d36 <uart_lld_serve_tx_end_irq+0x16>

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
  if (uartp->config->txend1_cb != NULL)
 8001d3c:	6863      	ldr	r3, [r4, #4]
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001d3e:	7a0d      	ldrb	r5, [r1, #8]
 8001d40:	6848      	ldr	r0, [r1, #4]

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
  if (uartp->config->txend1_cb != NULL)
 8001d42:	681a      	ldr	r2, [r3, #0]
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001d44:	233d      	movs	r3, #61	; 0x3d
 8001d46:	40ab      	lsls	r3, r5

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
 8001d48:	2102      	movs	r1, #2
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001d4a:	6003      	str	r3, [r0, #0]

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
 8001d4c:	7061      	strb	r1, [r4, #1]
  if (uartp->config->txend1_cb != NULL)
 8001d4e:	b12a      	cbz	r2, 8001d5c <uart_lld_serve_tx_end_irq+0x3c>
    uartp->config->txend1_cb(uartp);
 8001d50:	4620      	mov	r0, r4
 8001d52:	4790      	blx	r2

  /* If the callback didn't explicitly change state then the transmitter
     automatically returns to the idle state.*/
  if (uartp->txstate == UART_TX_COMPLETE)
 8001d54:	7863      	ldrb	r3, [r4, #1]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d000      	beq.n	8001d5c <uart_lld_serve_tx_end_irq+0x3c>
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
    uartp->txstate = UART_TX_IDLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	7063      	strb	r3, [r4, #1]
 8001d60:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8001d62:	4802      	ldr	r0, [pc, #8]	; (8001d6c <uart_lld_serve_tx_end_irq+0x4c>)
 8001d64:	f7fe fb2c 	bl	80003c0 <chSysHalt>
 8001d68:	e7df      	b.n	8001d2a <uart_lld_serve_tx_end_irq+0xa>
 8001d6a:	bf00      	nop
 8001d6c:	080028d0 	.word	0x080028d0

08001d70 <uart_lld_serve_rx_end_irq>:
 */
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d70:	f011 0f0c 	tst.w	r1, #12
 * @brief   RX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d78:	d13b      	bne.n	8001df2 <uart_lld_serve_rx_end_irq+0x82>
  }
#else
  (void)flags;
#endif

  if (uartp->rxstate == UART_RX_IDLE) {
 8001d7a:	78a3      	ldrb	r3, [r4, #2]
 8001d7c:	b94b      	cbnz	r3, 8001d92 <uart_lld_serve_rx_end_irq+0x22>
    /* Receiver in idle state, a callback is generated, if enabled, for each
       received character and then the driver stays in the same state.*/
    if (uartp->config->rxchar_cb != NULL)
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d034      	beq.n	8001df0 <uart_lld_serve_rx_end_irq+0x80>
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8001d86:	8b21      	ldrh	r1, [r4, #24]
 8001d88:	4620      	mov	r0, r4
 8001d8a:	b289      	uxth	r1, r1
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
      set_rx_idle_loop(uartp);
    }
  }
}
 8001d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if (uartp->rxstate == UART_RX_IDLE) {
    /* Receiver in idle state, a callback is generated, if enabled, for each
       received character and then the driver stays in the same state.*/
    if (uartp->config->rxchar_cb != NULL)
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8001d90:	4718      	bx	r3
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001d92:	6921      	ldr	r1, [r4, #16]
 8001d94:	680a      	ldr	r2, [r1, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f023 031f 	bic.w	r3, r3, #31
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	07db      	lsls	r3, r3, #31
 8001da2:	d4fc      	bmi.n	8001d9e <uart_lld_serve_rx_end_irq+0x2e>
    uartp->rxstate = UART_RX_COMPLETE;
    if (uartp->config->rxend_cb != NULL)
 8001da4:	6860      	ldr	r0, [r4, #4]
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001da6:	7a0d      	ldrb	r5, [r1, #8]
 8001da8:	684e      	ldr	r6, [r1, #4]
    uartp->rxstate = UART_RX_COMPLETE;
    if (uartp->config->rxend_cb != NULL)
 8001daa:	6881      	ldr	r1, [r0, #8]
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001dac:	233d      	movs	r3, #61	; 0x3d
 8001dae:	40ab      	lsls	r3, r5
    uartp->rxstate = UART_RX_COMPLETE;
 8001db0:	2502      	movs	r5, #2
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001db2:	6033      	str	r3, [r6, #0]
    uartp->rxstate = UART_RX_COMPLETE;
 8001db4:	70a5      	strb	r5, [r4, #2]
    if (uartp->config->rxend_cb != NULL)
 8001db6:	b139      	cbz	r1, 8001dc8 <uart_lld_serve_rx_end_irq+0x58>
      uartp->config->rxend_cb(uartp);
 8001db8:	4620      	mov	r0, r4
 8001dba:	4788      	blx	r1

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
 8001dbc:	78a3      	ldrb	r3, [r4, #2]
 8001dbe:	42ab      	cmp	r3, r5
 8001dc0:	d116      	bne.n	8001df0 <uart_lld_serve_rx_end_irq+0x80>
 8001dc2:	6923      	ldr	r3, [r4, #16]
 8001dc4:	6860      	ldr	r0, [r4, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 8001dc8:	68c1      	ldr	r1, [r0, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001dca:	68e3      	ldr	r3, [r4, #12]
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8001dcc:	2900      	cmp	r1, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	f44f 7188 	movne.w	r1, #272	; 0x110
 8001dd4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001dd8:	430b      	orrs	r3, r1
      uartp->config->rxend_cb(uartp);

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
 8001dda:	2500      	movs	r5, #0
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001ddc:	2101      	movs	r1, #1
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001dde:	f104 0018 	add.w	r0, r4, #24
      uartp->config->rxend_cb(uartp);

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
 8001de2:	70a5      	strb	r5, [r4, #2]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001de4:	60d0      	str	r0, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001de6:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001de8:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
 8001df2:	4802      	ldr	r0, [pc, #8]	; (8001dfc <uart_lld_serve_rx_end_irq+0x8c>)
 8001df4:	f7fe fae4 	bl	80003c0 <chSysHalt>
 8001df8:	e7bf      	b.n	8001d7a <uart_lld_serve_rx_end_irq+0xa>
 8001dfa:	bf00      	nop
 8001dfc:	080028d0 	.word	0x080028d0

08001e00 <VectorD4>:
/**
 * @brief   USART1 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001e00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001e02:	f7fe ffc5 	bl	8000d90 <_stats_increase_irq>
 8001e06:	f7fe fba3 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD1);
 8001e0a:	4804      	ldr	r0, [pc, #16]	; (8001e1c <VectorD4+0x1c>)
 8001e0c:	f7ff ff48 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001e10:	f7fe fbb6 	bl	8000580 <_dbg_check_leave_isr>
}
 8001e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD1);

  OSAL_IRQ_EPILOGUE();
 8001e18:	f7ff b882 	b.w	8000f20 <_port_irq_epilogue>
 8001e1c:	20000ea4 	.word	0x20000ea4

08001e20 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001e20:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001e22:	f7fe ffb5 	bl	8000d90 <_stats_increase_irq>
 8001e26:	f7fe fb93 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD2);
 8001e2a:	4804      	ldr	r0, [pc, #16]	; (8001e3c <VectorD8+0x1c>)
 8001e2c:	f7ff ff38 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001e30:	f7fe fba6 	bl	8000580 <_dbg_check_leave_isr>
}
 8001e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
 8001e38:	f7ff b872 	b.w	8000f20 <_port_irq_epilogue>
 8001e3c:	20000f30 	.word	0x20000f30

08001e40 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001e40:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001e42:	f7fe ffa5 	bl	8000d90 <_stats_increase_irq>
 8001e46:	f7fe fb83 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD3);
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <VectorDC+0x1c>)
 8001e4c:	f7ff ff28 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001e50:	f7fe fb96 	bl	8000580 <_dbg_check_leave_isr>
}
 8001e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);

  OSAL_IRQ_EPILOGUE();
 8001e58:	f7ff b862 	b.w	8000f20 <_port_irq_epilogue>
 8001e5c:	20000ec0 	.word	0x20000ec0

08001e60 <Vector110>:
/**
 * @brief   UART4 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001e60:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001e62:	f7fe ff95 	bl	8000d90 <_stats_increase_irq>
 8001e66:	f7fe fb73 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD4);
 8001e6a:	4804      	ldr	r0, [pc, #16]	; (8001e7c <Vector110+0x1c>)
 8001e6c:	f7ff ff18 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001e70:	f7fe fb86 	bl	8000580 <_dbg_check_leave_isr>
}
 8001e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD4);

  OSAL_IRQ_EPILOGUE();
 8001e78:	f7ff b852 	b.w	8000f20 <_port_irq_epilogue>
 8001e7c:	20000edc 	.word	0x20000edc

08001e80 <Vector114>:
/**
 * @brief   UART5 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART5_HANDLER) {
 8001e80:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001e82:	f7fe ff85 	bl	8000d90 <_stats_increase_irq>
 8001e86:	f7fe fb63 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD5);
 8001e8a:	4804      	ldr	r0, [pc, #16]	; (8001e9c <Vector114+0x1c>)
 8001e8c:	f7ff ff08 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001e90:	f7fe fb76 	bl	8000580 <_dbg_check_leave_isr>
}
 8001e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD5);

  OSAL_IRQ_EPILOGUE();
 8001e98:	f7ff b842 	b.w	8000f20 <_port_irq_epilogue>
 8001e9c:	20000ef8 	.word	0x20000ef8

08001ea0 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8001ea0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001ea2:	f7fe ff75 	bl	8000d90 <_stats_increase_irq>
 8001ea6:	f7fe fb53 	bl	8000550 <_dbg_check_enter_isr>

  serve_usart_irq(&UARTD6);
 8001eaa:	4804      	ldr	r0, [pc, #16]	; (8001ebc <Vector15C+0x1c>)
 8001eac:	f7ff fef8 	bl	8001ca0 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
 8001eb0:	f7fe fb66 	bl	8000580 <_dbg_check_leave_isr>
}
 8001eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
 8001eb8:	f7ff b832 	b.w	8000f20 <_port_irq_epilogue>
 8001ebc:	20000f14 	.word	0x20000f14

08001ec0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8001ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 8001ec4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8001fa8 <uart_lld_init+0xe8>
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
 8001ec8:	4c2e      	ldr	r4, [pc, #184]	; (8001f84 <uart_lld_init+0xc4>)
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8001eca:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8001fac <uart_lld_init+0xec>
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 8001ece:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001fb0 <uart_lld_init+0xf0>
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART4
  uartObjectInit(&UARTD4);
 8001ed2:	4f2d      	ldr	r7, [pc, #180]	; (8001f88 <uart_lld_init+0xc8>)
  UARTD4.dmarx   = STM32_DMA_STREAM(STM32_UART_UART4_RX_DMA_STREAM);
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
 8001ed4:	4d2d      	ldr	r5, [pc, #180]	; (8001f8c <uart_lld_init+0xcc>)
 * @notapi
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 8001ed6:	4650      	mov	r0, sl
 8001ed8:	f7ff f89a 	bl	8001010 <uartObjectInit>
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001edc:	2606      	movs	r6, #6
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 8001ede:	f104 0b18 	add.w	fp, r4, #24
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <uart_lld_init+0xd0>)
 8001ee4:	f8ca 3008 	str.w	r3, [sl, #8]
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8001ee8:	4648      	mov	r0, r9

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
 8001eea:	f8ca 4010 	str.w	r4, [sl, #16]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 8001eee:	f8ca b014 	str.w	fp, [sl, #20]
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001ef2:	f8ca 600c 	str.w	r6, [sl, #12]
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8001ef6:	f7ff f88b 	bl	8001010 <uartObjectInit>
  UARTD2.usart   = USART2;
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <uart_lld_init+0xd4>)
 8001efc:	f8c9 3008 	str.w	r3, [r9, #8]
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8001f00:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
 8001f04:	f8c9 3010 	str.w	r3, [r9, #16]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 8001f08:	4640      	mov	r0, r8
#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8001f0a:	f1a4 0354 	sub.w	r3, r4, #84	; 0x54
 8001f0e:	f8c9 3014 	str.w	r3, [r9, #20]
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001f12:	f8c9 600c 	str.w	r6, [r9, #12]
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 8001f16:	f7ff f87b 	bl	8001010 <uartObjectInit>
  UARTD3.usart   = USART3;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <uart_lld_init+0xd8>)
 8001f1c:	f8c8 3008 	str.w	r3, [r8, #8]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 8001f20:	f1a4 0390 	sub.w	r3, r4, #144	; 0x90
 8001f24:	f8c8 3010 	str.w	r3, [r8, #16]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART4
  uartObjectInit(&UARTD4);
 8001f28:	4638      	mov	r0, r7
#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8001f2a:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8001f2e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001fb4 <uart_lld_init+0xf4>
#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 8001f32:	f8c8 3014 	str.w	r3, [r8, #20]
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001f36:	f8c8 600c 	str.w	r6, [r8, #12]
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART4
  uartObjectInit(&UARTD4);
 8001f3a:	f7ff f869 	bl	8001010 <uartObjectInit>
  UARTD4.usart   = UART4;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <uart_lld_init+0xdc>)
 8001f40:	60bb      	str	r3, [r7, #8]
  UARTD4.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD4.dmarx   = STM32_DMA_STREAM(STM32_UART_UART4_RX_DMA_STREAM);
 8001f42:	f1a4 0284 	sub.w	r2, r4, #132	; 0x84
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
 8001f46:	f1a4 036c 	sub.w	r3, r4, #108	; 0x6c
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
 8001f4a:	4628      	mov	r0, r5

#if STM32_UART_USE_UART4
  uartObjectInit(&UARTD4);
  UARTD4.usart   = UART4;
  UARTD4.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD4.dmarx   = STM32_DMA_STREAM(STM32_UART_UART4_RX_DMA_STREAM);
 8001f4c:	613a      	str	r2, [r7, #16]
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
 8001f4e:	617b      	str	r3, [r7, #20]
#endif

#if STM32_UART_USE_UART4
  uartObjectInit(&UARTD4);
  UARTD4.usart   = UART4;
  UARTD4.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001f50:	60fe      	str	r6, [r7, #12]
  UARTD4.dmarx   = STM32_DMA_STREAM(STM32_UART_UART4_RX_DMA_STREAM);
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
 8001f52:	f7ff f85d 	bl	8001010 <uartObjectInit>
  UARTD5.usart   = UART5;
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
 8001f56:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
  UARTD5.usart   = UART5;
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
 8001f5a:	f1a4 029c 	sub.w	r2, r4, #156	; 0x9c
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
  UARTD5.usart   = UART5;
 8001f5e:	4910      	ldr	r1, [pc, #64]	; (8001fa0 <uart_lld_init+0xe0>)
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
 8001f60:	616b      	str	r3, [r5, #20]
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8001f62:	4648      	mov	r0, r9
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
  UARTD5.usart   = UART5;
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001f64:	60ee      	str	r6, [r5, #12]
  UARTD4.dmatx   = STM32_DMA_STREAM(STM32_UART_UART4_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_UART5
  uartObjectInit(&UARTD5);
  UARTD5.usart   = UART5;
 8001f66:	60a9      	str	r1, [r5, #8]
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
 8001f68:	612a      	str	r2, [r5, #16]
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8001f6a:	3c24      	subs	r4, #36	; 0x24
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8001f6c:	f7ff f850 	bl	8001010 <uartObjectInit>
  UARTD6.usart   = USART6;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <uart_lld_init+0xe4>)
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8001f72:	f8c9 b014 	str.w	fp, [r9, #20]
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8001f76:	f8c9 4010 	str.w	r4, [r9, #16]
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
 8001f7a:	f8c9 3008 	str.w	r3, [r9, #8]
 8001f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f82:	bf00      	nop
 8001f84:	0800289c 	.word	0x0800289c
 8001f88:	20000edc 	.word	0x20000edc
 8001f8c:	20000ef8 	.word	0x20000ef8
 8001f90:	40011000 	.word	0x40011000
 8001f94:	40004400 	.word	0x40004400
 8001f98:	40004800 	.word	0x40004800
 8001f9c:	40004c00 	.word	0x40004c00
 8001fa0:	40005000 	.word	0x40005000
 8001fa4:	40011400 	.word	0x40011400
 8001fa8:	20000ea4 	.word	0x20000ea4
 8001fac:	20000f30 	.word	0x20000f30
 8001fb0:	20000ec0 	.word	0x20000ec0
 8001fb4:	20000f14 	.word	0x20000f14
	...

08001fc0 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8001fc2:	7803      	ldrb	r3, [r0, #0]
 8001fc4:	2b01      	cmp	r3, #1
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8001fc6:	4604      	mov	r4, r0

  if (uartp->state == UART_STOP) {
 8001fc8:	d03e      	beq.n	8002048 <uart_lld_start+0x88>
 8001fca:	6885      	ldr	r5, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8001fd0:	7063      	strb	r3, [r4, #1]
static void usart_start(UARTDriver *uartp) {
  uint16_t cr1;
  USART_TypeDef *u = uartp->usart;

  /* Defensive programming, starting from a clean state.*/
  usart_stop(uartp);
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff fe3c 	bl	8001c50 <usart_stop>

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8001fd8:	68a3      	ldr	r3, [r4, #8]
 8001fda:	4a9c      	ldr	r2, [pc, #624]	; (800224c <uart_lld_start+0x28c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d05b      	beq.n	8002098 <uart_lld_start+0xd8>
 8001fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d057      	beq.n	8002098 <uart_lld_start+0xd8>
#else
  if (uartp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / uartp->config->speed;
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 8001fe8:	6862      	ldr	r2, [r4, #4]
 8001fea:	4b99      	ldr	r3, [pc, #612]	; (8002250 <uart_lld_start+0x290>)
 8001fec:	6951      	ldr	r1, [r2, #20]
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	60ab      	str	r3, [r5, #8]
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 8001ff4:	68d7      	ldr	r7, [r2, #12]
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8001ff6:	8b13      	ldrh	r3, [r2, #24]
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8001ff8:	8b50      	ldrh	r0, [r2, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8001ffa:	8b91      	ldrh	r1, [r2, #28]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001ffc:	6922      	ldr	r2, [r4, #16]
    u->BRR = STM32_PCLK2 / uartp->config->speed;
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;

  /* Resetting eventual pending status flags.*/
  (void)u->SR;  /* SR reset step 1.*/
 8001ffe:	682e      	ldr	r6, [r5, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002000:	686e      	ldr	r6, [r5, #4]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002002:	68e6      	ldr	r6, [r4, #12]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002004:	6812      	ldr	r2, [r2, #0]
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8002006:	2f00      	cmp	r7, #0
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002008:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
    u->BRR = STM32_PCLK1 / uartp->config->speed;

  /* Resetting eventual pending status flags.*/
  (void)u->SR;  /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;
 800200c:	f04f 0700 	mov.w	r7, #0
 8002010:	602f      	str	r7, [r5, #0]

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002012:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8002016:	bf14      	ite	ne
 8002018:	f44f 7788 	movne.w	r7, #272	; 0x110
 800201c:	f44f 7780 	moveq.w	r7, #256	; 0x100
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002020:	f043 030c 	orr.w	r3, r3, #12
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002024:	f041 01c1 	orr.w	r1, r1, #193	; 0xc1
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002028:	b29b      	uxth	r3, r3
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800202a:	433e      	orrs	r6, r7
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800202c:	b280      	uxth	r0, r0
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800202e:	2701      	movs	r7, #1
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002030:	b289      	uxth	r1, r1
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002032:	3418      	adds	r4, #24
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002034:	6128      	str	r0, [r5, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002036:	6169      	str	r1, [r5, #20]
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002038:	60eb      	str	r3, [r5, #12]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800203a:	60d4      	str	r4, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800203c:	6057      	str	r7, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800203e:	6016      	str	r6, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	433b      	orrs	r3, r7
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
void uart_lld_start(UARTDriver *uartp) {

  if (uartp->state == UART_STOP) {
#if STM32_UART_USE_USART1
    if (&UARTD1 == uartp) {
 8002048:	4d82      	ldr	r5, [pc, #520]	; (8002254 <uart_lld_start+0x294>)
 800204a:	42a8      	cmp	r0, r5
 800204c:	f000 80a0 	beq.w	8002190 <uart_lld_start+0x1d0>
                        STM32_DMA_CR_PL(STM32_UART_USART1_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_USART2
    if (&UARTD2 == uartp) {
 8002050:	4d81      	ldr	r5, [pc, #516]	; (8002258 <uart_lld_start+0x298>)
 8002052:	42a8      	cmp	r0, r5
 8002054:	f000 80bc 	beq.w	80021d0 <uart_lld_start+0x210>
                        STM32_DMA_CR_PL(STM32_UART_USART2_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_USART3
    if (&UARTD3 == uartp) {
 8002058:	4d80      	ldr	r5, [pc, #512]	; (800225c <uart_lld_start+0x29c>)
 800205a:	42a8      	cmp	r0, r5
 800205c:	f000 80d7 	beq.w	800220e <uart_lld_start+0x24e>
                        STM32_DMA_CR_PL(STM32_UART_USART3_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_UART4
    if (&UARTD4 == uartp) {
 8002060:	4d7f      	ldr	r5, [pc, #508]	; (8002260 <uart_lld_start+0x2a0>)
 8002062:	42a8      	cmp	r0, r5
 8002064:	d04d      	beq.n	8002102 <uart_lld_start+0x142>
                        STM32_DMA_CR_PL(STM32_UART_UART4_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_UART5
    if (&UARTD5 == uartp) {
 8002066:	4d7f      	ldr	r5, [pc, #508]	; (8002264 <uart_lld_start+0x2a4>)
 8002068:	42a8      	cmp	r0, r5
 800206a:	d01c      	beq.n	80020a6 <uart_lld_start+0xe6>
                        STM32_DMA_CR_PL(STM32_UART_UART5_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_USART6
    if (&UARTD6 == uartp) {
 800206c:	4d7e      	ldr	r5, [pc, #504]	; (8002268 <uart_lld_start+0x2a8>)
 800206e:	42ac      	cmp	r4, r5
 8002070:	f000 8106 	beq.w	8002280 <uart_lld_start+0x2c0>
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002074:	6863      	ldr	r3, [r4, #4]
 8002076:	8b1b      	ldrh	r3, [r3, #24]
 8002078:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d03a      	beq.n	80020f8 <uart_lld_start+0x138>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002082:	6922      	ldr	r2, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002084:	6963      	ldr	r3, [r4, #20]

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002086:	68a5      	ldr	r5, [r4, #8]
 8002088:	6810      	ldr	r0, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 800208a:	6819      	ldr	r1, [r3, #0]
    uartp->rxbuf = 0;
 800208c:	2200      	movs	r2, #0

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 800208e:	1d2b      	adds	r3, r5, #4
 8002090:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002092:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 8002094:	8322      	strh	r2, [r4, #24]
 8002096:	e799      	b.n	8001fcc <uart_lld_start+0xc>
#if STM32_HAS_USART6
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
#else
  if (uartp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <uart_lld_start+0x2ac>)
 800209c:	6951      	ldr	r1, [r2, #20]
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	60ab      	str	r3, [r5, #8]
 80020a4:	e7a6      	b.n	8001ff4 <uart_lld_start+0x34>

#if STM32_UART_USE_UART5
    if (&UARTD5 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
 80020a6:	6842      	ldr	r2, [r0, #4]
 80020a8:	8b53      	ldrh	r3, [r2, #26]
 80020aa:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d169      	bne.n	8002186 <uart_lld_start+0x1c6>
                  "specified invalid bits in UART5 CR2 register settings");
      chDbgAssert((uartp->config->cr3 & STM32_UART45_CR3_CHECK_MASK) == 0,
 80020b2:	8b93      	ldrh	r3, [r2, #28]
 80020b4:	f403 63e6 	and.w	r3, r3, #1840	; 0x730
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d160      	bne.n	800217e <uart_lld_start+0x1be>
                  "specified invalid bits in UART5 CR3 register settings");

      b = dmaStreamAllocate(uartp->dmarx,
 80020bc:	4b69      	ldr	r3, [pc, #420]	; (8002264 <uart_lld_start+0x2a4>)
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <uart_lld_start+0x2b0>)
 80020c0:	6928      	ldr	r0, [r5, #16]
 80020c2:	210c      	movs	r1, #12
 80020c4:	f7ff fb44 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_UART5_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d154      	bne.n	8002176 <uart_lld_start+0x1b6>
      b = dmaStreamAllocate(uartp->dmatx,
 80020cc:	4b65      	ldr	r3, [pc, #404]	; (8002264 <uart_lld_start+0x2a4>)
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <uart_lld_start+0x2b4>)
 80020d0:	6968      	ldr	r0, [r5, #20]
 80020d2:	210c      	movs	r1, #12
 80020d4:	f7ff fb3c 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_UART5_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80020d8:	2800      	cmp	r0, #0
 80020da:	d148      	bne.n	800216e <uart_lld_start+0x1ae>
      rccEnableUART5(FALSE);
 80020dc:	4a66      	ldr	r2, [pc, #408]	; (8002278 <uart_lld_start+0x2b8>)
 80020de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_UART5_NUMBER, STM32_UART_UART5_IRQ_PRIORITY);
 80020e6:	210c      	movs	r1, #12
 80020e8:	2035      	movs	r0, #53	; 0x35
 80020ea:	f7ff f8e1 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(UART5_RX_DMA_CHANNEL) |
 80020ee:	68eb      	ldr	r3, [r5, #12]
 80020f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020f4:	60eb      	str	r3, [r5, #12]
 80020f6:	e7bd      	b.n	8002074 <uart_lld_start+0xb4>
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80020f8:	68e3      	ldr	r3, [r4, #12]
 80020fa:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80020fe:	60e3      	str	r3, [r4, #12]
 8002100:	e7bf      	b.n	8002082 <uart_lld_start+0xc2>

#if STM32_UART_USE_UART4
    if (&UARTD4 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
 8002102:	6842      	ldr	r2, [r0, #4]
 8002104:	8b53      	ldrh	r3, [r2, #26]
 8002106:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800210a:	bb5b      	cbnz	r3, 8002164 <uart_lld_start+0x1a4>
                  "specified invalid bits in UART4 CR2 register settings");
      chDbgAssert((uartp->config->cr3 & STM32_UART45_CR3_CHECK_MASK) == 0,
 800210c:	8b93      	ldrh	r3, [r2, #28]
 800210e:	f403 63e6 	and.w	r3, r3, #1840	; 0x730
 8002112:	bb1b      	cbnz	r3, 800215c <uart_lld_start+0x19c>
                  "specified invalid bits in UART4 CR3 register settings");

      b = dmaStreamAllocate(uartp->dmarx,
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <uart_lld_start+0x2a0>)
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <uart_lld_start+0x2b0>)
 8002118:	6928      	ldr	r0, [r5, #16]
 800211a:	210c      	movs	r1, #12
 800211c:	f7ff fb18 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_UART4_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 8002120:	b9c0      	cbnz	r0, 8002154 <uart_lld_start+0x194>
      b = dmaStreamAllocate(uartp->dmatx,
 8002122:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <uart_lld_start+0x2a0>)
 8002124:	4a53      	ldr	r2, [pc, #332]	; (8002274 <uart_lld_start+0x2b4>)
 8002126:	6968      	ldr	r0, [r5, #20]
 8002128:	210c      	movs	r1, #12
 800212a:	f7ff fb11 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_UART4_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800212e:	b968      	cbnz	r0, 800214c <uart_lld_start+0x18c>
      rccEnableUART4(FALSE);
 8002130:	4a51      	ldr	r2, [pc, #324]	; (8002278 <uart_lld_start+0x2b8>)
 8002132:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_UART4_NUMBER, STM32_UART_UART4_IRQ_PRIORITY);
 800213a:	210c      	movs	r1, #12
 800213c:	2034      	movs	r0, #52	; 0x34
 800213e:	f7ff f8b7 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(UART4_RX_DMA_CHANNEL) |
 8002142:	68eb      	ldr	r3, [r5, #12]
 8002144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002148:	60eb      	str	r3, [r5, #12]
 800214a:	e793      	b.n	8002074 <uart_lld_start+0xb4>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_UART4_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800214c:	484b      	ldr	r0, [pc, #300]	; (800227c <uart_lld_start+0x2bc>)
 800214e:	f7fe f937 	bl	80003c0 <chSysHalt>
 8002152:	e7ed      	b.n	8002130 <uart_lld_start+0x170>

      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_UART4_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 8002154:	4849      	ldr	r0, [pc, #292]	; (800227c <uart_lld_start+0x2bc>)
 8002156:	f7fe f933 	bl	80003c0 <chSysHalt>
 800215a:	e7e2      	b.n	8002122 <uart_lld_start+0x162>
    if (&UARTD4 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
                  "specified invalid bits in UART4 CR2 register settings");
      chDbgAssert((uartp->config->cr3 & STM32_UART45_CR3_CHECK_MASK) == 0,
 800215c:	4847      	ldr	r0, [pc, #284]	; (800227c <uart_lld_start+0x2bc>)
 800215e:	f7fe f92f 	bl	80003c0 <chSysHalt>
 8002162:	e7d7      	b.n	8002114 <uart_lld_start+0x154>

#if STM32_UART_USE_UART4
    if (&UARTD4 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
 8002164:	4845      	ldr	r0, [pc, #276]	; (800227c <uart_lld_start+0x2bc>)
 8002166:	f7fe f92b 	bl	80003c0 <chSysHalt>
 800216a:	6862      	ldr	r2, [r4, #4]
 800216c:	e7ce      	b.n	800210c <uart_lld_start+0x14c>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_UART5_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800216e:	4843      	ldr	r0, [pc, #268]	; (800227c <uart_lld_start+0x2bc>)
 8002170:	f7fe f926 	bl	80003c0 <chSysHalt>
 8002174:	e7b2      	b.n	80020dc <uart_lld_start+0x11c>

      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_UART5_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 8002176:	4841      	ldr	r0, [pc, #260]	; (800227c <uart_lld_start+0x2bc>)
 8002178:	f7fe f922 	bl	80003c0 <chSysHalt>
 800217c:	e7a6      	b.n	80020cc <uart_lld_start+0x10c>
    if (&UARTD5 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
                  "specified invalid bits in UART5 CR2 register settings");
      chDbgAssert((uartp->config->cr3 & STM32_UART45_CR3_CHECK_MASK) == 0,
 800217e:	483f      	ldr	r0, [pc, #252]	; (800227c <uart_lld_start+0x2bc>)
 8002180:	f7fe f91e 	bl	80003c0 <chSysHalt>
 8002184:	e79a      	b.n	80020bc <uart_lld_start+0xfc>

#if STM32_UART_USE_UART5
    if (&UARTD5 == uartp) {
      bool b;

      chDbgAssert((uartp->config->cr2 & STM32_UART45_CR2_CHECK_MASK) == 0,
 8002186:	483d      	ldr	r0, [pc, #244]	; (800227c <uart_lld_start+0x2bc>)
 8002188:	f7fe f91a 	bl	80003c0 <chSysHalt>
 800218c:	6862      	ldr	r2, [r4, #4]
 800218e:	e790      	b.n	80020b2 <uart_lld_start+0xf2>

  if (uartp->state == UART_STOP) {
#if STM32_UART_USE_USART1
    if (&UARTD1 == uartp) {
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 8002190:	4603      	mov	r3, r0
 8002192:	4a37      	ldr	r2, [pc, #220]	; (8002270 <uart_lld_start+0x2b0>)
 8002194:	6900      	ldr	r0, [r0, #16]
 8002196:	210c      	movs	r1, #12
 8002198:	f7ff fada 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800219c:	2800      	cmp	r0, #0
 800219e:	f040 809f 	bne.w	80022e0 <uart_lld_start+0x320>
      b = dmaStreamAllocate(uartp->dmatx,
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <uart_lld_start+0x294>)
 80021a4:	4a33      	ldr	r2, [pc, #204]	; (8002274 <uart_lld_start+0x2b4>)
 80021a6:	6968      	ldr	r0, [r5, #20]
 80021a8:	210c      	movs	r1, #12
 80021aa:	f7ff fad1 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80021ae:	2800      	cmp	r0, #0
 80021b0:	f040 8092 	bne.w	80022d8 <uart_lld_start+0x318>
      rccEnableUSART1(FALSE);
 80021b4:	4a30      	ldr	r2, [pc, #192]	; (8002278 <uart_lld_start+0x2b8>)
 80021b6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 80021be:	210c      	movs	r1, #12
 80021c0:	2025      	movs	r0, #37	; 0x25
 80021c2:	f7ff f875 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 80021c6:	68eb      	ldr	r3, [r5, #12]
 80021c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021cc:	60eb      	str	r3, [r5, #12]
 80021ce:	e74d      	b.n	800206c <uart_lld_start+0xac>
#endif

#if STM32_UART_USE_USART2
    if (&UARTD2 == uartp) {
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a27      	ldr	r2, [pc, #156]	; (8002270 <uart_lld_start+0x2b0>)
 80021d4:	6900      	ldr	r0, [r0, #16]
 80021d6:	210c      	movs	r1, #12
 80021d8:	f7ff faba 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80021dc:	2800      	cmp	r0, #0
 80021de:	f040 8087 	bne.w	80022f0 <uart_lld_start+0x330>
      b = dmaStreamAllocate(uartp->dmatx,
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <uart_lld_start+0x298>)
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <uart_lld_start+0x2b4>)
 80021e6:	6968      	ldr	r0, [r5, #20]
 80021e8:	210c      	movs	r1, #12
 80021ea:	f7ff fab1 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d17a      	bne.n	80022e8 <uart_lld_start+0x328>
      rccEnableUSART2(FALSE);
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <uart_lld_start+0x2b8>)
 80021f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 80021fc:	210c      	movs	r1, #12
 80021fe:	2026      	movs	r0, #38	; 0x26
 8002200:	f7ff f856 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART2_RX_DMA_CHANNEL) |
 8002204:	68eb      	ldr	r3, [r5, #12]
 8002206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800220a:	60eb      	str	r3, [r5, #12]
 800220c:	e72e      	b.n	800206c <uart_lld_start+0xac>
#endif

#if STM32_UART_USE_USART3
    if (&UARTD3 == uartp) {
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 800220e:	4603      	mov	r3, r0
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <uart_lld_start+0x2b0>)
 8002212:	6900      	ldr	r0, [r0, #16]
 8002214:	210c      	movs	r1, #12
 8002216:	f7ff fa9b 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800221a:	2800      	cmp	r0, #0
 800221c:	d150      	bne.n	80022c0 <uart_lld_start+0x300>
      b = dmaStreamAllocate(uartp->dmatx,
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <uart_lld_start+0x29c>)
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <uart_lld_start+0x2b4>)
 8002222:	6968      	ldr	r0, [r5, #20]
 8002224:	210c      	movs	r1, #12
 8002226:	f7ff fa93 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800222a:	2800      	cmp	r0, #0
 800222c:	d144      	bne.n	80022b8 <uart_lld_start+0x2f8>
      rccEnableUSART3(FALSE);
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <uart_lld_start+0x2b8>)
 8002230:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_UART_USART3_IRQ_PRIORITY);
 8002238:	210c      	movs	r1, #12
 800223a:	2027      	movs	r0, #39	; 0x27
 800223c:	f7ff f838 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART3_RX_DMA_CHANNEL) |
 8002240:	68eb      	ldr	r3, [r5, #12]
 8002242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002246:	60eb      	str	r3, [r5, #12]
 8002248:	e714      	b.n	8002074 <uart_lld_start+0xb4>
 800224a:	bf00      	nop
 800224c:	40011000 	.word	0x40011000
 8002250:	0280de80 	.word	0x0280de80
 8002254:	20000ea4 	.word	0x20000ea4
 8002258:	20000f30 	.word	0x20000f30
 800225c:	20000ec0 	.word	0x20000ec0
 8002260:	20000edc 	.word	0x20000edc
 8002264:	20000ef8 	.word	0x20000ef8
 8002268:	20000f14 	.word	0x20000f14
 800226c:	0501bd00 	.word	0x0501bd00
 8002270:	08001d71 	.word	0x08001d71
 8002274:	08001d21 	.word	0x08001d21
 8002278:	40023800 	.word	0x40023800
 800227c:	080028c0 	.word	0x080028c0
#endif

#if STM32_UART_USE_USART6
    if (&UARTD6 == uartp) {
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 8002280:	4623      	mov	r3, r4
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <uart_lld_start+0x338>)
 8002284:	6920      	ldr	r0, [r4, #16]
 8002286:	210c      	movs	r1, #12
 8002288:	f7ff fa62 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800228c:	bb00      	cbnz	r0, 80022d0 <uart_lld_start+0x310>
      b = dmaStreamAllocate(uartp->dmatx,
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <uart_lld_start+0x33c>)
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <uart_lld_start+0x340>)
 8002292:	6968      	ldr	r0, [r5, #20]
 8002294:	210c      	movs	r1, #12
 8002296:	f7ff fa5b 	bl	8001750 <dmaStreamAllocate>
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 800229a:	b9a8      	cbnz	r0, 80022c8 <uart_lld_start+0x308>
      rccEnableUSART6(FALSE);
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <uart_lld_start+0x344>)
 800229e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 80022a6:	210c      	movs	r1, #12
 80022a8:	2047      	movs	r0, #71	; 0x47
 80022aa:	f7ff f801 	bl	80012b0 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 80022ae:	68eb      	ldr	r3, [r5, #12]
 80022b0:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 80022b4:	60eb      	str	r3, [r5, #12]
 80022b6:	e6dd      	b.n	8002074 <uart_lld_start+0xb4>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_USART3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022b8:	4813      	ldr	r0, [pc, #76]	; (8002308 <uart_lld_start+0x348>)
 80022ba:	f7fe f881 	bl	80003c0 <chSysHalt>
 80022be:	e7b6      	b.n	800222e <uart_lld_start+0x26e>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_USART3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022c0:	4811      	ldr	r0, [pc, #68]	; (8002308 <uart_lld_start+0x348>)
 80022c2:	f7fe f87d 	bl	80003c0 <chSysHalt>
 80022c6:	e7aa      	b.n	800221e <uart_lld_start+0x25e>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <uart_lld_start+0x348>)
 80022ca:	f7fe f879 	bl	80003c0 <chSysHalt>
 80022ce:	e7e5      	b.n	800229c <uart_lld_start+0x2dc>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022d0:	480d      	ldr	r0, [pc, #52]	; (8002308 <uart_lld_start+0x348>)
 80022d2:	f7fe f875 	bl	80003c0 <chSysHalt>
 80022d6:	e7da      	b.n	800228e <uart_lld_start+0x2ce>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <uart_lld_start+0x348>)
 80022da:	f7fe f871 	bl	80003c0 <chSysHalt>
 80022de:	e769      	b.n	80021b4 <uart_lld_start+0x1f4>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_USART1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <uart_lld_start+0x348>)
 80022e2:	f7fe f86d 	bl	80003c0 <chSysHalt>
 80022e6:	e75c      	b.n	80021a2 <uart_lld_start+0x1e2>
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <uart_lld_start+0x348>)
 80022ea:	f7fe f869 	bl	80003c0 <chSysHalt>
 80022ee:	e780      	b.n	80021f2 <uart_lld_start+0x232>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <uart_lld_start+0x348>)
 80022f2:	f7fe f865 	bl	80003c0 <chSysHalt>
 80022f6:	e774      	b.n	80021e2 <uart_lld_start+0x222>
 80022f8:	08001d71 	.word	0x08001d71
 80022fc:	20000f14 	.word	0x20000f14
 8002300:	08001d21 	.word	0x08001d21
 8002304:	40023800 	.word	0x40023800
 8002308:	080028c0 	.word	0x080028c0
 800230c:	00000000 	.word	0x00000000

08002310 <uart_lld_start_send>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {
 8002310:	b430      	push	{r4, r5}

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002312:	6943      	ldr	r3, [r0, #20]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 8002314:	6845      	ldr	r5, [r0, #4]
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
  dmaStreamSetTransactionSize(uartp->dmatx, n);
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002316:	68c4      	ldr	r4, [r0, #12]
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002318:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 800231a:	686d      	ldr	r5, [r5, #4]
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800231c:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmatx, n);
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 800231e:	f444 648a 	orr.w	r4, r4, #1104	; 0x450
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8002322:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002324:	601c      	str	r4, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 8002326:	b13d      	cbz	r5, 8002338 <uart_lld_start_send+0x28>
    uartp->usart->SR = ~USART_SR_TC;
 8002328:	6882      	ldr	r2, [r0, #8]
 800232a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800232e:	6011      	str	r1, [r2, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8002330:	68d1      	ldr	r1, [r2, #12]
 8002332:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002336:	60d1      	str	r1, [r2, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	bc30      	pop	{r4, r5}
 8002342:	4770      	bx	lr
	...

08002350 <uart_lld_stop_send>:
 *
 * @notapi
 */
size_t uart_lld_stop_send(UARTDriver *uartp) {

  dmaStreamDisable(uartp->dmatx);
 8002350:	6941      	ldr	r1, [r0, #20]
 8002352:	680a      	ldr	r2, [r1, #0]
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	f023 031f 	bic.w	r3, r3, #31
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	07db      	lsls	r3, r3, #31
 8002360:	d4fc      	bmi.n	800235c <uart_lld_stop_send+0xc>
 8002362:	7a08      	ldrb	r0, [r1, #8]
 8002364:	6849      	ldr	r1, [r1, #4]
 8002366:	233d      	movs	r3, #61	; 0x3d
 8002368:	4083      	lsls	r3, r0
 800236a:	600b      	str	r3, [r1, #0]

  return dmaStreamGetTransactionSize(uartp->dmatx);
 800236c:	6850      	ldr	r0, [r2, #4]
}
 800236e:	4770      	bx	lr

08002370 <uart_lld_start_receive>:
 * @param[in] n         number of data frames to send
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8002370:	b470      	push	{r4, r5, r6}

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 8002372:	6905      	ldr	r5, [r0, #16]
 8002374:	682c      	ldr	r4, [r5, #0]
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	f023 031f 	bic.w	r3, r3, #31
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	07db      	lsls	r3, r3, #31
 8002382:	d4fc      	bmi.n	800237e <uart_lld_start_receive+0xe>
 8002384:	7a2e      	ldrb	r6, [r5, #8]
 8002386:	686d      	ldr	r5, [r5, #4]
 8002388:	233d      	movs	r3, #61	; 0x3d
 800238a:	40b3      	lsls	r3, r6
 800238c:	602b      	str	r3, [r5, #0]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, n);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800238e:	68c3      	ldr	r3, [r0, #12]

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 8002390:	60e2      	str	r2, [r4, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, n);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002392:	f443 6382 	orr.w	r3, r3, #1040	; 0x410
  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 8002396:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002398:	6023      	str	r3, [r4, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6023      	str	r3, [r4, #0]
}
 80023a2:	bc70      	pop	{r4, r5, r6}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
	...

080023b0 <uart_lld_stop_receive>:
 * @return              The number of data frames not received by the
 *                      stopped receive operation.
 *
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
 80023b0:	4601      	mov	r1, r0
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 80023b2:	6900      	ldr	r0, [r0, #16]
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	f023 031f 	bic.w	r3, r3, #31
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	07db      	lsls	r3, r3, #31
 80023c2:	d4fc      	bmi.n	80023be <uart_lld_stop_receive+0xe>
 * @return              The number of data frames not received by the
 *                      stopped receive operation.
 *
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
 80023c4:	b430      	push	{r4, r5}
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 80023c6:	684b      	ldr	r3, [r1, #4]
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 80023c8:	7a05      	ldrb	r5, [r0, #8]
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 80023ca:	68dc      	ldr	r4, [r3, #12]
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 80023cc:	6840      	ldr	r0, [r0, #4]
 80023ce:	233d      	movs	r3, #61	; 0x3d
 80023d0:	40ab      	lsls	r3, r5
 80023d2:	6003      	str	r3, [r0, #0]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80023d4:	68cb      	ldr	r3, [r1, #12]
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
  n = dmaStreamGetTransactionSize(uartp->dmarx);
 80023d6:	6850      	ldr	r0, [r2, #4]
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 80023d8:	2c00      	cmp	r4, #0
 80023da:	bf0c      	ite	eq
 80023dc:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80023e0:	f44f 7488 	movne.w	r4, #272	; 0x110
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80023e4:	4323      	orrs	r3, r4
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80023e6:	3118      	adds	r1, #24
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80023e8:	2401      	movs	r4, #1
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80023ea:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80023ec:	6054      	str	r4, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80023ee:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	4323      	orrs	r3, r4
 80023f4:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(uartp->dmarx);
  n = dmaStreamGetTransactionSize(uartp->dmarx);
  set_rx_idle_loop(uartp);

  return n;
}
 80023f6:	bc30      	pop	{r4, r5}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	0000      	movs	r0, r0
	...

08002400 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8002400:	f7ff ba36 	b.w	8001870 <stm32_clock_init>
	...

08002410 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
	...

08002420 <led3off>:
static uint8_t buffer[16];

static void led3off(void *p) {

  (void)p;
  palClearPad(GPIOD, GPIOD_LED3);
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <led3off+0xc>)
 8002422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002426:	835a      	strh	r2, [r3, #26]
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40020c00 	.word	0x40020c00

08002430 <led4off>:
}

static void led4off(void *p) {

  (void)p;
  palClearPad(GPIOD, GPIOD_LED4);
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <led4off+0xc>)
 8002432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002436:	835a      	strh	r2, [r3, #26]
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40020c00 	.word	0x40020c00

08002440 <led5off>:
}

static void led5off(void *p) {

  (void)p;
  palClearPad(GPIOD, GPIOD_LED5);
 8002440:	4b02      	ldr	r3, [pc, #8]	; (800244c <led5off+0xc>)
 8002442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002446:	835a      	strh	r2, [r3, #26]
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40020c00 	.word	0x40020c00

08002450 <txend1>:

/*
 * This callback is invoked when a transmission buffer has been completely
 * read by the driver.
 */
static void txend1(UARTDriver *uartp) {
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
	...

08002460 <rxerr>:

/*
 * This callback is invoked on a receive error, the errors mask is passed
 * as parameter.
 */
static void rxerr(UARTDriver *uartp, uartflags_t e) {
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
	...

08002470 <rxchar>:
static void rxchar(UARTDriver *uartp, uint16_t c) {

  (void)uartp;
  (void)c;
  /* Flashing the LED each time a character is received.*/
  palSetPad(GPIOD, GPIOD_LED4);
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <rxchar+0x54>)
 8002472:	f44f 5280 	mov.w	r2, #4096	; 0x1000

/*
 * This callback is invoked when a character is received but the application
 * was not ready to receive it, the character is passed as parameter.
 */
static void rxchar(UARTDriver *uartp, uint16_t c) {
 8002476:	b510      	push	{r4, lr}

  (void)uartp;
  (void)c;
  /* Flashing the LED each time a character is received.*/
  palSetPad(GPIOD, GPIOD_LED4);
 8002478:	831a      	strh	r2, [r3, #24]
 800247a:	2320      	movs	r3, #32
 800247c:	f383 8811 	msr	BASEPRI, r3

  return (bool)(vtp->vt_func != NULL);
 8002480:	4c11      	ldr	r4, [pc, #68]	; (80024c8 <rxchar+0x58>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8002482:	f7fe fcbd 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002486:	f7fe f833 	bl	80004f0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800248a:	f7fe f891 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800248e:	68e3      	ldr	r3, [r4, #12]
 8002490:	b113      	cbz	r3, 8002498 <rxchar+0x28>
    chVTDoResetI(vtp);
 8002492:	4620      	mov	r0, r4
 8002494:	f7fe f934 	bl	8000700 <chVTDoResetI>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8002498:	f7fe f88a 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800249c:	68e3      	ldr	r3, [r4, #12]
 800249e:	b113      	cbz	r3, 80024a6 <rxchar+0x36>
    chVTDoResetI(vtp);
 80024a0:	4809      	ldr	r0, [pc, #36]	; (80024c8 <rxchar+0x58>)
 80024a2:	f7fe f92d 	bl	8000700 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80024a6:	2300      	movs	r3, #0
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <rxchar+0x5c>)
 80024aa:	4807      	ldr	r0, [pc, #28]	; (80024c8 <rxchar+0x58>)
 80024ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024b0:	f7fe f8d6 	bl	8000660 <chVTDoSetI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80024b4:	f7fe f834 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80024b8:	f7fe fcaa 	bl	8000e10 <_stats_stop_measure_crit_isr>
 80024bc:	2300      	movs	r3, #0
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	bd10      	pop	{r4, pc}
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	20000f60 	.word	0x20000f60
 80024cc:	08002431 	.word	0x08002431

080024d0 <rxend>:
static void rxend(UARTDriver *uartp) {

  (void)uartp;

  /* Flashing the LED each time a character is received.*/
  palSetPad(GPIOD, GPIOD_LED3);
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <rxend+0x54>)
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
}

/*
 * This callback is invoked when a receive buffer has been completely written.
 */
static void rxend(UARTDriver *uartp) {
 80024d6:	b510      	push	{r4, lr}

  (void)uartp;

  /* Flashing the LED each time a character is received.*/
  palSetPad(GPIOD, GPIOD_LED3);
 80024d8:	831a      	strh	r2, [r3, #24]
 80024da:	2320      	movs	r3, #32
 80024dc:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 80024e0:	4c11      	ldr	r4, [pc, #68]	; (8002528 <rxend+0x58>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80024e2:	f7fe fc8d 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80024e6:	f7fe f803 	bl	80004f0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80024ea:	f7fe f861 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80024ee:	68e3      	ldr	r3, [r4, #12]
 80024f0:	b113      	cbz	r3, 80024f8 <rxend+0x28>
    chVTDoResetI(vtp);
 80024f2:	4620      	mov	r0, r4
 80024f4:	f7fe f904 	bl	8000700 <chVTDoResetI>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80024f8:	f7fe f85a 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80024fc:	68e3      	ldr	r3, [r4, #12]
 80024fe:	b113      	cbz	r3, 8002506 <rxend+0x36>
    chVTDoResetI(vtp);
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <rxend+0x58>)
 8002502:	f7fe f8fd 	bl	8000700 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002506:	2300      	movs	r3, #0
 8002508:	4a08      	ldr	r2, [pc, #32]	; (800252c <rxend+0x5c>)
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <rxend+0x58>)
 800250c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002510:	f7fe f8a6 	bl	8000660 <chVTDoSetI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002514:	f7fe f804 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002518:	f7fe fc7a 	bl	8000e10 <_stats_stop_measure_crit_isr>
 800251c:	2300      	movs	r3, #0
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	bd10      	pop	{r4, pc}
 8002524:	40020c00 	.word	0x40020c00
 8002528:	20000f4c 	.word	0x20000f4c
 800252c:	08002421 	.word	0x08002421

08002530 <txend2>:
 * This callback is invoked when a transmission has physically completed.
 */
static void txend2(UARTDriver *uartp) {

  (void)uartp;
  palSetPad(GPIOD, GPIOD_LED5);
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <txend2+0x54>)
 8002532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}

/*
 * This callback is invoked when a transmission has physically completed.
 */
static void txend2(UARTDriver *uartp) {
 8002536:	b510      	push	{r4, lr}

  (void)uartp;
  palSetPad(GPIOD, GPIOD_LED5);
 8002538:	831a      	strh	r2, [r3, #24]
 800253a:	2320      	movs	r3, #32
 800253c:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 8002540:	4c11      	ldr	r4, [pc, #68]	; (8002588 <txend2+0x58>)
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8002542:	f7fe fc5d 	bl	8000e00 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002546:	f7fd ffd3 	bl	80004f0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800254a:	f7fe f831 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800254e:	68e3      	ldr	r3, [r4, #12]
 8002550:	b113      	cbz	r3, 8002558 <txend2+0x28>
    chVTDoResetI(vtp);
 8002552:	4620      	mov	r0, r4
 8002554:	f7fe f8d4 	bl	8000700 <chVTDoResetI>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8002558:	f7fe f82a 	bl	80005b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800255c:	68e3      	ldr	r3, [r4, #12]
 800255e:	b113      	cbz	r3, 8002566 <txend2+0x36>
    chVTDoResetI(vtp);
 8002560:	4809      	ldr	r0, [pc, #36]	; (8002588 <txend2+0x58>)
 8002562:	f7fe f8cd 	bl	8000700 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002566:	2300      	movs	r3, #0
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <txend2+0x5c>)
 800256a:	4807      	ldr	r0, [pc, #28]	; (8002588 <txend2+0x58>)
 800256c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002570:	f7fe f876 	bl	8000660 <chVTDoSetI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002574:	f7fd ffd4 	bl	8000520 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002578:	f7fe fc4a 	bl	8000e10 <_stats_stop_measure_crit_isr>
 800257c:	2300      	movs	r3, #0
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	bd10      	pop	{r4, pc}
 8002584:	40020c00 	.word	0x40020c00
 8002588:	20000f74 	.word	0x20000f74
 800258c:	08002441 	.word	0x08002441

08002590 <main>:
};

/*
 * Application entry point.
 */
int main(void) {
 8002590:	b508      	push	{r3, lr}

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 8002592:	4c17      	ldr	r4, [pc, #92]	; (80025f0 <main+0x60>)
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8002594:	f7fe fcec 	bl	8000f70 <halInit>
  chSysInit();
 8002598:	f7fd feba 	bl	8000310 <chSysInit>

  /*
   * Activates the UART driver 2, PA2(TX) and PA3(RX) are routed to USART2.
   */
  uartStart(&UARTD2, &uart_cfg_1);
 800259c:	4915      	ldr	r1, [pc, #84]	; (80025f4 <main+0x64>)
 800259e:	4816      	ldr	r0, [pc, #88]	; (80025f8 <main+0x68>)
 80025a0:	f7fe fd3e 	bl	8001020 <uartStart>
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80025a4:	4620      	mov	r0, r4
 80025a6:	f240 3282 	movw	r2, #898	; 0x382
 80025aa:	2104      	movs	r1, #4
 80025ac:	f7ff faf0 	bl	8001b90 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 80025b0:	f240 3282 	movw	r2, #898	; 0x382
 80025b4:	2108      	movs	r1, #8
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff faea 	bl	8001b90 <_pal_lld_setgroupmode>
 80025bc:	e003      	b.n	80025c6 <main+0x36>
      uartStopReceive(&UARTD2);
      uartStopSend(&UARTD2);
      uartStartReceive(&UARTD2, 16, buffer);
      uartStartSend(&UARTD2, 16, message);
    }
    chThdSleepMilliseconds(500);
 80025be:	f241 3088 	movw	r0, #5000	; 0x1388
 80025c2:	f7fe fae5 	bl	8000b90 <chThdSleep>

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 80025c6:	6923      	ldr	r3, [r4, #16]
 80025c8:	07db      	lsls	r3, r3, #31
 80025ca:	d5f8      	bpl.n	80025be <main+0x2e>
      /*
       * Starts both a transmission and a receive operations, both will be
       * handled entirely in background.
       */
      uartStopReceive(&UARTD2);
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <main+0x68>)
 80025ce:	f7fe fe2f 	bl	8001230 <uartStopReceive>
      uartStopSend(&UARTD2);
 80025d2:	4809      	ldr	r0, [pc, #36]	; (80025f8 <main+0x68>)
 80025d4:	f7fe fda4 	bl	8001120 <uartStopSend>
      uartStartReceive(&UARTD2, 16, buffer);
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <main+0x6c>)
 80025da:	4807      	ldr	r0, [pc, #28]	; (80025f8 <main+0x68>)
 80025dc:	2110      	movs	r1, #16
 80025de:	f7fe fddf 	bl	80011a0 <uartStartReceive>
      uartStartSend(&UARTD2, 16, message);
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <main+0x70>)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <main+0x68>)
 80025e6:	2110      	movs	r1, #16
 80025e8:	f7fe fd52 	bl	8001090 <uartStartSend>
 80025ec:	e7e7      	b.n	80025be <main+0x2e>
 80025ee:	bf00      	nop
 80025f0:	40020000 	.word	0x40020000
 80025f4:	20000800 	.word	0x20000800
 80025f8:	20000f30 	.word	0x20000f30
 80025fc:	20000f88 	.word	0x20000f88
 8002600:	080029e0 	.word	0x080029e0
	...

08002610 <__func__.6055>:
 8002610:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....
 8002620:	656c6469 00000000 00000000 00000000     idle............
 8002630:	31235653 00000000 32235653 00000000     SV#1....SV#2....
 8002640:	33235653 00000000 34235653 00000000     SV#3....SV#4....
 8002650:	35235653 00000000 36235653 00000000     SV#5....SV#6....
 8002660:	37235653 00000000 38235653 00000000     SV#7....SV#8....
 8002670:	39235653 00000000 31235653 00000030     SV#9....SV#10...
 8002680:	31235653 00000031 00000000 00000000     SV#11...........

08002690 <__func__.6665>:
 8002690:	54566863 65536f44 00004974 00000000     chVTDoSetI......

080026a0 <__func__.6673>:
 80026a0:	54566863 65526f44 49746573 00000000     chVTDoResetI....

080026b0 <__func__.6662>:
 80026b0:	63536863 61655268 00497964 00000000     chSchReadyI.....
 80026c0:	63617473 766f206b 6c667265 0000776f     stack overflow..

080026d0 <__func__.6718>:
 80026d0:	68546863 69784564 00005374 00000000     chThdExitS......

080026e0 <__func__.6674>:
 80026e0:	68546863 65724364 49657461 00000000     chThdCreateI....

080026f0 <__func__.6140>:
 80026f0:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08002700 <__func__.5969>:
 8002700:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08002710 <ch_debug>:
 8002710:	6e69616d 18001600 08600404 1814100c     main......`.....
 8002720:	2221201c 00000000 00000000 00000000     . !"............

08002730 <__func__.6657>:
 8002730:	744d6863 6a624f78 49746365 0074696e     chMtxObjectInit.

08002740 <__func__.5969>:
 8002740:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08002750 <__func__.7105>:
 8002750:	74537473 41747261 6d72616c 00000000     stStartAlarm....

08002760 <__func__.7112>:
 8002760:	65537473 616c4174 00006d72 00000000     stSetAlarm......

08002770 <__func__.7152>:
 8002770:	74726175 706f7453 65636552 00657669     uartStopReceive.

08002780 <__func__.7109>:
 8002780:	74726175 72617453 00000074 00000000     uartStart.......

08002790 <__func__.7130>:
 8002790:	74726175 706f7453 646e6553 00000000     uartStopSend....

080027a0 <__func__.7119>:
 80027a0:	74726175 72617453 6e655374 00000064     uartStartSend...

080027b0 <__func__.5969>:
 80027b0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080027c0 <__func__.7141>:
 80027c0:	74726175 72617453 63655274 65766965     uartStartReceive
	...

080027e0 <__func__.7183>:
 80027e0:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 80027f0:	00000065 00000000 00000000 00000000     e...............

08002800 <_stm32_dma_streams>:
 8002800:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8002810:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8002820:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8002830:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8002840:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8002850:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8002860:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8002870:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8002880:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8002890:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80028a0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80028b0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080028c0 <__func__.7172>:
 80028c0:	74726175 646c6c5f 6174735f 00007472     uart_lld_start..
 80028d0:	20414d44 6c696166 00657275 00000000     DMA failure.....

080028e0 <pal_default_config>:
 80028e0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80028f0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8002900:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8002910:	04000000 00000040 02208001 00000000     ....@..... .....
 8002920:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8002930:	00060600 55000100 00000000 ffffffff     .......U........
 8002940:	00555055 00000fff 00000000 00000000     UPU.............
 8002950:	00000040 00000000 ffffffff 00000000     @...............
 8002960:	0000ffff 00000000 00000000 00000000     ................
 8002970:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8002990:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80029ac:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80029c8:	ffffffff 00000000 0000ffff 00000000     ................
	...

080029e0 <message>:
 80029e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
	...
